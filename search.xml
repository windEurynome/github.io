<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>22-11-01-1101-qq</title>
    <url>/2022/11/01/22-11-01-1101-qq/</url>
    <content><![CDATA[<p>The problem is mainly based on the <strong>backdoor</strong>. In RSA library, it has the CVE of <code>CVE-2017-15361</code>.In this case, we can calculate the prime which is likely random with the equation that:<br>$$<br>Prime &#x3D; k \times M + (65537^{a} \mod M)<br>$$<br>It means that produce the list of primes and make them to collide， which satisfy the condition, thus output the target prime.</p>
<p>Also，the PKI system has different standards， we make some distinctions between different standards. </p>
<span id="more"></span>

<h1 id="RSA-Backdoor"><a href="#RSA-Backdoor" class="headerlink" title="RSA Backdoor"></a>RSA Backdoor</h1><blockquote>
<p>reference: <a href="https://asecuritysite.com/encryption/copper">https://asecuritysite.com/encryption/copper</a></p>
</blockquote>
<h2 id="description"><a href="#description" class="headerlink" title="description"></a>description</h2><p>In RSALib, the prime is produced by the equaction:<br>$$<br>Prime &#x3D; k \times M + 65537^{a} \mod M<br>$$<br>which means that the $M$ is the multiplication of the generated primes.<br>$$<br>M &#x3D; \prod_{i&#x3D;1}^{n}{P_{i}}&#x3D; P_{1} \times P_{2} \times \cdots \times P_{n}<br>$$<br>$M$ must be large and is around the same size of they generated. The weakness is the $k$ and $a$ are relatively small values. The entropy is also must drop. </p>
<p>The problem is common provided with $c$, $e$ and $n$, and just do the command<code>RSA_Backdoor(n)</code>. If the problems satisfy the conditions, the  function will return the $p$ and the $q$.</p>
<h1 id="Openssl"><a href="#Openssl" class="headerlink" title="Openssl"></a>Openssl</h1><blockquote>
<p>relate to the PKI system.</p>
</blockquote>
<h2 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h2><p>In kali, you can directly input the command that <code>openssl</code>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl genrsa -out [pri].pem 1024</span><br><span class="line">openssl rsa -in [pri].pem -pubout -out [pub].pem</span><br><span class="line"></span><br><span class="line">## if needs to encrypto, like AES or anything else</span><br><span class="line">openssl genrsa [-aes256 -passout pass:111111] -out [pri].key 2048</span><br><span class="line">openssl rsa -in [pri].key -pubout -out [pri].key</span><br><span class="line">Enter pass phrase for [pri].key:</span><br><span class="line"># openssl rsa -in [pri].key -passin pass:111111 -pubout -out [pub].key</span><br><span class="line">writing RSA key</span><br></pre></td></tr></table></figure>



<p>If in python, we can import something to ensure the same consequence. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="comment"># RSA.generate(bits, randfunc = None, e = 65537)</span></span><br><span class="line"><span class="comment"># - bits: bit_length</span></span><br><span class="line"><span class="comment"># - randfunc: Crypto.Random.get_random_bytes()</span></span><br><span class="line"><span class="comment"># - e(int): odd, common is 65537</span></span><br><span class="line">rsa = rsa.generate(<span class="number">1024</span>)</span><br><span class="line"><span class="comment"># export prikey</span></span><br><span class="line">pri = rsa.exportKey()</span><br><span class="line"><span class="comment"># export pubkey</span></span><br><span class="line">pub = rsa.publickey().exportKey()</span><br><span class="line"><span class="comment"># or write in the file</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;pri.pem&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f1:</span><br><span class="line">    f1.write(pri)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;pub.pem&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f2:</span><br><span class="line">    f2.write(pub)</span><br></pre></td></tr></table></figure>



<h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># PKCS1 -&gt; PKCS8 privatekey</span><br><span class="line">openssl pkcs8 -topk8 -inform PEM -in rsa_pri.pem -outform PEM -nocrypt -out rsa_pri_pkcs8.pem</span><br><span class="line"></span><br><span class="line"># PKCS8 -&gt; PKCS1 privatekey</span><br><span class="line">openssl rsa -inform PEM -in rsa_pri_pkcs8.pem -outform PEM -out rsa_pri_pkcs1.pem</span><br><span class="line"></span><br><span class="line"># PKCS8 -&gt; PKCS1 publickey</span><br><span class="line">openssl rsa -pubin -in rsa_pub.pem -RSAPublicKey_out -out rsa_pub_pkcs1.pem</span><br><span class="line"></span><br><span class="line"># PKCS1 -&gt; PKCS8 publickey</span><br><span class="line">openssl rsa -RSAPublicKey_in -in rsa_pub_pkcs1.pem -pubout -out rsa_pub_pkcs8.pem</span><br></pre></td></tr></table></figure>



<h1 id="Key-Differences"><a href="#Key-Differences" class="headerlink" title="Key_Differences"></a>Key_Differences</h1><h2 id="PKCS-8"><a href="#PKCS-8" class="headerlink" title="PKCS#8"></a>PKCS#8</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># pubkey</span><br><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">-----END PUBLIC KEY-----</span><br><span class="line"></span><br><span class="line"># prikey</span><br><span class="line">-----BEGIN PRIVATE KEY-----</span><br><span class="line">-----END PRIVATE KEY-----</span><br><span class="line"></span><br><span class="line"># prikey encrypted</span><br><span class="line">-----BEGIN PRIVATE KEY-----</span><br><span class="line">-----END PRIVATE KEY-----</span><br></pre></td></tr></table></figure>



<h2 id="PKCS-1"><a href="#PKCS-1" class="headerlink" title="PKCS#1"></a>PKCS#1</h2><blockquote>
<p>import rsa</p>
<p>the default is PKCS#1</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># pubkey</span><br><span class="line">-----BEGIN RSA PUBLIC KEY-----</span><br><span class="line">-----END RSA PUBLIC KEY-----</span><br><span class="line"></span><br><span class="line"># prikey</span><br><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure>



<h1 id="Rsatool"><a href="#Rsatool" class="headerlink" title="Rsatool"></a>Rsatool</h1><blockquote>
<p><a href="https://github.com/ius/rsatool">GitHub - ius&#x2F;rsatool: rsatool can be used to calculate RSA and RSA-CRT parameters</a></p>
</blockquote>
<h2 id="requirements"><a href="#requirements" class="headerlink" title="requirements"></a>requirements</h2><ul>
<li>python3.7+</li>
<li>pyasn1</li>
<li>gmpy2</li>
</ul>
<h2 id="usage"><a href="#usage" class="headerlink" title="usage"></a>usage</h2><h3 id="pem"><a href="#pem" class="headerlink" title="pem"></a>pem</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3 rsatool.py -f PEM -o key.pem -n [n] -d [d]</span><br><span class="line">python3 rsatool.py -f PEM -o private.pem -p [p] -q [q] -e [e]</span><br></pre></td></tr></table></figure>



<h3 id="der"><a href="#der" class="headerlink" title="der"></a>der</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 rsatool.py -f DER -o key.der -p [p] -q [q]</span><br></pre></td></tr></table></figure>



<h1 id="Pem-in-RSA"><a href="#Pem-in-RSA" class="headerlink" title="Pem in RSA"></a>Pem in RSA</h1><p>The pem can be used in different ways in RSA.</p>
<p>One is to extract the $n$ and the $e$—— when you get $p$, $q$ from the $n$, we can change <code>flag.enc</code> to $c$ by using the function <code>bytes_to_long()</code>.</p>
<p>The other way is also extract the $n$ and the $e$ ——however, we MUST construct the primes and others into the <code>pri.pem</code>. Using the <code>pri.pem</code>，and we can decrypt the <code>flag.enc</code> to get the message.</p>
<h2 id="1101-qq"><a href="#1101-qq" class="headerlink" title="[1101]qq"></a>[1101]qq</h2><blockquote>
<p>mainly using bytes_to_long()</p>
</blockquote>
<h3 id="flag-enc"><a href="#flag-enc" class="headerlink" title="flag.enc"></a>flag.enc</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CwhE2kUKvphGegBRgnZeM8iE2oTPfmzMYfL4cO262NkQpId+JzH4pEyiS3cdyhDRsU+huX9cnIE=</span><br></pre></td></tr></table></figure>



<h3 id="pub-key-pem"><a href="#pub-key-pem" class="headerlink" title="pub_key.pem"></a>pub_key.pem</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MFMwDQYJKoZIhvcNAQEBBQADQgAwPwI4EkoKC0EfUXgDvsQUYRI+j0/XPrqQxHJ+</span><br><span class="line">v3CKL9WVp5SMk0Njud03to6sxuvPt93fSGHkAsW+wHsCAwEAAQ==</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure>



<h3 id="exp-py"><a href="#exp-py" class="headerlink" title="exp.py"></a>exp.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;pub_key.pem&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    pub = RSA.import_key(f.read())</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(pub.e)</span></span><br><span class="line"><span class="comment"># print(pub.n)</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.enc&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    cipher = base64.b64decode(f.read())</span><br><span class="line">c = bytes_to_long(cipher)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">51926993165717444667250925590498598946377319881662556610174970468991791873398735735101740226707561968771963673353253102616246155657339</span></span><br><span class="line">p, q = RSA_Backdoor(n)</span><br><span class="line">N = (p-<span class="number">1</span>) * (q-<span class="number">1</span>)</span><br><span class="line">d = <span class="built_in">int</span>(gmpy2.invert(e, N))</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m).decode())</span><br><span class="line"><span class="comment"># 2761328357323929478367647741211050583178552594955214217850793389028221</span></span><br><span class="line"><span class="comment"># flag&#123;We@k_Pr1me_1s_d@nger0us&#125;</span></span><br></pre></td></tr></table></figure>



<h2 id="ACTF2018-可怜的RSA"><a href="#ACTF2018-可怜的RSA" class="headerlink" title="[ACTF2018]可怜的RSA"></a>[ACTF2018]可怜的RSA</h2><blockquote>
<p>construct to private key</p>
</blockquote>
<h3 id="flag-enc-1"><a href="#flag-enc-1" class="headerlink" title="flag.enc"></a>flag.enc</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GVd1d3viIXFfcHapEYuo5fAvIiUS83adrtMW/MgPwxVBSl46joFCQ1plcnlDGfL19K/3PvChV6n5QGohzfVyz2Z5GdTlaknxvHDUGf5HCukokyPwK/1EYU7NzrhGE7J5jPdi0Aj7xi/Odxy0hGMgpaBLd/nL3N8O6i9pc4Gg3O8soOlciBG/6/xdfN3SzSStMYIN8nfZZMSq3xDDvz4YB7TcTBh4ik4wYhuC77gmT+HWOv5gLTNQ3EkZs5N3EAopy11zHNYU80yv1jtFGcluNPyXYttU5qU33jcp0Wuznac+t+AZHeSQy5vk8DyWorSGMiS+J4KNqSVlDs12EqXEqqJ0uA==</span><br></pre></td></tr></table></figure>



<h3 id="public-key"><a href="#public-key" class="headerlink" title="public.key"></a>public.key</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIIBJDANBgkqhkiG9w0BAQEFAAOCAREAMIIBDAKCAQMlsYv184kJfRcjeGa7Uc/4</span><br><span class="line">3pIkU3SevEA7CZXJfA44bUbBYcrf93xphg2uR5HCFM+Eh6qqnybpIKl3g0kGA4rv</span><br><span class="line">tcMIJ9/PP8npdpVE+U4Hzf4IcgOaOmJiEWZ4smH7LWudMlOekqFTs2dWKbqzlC59</span><br><span class="line">NeMPfu9avxxQ15fQzIjhvcz9GhLqb373XDcn298ueA80KK6Pek+3qJ8YSjZQMrFT</span><br><span class="line">+EJehFdQ6yt6vALcFc4CB1B6qVCGO7hICngCjdYpeZRNbGM/r6ED5Nsozof1oMbt</span><br><span class="line">Si8mZEJ/Vlx3gathkUVtlxx/+jlScjdM7AFV5fkRidt0LkwosDoPoRz/sDFz0qTM</span><br><span class="line">5q5TAgMBAAE=</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure>



<h3 id="exp-py-1"><a href="#exp-py-1" class="headerlink" title="exp.py"></a>exp.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_OAEP</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">2. public.key：rb-&gt;RSA.import_key-&gt;e,n</span></span><br><span class="line"><span class="string">3. construct to privatekey</span></span><br><span class="line"><span class="string">    1. (n,e,d,(p),(q)) to save</span></span><br><span class="line"><span class="string">    2. RSA.construct() to construct</span></span><br><span class="line"><span class="string">    3. 2.exportKey() import</span></span><br><span class="line"><span class="string">    4. RSA.importKey() export</span></span><br><span class="line"><span class="string">    5. PKCS1_OAEP.new()  -&gt; important!</span></span><br><span class="line"><span class="string">4. d by using invert(), and int(d) to get integer</span></span><br><span class="line"><span class="string">5. use private key to decrypt</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;public.key&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    pub = RSA.import_key(f.read())</span><br><span class="line">e = pub.e</span><br><span class="line">n = pub.n</span><br><span class="line"><span class="comment"># e = 65537</span></span><br><span class="line"><span class="comment"># n = 79832181757332818552764610761349592984614744432279135328398999801627880283610900361281249973175805069916210179560506497075132524902086881120372213626641879468491936860976686933630869673826972619938321951599146744807653301076026577949579618331502776303983485566046485431039541708467141408260220098592761245010678592347501894176269580510459729633673468068467144199744563731826362102608811033400887813754780282628099443490170016087838606998017490456601315802448567772411623826281747245660954245413781519794295336197555688543537992197142258053220453757666537840276416475602759374950715283890232230741542737319569819793988431443</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># yafu-x64/factordb.com</span></span><br><span class="line">p = <span class="number">3133337</span></span><br><span class="line">q = <span class="number">25478326064937419292200172136399497719081842914528228316455906211693118321971399936004729134841162974144246271486439695786036588117424611881955950996219646807378822278285638261582099108339438949573034101215141156156408742843820048066830863814362379885720395082318462850002901605689761876319151147352730090957556940842144299887394678743607766937828094478336401159449035878306853716216548374273462386508307367713112073004011383418967894930554067582453248981022011922883374442736848045920676341361871231787163441467533076890081721882179369168787287724769642665399992556052144845878600126283968890273067575342061776244939</span></span><br><span class="line">N = (p-<span class="number">1</span>) * (q-<span class="number">1</span>)</span><br><span class="line">d = <span class="built_in">int</span>(gmpy2.invert(e, N))</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.enc&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    cipher = b64decode(f.read())</span><br><span class="line">    <span class="comment"># print(c)</span></span><br><span class="line">con = RSA.construct((n, e, d, p, q))</span><br><span class="line">pri = PKCS1_OAEP.new(RSA.importKey(con.exportKey()))</span><br><span class="line">m = pri.decrypt(cipher)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="comment"># b&#x27;afctf&#123;R54_|5_$0_B0rin9&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Studying</category>
      </categories>
      <tags>
        <tag>crypto</tag>
        <tag>RSA</tag>
        <tag>openssl</tag>
        <tag>enc</tag>
        <tag>factor</tag>
        <tag>backdoor</tag>
      </tags>
  </entry>
  <entry>
    <title>22-11-15-math</title>
    <url>/2022/11/15/22-11-15-math/</url>
    <content><![CDATA[<span id="more"></span><!--toc-->
]]></content>
  </entry>
  <entry>
    <title>22-11-04-RSA</title>
    <url>/2022/11/04/22-11-04-RSA/</url>
    <content><![CDATA[<p><strong>JUST</strong> conclude the attacks about RSA. </p>
<p>Make a record for myself. </p>
<span id="more"></span>



<h1 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h1><h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><ul>
<li>produce large primes $p$ and $q$</li>
<li>calculate $n &#x3D; p \times q$</li>
<li>use <strong>Euler’s totient function</strong> to get $\varphi(n) &#x3D; (p-1) \times (q-1)$, in code we usually use $N$ or $phi$</li>
<li>define $e$ which satisfies the condition that $gcd(e, \varphi(n)) &#x3D; 1$, and the $e$ is between 1 and $\varphi(n)$</li>
<li>calculate $d$ and the $d$ comes from $de \equiv 1 \mod \varphi(n)$</li>
<li><strong>encrypt: $c \equiv m^{e} \mod n$</strong></li>
<li><strong>decrypt: $m \equiv c^{d} \mod n$</strong></li>
<li>PUBLICKEY: PU{e, n}</li>
<li>PRIVATEKEY: PR{p, q, d}</li>
</ul>
<h2 id="Proof"><a href="#Proof" class="headerlink" title="Proof"></a>Proof</h2><p>$$<br>m \equiv c^{d} \mod n \equiv m^{de} \mod n \equiv m^{k\varphi(n) + 1} \mod n \equiv m \mod n<br>$$</p>
<p>use the <strong>Fermat’s little theorem</strong> deduce:<br>$$<br>m^{n} \equiv m \mod n\<br>$$</p>
<p>$$<br>m^{n-1} \equiv m^{\varphi(n)} \equiv 1 \mod n\<br>$$</p>
<h3 id="m-n-are-relatively-prime"><a href="#m-n-are-relatively-prime" class="headerlink" title="$m$, $n$ are relatively-prime"></a>$m$, $n$ are relatively-prime</h3><p>the $m^{k\varphi(n)}$:<br>$$<br>m^{k\varphi(n)} \equiv 1\mod n\<br>$$</p>
<p>$$<br>\Longrightarrow m^{k\varphi(n) + 1} \equiv m \mod n<br>$$</p>
<h3 id="m-n-not-relatively-prime"><a href="#m-n-not-relatively-prime" class="headerlink" title="$m$,$n$ not relatively-prime"></a>$m$,$n$ not relatively-prime</h3><p>preparation:<br>$$<br>gcd(m, n) \neq 1\<br>$$<br>$$<br>n &#x3D; p \times q\<br>$$</p>
<p>$$<br>\Longrightarrow n &#x3D; kp\<br>$$</p>
<p>$$<br>k, p \ are \ relatively-prime<br>$$</p>
<p>also <strong>Fermat’s little theorem</strong>:<br>$$<br>(kp)^{q-1} \equiv 1 \mod q<br>$$<br>based on the properties of con-gruences multiplication property:<br>$$<br>(kp)^{(p-1)\times (q-1) \times k} (kp) \equiv (kp) \mod q<br>$$<br>substitute the $\varphi(n)$ and $de \equiv 1 \mod \varphi(n)$:<br>$$<br>\varphi(n) &#x3D; (p-1) \times (q-1)\<br>$$<br>$$<br>de &#x3D; 1 + k \times \varphi(n)\<br>$$</p>
<p>$$<br>\Longrightarrow (kp)^{de} \equiv (kp) \mod q\<br>$$</p>
<p>$$<br>\Longrightarrow (kp)^{de}&#x3D;kp + tq<br>$$</p>
<p>thus, $tq | kq$ and $t|p$ for $q$ is prime:<br>$$<br>assume: t &#x3D; t\times p\<br>$$<br>$$<br>(kp)^{de} &#x3D; tq + kp &#x3D; t\times p\times q + k \times p &#x3D; tn + kp\<br>$$</p>
<p>$$<br>(kp)^{de} &#x3D; m + tn \equiv m \mod n<br>$$</p>
<p>proved.</p>
<h2 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h2><ul>
<li>gmpy2</li>
<li>python3.7+</li>
<li>pycharm</li>
<li>sagemath</li>
</ul>
<h1 id="NC-CHALLENGE"><a href="#NC-CHALLENGE" class="headerlink" title="NC CHALLENGE"></a>NC CHALLENGE</h1><p>Before nc real connection, you need to receive the challenge and make a solution about it.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> digits, ascii_letters, punctuation</span><br><span class="line">alpha_bet = digits+ascii_letters+punctuation</span><br><span class="line">strlist = itertools.product(alpha_bet, repeat=<span class="number">4</span>)</span><br><span class="line">sha256 = <span class="string">&#x27;9a579edf6cdd9ed39efc1ccc754e7bb15d52e3d9cabcd66c7042fa1a59fc2836&#x27;</span></span><br><span class="line">tail = <span class="string">&#x27;j60BfGY9sSnkMi9H&#x27;</span></span><br><span class="line">xxxx = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> strlist:</span><br><span class="line">    data = i[<span class="number">0</span>]+i[<span class="number">1</span>]+i[<span class="number">2</span>]+i[<span class="number">3</span>]</span><br><span class="line">    data_sha = hashlib.sha256((data+<span class="built_in">str</span>(tail)).encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line">    <span class="keyword">if</span>(data_sha == sha256):</span><br><span class="line">        xxxx = data</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(xxxx)</span><br></pre></td></tr></table></figure>

<p><em>change sha256&#x2F;tail and crack xxxx</em></p>
<p>Or use the connecting function: </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">table = string.ascii_letters + string.digits</span><br><span class="line">r = remote(<span class="string">&#x27;1.14.71.254&#x27;</span>,<span class="number">28826</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof</span>():</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;sha256(XXXX&#x27;</span>)</span><br><span class="line">    line = r.recvline()[:-<span class="number">1</span>].decode()</span><br><span class="line">    <span class="built_in">print</span>(line)</span><br><span class="line">    tmp = line[line.find(<span class="string">&#x27;+&#x27;</span>) + <span class="number">1</span>:line.find(<span class="string">&#x27;)&#x27;</span>)]</span><br><span class="line">    <span class="built_in">print</span>(tmp)</span><br><span class="line">    aim = line[line.find(<span class="string">&#x27;== &#x27;</span>) + <span class="number">3</span>:]</span><br><span class="line">    <span class="built_in">print</span>(aim)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> table:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> table:</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> table:</span><br><span class="line">                <span class="keyword">for</span> l <span class="keyword">in</span> table:</span><br><span class="line">                    ans = i + j + k + l</span><br><span class="line">                    <span class="keyword">if</span> hashlib.sha256((ans + tmp).encode()).hexdigest() == aim:</span><br><span class="line">                        <span class="built_in">print</span>(ans)</span><br><span class="line">                        r.recvuntil(<span class="string">b&#x27;Give me XXXX: &#x27;</span>)</span><br><span class="line">                        r.sendline(ans.encode())</span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line">proof()</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>



<h1 id="MODULUS-FACTORIZATION"><a href="#MODULUS-FACTORIZATION" class="headerlink" title="MODULUS FACTORIZATION"></a>MODULUS FACTORIZATION</h1><p>Or we can call it <code>Original_RSA</code>. </p>
<p>The main target in RSA problems is to factorize <code>n</code> to <code>p</code> and <code>q</code>. </p>
<p>Here is the code of <code>Original_RSA</code> which is the basic attack among RSA attacks.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Original_RSA</span>(<span class="params">p, q, e, c, n</span>):</span><br><span class="line">    N = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)    </span><br><span class="line">    d = <span class="built_in">int</span>(gmpy2.invert(e,N))  <span class="comment"># mpz() may run error, convert to int()</span></span><br><span class="line">    <span class="comment"># d = gmpy2.invert(e,N)</span></span><br><span class="line">    m = gmpy2.powmod(c,d,n)</span><br><span class="line">    <span class="keyword">return</span> m</span><br></pre></td></tr></table></figure>

<p><strong>BUT HOW TO FACTORIZE THE $n$?</strong></p>
<p>It is the significant question. Follows are some solutions that I met.</p>
<h2 id="Factorize"><a href="#Factorize" class="headerlink" title="Factorize"></a>Factorize</h2><h3 id="factordb"><a href="#factordb" class="headerlink" title="factordb"></a>factordb</h3><blockquote>
<p><a href="http://factordb.com/">factordb.com</a></p>
</blockquote>
<p>A database contains many $n$ that has been factorized.</p>
<h3 id="yafu-x64"><a href="#yafu-x64" class="headerlink" title="yafu-x64"></a>yafu-x64</h3><p>The $p$,$q$ differ very well or a little or $p$,$q$  are smooth and produced by $\rho -1 $or $\rho + 1 $.</p>
<p><strong>usage</strong></p>
<ul>
<li><p>yafu-x64 factor()</p>
</li>
<li><p>yafu-x64 factor(@) -batchfile [filename] <em>!remember the number saved in file and need a <code>\n</code></em></p>
</li>
</ul>
<h3 id="msieve153"><a href="#msieve153" class="headerlink" title="msieve153"></a>msieve153</h3><p>Which is similar to yafu-x64</p>
<h3 id="RSAConverter"><a href="#RSAConverter" class="headerlink" title="RSAConverter"></a>RSAConverter</h3><p>Based on CRT. </p>
<p><strong>usage</strong></p>
<ul>
<li><p>$n$, $d$ convert to hex and delete <code>0x</code></p>
</li>
<li><p>$e$ convert to hex and delete <code>x</code></p>
</li>
</ul>
<h3 id="fermath-factorization"><a href="#fermath-factorization" class="headerlink" title="fermath factorization"></a>fermath factorization</h3><p>p,q have a little difference</p>
<ul>
<li>p or q created by <code>next_prime()</code><ul>
<li>find the Reference Substance <code>n_2</code> which can be produced by <code>iroot(n, 2)[0]</code></li>
<li>p and q are primes, and $p&lt;n_2&lt;q$</li>
<li>we can get $q$ by <code>next_prime(n_2)</code></li>
<li>and <code>p = n // q</code></li>
</ul>
</li>
<li>p and q are similar but not neighbors<ul>
<li>also find the <code>n_2</code></li>
<li>with <code>n_2</code> as a center, step size 1 and right</li>
<li>if find $p$ and $q$ satisfied the condition, and we get the true $p$ and $q$</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Fermat Factorization 2</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Fermat_Factor</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Fermat Factorization</span></span><br><span class="line"><span class="string">    conditon:</span></span><br><span class="line"><span class="string">        1. n is odd</span></span><br><span class="line"><span class="string">        2. satisfy the equation (p-q)(p+q)</span></span><br><span class="line"><span class="string">    :param n:</span></span><br><span class="line"><span class="string">    :return: result</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    a = gmpy2.iroot(n, <span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        a += <span class="number">1</span></span><br><span class="line">        b_2 = a*a - n</span><br><span class="line">        b, index = gmpy2.iroot(b_2, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> index == <span class="literal">True</span>:</span><br><span class="line">            result = [<span class="built_in">int</span>(a + b), <span class="built_in">int</span>(a - b)]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>

<h3 id="backdoor"><a href="#backdoor" class="headerlink" title="backdoor"></a>backdoor</h3><blockquote>
<p><a href="https://asecuritysite.com/encryption/copper">https://asecuritysite.com/encryption/copper</a></p>
</blockquote>
<p>$$<br>Prime &#x3D; k \times M + 65537^{a} \mod M<br>$$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">RSA_Backdoor</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    primes list can produced by primes_first_n() in sagemath</span></span><br><span class="line"><span class="string">    reference:[GKCTF2020]Backdoor</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param n:modulo</span></span><br><span class="line"><span class="string">    :return:p,q</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    val = <span class="number">39</span> <span class="comment"># edit</span></span><br><span class="line">    M = <span class="number">1</span></span><br><span class="line">    primes = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">41</span>, <span class="number">43</span>, <span class="number">47</span>, <span class="number">53</span>, <span class="number">59</span>, <span class="number">61</span>, <span class="number">67</span>, <span class="number">71</span>, <span class="number">73</span>, <span class="number">79</span>, <span class="number">83</span>, <span class="number">89</span>, <span class="number">97</span>, <span class="number">101</span>, <span class="number">103</span>,</span><br><span class="line">              <span class="number">107</span>, <span class="number">109</span>, <span class="number">113</span>, <span class="number">127</span>, <span class="number">131</span>, <span class="number">137</span>, <span class="number">139</span>, <span class="number">149</span>, <span class="number">151</span>, <span class="number">157</span>, <span class="number">163</span>, <span class="number">167</span>, <span class="number">173</span>, <span class="number">179</span>, <span class="number">181</span>, <span class="number">191</span>, <span class="number">193</span>, <span class="number">197</span>, <span class="number">199</span>, <span class="number">211</span>, <span class="number">223</span>,</span><br><span class="line">              <span class="number">227</span>, <span class="number">229</span>, <span class="number">233</span>, <span class="number">239</span>, <span class="number">241</span>, <span class="number">251</span>, <span class="number">257</span>, <span class="number">263</span>, <span class="number">269</span>, <span class="number">271</span>, <span class="number">277</span>, <span class="number">281</span>, <span class="number">283</span>, <span class="number">293</span>, <span class="number">307</span>, <span class="number">311</span>, <span class="number">313</span>, <span class="number">317</span>, <span class="number">331</span>, <span class="number">337</span>, <span class="number">347</span>,</span><br><span class="line">              <span class="number">349</span>, <span class="number">353</span>, <span class="number">359</span>, <span class="number">367</span>, <span class="number">373</span>, <span class="number">379</span>, <span class="number">383</span>, <span class="number">389</span>, <span class="number">397</span>, <span class="number">401</span>, <span class="number">409</span>, <span class="number">419</span>, <span class="number">421</span>, <span class="number">431</span>, <span class="number">433</span>, <span class="number">439</span>, <span class="number">443</span>, <span class="number">449</span>, <span class="number">457</span>, <span class="number">461</span>, <span class="number">463</span>,</span><br><span class="line">              <span class="number">467</span>, <span class="number">479</span>, <span class="number">487</span>, <span class="number">491</span>, <span class="number">499</span>, <span class="number">503</span>, <span class="number">509</span>, <span class="number">521</span>, <span class="number">523</span>, <span class="number">541</span>, <span class="number">547</span>, <span class="number">557</span>, <span class="number">563</span>, <span class="number">569</span>, <span class="number">571</span>, <span class="number">577</span>, <span class="number">587</span>, <span class="number">593</span>, <span class="number">599</span>, <span class="number">601</span>, <span class="number">607</span>,</span><br><span class="line">              <span class="number">613</span>, <span class="number">617</span>, <span class="number">619</span>, <span class="number">631</span>, <span class="number">641</span>, <span class="number">643</span>, <span class="number">647</span>, <span class="number">653</span>, <span class="number">659</span>, <span class="number">661</span>, <span class="number">673</span>, <span class="number">677</span>, <span class="number">683</span>, <span class="number">691</span>, <span class="number">701</span>, <span class="number">709</span>, <span class="number">719</span>, <span class="number">727</span>, <span class="number">733</span>, <span class="number">739</span>, <span class="number">743</span>,</span><br><span class="line">              <span class="number">751</span>, <span class="number">757</span>, <span class="number">761</span>, <span class="number">769</span>, <span class="number">773</span>, <span class="number">787</span>, <span class="number">797</span>, <span class="number">809</span>, <span class="number">811</span>, <span class="number">821</span>, <span class="number">823</span>, <span class="number">827</span>, <span class="number">829</span>, <span class="number">839</span>, <span class="number">853</span>, <span class="number">857</span>, <span class="number">859</span>, <span class="number">863</span>, <span class="number">877</span>, <span class="number">881</span>, <span class="number">883</span>,</span><br><span class="line">              <span class="number">887</span>, <span class="number">907</span>, <span class="number">911</span>, <span class="number">919</span>, <span class="number">929</span>, <span class="number">937</span>, <span class="number">941</span>, <span class="number">947</span>, <span class="number">953</span>, <span class="number">967</span>, <span class="number">971</span>, <span class="number">977</span>, <span class="number">983</span>, <span class="number">991</span>, <span class="number">997</span>, <span class="number">1009</span>, <span class="number">1013</span>, <span class="number">1019</span>, <span class="number">1021</span>, <span class="number">1031</span>,</span><br><span class="line">              <span class="number">1033</span>, <span class="number">1039</span>, <span class="number">1049</span>, <span class="number">1051</span>, <span class="number">1061</span>, <span class="number">1063</span>, <span class="number">1069</span>, <span class="number">1087</span>, <span class="number">1091</span>, <span class="number">1093</span>, <span class="number">1097</span>, <span class="number">1103</span>, <span class="number">1109</span>, <span class="number">1117</span>, <span class="number">1123</span>, <span class="number">1129</span>, <span class="number">1151</span>,</span><br><span class="line">              <span class="number">1153</span>, <span class="number">1163</span>, <span class="number">1171</span>, <span class="number">1181</span>, <span class="number">1187</span>, <span class="number">1193</span>, <span class="number">1201</span>, <span class="number">1213</span>, <span class="number">1217</span>, <span class="number">1223</span>, <span class="number">1229</span>, <span class="number">1231</span>, <span class="number">1237</span>, <span class="number">1249</span>, <span class="number">1259</span>, <span class="number">1277</span>, <span class="number">1279</span>,</span><br><span class="line">              <span class="number">1283</span>, <span class="number">1289</span>, <span class="number">1291</span>, <span class="number">1297</span>, <span class="number">1301</span>, <span class="number">1303</span>, <span class="number">1307</span>, <span class="number">1319</span>, <span class="number">1321</span>, <span class="number">1327</span>, <span class="number">1361</span>, <span class="number">1367</span>, <span class="number">1373</span>, <span class="number">1381</span>, <span class="number">1399</span>, <span class="number">1409</span>, <span class="number">1423</span>,</span><br><span class="line">              <span class="number">1427</span>, <span class="number">1429</span>, <span class="number">1433</span>, <span class="number">1439</span>, <span class="number">1447</span>, <span class="number">1451</span>, <span class="number">1453</span>, <span class="number">1459</span>, <span class="number">1471</span>, <span class="number">1481</span>, <span class="number">1483</span>, <span class="number">1487</span>, <span class="number">1489</span>, <span class="number">1493</span>, <span class="number">1499</span>, <span class="number">1511</span>, <span class="number">1523</span>,</span><br><span class="line">              <span class="number">1531</span>, <span class="number">1543</span>, <span class="number">1549</span>, <span class="number">1553</span>, <span class="number">1559</span>, <span class="number">1567</span>, <span class="number">1571</span>, <span class="number">1579</span>, <span class="number">1583</span>, <span class="number">1597</span>, <span class="number">1601</span>, <span class="number">1607</span>, <span class="number">1609</span>, <span class="number">1613</span>, <span class="number">1619</span>, <span class="number">1621</span>, <span class="number">1627</span>,</span><br><span class="line">              <span class="number">1637</span>, <span class="number">1657</span>, <span class="number">1663</span>, <span class="number">1667</span>, <span class="number">1669</span>, <span class="number">1693</span>, <span class="number">1697</span>, <span class="number">1699</span>, <span class="number">1709</span>, <span class="number">1721</span>, <span class="number">1723</span>, <span class="number">1733</span>, <span class="number">1741</span>, <span class="number">1747</span>, <span class="number">1753</span>, <span class="number">1759</span>, <span class="number">1777</span>,</span><br><span class="line">              <span class="number">1783</span>, <span class="number">1787</span>, <span class="number">1789</span>, <span class="number">1801</span>, <span class="number">1811</span>, <span class="number">1823</span>, <span class="number">1831</span>, <span class="number">1847</span>, <span class="number">1861</span>, <span class="number">1867</span>, <span class="number">1871</span>, <span class="number">1873</span>, <span class="number">1877</span>, <span class="number">1879</span>, <span class="number">1889</span>, <span class="number">1901</span>, <span class="number">1907</span>,</span><br><span class="line">              <span class="number">1913</span>, <span class="number">1931</span>, <span class="number">1933</span>, <span class="number">1949</span>, <span class="number">1951</span>, <span class="number">1973</span>, <span class="number">1979</span>, <span class="number">1987</span>, <span class="number">1993</span>, <span class="number">1997</span>, <span class="number">1999</span>, <span class="number">2003</span>, <span class="number">2011</span>, <span class="number">2017</span>, <span class="number">2027</span>, <span class="number">2029</span>, <span class="number">2039</span>,</span><br><span class="line">              <span class="number">2053</span>, <span class="number">2063</span>, <span class="number">2069</span>, <span class="number">2081</span>, <span class="number">2083</span>, <span class="number">2087</span>, <span class="number">2089</span>, <span class="number">2099</span>, <span class="number">2111</span>, <span class="number">2113</span>, <span class="number">2129</span>, <span class="number">2131</span>, <span class="number">2137</span>, <span class="number">2141</span>, <span class="number">2143</span>, <span class="number">2153</span>, <span class="number">2161</span>,</span><br><span class="line">              <span class="number">2179</span>, <span class="number">2203</span>, <span class="number">2207</span>, <span class="number">2213</span>, <span class="number">2221</span>, <span class="number">2237</span>, <span class="number">2239</span>, <span class="number">2243</span>, <span class="number">2251</span>, <span class="number">2267</span>, <span class="number">2269</span>, <span class="number">2273</span>, <span class="number">2281</span>, <span class="number">2287</span>, <span class="number">2293</span>, <span class="number">2297</span>, <span class="number">2309</span>,</span><br><span class="line">              <span class="number">2311</span>, <span class="number">2333</span>, <span class="number">2339</span>, <span class="number">2341</span>, <span class="number">2347</span>, <span class="number">2351</span>, <span class="number">2357</span>, <span class="number">2371</span>, <span class="number">2377</span>, <span class="number">2381</span>, <span class="number">2383</span>, <span class="number">2389</span>, <span class="number">2393</span>, <span class="number">2399</span>, <span class="number">2411</span>, <span class="number">2417</span>, <span class="number">2423</span>,</span><br><span class="line">              <span class="number">2437</span>, <span class="number">2441</span>, <span class="number">2447</span>, <span class="number">2459</span>, <span class="number">2467</span>, <span class="number">2473</span>, <span class="number">2477</span>, <span class="number">2503</span>, <span class="number">2521</span>, <span class="number">2531</span>, <span class="number">2539</span>, <span class="number">2543</span>, <span class="number">2549</span>, <span class="number">2551</span>, <span class="number">2557</span>, <span class="number">2579</span>, <span class="number">2591</span>,</span><br><span class="line">              <span class="number">2593</span>, <span class="number">2609</span>, <span class="number">2617</span>, <span class="number">2621</span>, <span class="number">2633</span>, <span class="number">2647</span>, <span class="number">2657</span>, <span class="number">2659</span>, <span class="number">2663</span>, <span class="number">2671</span>, <span class="number">2677</span>, <span class="number">2683</span>, <span class="number">2687</span>, <span class="number">2689</span>, <span class="number">2693</span>, <span class="number">2699</span>, <span class="number">2707</span>,</span><br><span class="line">              <span class="number">2711</span>, <span class="number">2713</span>, <span class="number">2719</span>, <span class="number">2729</span>, <span class="number">2731</span>, <span class="number">2741</span>, <span class="number">2749</span>, <span class="number">2753</span>, <span class="number">2767</span>, <span class="number">2777</span>, <span class="number">2789</span>, <span class="number">2791</span>, <span class="number">2797</span>, <span class="number">2801</span>, <span class="number">2803</span>, <span class="number">2819</span>, <span class="number">2833</span>,</span><br><span class="line">              <span class="number">2837</span>, <span class="number">2843</span>, <span class="number">2851</span>, <span class="number">2857</span>, <span class="number">2861</span>, <span class="number">2879</span>, <span class="number">2887</span>, <span class="number">2897</span>, <span class="number">2903</span>, <span class="number">2909</span>, <span class="number">2917</span>, <span class="number">2927</span>, <span class="number">2939</span>, <span class="number">2953</span>, <span class="number">2957</span>, <span class="number">2963</span>, <span class="number">2969</span>,</span><br><span class="line">              <span class="number">2971</span>, <span class="number">2999</span>]</span><br><span class="line">    <span class="comment"># print(primes)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, val):</span><br><span class="line">        M = M * primes[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">20</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">            p = gmpy2.mpz(k * M + (<span class="built_in">pow</span>(<span class="number">65537</span>, a, M)))</span><br><span class="line">            <span class="keyword">if</span> gmpy2.is_prime(p):</span><br><span class="line">                q = gmpy2.mpz(n // p)</span><br><span class="line">                <span class="keyword">if</span> gmpy2.is_prime(q):</span><br><span class="line">                    <span class="keyword">return</span> p, q</span><br><span class="line">                    <span class="comment"># print(q)</span></span><br></pre></td></tr></table></figure>

<h3 id="xor-factorization"><a href="#xor-factorization" class="headerlink" title="xor factorization"></a>xor factorization</h3><blockquote>
<p><a href="https://github.com/sliedes/xor_factor">GitHub - sliedes&#x2F;xor_factor: Given p xor q and n&#x3D;p*q for two unknown primes p and q, factor n and output p and q.</a></p>
</blockquote>
<p><strong>usage</strong></p>
<p><code>xor_factor.py n x</code></p>
<h3 id="pollard’s-p-1"><a href="#pollard’s-p-1" class="headerlink" title="pollard’s p-1"></a>pollard’s p-1</h3><blockquote>
<p>This part only give the solution. </p>
<p>Detailed introduction needs time to be written.  </p>
</blockquote>
<p>$$<br>(p-1) | B!\<br>$$</p>
<p>$$<br>2^{B!}\equiv 1 \mod p<br>$$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> primefac <span class="keyword">import</span> pollard_pm1</span><br><span class="line">p = pollard_pm1(n)</span><br><span class="line"><span class="comment"># May it cost a lot of time, just wait. </span></span><br></pre></td></tr></table></figure>

<h3 id="williams’s-p-1"><a href="#williams’s-p-1" class="headerlink" title="williams’s p+1"></a>williams’s p+1</h3><blockquote>
<p>As above. </p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> primefac <span class="keyword">import</span> williams_pp1</span><br><span class="line">p = williams_pp1(n)</span><br><span class="line"><span class="comment"># Similar to Pollard&#x27;s p-1</span></span><br></pre></td></tr></table></figure>



<h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><ul>
<li>lenstra elliptic curve factorization</li>
<li>birthday attack</li>
<li>……</li>
</ul>
<h1 id="SAME-MOD"><a href="#SAME-MOD" class="headerlink" title="SAME MOD"></a>SAME MOD</h1><p>The attack is based on the <strong>Homomorphic Encryption</strong> and <strong>Extended Euclidean Algorithm</strong>.</p>
<blockquote>
<p>Usually, we have two pairs of $c$ and $e$ and both them have the same modulo. </p>
<p>*REMEMBER that the encrypted m should be same. *</p>
</blockquote>
<p>$$<br>c_{1} \equiv m^{e_{1}} \mod n\<br>$$</p>
<p>$$<br>c_{2} \equiv m^{e_{2}} \mod n<br>$$</p>
<p>Use Extended Euclidean Algorithm, the eqution follows:<br>$$<br>r \times e_{1} + s \times e_{2} &#x3D; gcd(e1, e2)<br>$$<br>Based on the <code>Multiplicative homomorphism</code>, and we can make a conversion.</p>
<p>$$<br>c_{1}^{s} \times c_{2}^{r} \equiv m^{r\times e_{1} + s\times e_{2}} \mod n<br>$$</p>
<h2 id="e-1-e-2-are-primes"><a href="#e-1-e-2-are-primes" class="headerlink" title="$e_{1}$, $e_{2}$ are primes"></a>$e_{1}$, $e_{2}$ are primes</h2><p>If $e_{1}$ and $e_{2}$ are primes, $gcd(e_{1}, e_{2}) &#x3D; 1$, and we can substitute the integer into the equation above.<br>$$<br>c_{1}^{s} \times c_{2}^{r} \equiv m \mod n<br>$$</p>
<h2 id="e-1-e-2-not-primes"><a href="#e-1-e-2-not-primes" class="headerlink" title="$e_{1}$, $e_{2}$ not primes"></a>$e_{1}$, $e_{2}$ not primes</h2><ol>
<li>$gcd(e1, e2)$ and $\varphi(n)$ are not relatively-prime.</li>
</ol>
<p>May use <code>Rabin Algorithm</code> to solve this problem. For another word, the problem converts to the <code>Low_Exponent_e2</code> problem. </p>
<ol start="2">
<li>$gcd(e1, e2)$ and $\varphi(n)$ are relatively-prime.</li>
</ol>
<p>Thus,  just use <code>iroot(m, g)</code> and we get the true $m$. <strong>REMEMBER</strong> that before the calculation we ought to <code> % n</code> first. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Same_Mod_RSA</span>(<span class="params">e1, e2, c1, c2, n</span>):</span><br><span class="line">    g, r, s = gmpy2.gcdext(e1, e2)</span><br><span class="line">    <span class="keyword">if</span> r &lt; <span class="number">0</span>:</span><br><span class="line">        r = -r</span><br><span class="line">        c1 = gmpy2.invert(c1, n)</span><br><span class="line">    <span class="keyword">elif</span> s &lt; <span class="number">0</span>:</span><br><span class="line">        s = -s</span><br><span class="line">        c2 = gmpy2.invert(c2, n)</span><br><span class="line">    m = gmpy2.powmod(c1, r, n)*gmpy2.powmod(c2, s, n) % n <span class="comment"># keypoint</span></span><br><span class="line">    <span class="keyword">if</span> g == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> m</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> gmpy2.iroot(m, g)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<p><em>The code ignores that gcd($e_{1}$, $e_{2}$) and $\varphi(n)$ are not relatively-prime</em>.</p>
<h2 id="Multiplicative-congruence"><a href="#Multiplicative-congruence" class="headerlink" title="Multiplicative congruence"></a>Multiplicative congruence</h2><p>We use multiplicative congruence to simplify our calculation. </p>
<p>It usually gives us one same modulo $n$ and two more pairs of $c$, $e$. </p>
<p><strong>FOR EXAMPLE</strong>: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">N = </span><br><span class="line">c1 = </span><br><span class="line">e1 = </span><br><span class="line">c2 = </span><br><span class="line">e2 = </span><br><span class="line">c3 = </span><br><span class="line">e3 = </span><br></pre></td></tr></table></figure>

<p>The deduction is as follows:<br>$$<br>g_{1} \equiv e_{1} \cdot r_{1} + e_{2} \cdot s_{1} \<br>$$<br>$$<br>g_{2} \equiv g_{1} \cdot r_{2} + e_{3} \cdot s_{2}<br>$$</p>
<p>The three public keys satisfy $gcd(e_{1}, e_{2}, e_{3}) &#x3D; 1$, so $g_{2} &#x3D; 1$. </p>
<p>We can get the equation that $1\equiv (e_{1}\cdot r_{1} + e_{2} \cdot s_{1})\cdot r_{2} + e_{3} \cdot s_{2}$.</p>
<p>Expand it:<br>$$<br>1 \equiv (r_2\cdot r_1)\cdot e_1 + (s_1 \cdot r_2)\cdot e_2 + s_2\cdot e_3<br>$$</p>
<p>$$<br>c_1 \equiv m^{e_1} \mod n<br>$$</p>
<p>$$<br>c_2 \equiv m^{e_2} \mod n \<br>$$</p>
<p>$$<br>c_3 \equiv m^{e_3} \mod n \<br>$$</p>
<p>$$<br>\Longrightarrow c_1^{r_2\cdot r_1}\cdot c_2^{s_1\cdot r_2} \cdot c_3^{s_2} \equiv m \mod n<br>$$</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">……</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line">g1, r1, s1 = gcdext(e1, e2)</span><br><span class="line">g2, r2, s2 = gcdext(g1, e3)</span><br><span class="line"><span class="comment"># print(g2)</span></span><br><span class="line">m = powmod(c1, r2*r1, n)*powmod(c2, s1*r2, n)*powmod(c3, s2, n) % n <span class="comment"># keypoint</span></span><br></pre></td></tr></table></figure>



<h1 id="MODULO-RELATED"><a href="#MODULO-RELATED" class="headerlink" title="MODULO RELATED"></a>MODULO RELATED</h1><blockquote>
<p>$n_{1}$ and $n_{2}$ are relatively-primes</p>
<p>When they encrypt the same message $m$，it exists <strong>THE MODULO RELATED ATTACK</strong>.</p>
</blockquote>
<p><strong>Deduction</strong><br>$$<br>n_1 &#x3D; p \times q_1<br>$$</p>
<p>$$<br>n_2 &#x3D; p \times q_2\<br>$$</p>
<p><em>Ignore the possibility that $1 \times n_1$ and $1 \times n_2$</em><br>$$<br>p &#x3D; gcd(n_1, n_2) \<br>$$</p>
<p>$$<br>q_1 &#x3D; n_1 &#x2F;&#x2F; p<br>$$</p>
<p>$$<br>q_2 &#x3D; n_2 &#x2F;&#x2F; p<br>$$</p>
<p>$ p$ can be calculated with function <code>gcd()</code> , and  use division to solve out the $q_1$ and $q_2$.</p>
<p>The problem converts to the <code>Original_RSA</code>.</p>
<p><strong>Solution</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">RSA_NPM</span>(<span class="params">n1,n2,e,c1</span>):</span><br><span class="line">    p = gmpy2.gcd(n1,n2)</span><br><span class="line">    q1 = n1//p  <span class="comment"># keypoint</span></span><br><span class="line">    N = (p-<span class="number">1</span>)*(q1-<span class="number">1</span>)</span><br><span class="line">    d = gmpy2.invert(e,<span class="built_in">int</span>(N))</span><br><span class="line">    m = gmpy2.powmod(c1,d,n1)</span><br><span class="line">    <span class="keyword">return</span> m</span><br></pre></td></tr></table></figure>

<p><em>Remember that $n_1$ and $c_1$ are one-to-one!</em></p>
<h1 id="LOW-EXPONENT"><a href="#LOW-EXPONENT" class="headerlink" title="LOW EXPONENT"></a>LOW EXPONENT</h1><h2 id="e-x3D-3"><a href="#e-x3D-3" class="headerlink" title="e &#x3D; 3"></a>e &#x3D; 3</h2><blockquote>
<p>or one-to-one function</p>
</blockquote>
<p>JUST Bruck. </p>
<ol>
<li>$m^e &lt; n$, means that $k &#x3D; 0$ in code below</li>
<li>$m^e &gt; n$</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">RSA_Low_Exponent_e3</span>(<span class="params">c,e,n</span>):</span><br><span class="line">    k = <span class="number">0</span> <span class="comment"># one</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>: <span class="comment"># the other</span></span><br><span class="line">        cm = c + n*k</span><br><span class="line">        m, index = gmpy2.iroot(cm, e)</span><br><span class="line">        <span class="keyword">if</span> index == <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">return</span> m</span><br><span class="line">        k += <span class="number">1</span></span><br></pre></td></tr></table></figure>



<h2 id="e-and-varphi-n-are-not-relatively-prime"><a href="#e-and-varphi-n-are-not-relatively-prime" class="headerlink" title="$e$ and $\varphi(n)$ are not relatively-prime"></a>$e$ and $\varphi(n)$ are not relatively-prime</h2><h3 id="e-x3D-2"><a href="#e-x3D-2" class="headerlink" title="e &#x3D; 2"></a>e &#x3D; 2</h3><blockquote>
<p>Rabin</p>
</blockquote>
<p><strong>PART1</strong> $m_p$ and $m_q$</p>
<p>Split into two scenarios for discussion: </p>
<ol>
<li>$p$ and $q$ are satisfied $p \equiv q \equiv 3 \mod 4$.</li>
</ol>
<p>$$<br>m_p \equiv c^{\frac{1}{4}(p + 1)} \mod p<br>$$</p>
<p>$$<br>m_q \equiv c^{\frac{1}{4}(q + 1)} \mod q<br>$$</p>
<ol start="2">
<li>$p$ and $q$ are different to 1.</li>
</ol>
<p>$$<br>m_p \equiv c^{\frac{1}{2}} \mod p<br>$$</p>
<p>$$<br>m_q \equiv c^{\frac{1}{2}} \mod q<br>$$</p>
<p><strong>PART2</strong> Calculated $y_p$ and $y_q$ with Extended Euclidean Algorithm whose function is <code>gmpy2.gcdext()</code>.<br>$$<br>y_p \cdot p + y_q \cdot q &#x3D; 1<br>$$<br><strong>PART3</strong> Solve out four plaintexts.<br>$$<br>a \equiv (y_p \cdot p \cdot m_q + y_q \cdot q \cdot m_p) \mod n<br>$$</p>
<p>$$<br>b \equiv n - a<br>$$</p>
<p>$$<br>c \equiv (y_p \cdot p \cdot m_q - y_q \cdot q \cdot m_p) \mod n<br>$$</p>
<p>$$<br>d \equiv n - c<br>$$</p>
<p>Thus, we will get four different plaintext, and one of them is the true plaintext. </p>
<p>Here is the complete code: </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">RSA_Rabin_e2</span>(<span class="params">c,n,p,q</span>):</span><br><span class="line">    mp = gmpy2.powmod(c,(p+<span class="number">1</span>)//<span class="number">4</span>,p)</span><br><span class="line">    mq = gmpy2.powmod(c,(q+<span class="number">1</span>)//<span class="number">4</span>,q)</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    mp = gmpy2.powmod(c,1/2,p)</span></span><br><span class="line"><span class="string">    mq = gmpy2.powmod(c,1/2,q)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    gcd,yp,yq = gmpy2.gcdext(p,q)</span><br><span class="line"></span><br><span class="line">    m1 = (yp * p * mq + yq * q * mp) % n</span><br><span class="line">    m2 = n - m1</span><br><span class="line">    m3 = (yp * p * mq - yq * q * mp) % n</span><br><span class="line">    m4 = n - m3</span><br><span class="line">    <span class="keyword">return</span> m1, m2, m3, m4</span><br></pre></td></tr></table></figure>



<h3 id="e-x3D-2-1"><a href="#e-x3D-2-1" class="headerlink" title="e !&#x3D; 2"></a>e !&#x3D; 2</h3><p>If $e$ is not equal to 2, we use another way to calculate the final $m$. </p>
<p>For example, $gcd(e, \varphi(n)) &#x3D; a$. We can divide $e$ to get the equation $gcd(e&#x2F;&#x2F;a, \varphi(n)) &#x3D; 1$ to solve the private key $d$.</p>
<p>Finally, we get the $m^{a}$. We use <code>iroot($m^&#123;a&#125;$, a)[0]</code> to get the final plaintext $m$.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># We define phi as N</span></span><br><span class="line">a = gcd(e, N)</span><br><span class="line">d = invert(e//a, N)</span><br><span class="line">m = iroot(powmod(c, d, n), a)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>



<h3 id="AMM"><a href="#AMM" class="headerlink" title="AMM"></a>AMM</h3><blockquote>
<p>The same $e$ is too large to solve out.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">GF</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="keyword">global</span> p</span><br><span class="line">    p = a</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="keyword">global</span> p</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(a,b,p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AMM</span>(<span class="params">x,e,p</span>):</span><br><span class="line">    GF(p)</span><br><span class="line">    y = random.randint(<span class="number">1</span>, p-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span> g(y, (p-<span class="number">1</span>)//e) == <span class="number">1</span>:</span><br><span class="line">        y = random.randint(<span class="number">1</span>, p-<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(y)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;find&quot;</span>)</span><br><span class="line">    <span class="comment">#p-1 = e^t*s</span></span><br><span class="line">    t = <span class="number">1</span></span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> p % e == <span class="number">0</span>:</span><br><span class="line">        t += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(t)</span><br><span class="line">    s = p // (e**t)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;e&#x27;</span>, e)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;p&#x27;</span>, p)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;s&#x27;</span>, s)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;t&#x27;</span>, t)</span><br><span class="line">    <span class="comment"># s|ralpha-1</span></span><br><span class="line">    k = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>((s * k + <span class="number">1</span>) % e != <span class="number">0</span>):</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">    alpha = (s * k + <span class="number">1</span>) // e</span><br><span class="line">    a = g(y, (e ** (t - <span class="number">1</span>) ) * s)</span><br><span class="line">    b = g(x, e * alpha - <span class="number">1</span>)</span><br><span class="line">    c = g(y, s)</span><br><span class="line">    h = <span class="number">1</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, t-<span class="number">1</span>):</span><br><span class="line">        d = g(b,e**(t-<span class="number">1</span>-i))</span><br><span class="line">        <span class="keyword">if</span> d == <span class="number">1</span>:</span><br><span class="line">            j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            j = -math.log(d,a)</span><br><span class="line">        b = b * (g(g(c, e), j))</span><br><span class="line">        h = h * g(c, j)</span><br><span class="line">        c = g(c, e)</span><br><span class="line">    root = (g(x, alpha * h)) % p</span><br><span class="line">    roots = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(e):</span><br><span class="line">        mp2 = root * g(a,i) % p</span><br><span class="line">        roots.add(mp2)</span><br><span class="line">    <span class="keyword">return</span> roots</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;flag&#x27;</span> <span class="keyword">in</span> m: <span class="comment"># edit</span></span><br><span class="line">        <span class="built_in">print</span>(m)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>



<h1 id="RSA-LEAKAGE"><a href="#RSA-LEAKAGE" class="headerlink" title="RSA_LEAKAGE"></a>RSA_LEAKAGE</h1><h2 id="Leakage-d"><a href="#Leakage-d" class="headerlink" title="Leakage_d"></a>Leakage_d</h2><p><strong>Use RSAConverter</strong>.</p>
<ul>
<li>$n$, $d$, hex(), delete <code>0x</code></li>
<li>$e$, hex(), delete <code>x</code></li>
</ul>
<h2 id="Leakage-dp-amp-dq"><a href="#Leakage-dp-amp-dq" class="headerlink" title="Leakage_dp&amp;dq"></a>Leakage_dp&amp;dq</h2><p><strong>Dedection and keypoint</strong>!</p>
<p>Prepare and make a definition to $d_p$ and $d_q$.<br>$$<br>d_p \equiv d \mod p-1<br>$$</p>
<p>$$<br>d_q \equiv d \mod q-1<br>$$</p>
<p>After deductions, we can get four significant equations or relations.<br>$$<br>q \times InvQ \equiv 1 \mod p<br>$$</p>
<p>$$<br>m_p \equiv c^{d_p} \mod p<br>$$</p>
<p>$$<br>m_q \equiv c^{d_q} \mod q<br>$$</p>
<p>$$<br>m \equiv  (((m_p - m_q)\times InvQ)\mod p)\times q + m_q<br>$$</p>
<p>And make the equations convert to codes. Here is the main function: </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">RSA_Leakage_dp_dq</span>(<span class="params">dp, dq, p, q, c</span>):</span><br><span class="line">    InvQ = gmpy2.invert(q, p)</span><br><span class="line">    mp = gmpy2.powmod(c, dp, p)</span><br><span class="line">    mq = gmpy2.powmod(c, dq, q)</span><br><span class="line">    m = (((mp-mq)*InvQ)%p)*q + mq</span><br><span class="line">    <span class="keyword">return</span> m</span><br></pre></td></tr></table></figure>



<h2 id="Leakage-dp"><a href="#Leakage-dp" class="headerlink" title="Leakage_dp"></a>Leakage_dp</h2><p><strong>Known</strong>:<br>$$<br>d_p \equiv d \mod (p-1)<br>$$</p>
<p>$$<br>d\times e \equiv 1\mod N \equiv 1 \mod (p-1)(q-1) \tag{1}<br>$$</p>
<p>Make full use of the two known equations and deduce the key condition to obtain the final $p$ and $q$.<br>$$<br>d_p \times e \equiv d \times e \mod (p-1) \equiv de + k_1(p-1) \tag{2}<br>$$<br>Substitute  <code>(2)</code> to <code>(1)</code>:<br>$$<br>k_1(p-1) + d_p e &#x3D; 1 + k_2(p-1)(q-1)<br>$$</p>
<p>$$<br>d_pe - 1 &#x3D; (p-1)[k_2(q-1) -k_1]<br>$$</p>
<p>Assume $k_2(q-1) - k_1$ is $x$, and $x$ is range from 0 and $e$, and we can figure out the $p$ from the equation:<br>$$<br>p &#x3D; \frac{d_{p} e-1}{x} + 1<br>$$<br>If we brute the $p$ in range(0, e) and $q &#x3D; n \div p$ is prime or Integer, we will get the true $p$ and $q$. The code is as follows: </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">RSA_Leakage_dp</span>(<span class="params">n,e,dp,c</span>):</span><br><span class="line">     <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,e):  <span class="comment"># start with 1</span></span><br><span class="line">        p = (dp*e - <span class="number">1</span>)//i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> n%p == <span class="number">0</span>:</span><br><span class="line">            q = n//p</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        N = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">        d = gmpy2.invert(e, N)</span><br><span class="line">        m = gmpy2.powmod(c, d, n)</span><br><span class="line">        <span class="keyword">return</span> m</span><br></pre></td></tr></table></figure>



<h1 id="LARGE-e"><a href="#LARGE-e" class="headerlink" title="LARGE $e$"></a>LARGE $e$</h1><h2 id="Wiener-Attack"><a href="#Wiener-Attack" class="headerlink" title="Wiener Attack"></a>Wiener Attack</h2><blockquote>
<p>$d &lt; N^{0.25}$</p>
</blockquote>
<h2 id="Boneh-Durfee-Attack"><a href="#Boneh-Durfee-Attack" class="headerlink" title="Boneh-Durfee Attack"></a>Boneh-Durfee Attack</h2><blockquote>
<p>$d&lt; N^{0.29}$</p>
</blockquote>
<h1 id="COPPPERSMITH"><a href="#COPPPERSMITH" class="headerlink" title="COPPPERSMITH"></a>COPPPERSMITH</h1><h1 id="Addiction"><a href="#Addiction" class="headerlink" title="Addiction"></a>Addiction</h1><p>When we obtain the $m$, there are different ways to get <code>flag</code>.</p>
<ul>
<li>long_to_bytes()</li>
</ul>
<p>Long integer converts to bytes. </p>
<ul>
<li>ASCII</li>
</ul>
<p>The beginning of $m$ is <code>1</code>, and it may convert to some invisible characters. </p>
]]></content>
      <categories>
        <category>Studying</category>
      </categories>
      <tags>
        <tag>RSA</tag>
      </tags>
  </entry>
  <entry>
    <title>22-10-21-hexo-build-beautify</title>
    <url>/2022/10/21/22-10-21-hexo-build-beautify/</url>
    <content><![CDATA[<p>The article is used to record how to use hexo to build my own blog. I will try my best to make records by using English. To Be Honest, this is really somewhat a hard challenge for me.</p>
<p>The problems and some solutions are as follows.</p>
<span id="more"></span>

<blockquote>
<p><a href="https://hexo-next.readthedocs.io/">https://hexo-next.readthedocs.io/</a></p>
</blockquote>
<h1 id="BUILD-HEXO"><a href="#BUILD-HEXO" class="headerlink" title="BUILD HEXO"></a>BUILD HEXO</h1><blockquote>
<p>preparation: </p>
<p>git</p>
<p>node.js</p>
</blockquote>
<p>after the installation, test: </p>
<p><code>node -v</code>&#x2F;<code>npm -v</code>&#x2F; <code>git -v</code></p>
<h2 id="HEXO-BLOG"><a href="#HEXO-BLOG" class="headerlink" title="HEXO BLOG"></a>HEXO BLOG</h2><blockquote>
<p>all use git-bash</p>
</blockquote>
<ul>
<li>to install hexo:</li>
</ul>
<p><code>npm install -g hexo-cli</code></p>
<ul>
<li>init hexo and build blog:</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init [blogname]</span><br><span class="line">cd [blogname]</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<ul>
<li>after building the common commands:</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate/hexo g</span><br><span class="line">hexo server/hexo s</span><br><span class="line">hexo deploy/hexo d(unless everything is OK)</span><br><span class="line"># hexo clean &amp;&amp; hexo g &amp; hexo s</span><br></pre></td></tr></table></figure>

<h2 id="NEW-POST"><a href="#NEW-POST" class="headerlink" title="NEW POST"></a>NEW POST</h2><ul>
<li>set markdown</li>
</ul>
<p>In <code>scaffolds\post.md</code>, above the <code>!--more--</code> can make the article excerption</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">categories: </span><br><span class="line">tags: </span><br><span class="line">mathjax: true</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line"># to limit the length of article</span><br></pre></td></tr></table></figure>

<ul>
<li>new post</li>
</ul>
<p><code>hexo new [postname]</code></p>
<p>To make the article and everting clean, follow the standard <code>YY-MM-DD-article-name.md</code></p>
<p>And the categories are as follows: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">categories:</span><br><span class="line">	- Studing</span><br><span class="line">	- Reading</span><br><span class="line">	- Recording</span><br><span class="line">	- Amusing</span><br></pre></td></tr></table></figure>



<h1 id="DRAFT-x2F-BAND-GITHUB"><a href="#DRAFT-x2F-BAND-GITHUB" class="headerlink" title="DRAFT&#x2F;BAND GITHUB"></a>DRAFT&#x2F;BAND GITHUB</h1><ul>
<li>register the github account</li>
<li>new repository</li>
</ul>
<p>Create a new repository, github has reserved your own website.</p>
<p><code>[githubaccount].github.io</code></p>
<ul>
<li>use token to authenticate</li>
</ul>
<p>In the root menu, add the follows to the file <strong>_config.yml</strong>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># install:</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"></span><br><span class="line"># _config.yml</span><br><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://[token]@github.com/[githubaccount]/[githubaccount].github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<ul>
<li>git config</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># if authentication failed</span><br><span class="line">git config --globaluser.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>after everything above is ready</li>
</ul>
<p><code>hexo d</code>, test if the running is well.</p>
<p>the default website is: <code>localhost:4000/</code></p>
<h1 id="MATH"><a href="#MATH" class="headerlink" title="MATH"></a>MATH</h1><p>If the markdown can not display well,  maybe the renderer gets wrong.</p>
<p>The hexo default renderer is <code>hexo-renderer-marked</code>.</p>
<p>You can use <code>hexo-renderer-kramed</code> or <code>@upupming/renderer-markdown-it-plus</code> to replace the default one.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm i @upupming/hexo-renderer-markdown-it-plus --save</span><br></pre></td></tr></table></figure>

<p><strong>DON’T FORGET!</strong></p>
<p>In <code>_config.next.yml</code> set: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">math:</span><br><span class="line">  # Default (false) will load mathjax / katex script on demand.</span><br><span class="line">  # That is it only render those page which has `mathjax: true` in front-matter.</span><br><span class="line">  # If you set it to true, it will load mathjax / katex script EVERY PAGE.</span><br><span class="line">  every_page: true</span><br><span class="line"></span><br><span class="line">  mathjax:</span><br><span class="line">    enable: true</span><br><span class="line">    # Available values: none | ams | all</span><br><span class="line">    tags: none</span><br><span class="line"></span><br><span class="line">  katex:</span><br><span class="line">    enable: false</span><br><span class="line">    # See: https://github.com/KaTeX/KaTeX/tree/master/contrib/copy-tex</span><br><span class="line">    copy_tex: false</span><br></pre></td></tr></table></figure>

<p>and in your every post fonts, add <code>math: true</code></p>
<h1 id="NOT-404"><a href="#NOT-404" class="headerlink" title="NOT 404"></a>NOT 404</h1><h2 id="question"><a href="#question" class="headerlink" title="question"></a>question</h2><p>When I visit the tags, the website always return <code>404</code>. I search for some solutions all over the web. However, most of them are wrong, until I see the solution in the Zhihu.</p>
<h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h3 id="new-page"><a href="#new-page" class="headerlink" title="new page"></a>new page</h3><p>In the root of the blog, open the git bash command.</p>
<p><code>hexo new page &quot;tags&quot;</code></p>
<h3 id="edit-the-index"><a href="#edit-the-index" class="headerlink" title="edit the index"></a>edit the index</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">type: tags</span><br><span class="line">layout: tags # /theme/next/layout/[tags].njk</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p><em>Behind the layout, to write down <strong>the name of the target njk</strong>, which is in the depth of the file path.</em></p>
<h3 id="edit-the-config-file"><a href="#edit-the-config-file" class="headerlink" title="edit the _config file"></a>edit the _config file</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Dirctory</span><br><span class="line">tag_dir: tags</span><br></pre></td></tr></table></figure>

<p>Make the names one-to-one.</p>
<h1 id="CALCULATE-WORDS"><a href="#CALCULATE-WORDS" class="headerlink" title="CALCULATE WORDS"></a>CALCULATE WORDS</h1><h2 id="hexo-word-counter"><a href="#hexo-word-counter" class="headerlink" title="hexo-word-counter"></a>hexo-word-counter</h2><p>Install the plugin <code>hexo-word-counter</code>, in the root path of blog. </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-word-counter</span><br><span class="line">hexo clean &amp;&amp; hexo g</span><br></pre></td></tr></table></figure>

<h2 id="config"><a href="#config" class="headerlink" title="config"></a>config</h2><p>In <code>_config.yml</code>, at the end of the file add the follows: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  symbols: true</span><br><span class="line">  time: true</span><br><span class="line">  total_symbols: true</span><br><span class="line">  total_time: true</span><br><span class="line">  exclude_codeblock: false</span><br><span class="line">  awl: 4</span><br><span class="line">  wpm: 275</span><br><span class="line">  suffix: &quot;mins.&quot;</span><br></pre></td></tr></table></figure>

<p><em>In <code>_config.next.yml</code>, edit the finding <code>item_text_total: false</code>. Change <code>false</code> to <code>true</code>.</em></p>
<h1 id="BACKGROUND-PICTURE"><a href="#BACKGROUND-PICTURE" class="headerlink" title="BACKGROUND PICTURE"></a>BACKGROUND PICTURE</h1><p>I tried more ways to set background picture, more thins were wrong. Util I saw an article, I done this thing.</p>
<p>When I reflected all my things on this part, I knew the keypoint part was to **add the correct source path **to <code>next_config</code>.</p>
<h2 id="js-file"><a href="#js-file" class="headerlink" title="js file"></a>js file</h2><p>The NexT v8 has the <code>canvas-nest.js</code> in <code>themes\next\source\js</code>.</p>
<p>If you don’t have the <strong>JS</strong> file, create the new file contains：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">!<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">function</span> <span class="title function_">n</span>(<span class="params">n,e,t</span>)&#123;<span class="keyword">return</span> n.<span class="title function_">getAttribute</span>(e)||t&#125;<span class="keyword">function</span> <span class="title function_">e</span>(<span class="params">n</span>)&#123;<span class="keyword">return</span> <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(n)&#125;<span class="keyword">function</span> <span class="title function_">t</span>(<span class="params"></span>)&#123;<span class="keyword">var</span> t=<span class="title function_">e</span>(<span class="string">&quot;script&quot;</span>),o=t.<span class="property">length</span>,i=t[o-<span class="number">1</span>];<span class="keyword">return</span>&#123;<span class="attr">l</span>:o,<span class="attr">z</span>:<span class="title function_">n</span>(i,<span class="string">&quot;zIndex&quot;</span>,-<span class="number">1</span>),<span class="attr">o</span>:<span class="title function_">n</span>(i,<span class="string">&quot;opacity&quot;</span>,<span class="number">.5</span>),<span class="attr">c</span>:<span class="title function_">n</span>(i,<span class="string">&quot;color&quot;</span>,<span class="string">&quot;0,0,0&quot;</span>),<span class="attr">n</span>:<span class="title function_">n</span>(i,<span class="string">&quot;count&quot;</span>,<span class="number">99</span>)&#125;&#125;<span class="keyword">function</span> <span class="title function_">o</span>(<span class="params"></span>)&#123;c=u.<span class="property">width</span>=<span class="variable language_">window</span>.<span class="property">innerWidth</span>||<span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span>||<span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">clientWidth</span>,a=u.<span class="property">height</span>=<span class="variable language_">window</span>.<span class="property">innerHeight</span>||<span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span>||<span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">clientHeight</span>&#125;<span class="keyword">function</span> <span class="title function_">i</span>(<span class="params"></span>)&#123;l.<span class="title function_">clearRect</span>(<span class="number">0</span>,<span class="number">0</span>,c,a);<span class="keyword">var</span> n,e,t,o,u,d,x=[w].<span class="title function_">concat</span>(y);y.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">i</span>)&#123;<span class="keyword">for</span>(i.<span class="property">x</span>+=i.<span class="property">xa</span>,i.<span class="property">y</span>+=i.<span class="property">ya</span>,i.<span class="property">xa</span>*=i.<span class="property">x</span>&gt;c||i.<span class="property">x</span>&lt;<span class="number">0</span>?-<span class="number">1</span>:<span class="number">1</span>,i.<span class="property">ya</span>*=i.<span class="property">y</span>&gt;a||i.<span class="property">y</span>&lt;<span class="number">0</span>?-<span class="number">1</span>:<span class="number">1</span>,l.<span class="title function_">fillRect</span>(i.<span class="property">x</span>-<span class="number">.5</span>,i.<span class="property">y</span>-<span class="number">.5</span>,<span class="number">1</span>,<span class="number">1</span>),e=<span class="number">0</span>;e&lt;x.<span class="property">length</span>;e++)n=x[e],i!==n&amp;&amp;<span class="literal">null</span>!==n.<span class="property">x</span>&amp;&amp;<span class="literal">null</span>!==n.<span class="property">y</span>&amp;&amp;(o=i.<span class="property">x</span>-n.<span class="property">x</span>,u=i.<span class="property">y</span>-n.<span class="property">y</span>,d=o*o+u*u,d&lt;n.<span class="property">max</span>&amp;&amp;(n===w&amp;&amp;d&gt;=n.<span class="property">max</span>/<span class="number">2</span>&amp;&amp;(i.<span class="property">x</span>-=<span class="number">.03</span>*o,i.<span class="property">y</span>-=<span class="number">.03</span>*u),t=(n.<span class="property">max</span>-d)/n.<span class="property">max</span>,l.<span class="title function_">beginPath</span>(),l.<span class="property">lineWidth</span>=t/<span class="number">2</span>,l.<span class="property">strokeStyle</span>=<span class="string">&quot;rgba(&quot;</span>+m.<span class="property">c</span>+<span class="string">&quot;,&quot;</span>+(t+<span class="number">.2</span>)+<span class="string">&quot;)&quot;</span>,l.<span class="title function_">moveTo</span>(i.<span class="property">x</span>,i.<span class="property">y</span>),l.<span class="title function_">lineTo</span>(n.<span class="property">x</span>,n.<span class="property">y</span>),l.<span class="title function_">stroke</span>()));x.<span class="title function_">splice</span>(x.<span class="title function_">indexOf</span>(i),<span class="number">1</span>)&#125;),<span class="title function_">r</span>(i)&#125;<span class="keyword">var</span> c,a,u=<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;canvas&quot;</span>),m=<span class="title function_">t</span>(),d=<span class="string">&quot;c_n&quot;</span>+m.<span class="property">l</span>,l=u.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>),r=<span class="variable language_">window</span>.<span class="property">requestAnimationFrame</span>||<span class="variable language_">window</span>.<span class="property">webkitRequestAnimationFrame</span>||<span class="variable language_">window</span>.<span class="property">mozRequestAnimationFrame</span>||<span class="variable language_">window</span>.<span class="property">oRequestAnimationFrame</span>||<span class="variable language_">window</span>.<span class="property">msRequestAnimationFrame</span>||<span class="keyword">function</span>(<span class="params">n</span>)&#123;<span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(n,<span class="number">1e3</span>/<span class="number">45</span>)&#125;,x=<span class="title class_">Math</span>.<span class="property">random</span>,w=&#123;<span class="attr">x</span>:<span class="literal">null</span>,<span class="attr">y</span>:<span class="literal">null</span>,<span class="attr">max</span>:<span class="number">2e4</span>&#125;;u.<span class="property">id</span>=d,u.<span class="property">style</span>.<span class="property">cssText</span>=<span class="string">&quot;position:fixed;top:0;left:0;z-index:&quot;</span>+m.<span class="property">z</span>+<span class="string">&quot;;opacity:&quot;</span>+m.<span class="property">o</span>,<span class="title function_">e</span>(<span class="string">&quot;body&quot;</span>)[<span class="number">0</span>].<span class="title function_">appendChild</span>(u),<span class="title function_">o</span>(),<span class="variable language_">window</span>.<span class="property">onresize</span>=o,<span class="variable language_">window</span>.<span class="property">onmousemove</span>=<span class="keyword">function</span>(<span class="params">n</span>)&#123;n=n||<span class="variable language_">window</span>.<span class="property">event</span>,w.<span class="property">x</span>=n.<span class="property">clientX</span>,w.<span class="property">y</span>=n.<span class="property">clientY</span>&#125;,<span class="variable language_">window</span>.<span class="property">onmouseout</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;w.<span class="property">x</span>=<span class="literal">null</span>,w.<span class="property">y</span>=<span class="literal">null</span>&#125;;<span class="keyword">for</span>(<span class="keyword">var</span> y=[],s=<span class="number">0</span>;m.<span class="property">n</span>&gt;s;s++)&#123;<span class="keyword">var</span> f=<span class="title function_">x</span>()*c,h=<span class="title function_">x</span>()*a,g=<span class="number">2</span>*<span class="title function_">x</span>()-<span class="number">1</span>,p=<span class="number">2</span>*<span class="title function_">x</span>()-<span class="number">1</span>;y.<span class="title function_">push</span>(&#123;<span class="attr">x</span>:f,<span class="attr">y</span>:h,<span class="attr">xa</span>:g,<span class="attr">ya</span>:p,<span class="attr">max</span>:<span class="number">6e3</span>&#125;)&#125;<span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="title function_">i</span>()&#125;,<span class="number">100</span>)&#125;();</span><br></pre></td></tr></table></figure>

<h2 id="add-path"><a href="#add-path" class="headerlink" title="add path"></a>add path</h2><p>My NexT layout file is in the path <code>themes\next\layout\_layout.njk</code>.</p>
<p>For we created the js file, we saved as <code>canvas-nest.js</code>. Open the <code>_layout.njk</code>, and add the following words. <em>REMEMBER above the <code>&lt;/body&gt;</code></em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- Background picture --&gt;</span><br><span class="line">  &lt;script type=&quot;text/javascript&quot; src=&quot;/js/canvas-nest.js&quot;&gt;	   &lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h1 id="ICON"><a href="#ICON" class="headerlink" title="ICON"></a>ICON</h1><blockquote>
<p><a href="https://fontawesome.com/search">https://fontawesome.com/search</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Studying</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>self-promtion</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/10/21/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>22-11-15-functions</title>
    <url>/2022/11/15/22-11-15-functions/</url>
    <content><![CDATA[<p>To conclude the functions that I met in these years. </p>
<p>Just show that how the functions and equations </p>
<p>make a one-to-one relation. </p>
<p>Relating to <strong>python</strong>, <strong>sagemath</strong>……</p>
<span id="more"></span>

<h1 id="gmpy2"><a href="#gmpy2" class="headerlink" title="gmpy2"></a>gmpy2</h1><h2 id="gcd-a-b"><a href="#gcd-a-b" class="headerlink" title="gcd(a, b)"></a>gcd(a, b)</h2><h2 id="gcdext-a-b"><a href="#gcdext-a-b" class="headerlink" title="gcdext(a, b)"></a>gcdext(a, b)</h2><h2 id="invert-a-n"><a href="#invert-a-n" class="headerlink" title="invert(a, n)"></a>invert(a, n)</h2><h2 id="powmod-a-b-c"><a href="#powmod-a-b-c" class="headerlink" title="powmod(a, b, c)"></a>powmod(a, b, c)</h2><h2 id="next-prime-a"><a href="#next-prime-a" class="headerlink" title="next_prime(a)"></a>next_prime(a)</h2><h1 id="pycryptodome"><a href="#pycryptodome" class="headerlink" title="pycryptodome"></a>pycryptodome</h1><h2 id="bytes-to-long"><a href="#bytes-to-long" class="headerlink" title="bytes_to_long()"></a>bytes_to_long()</h2><h2 id="long-to-bytes"><a href="#long-to-bytes" class="headerlink" title="long_to_bytes()"></a>long_to_bytes()</h2><h1 id="sympy"><a href="#sympy" class="headerlink" title="sympy"></a>sympy</h1><blockquote>
<p><a href="https://geek-docs.com/sympy/sympy-method/python-sympy-solve-method.html">sympy.solve()方法|极客教程 (geek-docs.com)</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Studying</category>
      </categories>
      <tags>
        <tag>functions</tag>
      </tags>
  </entry>
</search>
